
G_code_stepper_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa6c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  0800ac40  0800ac40  0001ac40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b248  0800b248  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800b248  0800b248  0001b248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b250  0800b250  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b250  0800b250  0001b250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b254  0800b254  0001b254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800b258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d4  20000244  0800b49c  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a18  0800b49c  00020a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001451d  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e51  00000000  00000000  00034791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  000375e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00038778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b80  00000000  00000000  00039810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015887  00000000  00000000  0005e390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d58dd  00000000  00000000  00073c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001494f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f90  00000000  00000000  00149544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000244 	.word	0x20000244
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ac24 	.word	0x0800ac24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000248 	.word	0x20000248
 800020c:	0800ac24 	.word	0x0800ac24

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <is_instant_command>:

char* G_codes[] = {"G90","G91","HOME","MOTPOS","ENCZERO","ENCVAL"};

char* Instant_G_codes[] = {"M414 \r"};

int is_instant_command(char* command){
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]


}
 8001060:	bf00      	nop
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <is_command_valid>:

int is_command_valid(char* command){
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

	char* Temp_Buffer = (char *) malloc(strlen(command)+1);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff f8d3 	bl	8000224 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	3301      	adds	r3, #1
 8001082:	4618      	mov	r0, r3
 8001084:	f005 fa20 	bl	80064c8 <malloc>
 8001088:	4603      	mov	r3, r0
 800108a:	623b      	str	r3, [r7, #32]

	strcpy(Temp_Buffer,command);
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	6a38      	ldr	r0, [r7, #32]
 8001090:	f006 f849 	bl	8007126 <strcpy>

	int MAX_TOKENS = 3;
 8001094:	2303      	movs	r3, #3
 8001096:	61fb      	str	r3, [r7, #28]
	char *token;
	char *tokens[3] = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
	int i = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28


	/* Split the string by the delimiter " " */
	token = strtok((char *)Temp_Buffer, " ");
 80010a8:	4920      	ldr	r1, [pc, #128]	; (800112c <is_command_valid+0xbc>)
 80010aa:	6a38      	ldr	r0, [r7, #32]
 80010ac:	f006 fe72 	bl	8007d94 <strtok>
 80010b0:	62f8      	str	r0, [r7, #44]	; 0x2c

	while (token != NULL && i < MAX_TOKENS) {
 80010b2:	e00e      	b.n	80010d2 <is_command_valid+0x62>
		tokens[i] = token;
 80010b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	3330      	adds	r3, #48	; 0x30
 80010ba:	443b      	add	r3, r7
 80010bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010be:	f843 2c24 	str.w	r2, [r3, #-36]
		i++;
 80010c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c4:	3301      	adds	r3, #1
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
		token = strtok(NULL, " ");
 80010c8:	4918      	ldr	r1, [pc, #96]	; (800112c <is_command_valid+0xbc>)
 80010ca:	2000      	movs	r0, #0
 80010cc:	f006 fe62 	bl	8007d94 <strtok>
 80010d0:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (token != NULL && i < MAX_TOKENS) {
 80010d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <is_command_valid+0x70>
 80010d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	429a      	cmp	r2, r3
 80010de:	dbe9      	blt.n	80010b4 <is_command_valid+0x44>
	}

	int total_commands = sizeof(G_codes)/sizeof(char *);
 80010e0:	2306      	movs	r3, #6
 80010e2:	61bb      	str	r3, [r7, #24]
	for(int val=0;val < total_commands;val++){
 80010e4:	2300      	movs	r3, #0
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
 80010e8:	e013      	b.n	8001112 <is_command_valid+0xa2>

		if(strcmp(tokens[0],G_codes[val]) == 0 )
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	4910      	ldr	r1, [pc, #64]	; (8001130 <is_command_valid+0xc0>)
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010f4:	4619      	mov	r1, r3
 80010f6:	4610      	mov	r0, r2
 80010f8:	f7ff f88a 	bl	8000210 <strcmp>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d104      	bne.n	800110c <is_command_valid+0x9c>
		{
			free(Temp_Buffer);
 8001102:	6a38      	ldr	r0, [r7, #32]
 8001104:	f005 f9e8 	bl	80064d8 <free>
			return 1;
 8001108:	2301      	movs	r3, #1
 800110a:	e00a      	b.n	8001122 <is_command_valid+0xb2>
	for(int val=0;val < total_commands;val++){
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	3301      	adds	r3, #1
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
 8001112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	429a      	cmp	r2, r3
 8001118:	dbe7      	blt.n	80010ea <is_command_valid+0x7a>
		}
	}
	free(Temp_Buffer);
 800111a:	6a38      	ldr	r0, [r7, #32]
 800111c:	f005 f9dc 	bl	80064d8 <free>
	return 0;
 8001120:	2300      	movs	r3, #0

//	if(strcmp(tokens[0],"G90") == 0 ){
//	}

}
 8001122:	4618      	mov	r0, r3
 8001124:	3730      	adds	r7, #48	; 0x30
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	0800ac70 	.word	0x0800ac70
 8001130:	20000000 	.word	0x20000000

08001134 <Setup_Absolute_position>:

void Setup_Absolute_position(char *tokens[] ){
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

	if((*tokens[1]) == 'Z'){
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3304      	adds	r3, #4
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b5a      	cmp	r3, #90	; 0x5a
 8001146:	d140      	bne.n	80011ca <Setup_Absolute_position+0x96>
	// Z directional motor
//	char *p;
	float steps =strtod(tokens[1]+1,NULL);  // strtol(tokens[1]+1, &p, 10);  //number start from next position of string
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3304      	adds	r3, #4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f006 fe12 	bl	8007d7c <strtod>
 8001158:	ec53 2b10 	vmov	r2, r3, d0
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd72 	bl	8000c48 <__aeabi_d2f>
 8001164:	4603      	mov	r3, r0
 8001166:	617b      	str	r3, [r7, #20]

	/* Z motor Positioning */
	int32_t total_steps = (int32_t) (steps * steps_per_millimeters);
 8001168:	edd7 7a05 	vldr	s15, [r7, #20]
 800116c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80011d0 <Setup_Absolute_position+0x9c>
 8001170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	613b      	str	r3, [r7, #16]
	moveTo(total_steps);
 800117e:	6938      	ldr	r0, [r7, #16]
 8001180:	f001 f9ee 	bl	8002560 <moveTo>



	if(*tokens[2] == 'F'){
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3308      	adds	r3, #8
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b46      	cmp	r3, #70	; 0x46
 800118e:	d11b      	bne.n	80011c8 <Setup_Absolute_position+0x94>
	/* F speed controller */
	float speed = strtod(tokens[2]+1,NULL);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3308      	adds	r3, #8
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f006 fdee 	bl	8007d7c <strtod>
 80011a0:	ec53 2b10 	vmov	r2, r3, d0
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f7ff fd4e 	bl	8000c48 <__aeabi_d2f>
 80011ac:	4603      	mov	r3, r0
 80011ae:	60fb      	str	r3, [r7, #12]
	speed = speed * steps_per_millimeters;
 80011b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011b4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80011d0 <Setup_Absolute_position+0x9c>
 80011b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011bc:	edc7 7a03 	vstr	s15, [r7, #12]
	/*Fan Speed controlling */
	setMaxSpeed(speed);
 80011c0:	ed97 0a03 	vldr	s0, [r7, #12]
 80011c4:	f001 fc74 	bl	8002ab0 <setMaxSpeed>

	}
	return;
 80011c8:	bf00      	nop
	}


}
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	47435000 	.word	0x47435000

080011d4 <Setup_Relative_position>:


void Setup_Relative_position(char *tokens[] ){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

	if((*tokens[1]) == 'Z'){
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3304      	adds	r3, #4
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b5a      	cmp	r3, #90	; 0x5a
 80011e6:	d140      	bne.n	800126a <Setup_Relative_position+0x96>
	// Z directional motor
//	char *p;
	float steps =strtod(tokens[1]+1,NULL);  // strtol(tokens[1]+1, &p, 10);  //number start from next position of string
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3304      	adds	r3, #4
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f006 fdc2 	bl	8007d7c <strtod>
 80011f8:	ec53 2b10 	vmov	r2, r3, d0
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff fd22 	bl	8000c48 <__aeabi_d2f>
 8001204:	4603      	mov	r3, r0
 8001206:	617b      	str	r3, [r7, #20]

	/* Z motor Positioning */
	int32_t total_steps = (int32_t) (steps * steps_per_millimeters);
 8001208:	edd7 7a05 	vldr	s15, [r7, #20]
 800120c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001274 <Setup_Relative_position+0xa0>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001218:	ee17 3a90 	vmov	r3, s15
 800121c:	613b      	str	r3, [r7, #16]
	move(total_steps);
 800121e:	6938      	ldr	r0, [r7, #16]
 8001220:	f001 f9c6 	bl	80025b0 <move>

	if(*tokens[2] == 'F'){
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3308      	adds	r3, #8
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b46      	cmp	r3, #70	; 0x46
 800122e:	d11c      	bne.n	800126a <Setup_Relative_position+0x96>
	/* F speed controller */
	float speed = strtod(tokens[2]+1,NULL);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3308      	adds	r3, #8
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f006 fd9e 	bl	8007d7c <strtod>
 8001240:	ec53 2b10 	vmov	r2, r3, d0
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f7ff fcfe 	bl	8000c48 <__aeabi_d2f>
 800124c:	4603      	mov	r3, r0
 800124e:	60fb      	str	r3, [r7, #12]
	speed = speed * steps_per_millimeters;
 8001250:	edd7 7a03 	vldr	s15, [r7, #12]
 8001254:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001274 <Setup_Relative_position+0xa0>
 8001258:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125c:	edc7 7a03 	vstr	s15, [r7, #12]

	/*Fan Speed controlling */
	setMaxSpeed(speed);
 8001260:	ed97 0a03 	vldr	s0, [r7, #12]
 8001264:	f001 fc24 	bl	8002ab0 <setMaxSpeed>

	}
}
	return;
 8001268:	bf00      	nop
 800126a:	bf00      	nop
}
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	47435000 	.word	0x47435000

08001278 <Homing_motor>:

void Homing_motor(char *tokens[] ){
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	setMaxSpeed(2*HOME_SPEED); //MOVING IN ccw
 8001280:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80012ac <Homing_motor+0x34>
 8001284:	f001 fc14 	bl	8002ab0 <setMaxSpeed>
	setSpeed(-1*HOME_SPEED); //MOVING IN ccw
 8001288:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80012b0 <Homing_motor+0x38>
 800128c:	f001 fcf4 	bl	8002c78 <setSpeed>

	while(!HOMED){
 8001290:	e001      	b.n	8001296 <Homing_motor+0x1e>
	runSpeed();
 8001292:	f001 fa3b 	bl	800270c <runSpeed>
	while(!HOMED){
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <Homing_motor+0x3c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f8      	beq.n	8001292 <Homing_motor+0x1a>
	}
	Homing_completion();
 80012a0:	f000 f80a 	bl	80012b8 <Homing_completion>
	return;
 80012a4:	bf00      	nop
}
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	47c35000 	.word	0x47c35000
 80012b0:	c7435000 	.word	0xc7435000
 80012b4:	200009b1 	.word	0x200009b1

080012b8 <Homing_completion>:

void Homing_completion(void){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	stop();
 80012bc:	f001 fdee 	bl	8002e9c <stop>
	//resetting position parameters
	setCurrentPosition(0);
 80012c0:	2000      	movs	r0, #0
 80012c2:	f001 fa79 	bl	80027b8 <setCurrentPosition>
	//Resetting the encoder value to zero
	__HAL_TIM_SET_COUNTER(&htim2,0);
 80012c6:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <Homing_completion+0x1c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24
	return;
 80012ce:	bf00      	nop
}
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000340 	.word	0x20000340

080012d8 <Run_Motor>:

void Run_Motor(void){
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	runToPosition();
 80012dc:	f001 fdd2 	bl	8002e84 <runToPosition>
	return;
 80012e0:	bf00      	nop
}
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <dectoint>:
 * Convert binary values contaning arry to decimal values
 * Params:
 * y_1 =
 */
void dectoint(char *y_1, char *y_2)
{
 80012e4:	b5b0      	push	{r4, r5, r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
	*y_1 = ((arr1[0]*pow(2,7))+(arr1[1]*pow(2,6))+(arr1[2]*pow(2,5))+(arr1[3]*pow(2,4))+(arr1[4]*pow(2,3))+(arr1[5]*pow(2,2))+(arr1[6]*pow(2,1))+(arr1[7]*pow(2,0)));
 80012ee:	4b9c      	ldr	r3, [pc, #624]	; (8001560 <dectoint+0x27c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f946 	bl	8000584 <__aeabi_i2d>
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	4b99      	ldr	r3, [pc, #612]	; (8001564 <dectoint+0x280>)
 80012fe:	f7ff f9ab 	bl	8000658 <__aeabi_dmul>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4614      	mov	r4, r2
 8001308:	461d      	mov	r5, r3
 800130a:	4b95      	ldr	r3, [pc, #596]	; (8001560 <dectoint+0x27c>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f938 	bl	8000584 <__aeabi_i2d>
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b93      	ldr	r3, [pc, #588]	; (8001568 <dectoint+0x284>)
 800131a:	f7ff f99d 	bl	8000658 <__aeabi_dmul>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4620      	mov	r0, r4
 8001324:	4629      	mov	r1, r5
 8001326:	f7fe ffe1 	bl	80002ec <__adddf3>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4614      	mov	r4, r2
 8001330:	461d      	mov	r5, r3
 8001332:	4b8b      	ldr	r3, [pc, #556]	; (8001560 <dectoint+0x27c>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f924 	bl	8000584 <__aeabi_i2d>
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	4b8a      	ldr	r3, [pc, #552]	; (800156c <dectoint+0x288>)
 8001342:	f7ff f989 	bl	8000658 <__aeabi_dmul>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4620      	mov	r0, r4
 800134c:	4629      	mov	r1, r5
 800134e:	f7fe ffcd 	bl	80002ec <__adddf3>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4614      	mov	r4, r2
 8001358:	461d      	mov	r5, r3
 800135a:	4b81      	ldr	r3, [pc, #516]	; (8001560 <dectoint+0x27c>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f910 	bl	8000584 <__aeabi_i2d>
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	4b81      	ldr	r3, [pc, #516]	; (8001570 <dectoint+0x28c>)
 800136a:	f7ff f975 	bl	8000658 <__aeabi_dmul>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4620      	mov	r0, r4
 8001374:	4629      	mov	r1, r5
 8001376:	f7fe ffb9 	bl	80002ec <__adddf3>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4614      	mov	r4, r2
 8001380:	461d      	mov	r5, r3
 8001382:	4b77      	ldr	r3, [pc, #476]	; (8001560 <dectoint+0x27c>)
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f8fc 	bl	8000584 <__aeabi_i2d>
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	4b78      	ldr	r3, [pc, #480]	; (8001574 <dectoint+0x290>)
 8001392:	f7ff f961 	bl	8000658 <__aeabi_dmul>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4620      	mov	r0, r4
 800139c:	4629      	mov	r1, r5
 800139e:	f7fe ffa5 	bl	80002ec <__adddf3>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4614      	mov	r4, r2
 80013a8:	461d      	mov	r5, r3
 80013aa:	4b6d      	ldr	r3, [pc, #436]	; (8001560 <dectoint+0x27c>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8e8 	bl	8000584 <__aeabi_i2d>
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4b6f      	ldr	r3, [pc, #444]	; (8001578 <dectoint+0x294>)
 80013ba:	f7ff f94d 	bl	8000658 <__aeabi_dmul>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4620      	mov	r0, r4
 80013c4:	4629      	mov	r1, r5
 80013c6:	f7fe ff91 	bl	80002ec <__adddf3>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4614      	mov	r4, r2
 80013d0:	461d      	mov	r5, r3
 80013d2:	4b63      	ldr	r3, [pc, #396]	; (8001560 <dectoint+0x27c>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f8d4 	bl	8000584 <__aeabi_i2d>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	f7fe ff84 	bl	80002ec <__adddf3>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4620      	mov	r0, r4
 80013ea:	4629      	mov	r1, r5
 80013ec:	f7fe ff7e 	bl	80002ec <__adddf3>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4614      	mov	r4, r2
 80013f6:	461d      	mov	r5, r3
 80013f8:	4b59      	ldr	r3, [pc, #356]	; (8001560 <dectoint+0x27c>)
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f8c1 	bl	8000584 <__aeabi_i2d>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4620      	mov	r0, r4
 8001408:	4629      	mov	r1, r5
 800140a:	f7fe ff6f 	bl	80002ec <__adddf3>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fbf7 	bl	8000c08 <__aeabi_d2uiz>
 800141a:	4603      	mov	r3, r0
 800141c:	b2da      	uxtb	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	701a      	strb	r2, [r3, #0]

	*y_2 = ((arr2[0]*pow(2,7))+(arr2[1]*pow(2,6))+(arr2[2]*pow(2,5))+(arr2[3]*pow(2,4))+(arr2[4]*pow(2,3))+(arr2[5]*pow(2,2))+(arr2[6]*pow(2,1))+(arr2[7]*pow(2,0)));
 8001422:	4b56      	ldr	r3, [pc, #344]	; (800157c <dectoint+0x298>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f8ac 	bl	8000584 <__aeabi_i2d>
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	4b4c      	ldr	r3, [pc, #304]	; (8001564 <dectoint+0x280>)
 8001432:	f7ff f911 	bl	8000658 <__aeabi_dmul>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4614      	mov	r4, r2
 800143c:	461d      	mov	r5, r3
 800143e:	4b4f      	ldr	r3, [pc, #316]	; (800157c <dectoint+0x298>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f89e 	bl	8000584 <__aeabi_i2d>
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	4b46      	ldr	r3, [pc, #280]	; (8001568 <dectoint+0x284>)
 800144e:	f7ff f903 	bl	8000658 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4620      	mov	r0, r4
 8001458:	4629      	mov	r1, r5
 800145a:	f7fe ff47 	bl	80002ec <__adddf3>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4614      	mov	r4, r2
 8001464:	461d      	mov	r5, r3
 8001466:	4b45      	ldr	r3, [pc, #276]	; (800157c <dectoint+0x298>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f88a 	bl	8000584 <__aeabi_i2d>
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	4b3d      	ldr	r3, [pc, #244]	; (800156c <dectoint+0x288>)
 8001476:	f7ff f8ef 	bl	8000658 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4620      	mov	r0, r4
 8001480:	4629      	mov	r1, r5
 8001482:	f7fe ff33 	bl	80002ec <__adddf3>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4614      	mov	r4, r2
 800148c:	461d      	mov	r5, r3
 800148e:	4b3b      	ldr	r3, [pc, #236]	; (800157c <dectoint+0x298>)
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f876 	bl	8000584 <__aeabi_i2d>
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	4b34      	ldr	r3, [pc, #208]	; (8001570 <dectoint+0x28c>)
 800149e:	f7ff f8db 	bl	8000658 <__aeabi_dmul>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4620      	mov	r0, r4
 80014a8:	4629      	mov	r1, r5
 80014aa:	f7fe ff1f 	bl	80002ec <__adddf3>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4614      	mov	r4, r2
 80014b4:	461d      	mov	r5, r3
 80014b6:	4b31      	ldr	r3, [pc, #196]	; (800157c <dectoint+0x298>)
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f862 	bl	8000584 <__aeabi_i2d>
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <dectoint+0x290>)
 80014c6:	f7ff f8c7 	bl	8000658 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4620      	mov	r0, r4
 80014d0:	4629      	mov	r1, r5
 80014d2:	f7fe ff0b 	bl	80002ec <__adddf3>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4614      	mov	r4, r2
 80014dc:	461d      	mov	r5, r3
 80014de:	4b27      	ldr	r3, [pc, #156]	; (800157c <dectoint+0x298>)
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f84e 	bl	8000584 <__aeabi_i2d>
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <dectoint+0x294>)
 80014ee:	f7ff f8b3 	bl	8000658 <__aeabi_dmul>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4620      	mov	r0, r4
 80014f8:	4629      	mov	r1, r5
 80014fa:	f7fe fef7 	bl	80002ec <__adddf3>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4614      	mov	r4, r2
 8001504:	461d      	mov	r5, r3
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <dectoint+0x298>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f83a 	bl	8000584 <__aeabi_i2d>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	f7fe feea 	bl	80002ec <__adddf3>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4620      	mov	r0, r4
 800151e:	4629      	mov	r1, r5
 8001520:	f7fe fee4 	bl	80002ec <__adddf3>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4614      	mov	r4, r2
 800152a:	461d      	mov	r5, r3
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <dectoint+0x298>)
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f827 	bl	8000584 <__aeabi_i2d>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4620      	mov	r0, r4
 800153c:	4629      	mov	r1, r5
 800153e:	f7fe fed5 	bl	80002ec <__adddf3>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f7ff fb5d 	bl	8000c08 <__aeabi_d2uiz>
 800154e:	4603      	mov	r3, r0
 8001550:	b2da      	uxtb	r2, r3
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	701a      	strb	r2, [r3, #0]

}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bdb0      	pop	{r4, r5, r7, pc}
 800155e:	bf00      	nop
 8001560:	200002a0 	.word	0x200002a0
 8001564:	40600000 	.word	0x40600000
 8001568:	40500000 	.word	0x40500000
 800156c:	40400000 	.word	0x40400000
 8001570:	40300000 	.word	0x40300000
 8001574:	40200000 	.word	0x40200000
 8001578:	40100000 	.word	0x40100000
 800157c:	200002c0 	.word	0x200002c0

08001580 <split>:
 * y1 = empty char which going to carry left most 8 bits equivalent decimal value after the function execution.
 * y2 = empty char which going to carry right most 8 bits equivalent decimal value after the function execution.
 */

void split(char *y1, char *y2)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
	int k=0;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
	int l=0;
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
	for(int i = 0; i<16; i++)
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	e025      	b.n	80015e4 <split+0x64>
	{
		if(i>=0 && i<=7)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db0e      	blt.n	80015bc <split+0x3c>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b07      	cmp	r3, #7
 80015a2:	dc0b      	bgt.n	80015bc <split+0x3c>
		{

			arr1[k] = arr[i];
 80015a4:	4a15      	ldr	r2, [pc, #84]	; (80015fc <split+0x7c>)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015ac:	4914      	ldr	r1, [pc, #80]	; (8001600 <split+0x80>)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			k++;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3301      	adds	r3, #1
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	e010      	b.n	80015de <split+0x5e>
		}

		else if(i>=8 && i <=15)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b07      	cmp	r3, #7
 80015c0:	dd0d      	ble.n	80015de <split+0x5e>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	dc0a      	bgt.n	80015de <split+0x5e>
		{

			arr2[l] = arr[i];
 80015c8:	4a0c      	ldr	r2, [pc, #48]	; (80015fc <split+0x7c>)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015d0:	490c      	ldr	r1, [pc, #48]	; (8001604 <split+0x84>)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			l++;
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	3301      	adds	r3, #1
 80015dc:	613b      	str	r3, [r7, #16]
	for(int i = 0; i<16; i++)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3301      	adds	r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b0f      	cmp	r3, #15
 80015e8:	ddd6      	ble.n	8001598 <split+0x18>
		}
	}
	dectoint(y1,y2);// stores the equivalent decimal of binary number in arr1 and arr2 into y1 and y2
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fe79 	bl	80012e4 <dectoint>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000260 	.word	0x20000260
 8001600:	200002a0 	.word	0x200002a0
 8001604:	200002c0 	.word	0x200002c0

08001608 <dectobin>:
 * y1 = stores the left most 8 bits in decimal form from 16bit binary number
 * y2 = stores the right most 8 bits in decimal form from 16bit binary number
 *
 */
void dectobin(int y, char *y1, char *y2)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b098      	sub	sp, #96	; 0x60
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	65fb      	str	r3, [r7, #92]	; 0x5c
	int j = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	65bb      	str	r3, [r7, #88]	; 0x58

	int binaryNum[16]={0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2240      	movs	r2, #64	; 0x40
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f004 ff79 	bl	800651c <memset>
	while( y > 0)
 800162a:	e014      	b.n	8001656 <dectobin+0x4e>
	{
		binaryNum[i] = y % 2;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	bfb8      	it	lt
 8001636:	425b      	neglt	r3, r3
 8001638:	461a      	mov	r2, r3
 800163a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	3360      	adds	r3, #96	; 0x60
 8001640:	443b      	add	r3, r7
 8001642:	f843 2c4c 	str.w	r2, [r3, #-76]
		y = y/2;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	0fda      	lsrs	r2, r3, #31
 800164a:	4413      	add	r3, r2
 800164c:	105b      	asrs	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
		i++;
 8001650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001652:	3301      	adds	r3, #1
 8001654:	65fb      	str	r3, [r7, #92]	; 0x5c
	while( y > 0)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	dce7      	bgt.n	800162c <dectobin+0x24>
	}

	int k=0;
 800165c:	2300      	movs	r3, #0
 800165e:	657b      	str	r3, [r7, #84]	; 0x54
	for(j= 15; j >= 0; j--)
 8001660:	230f      	movs	r3, #15
 8001662:	65bb      	str	r3, [r7, #88]	; 0x58
 8001664:	e00f      	b.n	8001686 <dectobin+0x7e>
	{
		arr[k] = binaryNum[j];
 8001666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	3360      	adds	r3, #96	; 0x60
 800166c:	443b      	add	r3, r7
 800166e:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8001672:	490a      	ldr	r1, [pc, #40]	; (800169c <dectobin+0x94>)
 8001674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		k++;
 800167a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167c:	3301      	adds	r3, #1
 800167e:	657b      	str	r3, [r7, #84]	; 0x54
	for(j= 15; j >= 0; j--)
 8001680:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001682:	3b01      	subs	r3, #1
 8001684:	65bb      	str	r3, [r7, #88]	; 0x58
 8001686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001688:	2b00      	cmp	r3, #0
 800168a:	daec      	bge.n	8001666 <dectobin+0x5e>
	}
	split(y1,y2);
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	68b8      	ldr	r0, [r7, #8]
 8001690:	f7ff ff76 	bl	8001580 <split>
}
 8001694:	bf00      	nop
 8001696:	3760      	adds	r7, #96	; 0x60
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000260 	.word	0x20000260

080016a0 <HOMING_Command>:
 */

#include "UART_helper.h"


void HOMING_Command(char *tokens[]){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	if(strcmp(tokens[0],"HOME") == 0){
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4914      	ldr	r1, [pc, #80]	; (8001700 <HOMING_Command+0x60>)
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe fdae 	bl	8000210 <strcmp>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d11e      	bne.n	80016f8 <HOMING_Command+0x58>

		//enabling IRQ for Endstop button
		HAL_NVIC_EnableIRQ(Z_END_STOP_EXTI_IRQn);
 80016ba:	2017      	movs	r0, #23
 80016bc:	f002 f885 	bl	80037ca <HAL_NVIC_EnableIRQ>
		HOMED = false;
 80016c0:	4b10      	ldr	r3, [pc, #64]	; (8001704 <HOMING_Command+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]

		//homing
		Homing_motor(tokens);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fdd6 	bl	8001278 <Homing_motor>

		//resetting the parameters
		Homing_completion();
 80016cc:	f7ff fdf4 	bl	80012b8 <Homing_completion>

		//Sending completion status
		memset(sending_data,0,sizeof(sending_data));
 80016d0:	2232      	movs	r2, #50	; 0x32
 80016d2:	2100      	movs	r1, #0
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <HOMING_Command+0x68>)
 80016d6:	f004 ff21 	bl	800651c <memset>
		sprintf(sending_data,"Homed \n");
 80016da:	490c      	ldr	r1, [pc, #48]	; (800170c <HOMING_Command+0x6c>)
 80016dc:	480a      	ldr	r0, [pc, #40]	; (8001708 <HOMING_Command+0x68>)
 80016de:	f005 fcf5 	bl	80070cc <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 80016e2:	4809      	ldr	r0, [pc, #36]	; (8001708 <HOMING_Command+0x68>)
 80016e4:	f7fe fd9e 	bl	8000224 <strlen>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295
 80016f0:	4905      	ldr	r1, [pc, #20]	; (8001708 <HOMING_Command+0x68>)
 80016f2:	4807      	ldr	r0, [pc, #28]	; (8001710 <HOMING_Command+0x70>)
 80016f4:	f003 fe3b 	bl	800536e <HAL_UART_Transmit>

		}

}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	0800ac74 	.word	0x0800ac74
 8001704:	200009b1 	.word	0x200009b1
 8001708:	20000024 	.word	0x20000024
 800170c:	0800ac7c 	.word	0x0800ac7c
 8001710:	20000418 	.word	0x20000418

08001714 <UART_Command>:
//Need to be update
 char*  Split_command(){
	 return NULL;
}

void UART_Command(char *tokens[]){
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

		if(strcmp(tokens[0],"G90") == 0 ){
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	497f      	ldr	r1, [pc, #508]	; (8001920 <UART_Command+0x20c>)
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fd74 	bl	8000210 <strcmp>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d121      	bne.n	8001772 <UART_Command+0x5e>
		//Absolute positioning
		Setup_Absolute_position(tokens);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fd00 	bl	8001134 <Setup_Absolute_position>

		//Run the Motors
		Run_Motor();
 8001734:	f7ff fdd0 	bl	80012d8 <Run_Motor>

		//Execute Command make zero and Reset the buffer
		Exec_command = 0;
 8001738:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <UART_Command+0x210>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
		memset((void *)RxBuffer,0,sizeof(RxBuffer));
 800173e:	228c      	movs	r2, #140	; 0x8c
 8001740:	2100      	movs	r1, #0
 8001742:	4879      	ldr	r0, [pc, #484]	; (8001928 <UART_Command+0x214>)
 8001744:	f004 feea 	bl	800651c <memset>


		//sending the ready status
		memset(sending_data,0,sizeof(sending_data));
 8001748:	2232      	movs	r2, #50	; 0x32
 800174a:	2100      	movs	r1, #0
 800174c:	4877      	ldr	r0, [pc, #476]	; (800192c <UART_Command+0x218>)
 800174e:	f004 fee5 	bl	800651c <memset>
		sprintf(sending_data,"G90Completed \n");
 8001752:	4977      	ldr	r1, [pc, #476]	; (8001930 <UART_Command+0x21c>)
 8001754:	4875      	ldr	r0, [pc, #468]	; (800192c <UART_Command+0x218>)
 8001756:	f005 fcb9 	bl	80070cc <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 800175a:	4874      	ldr	r0, [pc, #464]	; (800192c <UART_Command+0x218>)
 800175c:	f7fe fd62 	bl	8000224 <strlen>
 8001760:	4603      	mov	r3, r0
 8001762:	b29a      	uxth	r2, r3
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
 8001768:	4970      	ldr	r1, [pc, #448]	; (800192c <UART_Command+0x218>)
 800176a:	4872      	ldr	r0, [pc, #456]	; (8001934 <UART_Command+0x220>)
 800176c:	f003 fdff 	bl	800536e <HAL_UART_Transmit>
			Exec_command = 0;
			memset(RxBuffer,0,sizeof(RxBuffer));
		}


}
 8001770:	e0d1      	b.n	8001916 <UART_Command+0x202>
		else if(strcmp(tokens[0],"G91") == 0){
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4970      	ldr	r1, [pc, #448]	; (8001938 <UART_Command+0x224>)
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fd49 	bl	8000210 <strcmp>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d121      	bne.n	80017c8 <UART_Command+0xb4>
		Setup_Relative_position(tokens);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff fd25 	bl	80011d4 <Setup_Relative_position>
		Run_Motor();
 800178a:	f7ff fda5 	bl	80012d8 <Run_Motor>
		Exec_command = 0;
 800178e:	4b65      	ldr	r3, [pc, #404]	; (8001924 <UART_Command+0x210>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
		memset((void *)RxBuffer,0,sizeof(RxBuffer));
 8001794:	228c      	movs	r2, #140	; 0x8c
 8001796:	2100      	movs	r1, #0
 8001798:	4863      	ldr	r0, [pc, #396]	; (8001928 <UART_Command+0x214>)
 800179a:	f004 febf 	bl	800651c <memset>
		memset(sending_data,0,sizeof(sending_data));
 800179e:	2232      	movs	r2, #50	; 0x32
 80017a0:	2100      	movs	r1, #0
 80017a2:	4862      	ldr	r0, [pc, #392]	; (800192c <UART_Command+0x218>)
 80017a4:	f004 feba 	bl	800651c <memset>
		sprintf(sending_data,"G91Completed \n");
 80017a8:	4964      	ldr	r1, [pc, #400]	; (800193c <UART_Command+0x228>)
 80017aa:	4860      	ldr	r0, [pc, #384]	; (800192c <UART_Command+0x218>)
 80017ac:	f005 fc8e 	bl	80070cc <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 80017b0:	485e      	ldr	r0, [pc, #376]	; (800192c <UART_Command+0x218>)
 80017b2:	f7fe fd37 	bl	8000224 <strlen>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	495b      	ldr	r1, [pc, #364]	; (800192c <UART_Command+0x218>)
 80017c0:	485c      	ldr	r0, [pc, #368]	; (8001934 <UART_Command+0x220>)
 80017c2:	f003 fdd4 	bl	800536e <HAL_UART_Transmit>
}
 80017c6:	e0a6      	b.n	8001916 <UART_Command+0x202>
		else if(strcmp(tokens[0],"HOME") == 0){
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	495c      	ldr	r1, [pc, #368]	; (8001940 <UART_Command+0x22c>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fd1e 	bl	8000210 <strcmp>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d11f      	bne.n	800181a <UART_Command+0x106>
		HAL_NVIC_EnableIRQ(Z_END_STOP_EXTI_IRQn);
 80017da:	2017      	movs	r0, #23
 80017dc:	f001 fff5 	bl	80037ca <HAL_NVIC_EnableIRQ>
		HOMED = false;
 80017e0:	4b58      	ldr	r3, [pc, #352]	; (8001944 <UART_Command+0x230>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
		Homing_motor(tokens);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fd46 	bl	8001278 <Homing_motor>
		Homing_completion();
 80017ec:	f7ff fd64 	bl	80012b8 <Homing_completion>
		memset(sending_data,0,sizeof(sending_data));
 80017f0:	2232      	movs	r2, #50	; 0x32
 80017f2:	2100      	movs	r1, #0
 80017f4:	484d      	ldr	r0, [pc, #308]	; (800192c <UART_Command+0x218>)
 80017f6:	f004 fe91 	bl	800651c <memset>
		sprintf(sending_data,"Homed \n");
 80017fa:	4953      	ldr	r1, [pc, #332]	; (8001948 <UART_Command+0x234>)
 80017fc:	484b      	ldr	r0, [pc, #300]	; (800192c <UART_Command+0x218>)
 80017fe:	f005 fc65 	bl	80070cc <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 8001802:	484a      	ldr	r0, [pc, #296]	; (800192c <UART_Command+0x218>)
 8001804:	f7fe fd0e 	bl	8000224 <strlen>
 8001808:	4603      	mov	r3, r0
 800180a:	b29a      	uxth	r2, r3
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
 8001810:	4946      	ldr	r1, [pc, #280]	; (800192c <UART_Command+0x218>)
 8001812:	4848      	ldr	r0, [pc, #288]	; (8001934 <UART_Command+0x220>)
 8001814:	f003 fdab 	bl	800536e <HAL_UART_Transmit>
}
 8001818:	e07d      	b.n	8001916 <UART_Command+0x202>
		else if(strcmp(tokens[0],"MOTPOS") == 0){
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	494b      	ldr	r1, [pc, #300]	; (800194c <UART_Command+0x238>)
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fcf5 	bl	8000210 <strcmp>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d12c      	bne.n	8001886 <UART_Command+0x172>
			memset(sending_data,0,sizeof(sending_data));
 800182c:	2232      	movs	r2, #50	; 0x32
 800182e:	2100      	movs	r1, #0
 8001830:	483e      	ldr	r0, [pc, #248]	; (800192c <UART_Command+0x218>)
 8001832:	f004 fe73 	bl	800651c <memset>
			sprintf(sending_data,"%0.2f\n",(float) currentPosition()/steps_per_millimeters );
 8001836:	f000 ffb3 	bl	80027a0 <currentPosition>
 800183a:	ee07 0a90 	vmov	s15, r0
 800183e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001842:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001950 <UART_Command+0x23c>
 8001846:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800184a:	ee16 0a90 	vmov	r0, s13
 800184e:	f7fe feab 	bl	80005a8 <__aeabi_f2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	493f      	ldr	r1, [pc, #252]	; (8001954 <UART_Command+0x240>)
 8001858:	4834      	ldr	r0, [pc, #208]	; (800192c <UART_Command+0x218>)
 800185a:	f005 fc37 	bl	80070cc <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 800185e:	4833      	ldr	r0, [pc, #204]	; (800192c <UART_Command+0x218>)
 8001860:	f7fe fce0 	bl	8000224 <strlen>
 8001864:	4603      	mov	r3, r0
 8001866:	b29a      	uxth	r2, r3
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
 800186c:	492f      	ldr	r1, [pc, #188]	; (800192c <UART_Command+0x218>)
 800186e:	4831      	ldr	r0, [pc, #196]	; (8001934 <UART_Command+0x220>)
 8001870:	f003 fd7d 	bl	800536e <HAL_UART_Transmit>
			Exec_command = 0;
 8001874:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <UART_Command+0x210>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
			memset((void *)RxBuffer,0,sizeof(RxBuffer));
 800187a:	228c      	movs	r2, #140	; 0x8c
 800187c:	2100      	movs	r1, #0
 800187e:	482a      	ldr	r0, [pc, #168]	; (8001928 <UART_Command+0x214>)
 8001880:	f004 fe4c 	bl	800651c <memset>
}
 8001884:	e047      	b.n	8001916 <UART_Command+0x202>
		else if(strcmp(tokens[0],"ENCZERO") == 0){
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4933      	ldr	r1, [pc, #204]	; (8001958 <UART_Command+0x244>)
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fcbf 	bl	8000210 <strcmp>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10c      	bne.n	80018b2 <UART_Command+0x19e>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8001898:	4b30      	ldr	r3, [pc, #192]	; (800195c <UART_Command+0x248>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2200      	movs	r2, #0
 800189e:	625a      	str	r2, [r3, #36]	; 0x24
			Exec_command = 0;
 80018a0:	4b20      	ldr	r3, [pc, #128]	; (8001924 <UART_Command+0x210>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
			memset(RxBuffer,0,sizeof(RxBuffer));
 80018a6:	228c      	movs	r2, #140	; 0x8c
 80018a8:	2100      	movs	r1, #0
 80018aa:	481f      	ldr	r0, [pc, #124]	; (8001928 <UART_Command+0x214>)
 80018ac:	f004 fe36 	bl	800651c <memset>
}
 80018b0:	e031      	b.n	8001916 <UART_Command+0x202>
		else if(strcmp(tokens[0],"ENCVAL") == 0){
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	492a      	ldr	r1, [pc, #168]	; (8001960 <UART_Command+0x24c>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fca9 	bl	8000210 <strcmp>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d120      	bne.n	8001906 <UART_Command+0x1f2>
			memset(sending_data,0,sizeof(sending_data));
 80018c4:	2232      	movs	r2, #50	; 0x32
 80018c6:	2100      	movs	r1, #0
 80018c8:	4818      	ldr	r0, [pc, #96]	; (800192c <UART_Command+0x218>)
 80018ca:	f004 fe27 	bl	800651c <memset>
			sprintf(sending_data,"%ld\n",__HAL_TIM_GET_COUNTER(&htim2) );
 80018ce:	4b23      	ldr	r3, [pc, #140]	; (800195c <UART_Command+0x248>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	461a      	mov	r2, r3
 80018d6:	4923      	ldr	r1, [pc, #140]	; (8001964 <UART_Command+0x250>)
 80018d8:	4814      	ldr	r0, [pc, #80]	; (800192c <UART_Command+0x218>)
 80018da:	f005 fbf7 	bl	80070cc <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 80018de:	4813      	ldr	r0, [pc, #76]	; (800192c <UART_Command+0x218>)
 80018e0:	f7fe fca0 	bl	8000224 <strlen>
 80018e4:	4603      	mov	r3, r0
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	f04f 33ff 	mov.w	r3, #4294967295
 80018ec:	490f      	ldr	r1, [pc, #60]	; (800192c <UART_Command+0x218>)
 80018ee:	4811      	ldr	r0, [pc, #68]	; (8001934 <UART_Command+0x220>)
 80018f0:	f003 fd3d 	bl	800536e <HAL_UART_Transmit>
			Exec_command = 0;
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <UART_Command+0x210>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
			memset(RxBuffer,0,sizeof(RxBuffer));
 80018fa:	228c      	movs	r2, #140	; 0x8c
 80018fc:	2100      	movs	r1, #0
 80018fe:	480a      	ldr	r0, [pc, #40]	; (8001928 <UART_Command+0x214>)
 8001900:	f004 fe0c 	bl	800651c <memset>
}
 8001904:	e007      	b.n	8001916 <UART_Command+0x202>
			Exec_command = 0;
 8001906:	4b07      	ldr	r3, [pc, #28]	; (8001924 <UART_Command+0x210>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
			memset(RxBuffer,0,sizeof(RxBuffer));
 800190c:	228c      	movs	r2, #140	; 0x8c
 800190e:	2100      	movs	r1, #0
 8001910:	4805      	ldr	r0, [pc, #20]	; (8001928 <UART_Command+0x214>)
 8001912:	f004 fe03 	bl	800651c <memset>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	0800ac84 	.word	0x0800ac84
 8001924:	200009a5 	.word	0x200009a5
 8001928:	20000918 	.word	0x20000918
 800192c:	20000024 	.word	0x20000024
 8001930:	0800ac88 	.word	0x0800ac88
 8001934:	20000418 	.word	0x20000418
 8001938:	0800ac98 	.word	0x0800ac98
 800193c:	0800ac9c 	.word	0x0800ac9c
 8001940:	0800ac74 	.word	0x0800ac74
 8001944:	200009b1 	.word	0x200009b1
 8001948:	0800ac7c 	.word	0x0800ac7c
 800194c:	0800acac 	.word	0x0800acac
 8001950:	47435000 	.word	0x47435000
 8001954:	0800acb4 	.word	0x0800acb4
 8001958:	0800acbc 	.word	0x0800acbc
 800195c:	20000340 	.word	0x20000340
 8001960:	0800acc4 	.word	0x0800acc4
 8001964:	0800accc 	.word	0x0800accc

08001968 <initQueue>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "circular_queue.h"

void initQueue(volatile CircularQueue* q) {
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

    q->front = -1;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f04f 32ff 	mov.w	r2, #4294967295
 8001976:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
    q->rear = -1;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4

}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <isFull>:


int isFull(volatile CircularQueue* q) {
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
    return ((q->rear + 1) % MAX_QUEUE_SIZE == q->front);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <isFull+0x44>)
 80019a2:	fb83 1302 	smull	r1, r3, r3, r2
 80019a6:	4413      	add	r3, r2
 80019a8:	1119      	asrs	r1, r3, #4
 80019aa:	17d3      	asrs	r3, r2, #31
 80019ac:	1ac9      	subs	r1, r1, r3
 80019ae:	460b      	mov	r3, r1
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	1a5b      	subs	r3, r3, r1
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	1ad1      	subs	r1, r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 80019be:	4299      	cmp	r1, r3
 80019c0:	bf0c      	ite	eq
 80019c2:	2301      	moveq	r3, #1
 80019c4:	2300      	movne	r3, #0
 80019c6:	b2db      	uxtb	r3, r3
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	88888889 	.word	0x88888889

080019d8 <isEmpty>:

int isEmpty(volatile CircularQueue* q) {
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
    return (q->front == -1);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 80019e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ea:	bf0c      	ite	eq
 80019ec:	2301      	moveq	r3, #1
 80019ee:	2300      	movne	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <enqueue>:

void enqueue(volatile CircularQueue* q, const char* item) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
    if (isFull(q)) {
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffc0 	bl	8001990 <isFull>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <enqueue+0x1e>
        printf("Queue is full\n");
 8001a16:	4818      	ldr	r0, [pc, #96]	; (8001a78 <enqueue+0x78>)
 8001a18:	f005 fb40 	bl	800709c <puts>
        return;
 8001a1c:	e029      	b.n	8001a72 <enqueue+0x72>
    }
    if (isEmpty(q)) {
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ffda 	bl	80019d8 <isEmpty>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <enqueue+0x32>
        q->front = 0;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
    }
    q->rear = (q->rear + 1) % MAX_QUEUE_SIZE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <enqueue+0x7c>)
 8001a3c:	fb83 1302 	smull	r1, r3, r3, r2
 8001a40:	4413      	add	r3, r2
 8001a42:	1119      	asrs	r1, r3, #4
 8001a44:	17d3      	asrs	r3, r2, #31
 8001a46:	1ac9      	subs	r1, r1, r3
 8001a48:	460b      	mov	r3, r1
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	1a5b      	subs	r3, r3, r1
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	1ad1      	subs	r1, r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f8c3 14b4 	str.w	r1, [r3, #1204]	; 0x4b4
    strcpy(q->items[q->rear], item);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	; 0x4b4
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	6839      	ldr	r1, [r7, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f005 fb5a 	bl	8007126 <strcpy>
}
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	0800acd4 	.word	0x0800acd4
 8001a7c:	88888889 	.word	0x88888889

08001a80 <dequeue>:

char * dequeue(volatile CircularQueue* q) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	  char* item = NULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
	if (isEmpty(q)) {
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ffa3 	bl	80019d8 <isEmpty>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <dequeue+0x20>
		printf("Queue is empty.\n");
 8001a98:	481c      	ldr	r0, [pc, #112]	; (8001b0c <dequeue+0x8c>)
 8001a9a:	f005 faff 	bl	800709c <puts>
 8001a9e:	e02f      	b.n	8001b00 <dequeue+0x80>
	} else {
		item = q->items[q->front];
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f8d3 24b0 	ldr.w	r2, [r3, #1200]	; 0x4b0
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]
		if (q->front == q->rear) {
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f8d3 24b0 	ldr.w	r2, [r3, #1200]	; 0x4b0
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d10a      	bne.n	8001ada <dequeue+0x5a>
			q->front = -1;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aca:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
			q->rear = -1;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad4:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
 8001ad8:	e012      	b.n	8001b00 <dequeue+0x80>
		} else {
			q->front = (q->front + 1) % MAX_QUEUE_SIZE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <dequeue+0x90>)
 8001ae4:	fb83 1302 	smull	r1, r3, r3, r2
 8001ae8:	4413      	add	r3, r2
 8001aea:	1119      	asrs	r1, r3, #4
 8001aec:	17d3      	asrs	r3, r2, #31
 8001aee:	1ac9      	subs	r1, r1, r3
 8001af0:	460b      	mov	r3, r1
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	1a5b      	subs	r3, r3, r1
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	1ad1      	subs	r1, r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f8c3 14b0 	str.w	r1, [r3, #1200]	; 0x4b0
		}
	}
	return item;
 8001b00:	68fb      	ldr	r3, [r7, #12]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	0800ace4 	.word	0x0800ace4
 8001b10:	88888889 	.word	0x88888889

08001b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001b1a:	f001 fcc9 	bl	80034b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b1e:	f000 f8eb 	bl	8001cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b22:	f000 fa75 	bl	8002010 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b26:	f000 fa49 	bl	8001fbc <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001b2a:	f000 f9db 	bl	8001ee4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001b2e:	f000 fa0f 	bl	8001f50 <MX_TIM7_Init>
  MX_SPI1_Init();
 8001b32:	f000 f94d 	bl	8001dd0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001b36:	f000 f981 	bl	8001e3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /****************************** Setting up IRQ ***********************/
	HAL_NVIC_DisableIRQ(Z_END_STOP_EXTI_IRQn);
 8001b3a:	2017      	movs	r0, #23
 8001b3c:	f001 fe53 	bl	80037e6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(Z_reference_EXTI_IRQn);
 8001b40:	2006      	movs	r0, #6
 8001b42:	f001 fe50 	bl	80037e6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(P_limit_EXTI_IRQn);
 8001b46:	200a      	movs	r0, #10
 8001b48:	f001 fe4d 	bl	80037e6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(Q_limit_EXTI_IRQn);
 8001b4c:	2017      	movs	r0, #23
 8001b4e:	f001 fe4a 	bl	80037e6 <HAL_NVIC_DisableIRQ>


/*********************** LED SPI Intialization *******************/

	//initializing LED values
	dectobin(ch1_br, &ch1_buff1, &ch1_buff2);
 8001b52:	4b4f      	ldr	r3, [pc, #316]	; (8001c90 <main+0x17c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a4f      	ldr	r2, [pc, #316]	; (8001c94 <main+0x180>)
 8001b58:	494f      	ldr	r1, [pc, #316]	; (8001c98 <main+0x184>)
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fd54 	bl	8001608 <dectobin>
	dectobin(ch2_br, &ch2_buff1, &ch2_buff2);
 8001b60:	4b4e      	ldr	r3, [pc, #312]	; (8001c9c <main+0x188>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a4e      	ldr	r2, [pc, #312]	; (8001ca0 <main+0x18c>)
 8001b66:	494f      	ldr	r1, [pc, #316]	; (8001ca4 <main+0x190>)
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fd4d 	bl	8001608 <dectobin>
	dectobin(ch3_br, &ch3_buff1, &ch3_buff2);
 8001b6e:	4b4e      	ldr	r3, [pc, #312]	; (8001ca8 <main+0x194>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a4e      	ldr	r2, [pc, #312]	; (8001cac <main+0x198>)
 8001b74:	494e      	ldr	r1, [pc, #312]	; (8001cb0 <main+0x19c>)
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fd46 	bl	8001608 <dectobin>
	//setting up channel select pin to HIGH
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b82:	484c      	ldr	r0, [pc, #304]	; (8001cb4 <main+0x1a0>)
 8001b84:	f002 f888 	bl	8003c98 <HAL_GPIO_WritePin>



/************************** UART Initialisation *********************/
	// initiating interrupt for PC data receiving
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)RxBuffer, sizeof(RxBuffer));
 8001b88:	228c      	movs	r2, #140	; 0x8c
 8001b8a:	494b      	ldr	r1, [pc, #300]	; (8001cb8 <main+0x1a4>)
 8001b8c:	484b      	ldr	r0, [pc, #300]	; (8001cbc <main+0x1a8>)
 8001b8e:	f003 fcb0 	bl	80054f2 <HAL_UARTEx_ReceiveToIdle_IT>



/************************** Encoder Intialization *******************/

	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL); //starting encoder
 8001b92:	213c      	movs	r1, #60	; 0x3c
 8001b94:	484a      	ldr	r0, [pc, #296]	; (8001cc0 <main+0x1ac>)
 8001b96:	f003 f87f 	bl	8004c98 <HAL_TIM_Encoder_Start>



/*************************** Timer Intializations ****************/

  HAL_TIM_Base_Start(&htim6); //to calculate pulse time
 8001b9a:	484a      	ldr	r0, [pc, #296]	; (8001cc4 <main+0x1b0>)
 8001b9c:	f002 ff6e 	bl	8004a7c <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim7); // for microseconds delay
 8001ba0:	4849      	ldr	r0, [pc, #292]	; (8001cc8 <main+0x1b4>)
 8001ba2:	f002 ff6b 	bl	8004a7c <HAL_TIM_Base_Start>


/*********************** Z motor initialization *********************/


	stepper_setup(STEP_GPIO_Port, STEP_Pin, DIR_GPIO_Port, DIR_Pin );
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	4a48      	ldr	r2, [pc, #288]	; (8001ccc <main+0x1b8>)
 8001baa:	2102      	movs	r1, #2
 8001bac:	4847      	ldr	r0, [pc, #284]	; (8001ccc <main+0x1b8>)
 8001bae:	f000 fd11 	bl	80025d4 <stepper_setup>

	//sample movement
	Total_Steps = (int32_t) ( steps_per_millimeters * targetPos );
 8001bb2:	4b47      	ldr	r3, [pc, #284]	; (8001cd0 <main+0x1bc>)
 8001bb4:	edd3 7a00 	vldr	s15, [r3]
 8001bb8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001cd4 <main+0x1c0>
 8001bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc4:	ee17 2a90 	vmov	r2, s15
 8001bc8:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <main+0x1c4>)
 8001bca:	601a      	str	r2, [r3, #0]
	setMaxSpeed(10*steps_per_millimeters);
 8001bcc:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8001cdc <main+0x1c8>
 8001bd0:	f000 ff6e 	bl	8002ab0 <setMaxSpeed>
	setAcceleration(Acceleration);
 8001bd4:	4b42      	ldr	r3, [pc, #264]	; (8001ce0 <main+0x1cc>)
 8001bd6:	edd3 7a00 	vldr	s15, [r3]
 8001bda:	eeb0 0a67 	vmov.f32	s0, s15
 8001bde:	f000 ffcb 	bl	8002b78 <setAcceleration>
	moveTo(Total_Steps);
 8001be2:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <main+0x1c4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fcba 	bl	8002560 <moveTo>

	//runToPosition(); //moving to desired positions

/************************ Buffer Intialization *************************/
initQueue(&CommandBuffer) ;
 8001bec:	483d      	ldr	r0, [pc, #244]	; (8001ce4 <main+0x1d0>)
 8001bee:	f7ff febb 	bl	8001968 <initQueue>

/*********************************************************************/

/**************************** Home Initialization ********************/
HOMED = false;
 8001bf2:	4b3d      	ldr	r3, [pc, #244]	; (8001ce8 <main+0x1d4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
Home_Pass = 0;
 8001bf8:	4b3c      	ldr	r3, [pc, #240]	; (8001cec <main+0x1d8>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(!isEmpty(&CommandBuffer)){
 8001bfe:	4839      	ldr	r0, [pc, #228]	; (8001ce4 <main+0x1d0>)
 8001c00:	f7ff feea 	bl	80019d8 <isEmpty>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d13b      	bne.n	8001c82 <main+0x16e>
		command = dequeue(&CommandBuffer);
 8001c0a:	4836      	ldr	r0, [pc, #216]	; (8001ce4 <main+0x1d0>)
 8001c0c:	f7ff ff38 	bl	8001a80 <dequeue>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4a37      	ldr	r2, [pc, #220]	; (8001cf0 <main+0x1dc>)
 8001c14:	6013      	str	r3, [r2, #0]
		int MAX_TOKENS = 3;
 8001c16:	2303      	movs	r3, #3
 8001c18:	60fb      	str	r3, [r7, #12]
		char *token;
		char *tokens[3] = {0};
 8001c1a:	463b      	mov	r3, r7
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
		int i = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	613b      	str	r3, [r7, #16]


		/* Split the string by the delimiter " " */
		token = strtok((char *)command, " ");
 8001c28:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <main+0x1dc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4931      	ldr	r1, [pc, #196]	; (8001cf4 <main+0x1e0>)
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f006 f8b0 	bl	8007d94 <strtok>
 8001c34:	6178      	str	r0, [r7, #20]

		while (token != NULL && i < MAX_TOKENS) {
 8001c36:	e00e      	b.n	8001c56 <main+0x142>
			tokens[i] = token;
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	3318      	adds	r3, #24
 8001c3e:	443b      	add	r3, r7
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	f843 2c18 	str.w	r2, [r3, #-24]
			i++;
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	613b      	str	r3, [r7, #16]
			token = strtok(NULL, " ");
 8001c4c:	4929      	ldr	r1, [pc, #164]	; (8001cf4 <main+0x1e0>)
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f006 f8a0 	bl	8007d94 <strtok>
 8001c54:	6178      	str	r0, [r7, #20]
		while (token != NULL && i < MAX_TOKENS) {
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <main+0x150>
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dbe9      	blt.n	8001c38 <main+0x124>
		}

		if(HOMED){
 8001c64:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <main+0x1d4>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d004      	beq.n	8001c78 <main+0x164>

			//Execute the command
			UART_Command(tokens);
 8001c6e:	463b      	mov	r3, r7
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fd4f 	bl	8001714 <UART_Command>
 8001c76:	e7c2      	b.n	8001bfe <main+0xea>
		}
		else{
			//check and excute HOME command

			HOMING_Command(tokens);
 8001c78:	463b      	mov	r3, r7
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fd10 	bl	80016a0 <HOMING_Command>
 8001c80:	e7bd      	b.n	8001bfe <main+0xea>

		}
	}

	else{
	  HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t*)RxBuffer, sizeof(RxBuffer));
 8001c82:	228c      	movs	r2, #140	; 0x8c
 8001c84:	490c      	ldr	r1, [pc, #48]	; (8001cb8 <main+0x1a4>)
 8001c86:	480d      	ldr	r0, [pc, #52]	; (8001cbc <main+0x1a8>)
 8001c88:	f003 fc33 	bl	80054f2 <HAL_UARTEx_ReceiveToIdle_IT>
	if(!isEmpty(&CommandBuffer)){
 8001c8c:	e7b7      	b.n	8001bfe <main+0xea>
 8001c8e:	bf00      	nop
 8001c90:	20000018 	.word	0x20000018
 8001c94:	200002e1 	.word	0x200002e1
 8001c98:	200002e0 	.word	0x200002e0
 8001c9c:	2000001c 	.word	0x2000001c
 8001ca0:	200002e3 	.word	0x200002e3
 8001ca4:	200002e2 	.word	0x200002e2
 8001ca8:	20000020 	.word	0x20000020
 8001cac:	200002e5 	.word	0x200002e5
 8001cb0:	200002e4 	.word	0x200002e4
 8001cb4:	40020000 	.word	0x40020000
 8001cb8:	20000918 	.word	0x20000918
 8001cbc:	20000418 	.word	0x20000418
 8001cc0:	20000340 	.word	0x20000340
 8001cc4:	20000388 	.word	0x20000388
 8001cc8:	200003d0 	.word	0x200003d0
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	20000058 	.word	0x20000058
 8001cd4:	47435000 	.word	0x47435000
 8001cd8:	200009ac 	.word	0x200009ac
 8001cdc:	48f42400 	.word	0x48f42400
 8001ce0:	20000060 	.word	0x20000060
 8001ce4:	2000045c 	.word	0x2000045c
 8001ce8:	200009b1 	.word	0x200009b1
 8001cec:	200009b0 	.word	0x200009b0
 8001cf0:	20000914 	.word	0x20000914
 8001cf4:	0800ad14 	.word	0x0800ad14

08001cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b094      	sub	sp, #80	; 0x50
 8001cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cfe:	f107 031c 	add.w	r3, r7, #28
 8001d02:	2234      	movs	r2, #52	; 0x34
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f004 fc08 	bl	800651c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d0c:	f107 0308 	add.w	r3, r7, #8
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <SystemClock_Config+0xd0>)
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	4a28      	ldr	r2, [pc, #160]	; (8001dc8 <SystemClock_Config+0xd0>)
 8001d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2c:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <SystemClock_Config+0xd0>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d38:	2300      	movs	r3, #0
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <SystemClock_Config+0xd4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <SystemClock_Config+0xd4>)
 8001d42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <SystemClock_Config+0xd4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d50:	603b      	str	r3, [r7, #0]
 8001d52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d54:	2302      	movs	r3, #2
 8001d56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d5c:	2310      	movs	r3, #16
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d60:	2302      	movs	r3, #2
 8001d62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d64:	2300      	movs	r3, #0
 8001d66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d68:	2308      	movs	r3, #8
 8001d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001d6c:	23a0      	movs	r3, #160	; 0xa0
 8001d6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d70:	2302      	movs	r3, #2
 8001d72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d74:	2302      	movs	r3, #2
 8001d76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	4618      	mov	r0, r3
 8001d82:	f002 fb05 	bl	8004390 <HAL_RCC_OscConfig>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d8c:	f000 fbc8 	bl	8002520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d90:	230f      	movs	r3, #15
 8001d92:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d94:	2302      	movs	r3, #2
 8001d96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001d9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001da0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001da8:	f107 0308 	add.w	r3, r7, #8
 8001dac:	2105      	movs	r1, #5
 8001dae:	4618      	mov	r0, r3
 8001db0:	f001 ffa4 	bl	8003cfc <HAL_RCC_ClockConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001dba:	f000 fbb1 	bl	8002520 <Error_Handler>
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	3750      	adds	r7, #80	; 0x50
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40007000 	.word	0x40007000

08001dd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001dd4:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <MX_SPI1_Init+0x64>)
 8001dd6:	4a18      	ldr	r2, [pc, #96]	; (8001e38 <MX_SPI1_Init+0x68>)
 8001dd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dda:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <MX_SPI1_Init+0x64>)
 8001ddc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001de0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001de2:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <MX_SPI1_Init+0x64>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <MX_SPI1_Init+0x64>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <MX_SPI1_Init+0x64>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <MX_SPI1_Init+0x64>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <MX_SPI1_Init+0x64>)
 8001dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <MX_SPI1_Init+0x64>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <MX_SPI1_Init+0x64>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_SPI1_Init+0x64>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <MX_SPI1_Init+0x64>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <MX_SPI1_Init+0x64>)
 8001e1c:	220a      	movs	r2, #10
 8001e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e20:	4804      	ldr	r0, [pc, #16]	; (8001e34 <MX_SPI1_Init+0x64>)
 8001e22:	f002 fd53 	bl	80048cc <HAL_SPI_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e2c:	f000 fb78 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200002e8 	.word	0x200002e8
 8001e38:	40013000 	.word	0x40013000

08001e3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08c      	sub	sp, #48	; 0x30
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e42:	f107 030c 	add.w	r3, r7, #12
 8001e46:	2224      	movs	r2, #36	; 0x24
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f004 fb66 	bl	800651c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e58:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <MX_TIM2_Init+0xa4>)
 8001e5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e60:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <MX_TIM2_Init+0xa4>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <MX_TIM2_Init+0xa4>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <MX_TIM2_Init+0xa4>)
 8001e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <MX_TIM2_Init+0xa4>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <MX_TIM2_Init+0xa4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e80:	2303      	movs	r3, #3
 8001e82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e94:	2300      	movs	r3, #0
 8001e96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ea4:	f107 030c 	add.w	r3, r7, #12
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <MX_TIM2_Init+0xa4>)
 8001eac:	f002 fe4e 	bl	8004b4c <HAL_TIM_Encoder_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001eb6:	f000 fb33 	bl	8002520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4806      	ldr	r0, [pc, #24]	; (8001ee0 <MX_TIM2_Init+0xa4>)
 8001ec8:	f003 f974 	bl	80051b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ed2:	f000 fb25 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	3730      	adds	r7, #48	; 0x30
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000340 	.word	0x20000340

08001ee4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eea:	463b      	mov	r3, r7
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <MX_TIM6_Init+0x64>)
 8001ef4:	4a15      	ldr	r2, [pc, #84]	; (8001f4c <MX_TIM6_Init+0x68>)
 8001ef6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40-1;
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <MX_TIM6_Init+0x64>)
 8001efa:	2227      	movs	r2, #39	; 0x27
 8001efc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <MX_TIM6_Init+0x64>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <MX_TIM6_Init+0x64>)
 8001f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f0a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_TIM6_Init+0x64>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f12:	480d      	ldr	r0, [pc, #52]	; (8001f48 <MX_TIM6_Init+0x64>)
 8001f14:	f002 fd63 	bl	80049de <HAL_TIM_Base_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001f1e:	f000 faff 	bl	8002520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f2a:	463b      	mov	r3, r7
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4806      	ldr	r0, [pc, #24]	; (8001f48 <MX_TIM6_Init+0x64>)
 8001f30:	f003 f940 	bl	80051b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001f3a:	f000 faf1 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000388 	.word	0x20000388
 8001f4c:	40001000 	.word	0x40001000

08001f50 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f56:	463b      	mov	r3, r7
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <MX_TIM7_Init+0x64>)
 8001f60:	4a15      	ldr	r2, [pc, #84]	; (8001fb8 <MX_TIM7_Init+0x68>)
 8001f62:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40-1;
 8001f64:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <MX_TIM7_Init+0x64>)
 8001f66:	2227      	movs	r2, #39	; 0x27
 8001f68:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <MX_TIM7_Init+0x64>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001f70:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <MX_TIM7_Init+0x64>)
 8001f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f76:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f78:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <MX_TIM7_Init+0x64>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001f7e:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <MX_TIM7_Init+0x64>)
 8001f80:	f002 fd2d 	bl	80049de <HAL_TIM_Base_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001f8a:	f000 fac9 	bl	8002520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001f96:	463b      	mov	r3, r7
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4806      	ldr	r0, [pc, #24]	; (8001fb4 <MX_TIM7_Init+0x64>)
 8001f9c:	f003 f90a 	bl	80051b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001fa6:	f000 fabb 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200003d0 	.word	0x200003d0
 8001fb8:	40001400 	.word	0x40001400

08001fbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <MX_USART2_UART_Init+0x4c>)
 8001fc2:	4a12      	ldr	r2, [pc, #72]	; (800200c <MX_USART2_UART_Init+0x50>)
 8001fc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <MX_USART2_UART_Init+0x4c>)
 8001fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <MX_USART2_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <MX_USART2_UART_Init+0x4c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <MX_USART2_UART_Init+0x4c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fe0:	4b09      	ldr	r3, [pc, #36]	; (8002008 <MX_USART2_UART_Init+0x4c>)
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <MX_USART2_UART_Init+0x4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <MX_USART2_UART_Init+0x4c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ff2:	4805      	ldr	r0, [pc, #20]	; (8002008 <MX_USART2_UART_Init+0x4c>)
 8001ff4:	f003 f96e 	bl	80052d4 <HAL_UART_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ffe:	f000 fa8f 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000418 	.word	0x20000418
 800200c:	40004400 	.word	0x40004400

08002010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	; 0x28
 8002014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
 8002024:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	4b66      	ldr	r3, [pc, #408]	; (80021c4 <MX_GPIO_Init+0x1b4>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a65      	ldr	r2, [pc, #404]	; (80021c4 <MX_GPIO_Init+0x1b4>)
 8002030:	f043 0304 	orr.w	r3, r3, #4
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <MX_GPIO_Init+0x1b4>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b5f      	ldr	r3, [pc, #380]	; (80021c4 <MX_GPIO_Init+0x1b4>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a5e      	ldr	r2, [pc, #376]	; (80021c4 <MX_GPIO_Init+0x1b4>)
 800204c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b5c      	ldr	r3, [pc, #368]	; (80021c4 <MX_GPIO_Init+0x1b4>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	4b58      	ldr	r3, [pc, #352]	; (80021c4 <MX_GPIO_Init+0x1b4>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a57      	ldr	r2, [pc, #348]	; (80021c4 <MX_GPIO_Init+0x1b4>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b55      	ldr	r3, [pc, #340]	; (80021c4 <MX_GPIO_Init+0x1b4>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	4b51      	ldr	r3, [pc, #324]	; (80021c4 <MX_GPIO_Init+0x1b4>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a50      	ldr	r2, [pc, #320]	; (80021c4 <MX_GPIO_Init+0x1b4>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b4e      	ldr	r3, [pc, #312]	; (80021c4 <MX_GPIO_Init+0x1b4>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_Pin|STEP_Pin, GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	2103      	movs	r1, #3
 800209a:	484b      	ldr	r0, [pc, #300]	; (80021c8 <MX_GPIO_Init+0x1b8>)
 800209c:	f001 fdfc 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(End_stop_GPIO_Port, End_stop_Pin, GPIO_PIN_SET);
 80020a0:	2201      	movs	r2, #1
 80020a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020a6:	4849      	ldr	r0, [pc, #292]	; (80021cc <MX_GPIO_Init+0x1bc>)
 80020a8:	f001 fdf6 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_Selection_GPIO_Port, SPI_Selection_Pin, GPIO_PIN_SET);
 80020ac:	2201      	movs	r2, #1
 80020ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020b2:	4847      	ldr	r0, [pc, #284]	; (80021d0 <MX_GPIO_Init+0x1c0>)
 80020b4:	f001 fdf0 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020be:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80020c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	483e      	ldr	r0, [pc, #248]	; (80021c8 <MX_GPIO_Init+0x1b8>)
 80020d0:	f001 fc36 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Pin STEP_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|STEP_Pin;
 80020d4:	2303      	movs	r3, #3
 80020d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d8:	2301      	movs	r3, #1
 80020da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4619      	mov	r1, r3
 80020ea:	4837      	ldr	r0, [pc, #220]	; (80021c8 <MX_GPIO_Init+0x1b8>)
 80020ec:	f001 fc28 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z_reference_Pin P_limit_Pin Q_limit_Pin */
  GPIO_InitStruct.Pin = Z_reference_Pin|P_limit_Pin|Q_limit_Pin;
 80020f0:	2331      	movs	r3, #49	; 0x31
 80020f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020fa:	2302      	movs	r3, #2
 80020fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	4619      	mov	r1, r3
 8002104:	4831      	ldr	r0, [pc, #196]	; (80021cc <MX_GPIO_Init+0x1bc>)
 8002106:	f001 fc1b 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : End_stop_Pin */
  GPIO_InitStruct.Pin = End_stop_Pin;
 800210a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800210e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002110:	2301      	movs	r3, #1
 8002112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(End_stop_GPIO_Port, &GPIO_InitStruct);
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	4619      	mov	r1, r3
 8002122:	482a      	ldr	r0, [pc, #168]	; (80021cc <MX_GPIO_Init+0x1bc>)
 8002124:	f001 fc0c 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : Z_END_STOP_Pin */
  GPIO_InitStruct.Pin = Z_END_STOP_Pin;
 8002128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800212c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800212e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002134:	2301      	movs	r3, #1
 8002136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Z_END_STOP_GPIO_Port, &GPIO_InitStruct);
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4619      	mov	r1, r3
 800213e:	4824      	ldr	r0, [pc, #144]	; (80021d0 <MX_GPIO_Init+0x1c0>)
 8002140:	f001 fbfe 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_Selection_Pin */
  GPIO_InitStruct.Pin = SPI_Selection_Pin;
 8002144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214a:	2301      	movs	r3, #1
 800214c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002152:	2303      	movs	r3, #3
 8002154:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_Selection_GPIO_Port, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	481c      	ldr	r0, [pc, #112]	; (80021d0 <MX_GPIO_Init+0x1c0>)
 800215e:	f001 fbef 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : Camera_input_Pin */
  GPIO_InitStruct.Pin = Camera_input_Pin;
 8002162:	2308      	movs	r3, #8
 8002164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002166:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800216a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Camera_input_GPIO_Port, &GPIO_InitStruct);
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	4619      	mov	r1, r3
 8002176:	4815      	ldr	r0, [pc, #84]	; (80021cc <MX_GPIO_Init+0x1bc>)
 8002178:	f001 fbe2 	bl	8003940 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800217c:	2200      	movs	r2, #0
 800217e:	2100      	movs	r1, #0
 8002180:	2006      	movs	r0, #6
 8002182:	f001 fb06 	bl	8003792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002186:	2006      	movs	r0, #6
 8002188:	f001 fb1f 	bl	80037ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800218c:	2200      	movs	r2, #0
 800218e:	2100      	movs	r1, #0
 8002190:	2009      	movs	r0, #9
 8002192:	f001 fafe 	bl	8003792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002196:	2009      	movs	r0, #9
 8002198:	f001 fb17 	bl	80037ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800219c:	2200      	movs	r2, #0
 800219e:	2100      	movs	r1, #0
 80021a0:	200a      	movs	r0, #10
 80021a2:	f001 faf6 	bl	8003792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80021a6:	200a      	movs	r0, #10
 80021a8:	f001 fb0f 	bl	80037ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2100      	movs	r1, #0
 80021b0:	2017      	movs	r0, #23
 80021b2:	f001 faee 	bl	8003792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80021b6:	2017      	movs	r0, #23
 80021b8:	f001 fb07 	bl	80037ca <HAL_NVIC_EnableIRQ>

}
 80021bc:	bf00      	nop
 80021be:	3728      	adds	r7, #40	; 0x28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40020800 	.word	0x40020800
 80021cc:	40020400 	.word	0x40020400
 80021d0:	40020000 	.word	0x40020000

080021d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	80fb      	strh	r3, [r7, #6]


	if( GPIO_Pin == Z_END_STOP_Pin ){
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021e4:	d131      	bne.n	800224a <HAL_GPIO_EXTI_Callback+0x76>
		 */

		/*
		 * Debounce checking
		 */
		__delay_ms(1);
 80021e6:	2001      	movs	r0, #1
 80021e8:	f000 f97a 	bl	80024e0 <__delay_ms>

		if(HAL_GPIO_ReadPin(Z_END_STOP_GPIO_Port, Z_END_STOP_Pin) != GPIO_PIN_RESET){
 80021ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021f0:	4819      	ldr	r0, [pc, #100]	; (8002258 <HAL_GPIO_EXTI_Callback+0x84>)
 80021f2:	f001 fd39 	bl	8003c68 <HAL_GPIO_ReadPin>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d128      	bne.n	800224e <HAL_GPIO_EXTI_Callback+0x7a>
			/* error signal detected */
			return;
		}

		if(Home_Pass == 0){
 80021fc:	4b17      	ldr	r3, [pc, #92]	; (800225c <HAL_GPIO_EXTI_Callback+0x88>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10f      	bne.n	8002226 <HAL_GPIO_EXTI_Callback+0x52>
			// first pass
			Home_Pass = 1;
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_GPIO_EXTI_Callback+0x88>)
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]

			Homing_completion();
 800220c:	f7ff f854 	bl	80012b8 <Homing_completion>

			move((int32_t ) (steps_per_millimeters * HOMING_PASS_BACK_MM));
 8002210:	f242 7010 	movw	r0, #10000	; 0x2710
 8002214:	f000 f9cc 	bl	80025b0 <move>
			runToPosition();
 8002218:	f000 fe34 	bl	8002e84 <runToPosition>


			/* setting speed again to initiate the HOMING
			 otherwise _stepintervel became zero */
			setSpeed(-1*HOME_SPEED);  /* MOVING IN CCW */
 800221c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8002260 <HAL_GPIO_EXTI_Callback+0x8c>
 8002220:	f000 fd2a 	bl	8002c78 <setSpeed>
			return;
 8002224:	e014      	b.n	8002250 <HAL_GPIO_EXTI_Callback+0x7c>
		}
		else{
			HOMED = true; /* Homing is completed */
 8002226:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_GPIO_EXTI_Callback+0x90>)
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
			Home_Pass = 0;
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_GPIO_EXTI_Callback+0x88>)
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]

			// come back to reactivate the sensor
			move((int32_t ) (steps_per_millimeters * HOMING_PASS_BACK_MM));
 8002232:	f242 7010 	movw	r0, #10000	; 0x2710
 8002236:	f000 f9bb 	bl	80025b0 <move>
			runToPosition();
 800223a:	f000 fe23 	bl	8002e84 <runToPosition>

			//resetting all the parameters
			Homing_completion();
 800223e:	f7ff f83b 	bl	80012b8 <Homing_completion>
		}

		HAL_NVIC_DisableIRQ(Z_END_STOP_EXTI_IRQn);
 8002242:	2017      	movs	r0, #23
 8002244:	f001 facf 	bl	80037e6 <HAL_NVIC_DisableIRQ>
		return;
 8002248:	e002      	b.n	8002250 <HAL_GPIO_EXTI_Callback+0x7c>

	else if(GPIO_Pin == P_limit_Pin){
	// P_limit detected(Upper Limit)
	}
#endif
	return;
 800224a:	bf00      	nop
 800224c:	e000      	b.n	8002250 <HAL_GPIO_EXTI_Callback+0x7c>
			return;
 800224e:	bf00      	nop
}
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40020000 	.word	0x40020000
 800225c:	200009b0 	.word	0x200009b0
 8002260:	c7435000 	.word	0xc7435000
 8002264:	200009b1 	.word	0x200009b1

08002268 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8002268:	b590      	push	{r4, r7, lr}
 800226a:	b0a5      	sub	sp, #148	; 0x94
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]

	if(huart == &huart2){
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a5a      	ldr	r2, [pc, #360]	; (80023e0 <HAL_UARTEx_RxEventCallback+0x178>)
 8002278:	4293      	cmp	r3, r2
 800227a:	f040 80ac 	bne.w	80023d6 <HAL_UARTEx_RxEventCallback+0x16e>
	  /* Add null character to terminate string */
		if(Size < sizeof(RxBuffer)){
 800227e:	887b      	ldrh	r3, [r7, #2]
 8002280:	2b8b      	cmp	r3, #139	; 0x8b
 8002282:	d804      	bhi.n	800228e <HAL_UARTEx_RxEventCallback+0x26>
			RxBuffer[Size] = 0;
 8002284:	887b      	ldrh	r3, [r7, #2]
 8002286:	4a57      	ldr	r2, [pc, #348]	; (80023e4 <HAL_UARTEx_RxEventCallback+0x17c>)
 8002288:	2100      	movs	r1, #0
 800228a:	54d1      	strb	r1, [r2, r3]
 800228c:	e004      	b.n	8002298 <HAL_UARTEx_RxEventCallback+0x30>
		}
		else{
			RxBuffer[Size-1] = 0;
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	3b01      	subs	r3, #1
 8002292:	4a54      	ldr	r2, [pc, #336]	; (80023e4 <HAL_UARTEx_RxEventCallback+0x17c>)
 8002294:	2100      	movs	r1, #0
 8002296:	54d1      	strb	r1, [r2, r3]
		}

		// Replace all occurrences of "\r " with "\r" (if any)
		char* space_ptr = strstr(RxBuffer, "\r");
 8002298:	210d      	movs	r1, #13
 800229a:	4852      	ldr	r0, [pc, #328]	; (80023e4 <HAL_UARTEx_RxEventCallback+0x17c>)
 800229c:	f004 ff36 	bl	800710c <strchr>
 80022a0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		while (space_ptr != NULL) {
 80022a4:	e028      	b.n	80022f8 <HAL_UARTEx_RxEventCallback+0x90>
			// Skip over the "\r" delimiter
			space_ptr++;
 80022a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022aa:	3301      	adds	r3, #1
 80022ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			// Remove any leading spaces after the "\r" delimiter
			while (isspace(*space_ptr)) {
 80022b0:	e010      	b.n	80022d4 <HAL_UARTEx_RxEventCallback+0x6c>
				memmove(space_ptr, space_ptr + 1, strlen(space_ptr + 1) + 1);
 80022b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022b6:	1c5c      	adds	r4, r3, #1
 80022b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022bc:	3301      	adds	r3, #1
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fd ffb0 	bl	8000224 <strlen>
 80022c4:	4603      	mov	r3, r0
 80022c6:	3301      	adds	r3, #1
 80022c8:	461a      	mov	r2, r3
 80022ca:	4621      	mov	r1, r4
 80022cc:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80022d0:	f004 f90a 	bl	80064e8 <memmove>
			while (isspace(*space_ptr)) {
 80022d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	3301      	adds	r3, #1
 80022dc:	4a42      	ldr	r2, [pc, #264]	; (80023e8 <HAL_UARTEx_RxEventCallback+0x180>)
 80022de:	4413      	add	r3, r2
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1e3      	bne.n	80022b2 <HAL_UARTEx_RxEventCallback+0x4a>
			}
			// Find the next occurrence of "\r"
			space_ptr = strstr(space_ptr, "\r");
 80022ea:	210d      	movs	r1, #13
 80022ec:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80022f0:	f004 ff0c 	bl	800710c <strchr>
 80022f4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		while (space_ptr != NULL) {
 80022f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1d2      	bne.n	80022a6 <HAL_UARTEx_RxEventCallback+0x3e>
		}



		char *token;
		char *tokens[MAX_COMMANDS_PER_TIME] = {0};
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	2278      	movs	r2, #120	; 0x78
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f004 f907 	bl	800651c <memset>
		int i = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84


		/* Split the string by the delimiter "\r" */
		token = strtok(RxBuffer, "\r");
 8002314:	4935      	ldr	r1, [pc, #212]	; (80023ec <HAL_UARTEx_RxEventCallback+0x184>)
 8002316:	4833      	ldr	r0, [pc, #204]	; (80023e4 <HAL_UARTEx_RxEventCallback+0x17c>)
 8002318:	f005 fd3c 	bl	8007d94 <strtok>
 800231c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

		while (token != NULL && i < MAX_COMMANDS_PER_TIME) {
 8002320:	e013      	b.n	800234a <HAL_UARTEx_RxEventCallback+0xe2>
			tokens[i] = token;
 8002322:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	3390      	adds	r3, #144	; 0x90
 800232a:	443b      	add	r3, r7
 800232c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002330:	f843 2c84 	str.w	r2, [r3, #-132]
			i++;
 8002334:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002338:	3301      	adds	r3, #1
 800233a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			token = strtok(NULL, "\r");
 800233e:	492b      	ldr	r1, [pc, #172]	; (80023ec <HAL_UARTEx_RxEventCallback+0x184>)
 8002340:	2000      	movs	r0, #0
 8002342:	f005 fd27 	bl	8007d94 <strtok>
 8002346:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		while (token != NULL && i < MAX_COMMANDS_PER_TIME) {
 800234a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_UARTEx_RxEventCallback+0xf2>
 8002352:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002356:	2b1d      	cmp	r3, #29
 8002358:	dde3      	ble.n	8002322 <HAL_UARTEx_RxEventCallback+0xba>
			UNUSED(tokens);
		}

		for(i=0;tokens[i]!=NULL;i++){
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002360:	e02b      	b.n	80023ba <HAL_UARTEx_RxEventCallback+0x152>

			if(is_instant_command(tokens[i])){
 8002362:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	3390      	adds	r3, #144	; 0x90
 800236a:	443b      	add	r3, r7
 800236c:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe fe71 	bl	8001058 <is_instant_command>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d118      	bne.n	80023ae <HAL_UARTEx_RxEventCallback+0x146>
				continue;
			}
			if(is_command_valid(tokens[i])){
 800237c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	3390      	adds	r3, #144	; 0x90
 8002384:	443b      	add	r3, r7
 8002386:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fe70 	bl	8001070 <is_command_valid>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00c      	beq.n	80023b0 <HAL_UARTEx_RxEventCallback+0x148>
				enqueue(&CommandBuffer,tokens[i]);
 8002396:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	3390      	adds	r3, #144	; 0x90
 800239e:	443b      	add	r3, r7
 80023a0:	f853 3c84 	ldr.w	r3, [r3, #-132]
 80023a4:	4619      	mov	r1, r3
 80023a6:	4812      	ldr	r0, [pc, #72]	; (80023f0 <HAL_UARTEx_RxEventCallback+0x188>)
 80023a8:	f7ff fb2a 	bl	8001a00 <enqueue>
 80023ac:	e000      	b.n	80023b0 <HAL_UARTEx_RxEventCallback+0x148>
				continue;
 80023ae:	bf00      	nop
		for(i=0;tokens[i]!=NULL;i++){
 80023b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023b4:	3301      	adds	r3, #1
 80023b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	3390      	adds	r3, #144	; 0x90
 80023c2:	443b      	add	r3, r7
 80023c4:	f853 3c84 	ldr.w	r3, [r3, #-132]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1ca      	bne.n	8002362 <HAL_UARTEx_RxEventCallback+0xfa>
			}
		}

	  HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t*)RxBuffer, sizeof(RxBuffer));
 80023cc:	228c      	movs	r2, #140	; 0x8c
 80023ce:	4905      	ldr	r1, [pc, #20]	; (80023e4 <HAL_UARTEx_RxEventCallback+0x17c>)
 80023d0:	4803      	ldr	r0, [pc, #12]	; (80023e0 <HAL_UARTEx_RxEventCallback+0x178>)
 80023d2:	f003 f88e 	bl	80054f2 <HAL_UARTEx_ReceiveToIdle_IT>

	}

}
 80023d6:	bf00      	nop
 80023d8:	3794      	adds	r7, #148	; 0x94
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd90      	pop	{r4, r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000418 	.word	0x20000418
 80023e4:	20000918 	.word	0x20000918
 80023e8:	0800ad44 	.word	0x0800ad44
 80023ec:	0800ad18 	.word	0x0800ad18
 80023f0:	2000045c 	.word	0x2000045c

080023f4 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

	if(huart == &huart2){
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a2f      	ldr	r2, [pc, #188]	; (80024bc <HAL_UART_RxCpltCallback+0xc8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d157      	bne.n	80024b4 <HAL_UART_RxCpltCallback+0xc0>
    /* Receive one byte in the receive data register */

    /* Check if the received character is a /r or buffer is full */
    if (rxByte == '\r' || RxIndex == 50 - 1) // 50 is buffer length
 8002404:	4b2e      	ldr	r3, [pc, #184]	; (80024c0 <HAL_UART_RxCpltCallback+0xcc>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b0d      	cmp	r3, #13
 800240a:	d003      	beq.n	8002414 <HAL_UART_RxCpltCallback+0x20>
 800240c:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <HAL_UART_RxCpltCallback+0xd0>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b31      	cmp	r3, #49	; 0x31
 8002412:	d11b      	bne.n	800244c <HAL_UART_RxCpltCallback+0x58>
    {
        /* Set flag to indicate command is complete */
        Exec_command = 1;
 8002414:	4b2c      	ldr	r3, [pc, #176]	; (80024c8 <HAL_UART_RxCpltCallback+0xd4>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]

        /* Add null character to terminate string */
        RxBuffer[RxIndex] = 0;
 800241a:	4b2a      	ldr	r3, [pc, #168]	; (80024c4 <HAL_UART_RxCpltCallback+0xd0>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <HAL_UART_RxCpltCallback+0xd8>)
 8002422:	2100      	movs	r1, #0
 8002424:	5499      	strb	r1, [r3, r2]

        /*Check whether command is valid or not*/
        if(is_command_valid((char*)RxBuffer))
 8002426:	4829      	ldr	r0, [pc, #164]	; (80024cc <HAL_UART_RxCpltCallback+0xd8>)
 8002428:	f7fe fe22 	bl	8001070 <is_command_valid>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_UART_RxCpltCallback+0x46>
        {
            enqueue(&CommandBuffer, RxBuffer);
 8002432:	4926      	ldr	r1, [pc, #152]	; (80024cc <HAL_UART_RxCpltCallback+0xd8>)
 8002434:	4826      	ldr	r0, [pc, #152]	; (80024d0 <HAL_UART_RxCpltCallback+0xdc>)
 8002436:	f7ff fae3 	bl	8001a00 <enqueue>
        	NULL;
        }


        /* Resetting RxIndex to zero */
        RxIndex = 0;
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <HAL_UART_RxCpltCallback+0xd0>)
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]

        /* Restart the UART Interrupt */
		HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8002440:	2201      	movs	r2, #1
 8002442:	491f      	ldr	r1, [pc, #124]	; (80024c0 <HAL_UART_RxCpltCallback+0xcc>)
 8002444:	481d      	ldr	r0, [pc, #116]	; (80024bc <HAL_UART_RxCpltCallback+0xc8>)
 8002446:	f003 f824 	bl	8005492 <HAL_UART_Receive_IT>
 800244a:	e033      	b.n	80024b4 <HAL_UART_RxCpltCallback+0xc0>
    }

    else
    {
    	/****** Special Character Checking ***********/
    	if(rxByte == 'e' ){
 800244c:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <HAL_UART_RxCpltCallback+0xcc>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b65      	cmp	r3, #101	; 0x65
 8002452:	d11d      	bne.n	8002490 <HAL_UART_RxCpltCallback+0x9c>
		//sending encoder value through UART

		memset(sending_data,0,sizeof(sending_data));
 8002454:	2232      	movs	r2, #50	; 0x32
 8002456:	2100      	movs	r1, #0
 8002458:	481e      	ldr	r0, [pc, #120]	; (80024d4 <HAL_UART_RxCpltCallback+0xe0>)
 800245a:	f004 f85f 	bl	800651c <memset>
		sprintf(sending_data,"%ld\n",__HAL_TIM_GET_COUNTER(&htim2) );
 800245e:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <HAL_UART_RxCpltCallback+0xe4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	461a      	mov	r2, r3
 8002466:	491d      	ldr	r1, [pc, #116]	; (80024dc <HAL_UART_RxCpltCallback+0xe8>)
 8002468:	481a      	ldr	r0, [pc, #104]	; (80024d4 <HAL_UART_RxCpltCallback+0xe0>)
 800246a:	f004 fe2f 	bl	80070cc <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 800246e:	4819      	ldr	r0, [pc, #100]	; (80024d4 <HAL_UART_RxCpltCallback+0xe0>)
 8002470:	f7fd fed8 	bl	8000224 <strlen>
 8002474:	4603      	mov	r3, r0
 8002476:	b29a      	uxth	r2, r3
 8002478:	f04f 33ff 	mov.w	r3, #4294967295
 800247c:	4915      	ldr	r1, [pc, #84]	; (80024d4 <HAL_UART_RxCpltCallback+0xe0>)
 800247e:	480f      	ldr	r0, [pc, #60]	; (80024bc <HAL_UART_RxCpltCallback+0xc8>)
 8002480:	f002 ff75 	bl	800536e <HAL_UART_Transmit>


		 /* Restart the UART Interrupt */
		HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8002484:	2201      	movs	r2, #1
 8002486:	490e      	ldr	r1, [pc, #56]	; (80024c0 <HAL_UART_RxCpltCallback+0xcc>)
 8002488:	480c      	ldr	r0, [pc, #48]	; (80024bc <HAL_UART_RxCpltCallback+0xc8>)
 800248a:	f003 f802 	bl	8005492 <HAL_UART_Receive_IT>

		return;
 800248e:	e011      	b.n	80024b4 <HAL_UART_RxCpltCallback+0xc0>
    	}

        /* Add the character to the buffer */
        RxBuffer[RxIndex] = rxByte;
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <HAL_UART_RxCpltCallback+0xd0>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	461a      	mov	r2, r3
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <HAL_UART_RxCpltCallback+0xcc>)
 8002498:	7819      	ldrb	r1, [r3, #0]
 800249a:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <HAL_UART_RxCpltCallback+0xd8>)
 800249c:	5499      	strb	r1, [r3, r2]
        RxIndex++;
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_UART_RxCpltCallback+0xd0>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <HAL_UART_RxCpltCallback+0xd0>)
 80024a8:	701a      	strb	r2, [r3, #0]

        /* Restart the UART Interrupt */
        HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 80024aa:	2201      	movs	r2, #1
 80024ac:	4904      	ldr	r1, [pc, #16]	; (80024c0 <HAL_UART_RxCpltCallback+0xcc>)
 80024ae:	4803      	ldr	r0, [pc, #12]	; (80024bc <HAL_UART_RxCpltCallback+0xc8>)
 80024b0:	f002 ffef 	bl	8005492 <HAL_UART_Receive_IT>

    }

	}
}
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000418 	.word	0x20000418
 80024c0:	200009a6 	.word	0x200009a6
 80024c4:	200009a4 	.word	0x200009a4
 80024c8:	200009a5 	.word	0x200009a5
 80024cc:	20000918 	.word	0x20000918
 80024d0:	2000045c 	.word	0x2000045c
 80024d4:	20000024 	.word	0x20000024
 80024d8:	20000340 	.word	0x20000340
 80024dc:	0800ad1c 	.word	0x0800ad1c

080024e0 <__delay_ms>:



void __delay_ms(int32_t k){
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	int32_t i,j;
	for(i=0;i<k;i++)
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	e00d      	b.n	800250a <__delay_ms+0x2a>
		for(j=0;j<3000;j++){}
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	e002      	b.n	80024fa <__delay_ms+0x1a>
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	3301      	adds	r3, #1
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002500:	4293      	cmp	r3, r2
 8002502:	ddf7      	ble.n	80024f4 <__delay_ms+0x14>
	for(i=0;i<k;i++)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	3301      	adds	r3, #1
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	429a      	cmp	r2, r3
 8002510:	dbed      	blt.n	80024ee <__delay_ms+0xe>
}
 8002512:	bf00      	nop
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002524:	b672      	cpsid	i
}
 8002526:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  //sending the ready status
	memset(sending_data,0,sizeof(sending_data));
 8002528:	2232      	movs	r2, #50	; 0x32
 800252a:	2100      	movs	r1, #0
 800252c:	4809      	ldr	r0, [pc, #36]	; (8002554 <Error_Handler+0x34>)
 800252e:	f003 fff5 	bl	800651c <memset>
	sprintf(sending_data,"ERROR");
 8002532:	4909      	ldr	r1, [pc, #36]	; (8002558 <Error_Handler+0x38>)
 8002534:	4807      	ldr	r0, [pc, #28]	; (8002554 <Error_Handler+0x34>)
 8002536:	f004 fdc9 	bl	80070cc <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 800253a:	4806      	ldr	r0, [pc, #24]	; (8002554 <Error_Handler+0x34>)
 800253c:	f7fd fe72 	bl	8000224 <strlen>
 8002540:	4603      	mov	r3, r0
 8002542:	b29a      	uxth	r2, r3
 8002544:	f04f 33ff 	mov.w	r3, #4294967295
 8002548:	4902      	ldr	r1, [pc, #8]	; (8002554 <Error_Handler+0x34>)
 800254a:	4804      	ldr	r0, [pc, #16]	; (800255c <Error_Handler+0x3c>)
 800254c:	f002 ff0f 	bl	800536e <HAL_UART_Transmit>
	memset(sending_data,0,sizeof(sending_data));
 8002550:	e7ea      	b.n	8002528 <Error_Handler+0x8>
 8002552:	bf00      	nop
 8002554:	20000024 	.word	0x20000024
 8002558:	0800ad24 	.word	0x0800ad24
 800255c:	20000418 	.word	0x20000418

08002560 <moveTo>:




void moveTo(int32_t absolute)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	absolute  = (absolute<min_pos) ? min_pos :( (absolute<max_pos) ? absolute : max_pos );
 8002568:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <moveTo+0x44>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	429a      	cmp	r2, r3
 8002570:	db06      	blt.n	8002580 <moveTo+0x20>
 8002572:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <moveTo+0x48>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4293      	cmp	r3, r2
 800257a:	bfa8      	it	ge
 800257c:	4613      	movge	r3, r2
 800257e:	e001      	b.n	8002584 <moveTo+0x24>
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <moveTo+0x44>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	607b      	str	r3, [r7, #4]
    if (_targetPos != absolute)
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <moveTo+0x4c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	429a      	cmp	r2, r3
 800258e:	d004      	beq.n	800259a <moveTo+0x3a>
    {
	_targetPos = absolute;
 8002590:	4a06      	ldr	r2, [pc, #24]	; (80025ac <moveTo+0x4c>)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6013      	str	r3, [r2, #0]
	computeNewSpeed();
 8002596:	f000 f935 	bl	8002804 <computeNewSpeed>
	// compute new n?
    }
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200009a8 	.word	0x200009a8
 80025a8:	2000005c 	.word	0x2000005c
 80025ac:	200009d0 	.word	0x200009d0

080025b0 <move>:

void move(int32_t relative)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
    moveTo(_currentPos + relative);
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <move+0x20>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4413      	add	r3, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ffcd 	bl	8002560 <moveTo>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200009cc 	.word	0x200009cc

080025d4 <stepper_setup>:

void stepper_setup(GPIO_TypeDef*_step_port,uint16_t _step_pin, GPIO_TypeDef*  _dir_port,uint16_t _dir_pin ){
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	461a      	mov	r2, r3
 80025e0:	460b      	mov	r3, r1
 80025e2:	817b      	strh	r3, [r7, #10]
 80025e4:	4613      	mov	r3, r2
 80025e6:	813b      	strh	r3, [r7, #8]


	step_port = _step_port;
 80025e8:	4a33      	ldr	r2, [pc, #204]	; (80026b8 <stepper_setup+0xe4>)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6013      	str	r3, [r2, #0]
	step_pin = _step_pin;
 80025ee:	4a33      	ldr	r2, [pc, #204]	; (80026bc <stepper_setup+0xe8>)
 80025f0:	897b      	ldrh	r3, [r7, #10]
 80025f2:	8013      	strh	r3, [r2, #0]
	dir_port = _dir_port;
 80025f4:	4a32      	ldr	r2, [pc, #200]	; (80026c0 <stepper_setup+0xec>)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6013      	str	r3, [r2, #0]
	dir_pin = _dir_pin;
 80025fa:	4a32      	ldr	r2, [pc, #200]	; (80026c4 <stepper_setup+0xf0>)
 80025fc:	893b      	ldrh	r3, [r7, #8]
 80025fe:	8013      	strh	r3, [r2, #0]


	_stepInterval = 0;
 8002600:	4b31      	ldr	r3, [pc, #196]	; (80026c8 <stepper_setup+0xf4>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
	_minPulseWidth = 1;
 8002606:	4b31      	ldr	r3, [pc, #196]	; (80026cc <stepper_setup+0xf8>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]
	_currentPos = 0;
 800260c:	4b30      	ldr	r3, [pc, #192]	; (80026d0 <stepper_setup+0xfc>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
	_targetPos = 0;
 8002612:	4b30      	ldr	r3, [pc, #192]	; (80026d4 <stepper_setup+0x100>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
	_speed = 0.0;
 8002618:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <stepper_setup+0x104>)
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
	_maxSpeed = 30.0;
 8002620:	4b2e      	ldr	r3, [pc, #184]	; (80026dc <stepper_setup+0x108>)
 8002622:	4a2f      	ldr	r2, [pc, #188]	; (80026e0 <stepper_setup+0x10c>)
 8002624:	601a      	str	r2, [r3, #0]
	_acceleration = 0.0;
 8002626:	4b2f      	ldr	r3, [pc, #188]	; (80026e4 <stepper_setup+0x110>)
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
	_sqrt_twoa = 1.0;
 800262e:	4b2e      	ldr	r3, [pc, #184]	; (80026e8 <stepper_setup+0x114>)
 8002630:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002634:	601a      	str	r2, [r3, #0]
	_stepInterval = 0;
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <stepper_setup+0xf4>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
	_minPulseWidth = 1;
 800263c:	4b23      	ldr	r3, [pc, #140]	; (80026cc <stepper_setup+0xf8>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]
	_enablePin = 0xff;
 8002642:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <stepper_setup+0x118>)
 8002644:	22ff      	movs	r2, #255	; 0xff
 8002646:	701a      	strb	r2, [r3, #0]
	_lastStepTime = 0;
 8002648:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <stepper_setup+0x11c>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]




	// NEW
	_n = 0;
 800264e:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <stepper_setup+0x120>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
	_c0 = 0.0;
 8002654:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <stepper_setup+0x124>)
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
	_cn = 0.0;
 800265c:	4b27      	ldr	r3, [pc, #156]	; (80026fc <stepper_setup+0x128>)
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
	_cmin = 1.0;
 8002664:	4b26      	ldr	r3, [pc, #152]	; (8002700 <stepper_setup+0x12c>)
 8002666:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800266a:	601a      	str	r2, [r3, #0]
	_direction = DIRECTION_CCW;
 800266c:	4b25      	ldr	r3, [pc, #148]	; (8002704 <stepper_setup+0x130>)
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]

	int i;
	for (i = 0; i < 4; i++)
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	e007      	b.n	8002688 <stepper_setup+0xb4>
	_pinInverted[i] = 0;
 8002678:	4a23      	ldr	r2, [pc, #140]	; (8002708 <stepper_setup+0x134>)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	4413      	add	r3, r2
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 4; i++)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3301      	adds	r3, #1
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2b03      	cmp	r3, #3
 800268c:	ddf4      	ble.n	8002678 <stepper_setup+0xa4>


	for (i = 0; i < 4; i++)
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	e007      	b.n	80026a4 <stepper_setup+0xd0>
	_pinInverted[i] = 0;
 8002694:	4a1c      	ldr	r2, [pc, #112]	; (8002708 <stepper_setup+0x134>)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	4413      	add	r3, r2
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 4; i++)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	3301      	adds	r3, #1
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	ddf4      	ble.n	8002694 <stepper_setup+0xc0>

}
 80026aa:	bf00      	nop
 80026ac:	bf00      	nop
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	200009b4 	.word	0x200009b4
 80026bc:	200009b8 	.word	0x200009b8
 80026c0:	200009bc 	.word	0x200009bc
 80026c4:	200009c0 	.word	0x200009c0
 80026c8:	200009c4 	.word	0x200009c4
 80026cc:	200009e8 	.word	0x200009e8
 80026d0:	200009cc 	.word	0x200009cc
 80026d4:	200009d0 	.word	0x200009d0
 80026d8:	200009d4 	.word	0x200009d4
 80026dc:	200009d8 	.word	0x200009d8
 80026e0:	41f00000 	.word	0x41f00000
 80026e4:	200009dc 	.word	0x200009dc
 80026e8:	200009e0 	.word	0x200009e0
 80026ec:	200009ec 	.word	0x200009ec
 80026f0:	200009e4 	.word	0x200009e4
 80026f4:	200009f0 	.word	0x200009f0
 80026f8:	200009f4 	.word	0x200009f4
 80026fc:	200009f8 	.word	0x200009f8
 8002700:	200009fc 	.word	0x200009fc
 8002704:	200009c2 	.word	0x200009c2
 8002708:	200009c8 	.word	0x200009c8

0800270c <runSpeed>:


_Bool runSpeed()
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
    // Dont do anything unless we actually have a step interval
    if (!_stepInterval)
 8002712:	4b17      	ldr	r3, [pc, #92]	; (8002770 <runSpeed+0x64>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <runSpeed+0x12>
	return false;
 800271a:	2300      	movs	r3, #0
 800271c:	e023      	b.n	8002766 <runSpeed+0x5a>

    uint32_t time =  __HAL_TIM_GET_COUNTER(&htim6);
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <runSpeed+0x68>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	607b      	str	r3, [r7, #4]
    if (time  >= _stepInterval)
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <runSpeed+0x64>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	429a      	cmp	r2, r3
 800272e:	d319      	bcc.n	8002764 <runSpeed+0x58>
    {
	if (_direction == DIRECTION_CW)
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <runSpeed+0x6c>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <runSpeed+0x38>
	{
	    // Clockwise
	    _currentPos += 1;
 8002738:	4b10      	ldr	r3, [pc, #64]	; (800277c <runSpeed+0x70>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	4a0f      	ldr	r2, [pc, #60]	; (800277c <runSpeed+0x70>)
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e004      	b.n	800274e <runSpeed+0x42>
	}
	else
	{
	    // Anticlockwise
	    _currentPos -= 1;
 8002744:	4b0d      	ldr	r3, [pc, #52]	; (800277c <runSpeed+0x70>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3b01      	subs	r3, #1
 800274a:	4a0c      	ldr	r2, [pc, #48]	; (800277c <runSpeed+0x70>)
 800274c:	6013      	str	r3, [r2, #0]
	}

	step(_currentPos);
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <runSpeed+0x70>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fb5a 	bl	8002e0c <step>

	__HAL_TIM_SET_COUNTER(&htim6,0); //resetting the timer
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <runSpeed+0x68>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2200      	movs	r2, #0
 800275e:	625a      	str	r2, [r3, #36]	; 0x24
	//_lastStepTime = time; // Caution: does not account for costs in step()

	return true;
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <runSpeed+0x5a>
    }
    else
    {
	return false;
 8002764:	2300      	movs	r3, #0
    }
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200009c4 	.word	0x200009c4
 8002774:	20000388 	.word	0x20000388
 8002778:	200009c2 	.word	0x200009c2
 800277c:	200009cc 	.word	0x200009cc

08002780 <distanceToGo>:

int32_t distanceToGo()
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
    return _targetPos - _currentPos;
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <distanceToGo+0x18>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <distanceToGo+0x1c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	1ad3      	subs	r3, r2, r3
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	200009d0 	.word	0x200009d0
 800279c:	200009cc 	.word	0x200009cc

080027a0 <currentPosition>:
{
    return _targetPos;
}

int32_t currentPosition()
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
    return _currentPos;
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <currentPosition+0x14>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	200009cc 	.word	0x200009cc

080027b8 <setCurrentPosition>:

void setCurrentPosition(int32_t position)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
    _targetPos = _currentPos = position;
 80027c0:	4a0b      	ldr	r2, [pc, #44]	; (80027f0 <setCurrentPosition+0x38>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <setCurrentPosition+0x38>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <setCurrentPosition+0x3c>)
 80027cc:	6013      	str	r3, [r2, #0]
    _n = 0;
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <setCurrentPosition+0x40>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
    _stepInterval = 0;
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <setCurrentPosition+0x44>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
    _speed = 0.0;
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <setCurrentPosition+0x48>)
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	200009cc 	.word	0x200009cc
 80027f4:	200009d0 	.word	0x200009d0
 80027f8:	200009f0 	.word	0x200009f0
 80027fc:	200009c4 	.word	0x200009c4
 8002800:	200009d4 	.word	0x200009d4

08002804 <computeNewSpeed>:

uint32_t computeNewSpeed()
{
 8002804:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
    int32_t distanceTo = distanceToGo(); // +ve is clockwise from curent location
 800280c:	f7ff ffb8 	bl	8002780 <distanceToGo>
 8002810:	6078      	str	r0, [r7, #4]

    int32_t stepsToStop = (int32_t)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
 8002812:	4b8c      	ldr	r3, [pc, #560]	; (8002a44 <computeNewSpeed+0x240>)
 8002814:	ed93 7a00 	vldr	s14, [r3]
 8002818:	4b8a      	ldr	r3, [pc, #552]	; (8002a44 <computeNewSpeed+0x240>)
 800281a:	edd3 7a00 	vldr	s15, [r3]
 800281e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002822:	ee17 0a90 	vmov	r0, s15
 8002826:	f7fd febf 	bl	80005a8 <__aeabi_f2d>
 800282a:	4604      	mov	r4, r0
 800282c:	460d      	mov	r5, r1
 800282e:	4b86      	ldr	r3, [pc, #536]	; (8002a48 <computeNewSpeed+0x244>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd feb8 	bl	80005a8 <__aeabi_f2d>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	f7fd fd56 	bl	80002ec <__adddf3>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4620      	mov	r0, r4
 8002846:	4629      	mov	r1, r5
 8002848:	f7fe f830 	bl	80008ac <__aeabi_ddiv>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	f7fe f9b0 	bl	8000bb8 <__aeabi_d2iz>
 8002858:	4603      	mov	r3, r0
 800285a:	603b      	str	r3, [r7, #0]

    if (distanceTo == 0 && stepsToStop <= 1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10f      	bne.n	8002882 <computeNewSpeed+0x7e>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b01      	cmp	r3, #1
 8002866:	dc0c      	bgt.n	8002882 <computeNewSpeed+0x7e>
    {
	// We are at the target and its time to stop
	_stepInterval = 0;
 8002868:	4b78      	ldr	r3, [pc, #480]	; (8002a4c <computeNewSpeed+0x248>)
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
	_speed = 0.0;
 800286e:	4b75      	ldr	r3, [pc, #468]	; (8002a44 <computeNewSpeed+0x240>)
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
	_n = 0;
 8002876:	4b76      	ldr	r3, [pc, #472]	; (8002a50 <computeNewSpeed+0x24c>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
	return _stepInterval;
 800287c:	4b73      	ldr	r3, [pc, #460]	; (8002a4c <computeNewSpeed+0x248>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	e0da      	b.n	8002a38 <computeNewSpeed+0x234>
    }

    if (distanceTo > 0)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	dd25      	ble.n	80028d4 <computeNewSpeed+0xd0>
    {
	// We are anti clockwise from the target
	// Need to go clockwise from here, maybe decelerate now
	if (_n > 0)
 8002888:	4b71      	ldr	r3, [pc, #452]	; (8002a50 <computeNewSpeed+0x24c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	dd0f      	ble.n	80028b0 <computeNewSpeed+0xac>
	{
	    // Currently accelerating, need to decel now? Or maybe going the wrong way?
	    if ((stepsToStop >= distanceTo) || _direction == DIRECTION_CCW)
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	429a      	cmp	r2, r3
 8002896:	da06      	bge.n	80028a6 <computeNewSpeed+0xa2>
 8002898:	4b6e      	ldr	r3, [pc, #440]	; (8002a54 <computeNewSpeed+0x250>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	f083 0301 	eor.w	r3, r3, #1
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d040      	beq.n	8002928 <computeNewSpeed+0x124>
		_n = -stepsToStop; // Start deceleration
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	425b      	negs	r3, r3
 80028aa:	4a69      	ldr	r2, [pc, #420]	; (8002a50 <computeNewSpeed+0x24c>)
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e03b      	b.n	8002928 <computeNewSpeed+0x124>
	}
	else if (_n < 0)
 80028b0:	4b67      	ldr	r3, [pc, #412]	; (8002a50 <computeNewSpeed+0x24c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	da37      	bge.n	8002928 <computeNewSpeed+0x124>
	{
	    // Currently decelerating, need to accel again?
	    if ((stepsToStop < distanceTo) && _direction == DIRECTION_CW)
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	429a      	cmp	r2, r3
 80028be:	da33      	bge.n	8002928 <computeNewSpeed+0x124>
 80028c0:	4b64      	ldr	r3, [pc, #400]	; (8002a54 <computeNewSpeed+0x250>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d02f      	beq.n	8002928 <computeNewSpeed+0x124>
		_n = -_n; // Start accceleration
 80028c8:	4b61      	ldr	r3, [pc, #388]	; (8002a50 <computeNewSpeed+0x24c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	425b      	negs	r3, r3
 80028ce:	4a60      	ldr	r2, [pc, #384]	; (8002a50 <computeNewSpeed+0x24c>)
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e029      	b.n	8002928 <computeNewSpeed+0x124>
	}
    }
    else if (distanceTo < 0)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	da26      	bge.n	8002928 <computeNewSpeed+0x124>
    {
	// We are clockwise from the target
	// Need to go anticlockwise from here, maybe decelerate
	if (_n > 0)
 80028da:	4b5d      	ldr	r3, [pc, #372]	; (8002a50 <computeNewSpeed+0x24c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	dd0d      	ble.n	80028fe <computeNewSpeed+0xfa>
	{
	    // Currently accelerating, need to decel now? Or maybe going the wrong way?
	    if ((stepsToStop >= -distanceTo) || _direction == DIRECTION_CW)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	425b      	negs	r3, r3
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	da03      	bge.n	80028f4 <computeNewSpeed+0xf0>
 80028ec:	4b59      	ldr	r3, [pc, #356]	; (8002a54 <computeNewSpeed+0x250>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d019      	beq.n	8002928 <computeNewSpeed+0x124>
		_n = -stepsToStop; // Start deceleration
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	425b      	negs	r3, r3
 80028f8:	4a55      	ldr	r2, [pc, #340]	; (8002a50 <computeNewSpeed+0x24c>)
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	e014      	b.n	8002928 <computeNewSpeed+0x124>
	}
	else if (_n < 0)
 80028fe:	4b54      	ldr	r3, [pc, #336]	; (8002a50 <computeNewSpeed+0x24c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	da10      	bge.n	8002928 <computeNewSpeed+0x124>
	{
	    // Currently decelerating, need to accel again?
	    if ((stepsToStop < -distanceTo) && _direction == DIRECTION_CCW)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	425b      	negs	r3, r3
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	da0b      	bge.n	8002928 <computeNewSpeed+0x124>
 8002910:	4b50      	ldr	r3, [pc, #320]	; (8002a54 <computeNewSpeed+0x250>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	f083 0301 	eor.w	r3, r3, #1
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d004      	beq.n	8002928 <computeNewSpeed+0x124>
		_n = -_n; // Start accceleration
 800291e:	4b4c      	ldr	r3, [pc, #304]	; (8002a50 <computeNewSpeed+0x24c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	425b      	negs	r3, r3
 8002924:	4a4a      	ldr	r2, [pc, #296]	; (8002a50 <computeNewSpeed+0x24c>)
 8002926:	6013      	str	r3, [r2, #0]
	}
    }

    // Need to accelerate or decelerate
    if (_n == 0)
 8002928:	4b49      	ldr	r3, [pc, #292]	; (8002a50 <computeNewSpeed+0x24c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10c      	bne.n	800294a <computeNewSpeed+0x146>
    {
	// First step from stopped
	_cn = _c0;
 8002930:	4b49      	ldr	r3, [pc, #292]	; (8002a58 <computeNewSpeed+0x254>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a49      	ldr	r2, [pc, #292]	; (8002a5c <computeNewSpeed+0x258>)
 8002936:	6013      	str	r3, [r2, #0]
	_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	bfcc      	ite	gt
 800293e:	2301      	movgt	r3, #1
 8002940:	2300      	movle	r3, #0
 8002942:	b2da      	uxtb	r2, r3
 8002944:	4b43      	ldr	r3, [pc, #268]	; (8002a54 <computeNewSpeed+0x250>)
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	e04d      	b.n	80029e6 <computeNewSpeed+0x1e2>
    }
    else
    {
	// Subsequent step. Works for accel (n is +_ve) and decel (n is -ve).
	_cn = _cn - ((2.0 * _cn) / ((4.0 * _n) + 1)); // Equation 13
 800294a:	4b44      	ldr	r3, [pc, #272]	; (8002a5c <computeNewSpeed+0x258>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fd fe2a 	bl	80005a8 <__aeabi_f2d>
 8002954:	4604      	mov	r4, r0
 8002956:	460d      	mov	r5, r1
 8002958:	4b40      	ldr	r3, [pc, #256]	; (8002a5c <computeNewSpeed+0x258>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fd fe23 	bl	80005a8 <__aeabi_f2d>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	f7fd fcc1 	bl	80002ec <__adddf3>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4690      	mov	r8, r2
 8002970:	4699      	mov	r9, r3
 8002972:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <computeNewSpeed+0x24c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fe04 	bl	8000584 <__aeabi_i2d>
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	4b37      	ldr	r3, [pc, #220]	; (8002a60 <computeNewSpeed+0x25c>)
 8002982:	f7fd fe69 	bl	8000658 <__aeabi_dmul>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	4b34      	ldr	r3, [pc, #208]	; (8002a64 <computeNewSpeed+0x260>)
 8002994:	f7fd fcaa 	bl	80002ec <__adddf3>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4640      	mov	r0, r8
 800299e:	4649      	mov	r1, r9
 80029a0:	f7fd ff84 	bl	80008ac <__aeabi_ddiv>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4620      	mov	r0, r4
 80029aa:	4629      	mov	r1, r5
 80029ac:	f7fd fc9c 	bl	80002e8 <__aeabi_dsub>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4610      	mov	r0, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	f7fe f946 	bl	8000c48 <__aeabi_d2f>
 80029bc:	4603      	mov	r3, r0
 80029be:	4a27      	ldr	r2, [pc, #156]	; (8002a5c <computeNewSpeed+0x258>)
 80029c0:	6013      	str	r3, [r2, #0]
	_cn = _cn >_cmin ? _cn:_cmin; // max(_cn,_cmin)
 80029c2:	4b26      	ldr	r3, [pc, #152]	; (8002a5c <computeNewSpeed+0x258>)
 80029c4:	ed93 7a00 	vldr	s14, [r3]
 80029c8:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <computeNewSpeed+0x264>)
 80029ca:	edd3 7a00 	vldr	s15, [r3]
 80029ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d6:	dd02      	ble.n	80029de <computeNewSpeed+0x1da>
 80029d8:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <computeNewSpeed+0x258>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	e001      	b.n	80029e2 <computeNewSpeed+0x1de>
 80029de:	4b22      	ldr	r3, [pc, #136]	; (8002a68 <computeNewSpeed+0x264>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a1e      	ldr	r2, [pc, #120]	; (8002a5c <computeNewSpeed+0x258>)
 80029e4:	6013      	str	r3, [r2, #0]
    }
    _n++;
 80029e6:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <computeNewSpeed+0x24c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3301      	adds	r3, #1
 80029ec:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <computeNewSpeed+0x24c>)
 80029ee:	6013      	str	r3, [r2, #0]
    _stepInterval = _cn;
 80029f0:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <computeNewSpeed+0x258>)
 80029f2:	edd3 7a00 	vldr	s15, [r3]
 80029f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029fa:	ee17 2a90 	vmov	r2, s15
 80029fe:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <computeNewSpeed+0x248>)
 8002a00:	601a      	str	r2, [r3, #0]
    _speed = 1000000.0 / _cn;
 8002a02:	4b16      	ldr	r3, [pc, #88]	; (8002a5c <computeNewSpeed+0x258>)
 8002a04:	ed93 7a00 	vldr	s14, [r3]
 8002a08:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002a6c <computeNewSpeed+0x268>
 8002a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <computeNewSpeed+0x240>)
 8002a12:	edc3 7a00 	vstr	s15, [r3]
    if (_direction == DIRECTION_CCW)
 8002a16:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <computeNewSpeed+0x250>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	f083 0301 	eor.w	r3, r3, #1
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <computeNewSpeed+0x230>
	_speed = -_speed;
 8002a24:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <computeNewSpeed+0x240>)
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	eef1 7a67 	vneg.f32	s15, s15
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <computeNewSpeed+0x240>)
 8002a30:	edc3 7a00 	vstr	s15, [r3]
    Serial.println(_stepInterval);
    Serial.println(distanceTo);
    Serial.println(stepsToStop);
    Serial.println("-----");
#endif
    return _stepInterval;
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <computeNewSpeed+0x248>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a42:	bf00      	nop
 8002a44:	200009d4 	.word	0x200009d4
 8002a48:	200009dc 	.word	0x200009dc
 8002a4c:	200009c4 	.word	0x200009c4
 8002a50:	200009f0 	.word	0x200009f0
 8002a54:	200009c2 	.word	0x200009c2
 8002a58:	200009f4 	.word	0x200009f4
 8002a5c:	200009f8 	.word	0x200009f8
 8002a60:	40100000 	.word	0x40100000
 8002a64:	3ff00000 	.word	0x3ff00000
 8002a68:	200009fc 	.word	0x200009fc
 8002a6c:	49742400 	.word	0x49742400

08002a70 <run>:
// Run the motor to implement speed and acceleration in order to proceed to the target position
// You must call this at least once per step, preferably in your main loop
// If the motor is in the desired position, the cost is very small
// returns true if the motor is still running to the target position.
_Bool run()
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
    if (runSpeed())
 8002a74:	f7ff fe4a 	bl	800270c <runSpeed>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <run+0x12>
	computeNewSpeed();
 8002a7e:	f7ff fec1 	bl	8002804 <computeNewSpeed>
    return _speed != 0.0 || distanceToGo() != 0;
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <run+0x3c>)
 8002a84:	edd3 7a00 	vldr	s15, [r3]
 8002a88:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a90:	d104      	bne.n	8002a9c <run+0x2c>
 8002a92:	f7ff fe75 	bl	8002780 <distanceToGo>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <run+0x30>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <run+0x32>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	b2db      	uxtb	r3, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	200009d4 	.word	0x200009d4

08002ab0 <setMaxSpeed>:


void setMaxSpeed(float speed)
{
 8002ab0:	b5b0      	push	{r4, r5, r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	ed87 0a01 	vstr	s0, [r7, #4]
    if (speed < 0.0)
 8002aba:	edd7 7a01 	vldr	s15, [r7, #4]
 8002abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac6:	d505      	bpl.n	8002ad4 <setMaxSpeed+0x24>
       speed = -speed;
 8002ac8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002acc:	eef1 7a67 	vneg.f32	s15, s15
 8002ad0:	edc7 7a01 	vstr	s15, [r7, #4]
    if (_maxSpeed != speed)
 8002ad4:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <setMaxSpeed+0xb0>)
 8002ad6:	edd3 7a00 	vldr	s15, [r3]
 8002ada:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ade:	eeb4 7a67 	vcmp.f32	s14, s15
 8002ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae6:	d037      	beq.n	8002b58 <setMaxSpeed+0xa8>
    {
	_maxSpeed = speed;
 8002ae8:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <setMaxSpeed+0xb0>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6013      	str	r3, [r2, #0]
	_cmin = 1000000.0 / speed;
 8002aee:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002b64 <setMaxSpeed+0xb4>
 8002af2:	ed97 7a01 	vldr	s14, [r7, #4]
 8002af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002afa:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <setMaxSpeed+0xb8>)
 8002afc:	edc3 7a00 	vstr	s15, [r3]
	// Recompute _n from current speed and adjust speed if accelerating or cruising
	if (_n > 0)
 8002b00:	4b1a      	ldr	r3, [pc, #104]	; (8002b6c <setMaxSpeed+0xbc>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	dd27      	ble.n	8002b58 <setMaxSpeed+0xa8>
	{
	    _n = (int32_t)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <setMaxSpeed+0xc0>)
 8002b0a:	ed93 7a00 	vldr	s14, [r3]
 8002b0e:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <setMaxSpeed+0xc0>)
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b18:	ee17 0a90 	vmov	r0, s15
 8002b1c:	f7fd fd44 	bl	80005a8 <__aeabi_f2d>
 8002b20:	4604      	mov	r4, r0
 8002b22:	460d      	mov	r5, r1
 8002b24:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <setMaxSpeed+0xc4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fd fd3d 	bl	80005a8 <__aeabi_f2d>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	f7fd fbdb 	bl	80002ec <__adddf3>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	f7fd feb5 	bl	80008ac <__aeabi_ddiv>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f7fe f835 	bl	8000bb8 <__aeabi_d2iz>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4a06      	ldr	r2, [pc, #24]	; (8002b6c <setMaxSpeed+0xbc>)
 8002b52:	6013      	str	r3, [r2, #0]
	    computeNewSpeed();
 8002b54:	f7ff fe56 	bl	8002804 <computeNewSpeed>
	}
    }
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b60:	200009d8 	.word	0x200009d8
 8002b64:	49742400 	.word	0x49742400
 8002b68:	200009fc 	.word	0x200009fc
 8002b6c:	200009f0 	.word	0x200009f0
 8002b70:	200009d4 	.word	0x200009d4
 8002b74:	200009dc 	.word	0x200009dc

08002b78 <setAcceleration>:
{
    return _maxSpeed;
}

void setAcceleration(float acceleration)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (acceleration == 0.0)
 8002b82:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8e:	d05f      	beq.n	8002c50 <setAcceleration+0xd8>
	return;
    if (acceleration < 0.0)
 8002b90:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9c:	d505      	bpl.n	8002baa <setAcceleration+0x32>
      acceleration = -acceleration;
 8002b9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ba2:	eef1 7a67 	vneg.f32	s15, s15
 8002ba6:	edc7 7a01 	vstr	s15, [r7, #4]
    if (_acceleration != acceleration)
 8002baa:	4b2f      	ldr	r3, [pc, #188]	; (8002c68 <setAcceleration+0xf0>)
 8002bac:	edd3 7a00 	vldr	s15, [r3]
 8002bb0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002bb4:	eeb4 7a67 	vcmp.f32	s14, s15
 8002bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbc:	d049      	beq.n	8002c52 <setAcceleration+0xda>
    {
	// Recompute _n per Equation 17
	_n = _n * (_acceleration / acceleration);
 8002bbe:	4b2b      	ldr	r3, [pc, #172]	; (8002c6c <setAcceleration+0xf4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	ee07 3a90 	vmov	s15, r3
 8002bc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bca:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <setAcceleration+0xf0>)
 8002bcc:	ed93 6a00 	vldr	s12, [r3]
 8002bd0:	edd7 6a01 	vldr	s13, [r7, #4]
 8002bd4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002be0:	ee17 2a90 	vmov	r2, s15
 8002be4:	4b21      	ldr	r3, [pc, #132]	; (8002c6c <setAcceleration+0xf4>)
 8002be6:	601a      	str	r2, [r3, #0]
	// New c0 per Equation 7, with correction per Equation 15
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7fd fcdd 	bl	80005a8 <__aeabi_f2d>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	f04f 0000 	mov.w	r0, #0
 8002bf6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002bfa:	f7fd fe57 	bl	80008ac <__aeabi_ddiv>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	ec43 2b17 	vmov	d7, r2, r3
 8002c06:	eeb0 0a47 	vmov.f32	s0, s14
 8002c0a:	eef0 0a67 	vmov.f32	s1, s15
 8002c0e:	f007 ff2b 	bl	800aa68 <sqrt>
 8002c12:	ec51 0b10 	vmov	r0, r1, d0
 8002c16:	a310      	add	r3, pc, #64	; (adr r3, 8002c58 <setAcceleration+0xe0>)
 8002c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1c:	f7fd fd1c 	bl	8000658 <__aeabi_dmul>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	a30d      	add	r3, pc, #52	; (adr r3, 8002c60 <setAcceleration+0xe8>)
 8002c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2e:	f7fd fd13 	bl	8000658 <__aeabi_dmul>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4610      	mov	r0, r2
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f7fe f805 	bl	8000c48 <__aeabi_d2f>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	4a0b      	ldr	r2, [pc, #44]	; (8002c70 <setAcceleration+0xf8>)
 8002c42:	6013      	str	r3, [r2, #0]
	_acceleration = acceleration;
 8002c44:	4a08      	ldr	r2, [pc, #32]	; (8002c68 <setAcceleration+0xf0>)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6013      	str	r3, [r2, #0]
	computeNewSpeed();
 8002c4a:	f7ff fddb 	bl	8002804 <computeNewSpeed>
 8002c4e:	e000      	b.n	8002c52 <setAcceleration+0xda>
	return;
 8002c50:	bf00      	nop
    }
}
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	c083126f 	.word	0xc083126f
 8002c5c:	3fe5a1ca 	.word	0x3fe5a1ca
 8002c60:	00000000 	.word	0x00000000
 8002c64:	412e8480 	.word	0x412e8480
 8002c68:	200009dc 	.word	0x200009dc
 8002c6c:	200009f0 	.word	0x200009f0
 8002c70:	200009f4 	.word	0x200009f4
 8002c74:	00000000 	.word	0x00000000

08002c78 <setSpeed>:
{
    return _acceleration;
}

void setSpeed(float speed)
{
 8002c78:	b5b0      	push	{r4, r5, r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (speed == _speed)
 8002c82:	4b33      	ldr	r3, [pc, #204]	; (8002d50 <setSpeed+0xd8>)
 8002c84:	edd3 7a00 	vldr	s15, [r3]
 8002c88:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c8c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c94:	d054      	beq.n	8002d40 <setSpeed+0xc8>
        return;
    speed = (speed) > (-_maxSpeed) ? ( (speed < _maxSpeed)?(speed):(_maxSpeed) ) : (-_maxSpeed) ; //constrain(speed, -_maxSpeed, _maxSpeed);
 8002c96:	4b2f      	ldr	r3, [pc, #188]	; (8002d54 <setSpeed+0xdc>)
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	eef1 7a67 	vneg.f32	s15, s15
 8002ca0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ca4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cac:	dd10      	ble.n	8002cd0 <setSpeed+0x58>
 8002cae:	4b29      	ldr	r3, [pc, #164]	; (8002d54 <setSpeed+0xdc>)
 8002cb0:	edd3 7a00 	vldr	s15, [r3]
 8002cb4:	ed97 7a01 	vldr	s14, [r7, #4]
 8002cb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc0:	d502      	bpl.n	8002cc8 <setSpeed+0x50>
 8002cc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cc6:	e008      	b.n	8002cda <setSpeed+0x62>
 8002cc8:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <setSpeed+0xdc>)
 8002cca:	edd3 7a00 	vldr	s15, [r3]
 8002cce:	e004      	b.n	8002cda <setSpeed+0x62>
 8002cd0:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <setSpeed+0xdc>)
 8002cd2:	edd3 7a00 	vldr	s15, [r3]
 8002cd6:	eef1 7a67 	vneg.f32	s15, s15
 8002cda:	edc7 7a01 	vstr	s15, [r7, #4]

    if (speed == 0.0)
 8002cde:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ce2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cea:	d103      	bne.n	8002cf4 <setSpeed+0x7c>
	_stepInterval = 0;
 8002cec:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <setSpeed+0xe0>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e021      	b.n	8002d38 <setSpeed+0xc0>
    else
    {
	_stepInterval = fabs(1000000.0 / speed);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7fd fc57 	bl	80005a8 <__aeabi_f2d>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	a112      	add	r1, pc, #72	; (adr r1, 8002d48 <setSpeed+0xd0>)
 8002d00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d04:	f7fd fdd2 	bl	80008ac <__aeabi_ddiv>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4614      	mov	r4, r2
 8002d0e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002d12:	4620      	mov	r0, r4
 8002d14:	4629      	mov	r1, r5
 8002d16:	f7fd ff77 	bl	8000c08 <__aeabi_d2uiz>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4a0e      	ldr	r2, [pc, #56]	; (8002d58 <setSpeed+0xe0>)
 8002d1e:	6013      	str	r3, [r2, #0]
	_direction = (speed > 0.0) ? DIRECTION_CW : DIRECTION_CCW;
 8002d20:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2c:	bfcc      	ite	gt
 8002d2e:	2301      	movgt	r3, #1
 8002d30:	2300      	movle	r3, #0
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <setSpeed+0xe4>)
 8002d36:	701a      	strb	r2, [r3, #0]
    }
    _speed = speed;
 8002d38:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <setSpeed+0xd8>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e000      	b.n	8002d42 <setSpeed+0xca>
        return;
 8002d40:	bf00      	nop
    //added
//    computeNewSpeed();
}
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bdb0      	pop	{r4, r5, r7, pc}
 8002d48:	00000000 	.word	0x00000000
 8002d4c:	412e8480 	.word	0x412e8480
 8002d50:	200009d4 	.word	0x200009d4
 8002d54:	200009d8 	.word	0x200009d8
 8002d58:	200009c4 	.word	0x200009c4
 8002d5c:	200009c2 	.word	0x200009c2

08002d60 <setOutputPins>:

void setOutputPins(uint8_t mask)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
    uint8_t numpins = 2;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	73bb      	strb	r3, [r7, #14]

    uint8_t i;
    for (i = 0; i < numpins; i++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
 8002d72:	e038      	b.n	8002de6 <setOutputPins+0x86>
    	if(i==1){ //step pin
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d119      	bne.n	8002dae <setOutputPins+0x4e>
    		HAL_GPIO_WritePin( step_port, step_pin, (mask & (1 << i)) ? ( 1  ^ _pinInverted[i]) : (0 ^ _pinInverted[i]) );
 8002d7a:	4b1f      	ldr	r3, [pc, #124]	; (8002df8 <setOutputPins+0x98>)
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	4b1f      	ldr	r3, [pc, #124]	; (8002dfc <setOutputPins+0x9c>)
 8002d80:	8819      	ldrh	r1, [r3, #0]
 8002d82:	79fa      	ldrb	r2, [r7, #7]
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	fa42 f303 	asr.w	r3, r2, r3
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d006      	beq.n	8002da0 <setOutputPins+0x40>
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	4a1a      	ldr	r2, [pc, #104]	; (8002e00 <setOutputPins+0xa0>)
 8002d96:	5cd3      	ldrb	r3, [r2, r3]
 8002d98:	f083 0301 	eor.w	r3, r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e002      	b.n	8002da6 <setOutputPins+0x46>
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	4a17      	ldr	r2, [pc, #92]	; (8002e00 <setOutputPins+0xa0>)
 8002da4:	5cd3      	ldrb	r3, [r2, r3]
 8002da6:	461a      	mov	r2, r3
 8002da8:	f000 ff76 	bl	8003c98 <HAL_GPIO_WritePin>
 8002dac:	e018      	b.n	8002de0 <setOutputPins+0x80>
    	}
    	else{
    		HAL_GPIO_WritePin( dir_port, dir_pin, (mask & (1 << i)) ? ( 1  ^ _pinInverted[i]) : (0 ^ _pinInverted[i]) );
 8002dae:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <setOutputPins+0xa4>)
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <setOutputPins+0xa8>)
 8002db4:	8819      	ldrh	r1, [r3, #0]
 8002db6:	79fa      	ldrb	r2, [r7, #7]
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	fa42 f303 	asr.w	r3, r2, r3
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d006      	beq.n	8002dd4 <setOutputPins+0x74>
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	4a0d      	ldr	r2, [pc, #52]	; (8002e00 <setOutputPins+0xa0>)
 8002dca:	5cd3      	ldrb	r3, [r2, r3]
 8002dcc:	f083 0301 	eor.w	r3, r3, #1
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	e002      	b.n	8002dda <setOutputPins+0x7a>
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	4a0a      	ldr	r2, [pc, #40]	; (8002e00 <setOutputPins+0xa0>)
 8002dd8:	5cd3      	ldrb	r3, [r2, r3]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f000 ff5c 	bl	8003c98 <HAL_GPIO_WritePin>
    for (i = 0; i < numpins; i++)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	3301      	adds	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
 8002de6:	7bfa      	ldrb	r2, [r7, #15]
 8002de8:	7bbb      	ldrb	r3, [r7, #14]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d3c2      	bcc.n	8002d74 <setOutputPins+0x14>
    	}
}
 8002dee:	bf00      	nop
 8002df0:	bf00      	nop
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	200009b4 	.word	0x200009b4
 8002dfc:	200009b8 	.word	0x200009b8
 8002e00:	200009c8 	.word	0x200009c8
 8002e04:	200009bc 	.word	0x200009bc
 8002e08:	200009c0 	.word	0x200009c0

08002e0c <step>:
float speed()
{
    return _speed;
}

void step(uint32_t step){
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

	//making step with driver
	step1(step);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f805 	bl	8002e24 <step1>

}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <step1>:

// 1 pin step function (ie for stepper drivers)
// This is passed the current step number (0 to 7)
// Subclasses can override
void step1(uint32_t step)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	(void)(step); // Unused

	// _pin[0] is step, _pin[1] is direction
	setOutputPins(_direction ? 0b10 : 0b00); // Set direction first else get rogue pulses
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <step1+0x58>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <step1+0x14>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e000      	b.n	8002e3a <step1+0x16>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff90 	bl	8002d60 <setOutputPins>
	setOutputPins(_direction ? 0b11 : 0b01); // step HIGH
 8002e40:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <step1+0x58>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <step1+0x28>
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e000      	b.n	8002e4e <step1+0x2a>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff ff86 	bl	8002d60 <setOutputPins>
	// Caution 200ns setup time
	// Delay the minimum allowed pulse width

	delay_us(_minPulseWidth);
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <step1+0x5c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 f868 	bl	8002f30 <delay_us>
	setOutputPins(_direction ? 0b10 : 0b00); // step LOW
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <step1+0x58>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <step1+0x48>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e000      	b.n	8002e6e <step1+0x4a>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ff76 	bl	8002d60 <setOutputPins>
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	200009c2 	.word	0x200009c2
 8002e80:	200009e8 	.word	0x200009e8

08002e84 <runToPosition>:
    _pinInverted[1] = directionInvert;
    _enableInverted = enableInvert;
}

void runToPosition()
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
    while (run());
 8002e88:	bf00      	nop
 8002e8a:	f7ff fdf1 	bl	8002a70 <run>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1fa      	bne.n	8002e8a <runToPosition+0x6>
//	YIELD; // Let system housekeeping occur
}
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <stop>:
    moveTo(position);
    runToPosition();
}

void stop()
{
 8002e9c:	b5b0      	push	{r4, r5, r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
    if (_speed != 0.0)
 8002ea2:	4b21      	ldr	r3, [pc, #132]	; (8002f28 <stop+0x8c>)
 8002ea4:	edd3 7a00 	vldr	s15, [r3]
 8002ea8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	d036      	beq.n	8002f20 <stop+0x84>
    {
	int32_t stepsToStop = (int32_t)((_speed * _speed) / (2.0 * _acceleration)) + 1; // Equation 16 (+integer rounding)
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <stop+0x8c>)
 8002eb4:	ed93 7a00 	vldr	s14, [r3]
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <stop+0x8c>)
 8002eba:	edd3 7a00 	vldr	s15, [r3]
 8002ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec2:	ee17 0a90 	vmov	r0, s15
 8002ec6:	f7fd fb6f 	bl	80005a8 <__aeabi_f2d>
 8002eca:	4604      	mov	r4, r0
 8002ecc:	460d      	mov	r5, r1
 8002ece:	4b17      	ldr	r3, [pc, #92]	; (8002f2c <stop+0x90>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fd fb68 	bl	80005a8 <__aeabi_f2d>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	f7fd fa06 	bl	80002ec <__adddf3>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	f7fd fce0 	bl	80008ac <__aeabi_ddiv>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f7fd fe60 	bl	8000bb8 <__aeabi_d2iz>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	3301      	adds	r3, #1
 8002efc:	607b      	str	r3, [r7, #4]
	if (_speed > 0)
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <stop+0x8c>)
 8002f00:	edd3 7a00 	vldr	s15, [r3]
 8002f04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0c:	dd03      	ble.n	8002f16 <stop+0x7a>
	    move(stepsToStop);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7ff fb4e 	bl	80025b0 <move>
	else
	    move(-stepsToStop);
    }
}
 8002f14:	e004      	b.n	8002f20 <stop+0x84>
	    move(-stepsToStop);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	425b      	negs	r3, r3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fb48 	bl	80025b0 <move>
}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bdb0      	pop	{r4, r5, r7, pc}
 8002f28:	200009d4 	.word	0x200009d4
 8002f2c:	200009dc 	.word	0x200009dc

08002f30 <delay_us>:
}



/*********** Helper Functions ************/
void delay_us (uint16_t us){
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	80fb      	strh	r3, [r7, #6]
//{	__HAL_TIM_DISABLE
//	HAL_TIM_Base_Stop(&htim7);
	__HAL_TIM_SET_COUNTER(&htim7,0x0000);  // set the counter value a 0
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <delay_us+0x30>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	625a      	str	r2, [r3, #36]	; 0x24
#if debug
	counter = __HAL_TIM_GET_COUNTER(&htim7);
#endif
//	HAL_TIM_Base_Start(&htim7);

	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 8002f42:	bf00      	nop
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <delay_us+0x30>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d3f9      	bcc.n	8002f44 <delay_us+0x14>
#if debug
	counter = __HAL_TIM_GET_COUNTER(&htim7);
#endif
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	200003d0 	.word	0x200003d0

08002f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <HAL_MspInit+0x4c>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	4a0f      	ldr	r2, [pc, #60]	; (8002fb0 <HAL_MspInit+0x4c>)
 8002f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f78:	6453      	str	r3, [r2, #68]	; 0x44
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <HAL_MspInit+0x4c>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f82:	607b      	str	r3, [r7, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_MspInit+0x4c>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	4a08      	ldr	r2, [pc, #32]	; (8002fb0 <HAL_MspInit+0x4c>)
 8002f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f94:	6413      	str	r3, [r2, #64]	; 0x40
 8002f96:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_MspInit+0x4c>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800

08002fb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	; 0x28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a19      	ldr	r2, [pc, #100]	; (8003038 <HAL_SPI_MspInit+0x84>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d12b      	bne.n	800302e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	4b18      	ldr	r3, [pc, #96]	; (800303c <HAL_SPI_MspInit+0x88>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	4a17      	ldr	r2, [pc, #92]	; (800303c <HAL_SPI_MspInit+0x88>)
 8002fe0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <HAL_SPI_MspInit+0x88>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	4b11      	ldr	r3, [pc, #68]	; (800303c <HAL_SPI_MspInit+0x88>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	4a10      	ldr	r2, [pc, #64]	; (800303c <HAL_SPI_MspInit+0x88>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6313      	str	r3, [r2, #48]	; 0x30
 8003002:	4b0e      	ldr	r3, [pc, #56]	; (800303c <HAL_SPI_MspInit+0x88>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_Clk_Pin|SPI_MOSI_Pin;
 800300e:	23a0      	movs	r3, #160	; 0xa0
 8003010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003012:	2302      	movs	r3, #2
 8003014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301a:	2303      	movs	r3, #3
 800301c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800301e:	2305      	movs	r3, #5
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003022:	f107 0314 	add.w	r3, r7, #20
 8003026:	4619      	mov	r1, r3
 8003028:	4805      	ldr	r0, [pc, #20]	; (8003040 <HAL_SPI_MspInit+0x8c>)
 800302a:	f000 fc89 	bl	8003940 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800302e:	bf00      	nop
 8003030:	3728      	adds	r7, #40	; 0x28
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40013000 	.word	0x40013000
 800303c:	40023800 	.word	0x40023800
 8003040:	40020000 	.word	0x40020000

08003044 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	; 0x28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003064:	d133      	bne.n	80030ce <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_TIM_Encoder_MspInit+0x94>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	4a1a      	ldr	r2, [pc, #104]	; (80030d8 <HAL_TIM_Encoder_MspInit+0x94>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6413      	str	r3, [r2, #64]	; 0x40
 8003076:	4b18      	ldr	r3, [pc, #96]	; (80030d8 <HAL_TIM_Encoder_MspInit+0x94>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <HAL_TIM_Encoder_MspInit+0x94>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	4a13      	ldr	r2, [pc, #76]	; (80030d8 <HAL_TIM_Encoder_MspInit+0x94>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6313      	str	r3, [r2, #48]	; 0x30
 8003092:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <HAL_TIM_Encoder_MspInit+0x94>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A_signal_Pin|B_signal_Pin;
 800309e:	2303      	movs	r3, #3
 80030a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a2:	2302      	movs	r3, #2
 80030a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030aa:	2300      	movs	r3, #0
 80030ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030ae:	2301      	movs	r3, #1
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b2:	f107 0314 	add.w	r3, r7, #20
 80030b6:	4619      	mov	r1, r3
 80030b8:	4808      	ldr	r0, [pc, #32]	; (80030dc <HAL_TIM_Encoder_MspInit+0x98>)
 80030ba:	f000 fc41 	bl	8003940 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80030be:	2200      	movs	r2, #0
 80030c0:	2100      	movs	r1, #0
 80030c2:	201c      	movs	r0, #28
 80030c4:	f000 fb65 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80030c8:	201c      	movs	r0, #28
 80030ca:	f000 fb7e 	bl	80037ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80030ce:	bf00      	nop
 80030d0:	3728      	adds	r7, #40	; 0x28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40020000 	.word	0x40020000

080030e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a15      	ldr	r2, [pc, #84]	; (8003144 <HAL_TIM_Base_MspInit+0x64>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10e      	bne.n	8003110 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	4b14      	ldr	r3, [pc, #80]	; (8003148 <HAL_TIM_Base_MspInit+0x68>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	4a13      	ldr	r2, [pc, #76]	; (8003148 <HAL_TIM_Base_MspInit+0x68>)
 80030fc:	f043 0310 	orr.w	r3, r3, #16
 8003100:	6413      	str	r3, [r2, #64]	; 0x40
 8003102:	4b11      	ldr	r3, [pc, #68]	; (8003148 <HAL_TIM_Base_MspInit+0x68>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800310e:	e012      	b.n	8003136 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM7)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0d      	ldr	r2, [pc, #52]	; (800314c <HAL_TIM_Base_MspInit+0x6c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d10d      	bne.n	8003136 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <HAL_TIM_Base_MspInit+0x68>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	4a09      	ldr	r2, [pc, #36]	; (8003148 <HAL_TIM_Base_MspInit+0x68>)
 8003124:	f043 0320 	orr.w	r3, r3, #32
 8003128:	6413      	str	r3, [r2, #64]	; 0x40
 800312a:	4b07      	ldr	r3, [pc, #28]	; (8003148 <HAL_TIM_Base_MspInit+0x68>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	60bb      	str	r3, [r7, #8]
 8003134:	68bb      	ldr	r3, [r7, #8]
}
 8003136:	bf00      	nop
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40001000 	.word	0x40001000
 8003148:	40023800 	.word	0x40023800
 800314c:	40001400 	.word	0x40001400

08003150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a1d      	ldr	r2, [pc, #116]	; (80031e4 <HAL_UART_MspInit+0x94>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d133      	bne.n	80031da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <HAL_UART_MspInit+0x98>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	4a1b      	ldr	r2, [pc, #108]	; (80031e8 <HAL_UART_MspInit+0x98>)
 800317c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003180:	6413      	str	r3, [r2, #64]	; 0x40
 8003182:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_UART_MspInit+0x98>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <HAL_UART_MspInit+0x98>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <HAL_UART_MspInit+0x98>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_UART_MspInit+0x98>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80031aa:	230c      	movs	r3, #12
 80031ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ae:	2302      	movs	r3, #2
 80031b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b6:	2303      	movs	r3, #3
 80031b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031ba:	2307      	movs	r3, #7
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031be:	f107 0314 	add.w	r3, r7, #20
 80031c2:	4619      	mov	r1, r3
 80031c4:	4809      	ldr	r0, [pc, #36]	; (80031ec <HAL_UART_MspInit+0x9c>)
 80031c6:	f000 fbbb 	bl	8003940 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	2026      	movs	r0, #38	; 0x26
 80031d0:	f000 fadf 	bl	8003792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031d4:	2026      	movs	r0, #38	; 0x26
 80031d6:	f000 faf8 	bl	80037ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031da:	bf00      	nop
 80031dc:	3728      	adds	r7, #40	; 0x28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40004400 	.word	0x40004400
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40020000 	.word	0x40020000

080031f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031f4:	e7fe      	b.n	80031f4 <NMI_Handler+0x4>

080031f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031fa:	e7fe      	b.n	80031fa <HardFault_Handler+0x4>

080031fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003200:	e7fe      	b.n	8003200 <MemManage_Handler+0x4>

08003202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003202:	b480      	push	{r7}
 8003204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003206:	e7fe      	b.n	8003206 <BusFault_Handler+0x4>

08003208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800320c:	e7fe      	b.n	800320c <UsageFault_Handler+0x4>

0800320e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800320e:	b480      	push	{r7}
 8003210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800322a:	b480      	push	{r7}
 800322c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800323c:	f000 f98a 	bl	8003554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}

08003244 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Z_reference_Pin);
 8003248:	2001      	movs	r0, #1
 800324a:	f000 fd3f 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}

08003252 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Camera_input_Pin);
 8003256:	2008      	movs	r0, #8
 8003258:	f000 fd38 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800325c:	bf00      	nop
 800325e:	bd80      	pop	{r7, pc}

08003260 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(P_limit_Pin);
 8003264:	2010      	movs	r0, #16
 8003266:	f000 fd31 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}

0800326e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Q_limit_Pin);
 8003272:	2020      	movs	r0, #32
 8003274:	f000 fd2a 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Z_END_STOP_Pin);
 8003278:	f44f 7080 	mov.w	r0, #256	; 0x100
 800327c:	f000 fd26 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003280:	bf00      	nop
 8003282:	bd80      	pop	{r7, pc}

08003284 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003288:	4802      	ldr	r0, [pc, #8]	; (8003294 <TIM2_IRQHandler+0x10>)
 800328a:	f001 fd93 	bl	8004db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	20000340 	.word	0x20000340

08003298 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800329c:	4802      	ldr	r0, [pc, #8]	; (80032a8 <USART2_IRQHandler+0x10>)
 800329e:	f002 f98d 	bl	80055bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032a2:	bf00      	nop
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000418 	.word	0x20000418

080032ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
	return 1;
 80032b0:	2301      	movs	r3, #1
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <_kill>:

int _kill(int pid, int sig)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80032c6:	f003 f8d5 	bl	8006474 <__errno>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2216      	movs	r2, #22
 80032ce:	601a      	str	r2, [r3, #0]
	return -1;
 80032d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <_exit>:

void _exit (int status)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80032e4:	f04f 31ff 	mov.w	r1, #4294967295
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff ffe7 	bl	80032bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80032ee:	e7fe      	b.n	80032ee <_exit+0x12>

080032f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	e00a      	b.n	8003318 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003302:	f3af 8000 	nop.w
 8003306:	4601      	mov	r1, r0
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	60ba      	str	r2, [r7, #8]
 800330e:	b2ca      	uxtb	r2, r1
 8003310:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	3301      	adds	r3, #1
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	429a      	cmp	r2, r3
 800331e:	dbf0      	blt.n	8003302 <_read+0x12>
	}

return len;
 8003320:	687b      	ldr	r3, [r7, #4]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b086      	sub	sp, #24
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	e009      	b.n	8003350 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	60ba      	str	r2, [r7, #8]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	3301      	adds	r3, #1
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	429a      	cmp	r2, r3
 8003356:	dbf1      	blt.n	800333c <_write+0x12>
	}
	return len;
 8003358:	687b      	ldr	r3, [r7, #4]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <_close>:

int _close(int file)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
	return -1;
 800336a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800336e:	4618      	mov	r0, r3
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800338a:	605a      	str	r2, [r3, #4]
	return 0;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <_isatty>:

int _isatty(int file)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
	return 1;
 80033a2:	2301      	movs	r3, #1
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
	return 0;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033d4:	4a14      	ldr	r2, [pc, #80]	; (8003428 <_sbrk+0x5c>)
 80033d6:	4b15      	ldr	r3, [pc, #84]	; (800342c <_sbrk+0x60>)
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033e0:	4b13      	ldr	r3, [pc, #76]	; (8003430 <_sbrk+0x64>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d102      	bne.n	80033ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033e8:	4b11      	ldr	r3, [pc, #68]	; (8003430 <_sbrk+0x64>)
 80033ea:	4a12      	ldr	r2, [pc, #72]	; (8003434 <_sbrk+0x68>)
 80033ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033ee:	4b10      	ldr	r3, [pc, #64]	; (8003430 <_sbrk+0x64>)
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4413      	add	r3, r2
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d207      	bcs.n	800340c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033fc:	f003 f83a 	bl	8006474 <__errno>
 8003400:	4603      	mov	r3, r0
 8003402:	220c      	movs	r2, #12
 8003404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003406:	f04f 33ff 	mov.w	r3, #4294967295
 800340a:	e009      	b.n	8003420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800340c:	4b08      	ldr	r3, [pc, #32]	; (8003430 <_sbrk+0x64>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003412:	4b07      	ldr	r3, [pc, #28]	; (8003430 <_sbrk+0x64>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	4a05      	ldr	r2, [pc, #20]	; (8003430 <_sbrk+0x64>)
 800341c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800341e:	68fb      	ldr	r3, [r7, #12]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20020000 	.word	0x20020000
 800342c:	00000400 	.word	0x00000400
 8003430:	20000a00 	.word	0x20000a00
 8003434:	20000a18 	.word	0x20000a18

08003438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <SystemInit+0x20>)
 800343e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003442:	4a05      	ldr	r2, [pc, #20]	; (8003458 <SystemInit+0x20>)
 8003444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800344c:	bf00      	nop
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800345c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003494 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003460:	480d      	ldr	r0, [pc, #52]	; (8003498 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003462:	490e      	ldr	r1, [pc, #56]	; (800349c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003464:	4a0e      	ldr	r2, [pc, #56]	; (80034a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003468:	e002      	b.n	8003470 <LoopCopyDataInit>

0800346a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800346a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800346c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800346e:	3304      	adds	r3, #4

08003470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003474:	d3f9      	bcc.n	800346a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003476:	4a0b      	ldr	r2, [pc, #44]	; (80034a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003478:	4c0b      	ldr	r4, [pc, #44]	; (80034a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800347a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800347c:	e001      	b.n	8003482 <LoopFillZerobss>

0800347e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800347e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003480:	3204      	adds	r2, #4

08003482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003484:	d3fb      	bcc.n	800347e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003486:	f7ff ffd7 	bl	8003438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800348a:	f002 fff9 	bl	8006480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800348e:	f7fe fb41 	bl	8001b14 <main>
  bx  lr    
 8003492:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003494:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800349c:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 80034a0:	0800b258 	.word	0x0800b258
  ldr r2, =_sbss
 80034a4:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 80034a8:	20000a18 	.word	0x20000a18

080034ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034ac:	e7fe      	b.n	80034ac <ADC_IRQHandler>
	...

080034b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034b4:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <HAL_Init+0x40>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a0d      	ldr	r2, [pc, #52]	; (80034f0 <HAL_Init+0x40>)
 80034ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_Init+0x40>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <HAL_Init+0x40>)
 80034c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034cc:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <HAL_Init+0x40>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a07      	ldr	r2, [pc, #28]	; (80034f0 <HAL_Init+0x40>)
 80034d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034d8:	2003      	movs	r0, #3
 80034da:	f000 f94f 	bl	800377c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034de:	2000      	movs	r0, #0
 80034e0:	f000 f808 	bl	80034f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034e4:	f7ff fd3e 	bl	8002f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40023c00 	.word	0x40023c00

080034f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034fc:	4b12      	ldr	r3, [pc, #72]	; (8003548 <HAL_InitTick+0x54>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_InitTick+0x58>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	4619      	mov	r1, r3
 8003506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800350a:	fbb3 f3f1 	udiv	r3, r3, r1
 800350e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003512:	4618      	mov	r0, r3
 8003514:	f000 f975 	bl	8003802 <HAL_SYSTICK_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e00e      	b.n	8003540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b0f      	cmp	r3, #15
 8003526:	d80a      	bhi.n	800353e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003528:	2200      	movs	r2, #0
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	f04f 30ff 	mov.w	r0, #4294967295
 8003530:	f000 f92f 	bl	8003792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003534:	4a06      	ldr	r2, [pc, #24]	; (8003550 <HAL_InitTick+0x5c>)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	e000      	b.n	8003540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000064 	.word	0x20000064
 800354c:	2000006c 	.word	0x2000006c
 8003550:	20000068 	.word	0x20000068

08003554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003558:	4b06      	ldr	r3, [pc, #24]	; (8003574 <HAL_IncTick+0x20>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_IncTick+0x24>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4413      	add	r3, r2
 8003564:	4a04      	ldr	r2, [pc, #16]	; (8003578 <HAL_IncTick+0x24>)
 8003566:	6013      	str	r3, [r2, #0]
}
 8003568:	bf00      	nop
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	2000006c 	.word	0x2000006c
 8003578:	20000a04 	.word	0x20000a04

0800357c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return uwTick;
 8003580:	4b03      	ldr	r3, [pc, #12]	; (8003590 <HAL_GetTick+0x14>)
 8003582:	681b      	ldr	r3, [r3, #0]
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000a04 	.word	0x20000a04

08003594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <__NVIC_SetPriorityGrouping+0x44>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035b0:	4013      	ands	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035c6:	4a04      	ldr	r2, [pc, #16]	; (80035d8 <__NVIC_SetPriorityGrouping+0x44>)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	60d3      	str	r3, [r2, #12]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e0:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <__NVIC_GetPriorityGrouping+0x18>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	f003 0307 	and.w	r3, r3, #7
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	2b00      	cmp	r3, #0
 8003608:	db0b      	blt.n	8003622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	f003 021f 	and.w	r2, r3, #31
 8003610:	4907      	ldr	r1, [pc, #28]	; (8003630 <__NVIC_EnableIRQ+0x38>)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	2001      	movs	r0, #1
 800361a:	fa00 f202 	lsl.w	r2, r0, r2
 800361e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	e000e100 	.word	0xe000e100

08003634 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003642:	2b00      	cmp	r3, #0
 8003644:	db12      	blt.n	800366c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	f003 021f 	and.w	r2, r3, #31
 800364c:	490a      	ldr	r1, [pc, #40]	; (8003678 <__NVIC_DisableIRQ+0x44>)
 800364e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2001      	movs	r0, #1
 8003656:	fa00 f202 	lsl.w	r2, r0, r2
 800365a:	3320      	adds	r3, #32
 800365c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003660:	f3bf 8f4f 	dsb	sy
}
 8003664:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003666:	f3bf 8f6f 	isb	sy
}
 800366a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	e000e100 	.word	0xe000e100

0800367c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	6039      	str	r1, [r7, #0]
 8003686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368c:	2b00      	cmp	r3, #0
 800368e:	db0a      	blt.n	80036a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	b2da      	uxtb	r2, r3
 8003694:	490c      	ldr	r1, [pc, #48]	; (80036c8 <__NVIC_SetPriority+0x4c>)
 8003696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369a:	0112      	lsls	r2, r2, #4
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	440b      	add	r3, r1
 80036a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a4:	e00a      	b.n	80036bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	4908      	ldr	r1, [pc, #32]	; (80036cc <__NVIC_SetPriority+0x50>)
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	3b04      	subs	r3, #4
 80036b4:	0112      	lsls	r2, r2, #4
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	440b      	add	r3, r1
 80036ba:	761a      	strb	r2, [r3, #24]
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	e000e100 	.word	0xe000e100
 80036cc:	e000ed00 	.word	0xe000ed00

080036d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b089      	sub	sp, #36	; 0x24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f1c3 0307 	rsb	r3, r3, #7
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	bf28      	it	cs
 80036ee:	2304      	movcs	r3, #4
 80036f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	3304      	adds	r3, #4
 80036f6:	2b06      	cmp	r3, #6
 80036f8:	d902      	bls.n	8003700 <NVIC_EncodePriority+0x30>
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3b03      	subs	r3, #3
 80036fe:	e000      	b.n	8003702 <NVIC_EncodePriority+0x32>
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003704:	f04f 32ff 	mov.w	r2, #4294967295
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43da      	mvns	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	401a      	ands	r2, r3
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003718:	f04f 31ff 	mov.w	r1, #4294967295
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	fa01 f303 	lsl.w	r3, r1, r3
 8003722:	43d9      	mvns	r1, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003728:	4313      	orrs	r3, r2
         );
}
 800372a:	4618      	mov	r0, r3
 800372c:	3724      	adds	r7, #36	; 0x24
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
	...

08003738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3b01      	subs	r3, #1
 8003744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003748:	d301      	bcc.n	800374e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800374a:	2301      	movs	r3, #1
 800374c:	e00f      	b.n	800376e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800374e:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <SysTick_Config+0x40>)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3b01      	subs	r3, #1
 8003754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003756:	210f      	movs	r1, #15
 8003758:	f04f 30ff 	mov.w	r0, #4294967295
 800375c:	f7ff ff8e 	bl	800367c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <SysTick_Config+0x40>)
 8003762:	2200      	movs	r2, #0
 8003764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003766:	4b04      	ldr	r3, [pc, #16]	; (8003778 <SysTick_Config+0x40>)
 8003768:	2207      	movs	r2, #7
 800376a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	e000e010 	.word	0xe000e010

0800377c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ff05 	bl	8003594 <__NVIC_SetPriorityGrouping>
}
 800378a:	bf00      	nop
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003792:	b580      	push	{r7, lr}
 8003794:	b086      	sub	sp, #24
 8003796:	af00      	add	r7, sp, #0
 8003798:	4603      	mov	r3, r0
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037a4:	f7ff ff1a 	bl	80035dc <__NVIC_GetPriorityGrouping>
 80037a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	6978      	ldr	r0, [r7, #20]
 80037b0:	f7ff ff8e 	bl	80036d0 <NVIC_EncodePriority>
 80037b4:	4602      	mov	r2, r0
 80037b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff ff5d 	bl	800367c <__NVIC_SetPriority>
}
 80037c2:	bf00      	nop
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	4603      	mov	r3, r0
 80037d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ff0d 	bl	80035f8 <__NVIC_EnableIRQ>
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	4603      	mov	r3, r0
 80037ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80037f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff ff1d 	bl	8003634 <__NVIC_DisableIRQ>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff ff94 	bl	8003738 <SysTick_Config>
 8003810:	4603      	mov	r3, r0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003826:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003828:	f7ff fea8 	bl	800357c <HAL_GetTick>
 800382c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d008      	beq.n	800384c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2280      	movs	r2, #128	; 0x80
 800383e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e052      	b.n	80038f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0216 	bic.w	r2, r2, #22
 800385a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800386a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d103      	bne.n	800387c <HAL_DMA_Abort+0x62>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0208 	bic.w	r2, r2, #8
 800388a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0201 	bic.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800389c:	e013      	b.n	80038c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800389e:	f7ff fe6d 	bl	800357c <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b05      	cmp	r3, #5
 80038aa:	d90c      	bls.n	80038c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2203      	movs	r2, #3
 80038b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e015      	b.n	80038f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1e4      	bne.n	800389e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	223f      	movs	r2, #63	; 0x3f
 80038da:	409a      	lsls	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d004      	beq.n	8003918 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2280      	movs	r2, #128	; 0x80
 8003912:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e00c      	b.n	8003932 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2205      	movs	r2, #5
 800391c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003952:	2300      	movs	r3, #0
 8003954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	e165      	b.n	8003c28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800395c:	2201      	movs	r2, #1
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4013      	ands	r3, r2
 800396e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	429a      	cmp	r2, r3
 8003976:	f040 8154 	bne.w	8003c22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	2b01      	cmp	r3, #1
 8003984:	d005      	beq.n	8003992 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800398e:	2b02      	cmp	r3, #2
 8003990:	d130      	bne.n	80039f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	2203      	movs	r2, #3
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43db      	mvns	r3, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4013      	ands	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039c8:	2201      	movs	r2, #1
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	f003 0201 	and.w	r2, r3, #1
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d017      	beq.n	8003a30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4013      	ands	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d123      	bne.n	8003a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	08da      	lsrs	r2, r3, #3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3208      	adds	r2, #8
 8003a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	220f      	movs	r2, #15
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	08da      	lsrs	r2, r3, #3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3208      	adds	r2, #8
 8003a7e:	69b9      	ldr	r1, [r7, #24]
 8003a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	2203      	movs	r2, #3
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0203 	and.w	r2, r3, #3
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80ae 	beq.w	8003c22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	4b5d      	ldr	r3, [pc, #372]	; (8003c40 <HAL_GPIO_Init+0x300>)
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	4a5c      	ldr	r2, [pc, #368]	; (8003c40 <HAL_GPIO_Init+0x300>)
 8003ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ad6:	4b5a      	ldr	r3, [pc, #360]	; (8003c40 <HAL_GPIO_Init+0x300>)
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ae2:	4a58      	ldr	r2, [pc, #352]	; (8003c44 <HAL_GPIO_Init+0x304>)
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	089b      	lsrs	r3, r3, #2
 8003ae8:	3302      	adds	r3, #2
 8003aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	220f      	movs	r2, #15
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4013      	ands	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a4f      	ldr	r2, [pc, #316]	; (8003c48 <HAL_GPIO_Init+0x308>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d025      	beq.n	8003b5a <HAL_GPIO_Init+0x21a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a4e      	ldr	r2, [pc, #312]	; (8003c4c <HAL_GPIO_Init+0x30c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01f      	beq.n	8003b56 <HAL_GPIO_Init+0x216>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a4d      	ldr	r2, [pc, #308]	; (8003c50 <HAL_GPIO_Init+0x310>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d019      	beq.n	8003b52 <HAL_GPIO_Init+0x212>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a4c      	ldr	r2, [pc, #304]	; (8003c54 <HAL_GPIO_Init+0x314>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d013      	beq.n	8003b4e <HAL_GPIO_Init+0x20e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a4b      	ldr	r2, [pc, #300]	; (8003c58 <HAL_GPIO_Init+0x318>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00d      	beq.n	8003b4a <HAL_GPIO_Init+0x20a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a4a      	ldr	r2, [pc, #296]	; (8003c5c <HAL_GPIO_Init+0x31c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d007      	beq.n	8003b46 <HAL_GPIO_Init+0x206>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a49      	ldr	r2, [pc, #292]	; (8003c60 <HAL_GPIO_Init+0x320>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d101      	bne.n	8003b42 <HAL_GPIO_Init+0x202>
 8003b3e:	2306      	movs	r3, #6
 8003b40:	e00c      	b.n	8003b5c <HAL_GPIO_Init+0x21c>
 8003b42:	2307      	movs	r3, #7
 8003b44:	e00a      	b.n	8003b5c <HAL_GPIO_Init+0x21c>
 8003b46:	2305      	movs	r3, #5
 8003b48:	e008      	b.n	8003b5c <HAL_GPIO_Init+0x21c>
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	e006      	b.n	8003b5c <HAL_GPIO_Init+0x21c>
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e004      	b.n	8003b5c <HAL_GPIO_Init+0x21c>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e002      	b.n	8003b5c <HAL_GPIO_Init+0x21c>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <HAL_GPIO_Init+0x21c>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	69fa      	ldr	r2, [r7, #28]
 8003b5e:	f002 0203 	and.w	r2, r2, #3
 8003b62:	0092      	lsls	r2, r2, #2
 8003b64:	4093      	lsls	r3, r2
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b6c:	4935      	ldr	r1, [pc, #212]	; (8003c44 <HAL_GPIO_Init+0x304>)
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	089b      	lsrs	r3, r3, #2
 8003b72:	3302      	adds	r3, #2
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b7a:	4b3a      	ldr	r3, [pc, #232]	; (8003c64 <HAL_GPIO_Init+0x324>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	43db      	mvns	r3, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4013      	ands	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b9e:	4a31      	ldr	r2, [pc, #196]	; (8003c64 <HAL_GPIO_Init+0x324>)
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ba4:	4b2f      	ldr	r3, [pc, #188]	; (8003c64 <HAL_GPIO_Init+0x324>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	43db      	mvns	r3, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bc8:	4a26      	ldr	r2, [pc, #152]	; (8003c64 <HAL_GPIO_Init+0x324>)
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bce:	4b25      	ldr	r3, [pc, #148]	; (8003c64 <HAL_GPIO_Init+0x324>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bf2:	4a1c      	ldr	r2, [pc, #112]	; (8003c64 <HAL_GPIO_Init+0x324>)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bf8:	4b1a      	ldr	r3, [pc, #104]	; (8003c64 <HAL_GPIO_Init+0x324>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	43db      	mvns	r3, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c1c:	4a11      	ldr	r2, [pc, #68]	; (8003c64 <HAL_GPIO_Init+0x324>)
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	3301      	adds	r3, #1
 8003c26:	61fb      	str	r3, [r7, #28]
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	2b0f      	cmp	r3, #15
 8003c2c:	f67f ae96 	bls.w	800395c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	3724      	adds	r7, #36	; 0x24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40023800 	.word	0x40023800
 8003c44:	40013800 	.word	0x40013800
 8003c48:	40020000 	.word	0x40020000
 8003c4c:	40020400 	.word	0x40020400
 8003c50:	40020800 	.word	0x40020800
 8003c54:	40020c00 	.word	0x40020c00
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40021400 	.word	0x40021400
 8003c60:	40021800 	.word	0x40021800
 8003c64:	40013c00 	.word	0x40013c00

08003c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	887b      	ldrh	r3, [r7, #2]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c80:	2301      	movs	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
 8003c84:	e001      	b.n	8003c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c86:	2300      	movs	r3, #0
 8003c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	807b      	strh	r3, [r7, #2]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ca8:	787b      	ldrb	r3, [r7, #1]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cae:	887a      	ldrh	r2, [r7, #2]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cb4:	e003      	b.n	8003cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cb6:	887b      	ldrh	r3, [r7, #2]
 8003cb8:	041a      	lsls	r2, r3, #16
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	619a      	str	r2, [r3, #24]
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003cd6:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cd8:	695a      	ldr	r2, [r3, #20]
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d006      	beq.n	8003cf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ce2:	4a05      	ldr	r2, [pc, #20]	; (8003cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ce4:	88fb      	ldrh	r3, [r7, #6]
 8003ce6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fe fa72 	bl	80021d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cf0:	bf00      	nop
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40013c00 	.word	0x40013c00

08003cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0cc      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d10:	4b68      	ldr	r3, [pc, #416]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d90c      	bls.n	8003d38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1e:	4b65      	ldr	r3, [pc, #404]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d26:	4b63      	ldr	r3, [pc, #396]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0b8      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d020      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d50:	4b59      	ldr	r3, [pc, #356]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	4a58      	ldr	r2, [pc, #352]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d68:	4b53      	ldr	r3, [pc, #332]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4a52      	ldr	r2, [pc, #328]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d74:	4b50      	ldr	r3, [pc, #320]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	494d      	ldr	r1, [pc, #308]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d044      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d107      	bne.n	8003daa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9a:	4b47      	ldr	r3, [pc, #284]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d119      	bne.n	8003dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e07f      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d003      	beq.n	8003dba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d107      	bne.n	8003dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dba:	4b3f      	ldr	r3, [pc, #252]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e06f      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dca:	4b3b      	ldr	r3, [pc, #236]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e067      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dda:	4b37      	ldr	r3, [pc, #220]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f023 0203 	bic.w	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	4934      	ldr	r1, [pc, #208]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dec:	f7ff fbc6 	bl	800357c <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df2:	e00a      	b.n	8003e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df4:	f7ff fbc2 	bl	800357c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e04f      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	4b2b      	ldr	r3, [pc, #172]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 020c 	and.w	r2, r3, #12
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d1eb      	bne.n	8003df4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e1c:	4b25      	ldr	r3, [pc, #148]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d20c      	bcs.n	8003e44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2a:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e32:	4b20      	ldr	r3, [pc, #128]	; (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e032      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e50:	4b19      	ldr	r3, [pc, #100]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4916      	ldr	r1, [pc, #88]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d009      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e6e:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	490e      	ldr	r1, [pc, #56]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e82:	f000 f855 	bl	8003f30 <HAL_RCC_GetSysClockFreq>
 8003e86:	4602      	mov	r2, r0
 8003e88:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	490a      	ldr	r1, [pc, #40]	; (8003ebc <HAL_RCC_ClockConfig+0x1c0>)
 8003e94:	5ccb      	ldrb	r3, [r1, r3]
 8003e96:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9a:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e9e:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff fb26 	bl	80034f4 <HAL_InitTick>

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40023c00 	.word	0x40023c00
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	0800ad2c 	.word	0x0800ad2c
 8003ec0:	20000064 	.word	0x20000064
 8003ec4:	20000068 	.word	0x20000068

08003ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ecc:	4b03      	ldr	r3, [pc, #12]	; (8003edc <HAL_RCC_GetHCLKFreq+0x14>)
 8003ece:	681b      	ldr	r3, [r3, #0]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	20000064 	.word	0x20000064

08003ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ee4:	f7ff fff0 	bl	8003ec8 <HAL_RCC_GetHCLKFreq>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	0a9b      	lsrs	r3, r3, #10
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	4903      	ldr	r1, [pc, #12]	; (8003f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ef6:	5ccb      	ldrb	r3, [r1, r3]
 8003ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40023800 	.word	0x40023800
 8003f04:	0800ad3c 	.word	0x0800ad3c

08003f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f0c:	f7ff ffdc 	bl	8003ec8 <HAL_RCC_GetHCLKFreq>
 8003f10:	4602      	mov	r2, r0
 8003f12:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	0b5b      	lsrs	r3, r3, #13
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	4903      	ldr	r1, [pc, #12]	; (8003f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f1e:	5ccb      	ldrb	r3, [r1, r3]
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	0800ad3c 	.word	0x0800ad3c

08003f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f34:	b0ae      	sub	sp, #184	; 0xb8
 8003f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f56:	4bcb      	ldr	r3, [pc, #812]	; (8004284 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	2b0c      	cmp	r3, #12
 8003f60:	f200 8206 	bhi.w	8004370 <HAL_RCC_GetSysClockFreq+0x440>
 8003f64:	a201      	add	r2, pc, #4	; (adr r2, 8003f6c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6a:	bf00      	nop
 8003f6c:	08003fa1 	.word	0x08003fa1
 8003f70:	08004371 	.word	0x08004371
 8003f74:	08004371 	.word	0x08004371
 8003f78:	08004371 	.word	0x08004371
 8003f7c:	08003fa9 	.word	0x08003fa9
 8003f80:	08004371 	.word	0x08004371
 8003f84:	08004371 	.word	0x08004371
 8003f88:	08004371 	.word	0x08004371
 8003f8c:	08003fb1 	.word	0x08003fb1
 8003f90:	08004371 	.word	0x08004371
 8003f94:	08004371 	.word	0x08004371
 8003f98:	08004371 	.word	0x08004371
 8003f9c:	080041a1 	.word	0x080041a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fa0:	4bb9      	ldr	r3, [pc, #740]	; (8004288 <HAL_RCC_GetSysClockFreq+0x358>)
 8003fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003fa6:	e1e7      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fa8:	4bb8      	ldr	r3, [pc, #736]	; (800428c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003faa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003fae:	e1e3      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fb0:	4bb4      	ldr	r3, [pc, #720]	; (8004284 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fbc:	4bb1      	ldr	r3, [pc, #708]	; (8004284 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d071      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc8:	4bae      	ldr	r3, [pc, #696]	; (8004284 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	099b      	lsrs	r3, r3, #6
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fd4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003fea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003fee:	4622      	mov	r2, r4
 8003ff0:	462b      	mov	r3, r5
 8003ff2:	f04f 0000 	mov.w	r0, #0
 8003ff6:	f04f 0100 	mov.w	r1, #0
 8003ffa:	0159      	lsls	r1, r3, #5
 8003ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004000:	0150      	lsls	r0, r2, #5
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4621      	mov	r1, r4
 8004008:	1a51      	subs	r1, r2, r1
 800400a:	6439      	str	r1, [r7, #64]	; 0x40
 800400c:	4629      	mov	r1, r5
 800400e:	eb63 0301 	sbc.w	r3, r3, r1
 8004012:	647b      	str	r3, [r7, #68]	; 0x44
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004020:	4649      	mov	r1, r9
 8004022:	018b      	lsls	r3, r1, #6
 8004024:	4641      	mov	r1, r8
 8004026:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800402a:	4641      	mov	r1, r8
 800402c:	018a      	lsls	r2, r1, #6
 800402e:	4641      	mov	r1, r8
 8004030:	1a51      	subs	r1, r2, r1
 8004032:	63b9      	str	r1, [r7, #56]	; 0x38
 8004034:	4649      	mov	r1, r9
 8004036:	eb63 0301 	sbc.w	r3, r3, r1
 800403a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004048:	4649      	mov	r1, r9
 800404a:	00cb      	lsls	r3, r1, #3
 800404c:	4641      	mov	r1, r8
 800404e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004052:	4641      	mov	r1, r8
 8004054:	00ca      	lsls	r2, r1, #3
 8004056:	4610      	mov	r0, r2
 8004058:	4619      	mov	r1, r3
 800405a:	4603      	mov	r3, r0
 800405c:	4622      	mov	r2, r4
 800405e:	189b      	adds	r3, r3, r2
 8004060:	633b      	str	r3, [r7, #48]	; 0x30
 8004062:	462b      	mov	r3, r5
 8004064:	460a      	mov	r2, r1
 8004066:	eb42 0303 	adc.w	r3, r2, r3
 800406a:	637b      	str	r3, [r7, #52]	; 0x34
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004078:	4629      	mov	r1, r5
 800407a:	024b      	lsls	r3, r1, #9
 800407c:	4621      	mov	r1, r4
 800407e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004082:	4621      	mov	r1, r4
 8004084:	024a      	lsls	r2, r1, #9
 8004086:	4610      	mov	r0, r2
 8004088:	4619      	mov	r1, r3
 800408a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800408e:	2200      	movs	r2, #0
 8004090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004094:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004098:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800409c:	f7fc fe24 	bl	8000ce8 <__aeabi_uldivmod>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4613      	mov	r3, r2
 80040a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040aa:	e067      	b.n	800417c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ac:	4b75      	ldr	r3, [pc, #468]	; (8004284 <HAL_RCC_GetSysClockFreq+0x354>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	099b      	lsrs	r3, r3, #6
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040b8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80040bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80040c6:	2300      	movs	r3, #0
 80040c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040ca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80040ce:	4622      	mov	r2, r4
 80040d0:	462b      	mov	r3, r5
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f04f 0100 	mov.w	r1, #0
 80040da:	0159      	lsls	r1, r3, #5
 80040dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040e0:	0150      	lsls	r0, r2, #5
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4621      	mov	r1, r4
 80040e8:	1a51      	subs	r1, r2, r1
 80040ea:	62b9      	str	r1, [r7, #40]	; 0x28
 80040ec:	4629      	mov	r1, r5
 80040ee:	eb63 0301 	sbc.w	r3, r3, r1
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004100:	4649      	mov	r1, r9
 8004102:	018b      	lsls	r3, r1, #6
 8004104:	4641      	mov	r1, r8
 8004106:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800410a:	4641      	mov	r1, r8
 800410c:	018a      	lsls	r2, r1, #6
 800410e:	4641      	mov	r1, r8
 8004110:	ebb2 0a01 	subs.w	sl, r2, r1
 8004114:	4649      	mov	r1, r9
 8004116:	eb63 0b01 	sbc.w	fp, r3, r1
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004126:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800412a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800412e:	4692      	mov	sl, r2
 8004130:	469b      	mov	fp, r3
 8004132:	4623      	mov	r3, r4
 8004134:	eb1a 0303 	adds.w	r3, sl, r3
 8004138:	623b      	str	r3, [r7, #32]
 800413a:	462b      	mov	r3, r5
 800413c:	eb4b 0303 	adc.w	r3, fp, r3
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800414e:	4629      	mov	r1, r5
 8004150:	028b      	lsls	r3, r1, #10
 8004152:	4621      	mov	r1, r4
 8004154:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004158:	4621      	mov	r1, r4
 800415a:	028a      	lsls	r2, r1, #10
 800415c:	4610      	mov	r0, r2
 800415e:	4619      	mov	r1, r3
 8004160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004164:	2200      	movs	r2, #0
 8004166:	673b      	str	r3, [r7, #112]	; 0x70
 8004168:	677a      	str	r2, [r7, #116]	; 0x74
 800416a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800416e:	f7fc fdbb 	bl	8000ce8 <__aeabi_uldivmod>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4613      	mov	r3, r2
 8004178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800417c:	4b41      	ldr	r3, [pc, #260]	; (8004284 <HAL_RCC_GetSysClockFreq+0x354>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	0c1b      	lsrs	r3, r3, #16
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	3301      	adds	r3, #1
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800418e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004192:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004196:	fbb2 f3f3 	udiv	r3, r2, r3
 800419a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800419e:	e0eb      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041a0:	4b38      	ldr	r3, [pc, #224]	; (8004284 <HAL_RCC_GetSysClockFreq+0x354>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ac:	4b35      	ldr	r3, [pc, #212]	; (8004284 <HAL_RCC_GetSysClockFreq+0x354>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d06b      	beq.n	8004290 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b8:	4b32      	ldr	r3, [pc, #200]	; (8004284 <HAL_RCC_GetSysClockFreq+0x354>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	099b      	lsrs	r3, r3, #6
 80041be:	2200      	movs	r2, #0
 80041c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80041c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ca:	663b      	str	r3, [r7, #96]	; 0x60
 80041cc:	2300      	movs	r3, #0
 80041ce:	667b      	str	r3, [r7, #100]	; 0x64
 80041d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80041d4:	4622      	mov	r2, r4
 80041d6:	462b      	mov	r3, r5
 80041d8:	f04f 0000 	mov.w	r0, #0
 80041dc:	f04f 0100 	mov.w	r1, #0
 80041e0:	0159      	lsls	r1, r3, #5
 80041e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041e6:	0150      	lsls	r0, r2, #5
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4621      	mov	r1, r4
 80041ee:	1a51      	subs	r1, r2, r1
 80041f0:	61b9      	str	r1, [r7, #24]
 80041f2:	4629      	mov	r1, r5
 80041f4:	eb63 0301 	sbc.w	r3, r3, r1
 80041f8:	61fb      	str	r3, [r7, #28]
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004206:	4659      	mov	r1, fp
 8004208:	018b      	lsls	r3, r1, #6
 800420a:	4651      	mov	r1, sl
 800420c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004210:	4651      	mov	r1, sl
 8004212:	018a      	lsls	r2, r1, #6
 8004214:	4651      	mov	r1, sl
 8004216:	ebb2 0801 	subs.w	r8, r2, r1
 800421a:	4659      	mov	r1, fp
 800421c:	eb63 0901 	sbc.w	r9, r3, r1
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800422c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004230:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004234:	4690      	mov	r8, r2
 8004236:	4699      	mov	r9, r3
 8004238:	4623      	mov	r3, r4
 800423a:	eb18 0303 	adds.w	r3, r8, r3
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	462b      	mov	r3, r5
 8004242:	eb49 0303 	adc.w	r3, r9, r3
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004254:	4629      	mov	r1, r5
 8004256:	024b      	lsls	r3, r1, #9
 8004258:	4621      	mov	r1, r4
 800425a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800425e:	4621      	mov	r1, r4
 8004260:	024a      	lsls	r2, r1, #9
 8004262:	4610      	mov	r0, r2
 8004264:	4619      	mov	r1, r3
 8004266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800426a:	2200      	movs	r2, #0
 800426c:	65bb      	str	r3, [r7, #88]	; 0x58
 800426e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004270:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004274:	f7fc fd38 	bl	8000ce8 <__aeabi_uldivmod>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4613      	mov	r3, r2
 800427e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004282:	e065      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0x420>
 8004284:	40023800 	.word	0x40023800
 8004288:	00f42400 	.word	0x00f42400
 800428c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004290:	4b3d      	ldr	r3, [pc, #244]	; (8004388 <HAL_RCC_GetSysClockFreq+0x458>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	099b      	lsrs	r3, r3, #6
 8004296:	2200      	movs	r2, #0
 8004298:	4618      	mov	r0, r3
 800429a:	4611      	mov	r1, r2
 800429c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042a0:	653b      	str	r3, [r7, #80]	; 0x50
 80042a2:	2300      	movs	r3, #0
 80042a4:	657b      	str	r3, [r7, #84]	; 0x54
 80042a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80042aa:	4642      	mov	r2, r8
 80042ac:	464b      	mov	r3, r9
 80042ae:	f04f 0000 	mov.w	r0, #0
 80042b2:	f04f 0100 	mov.w	r1, #0
 80042b6:	0159      	lsls	r1, r3, #5
 80042b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042bc:	0150      	lsls	r0, r2, #5
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4641      	mov	r1, r8
 80042c4:	1a51      	subs	r1, r2, r1
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	4649      	mov	r1, r9
 80042ca:	eb63 0301 	sbc.w	r3, r3, r1
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80042dc:	4659      	mov	r1, fp
 80042de:	018b      	lsls	r3, r1, #6
 80042e0:	4651      	mov	r1, sl
 80042e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042e6:	4651      	mov	r1, sl
 80042e8:	018a      	lsls	r2, r1, #6
 80042ea:	4651      	mov	r1, sl
 80042ec:	1a54      	subs	r4, r2, r1
 80042ee:	4659      	mov	r1, fp
 80042f0:	eb63 0501 	sbc.w	r5, r3, r1
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	00eb      	lsls	r3, r5, #3
 80042fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004302:	00e2      	lsls	r2, r4, #3
 8004304:	4614      	mov	r4, r2
 8004306:	461d      	mov	r5, r3
 8004308:	4643      	mov	r3, r8
 800430a:	18e3      	adds	r3, r4, r3
 800430c:	603b      	str	r3, [r7, #0]
 800430e:	464b      	mov	r3, r9
 8004310:	eb45 0303 	adc.w	r3, r5, r3
 8004314:	607b      	str	r3, [r7, #4]
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004322:	4629      	mov	r1, r5
 8004324:	028b      	lsls	r3, r1, #10
 8004326:	4621      	mov	r1, r4
 8004328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800432c:	4621      	mov	r1, r4
 800432e:	028a      	lsls	r2, r1, #10
 8004330:	4610      	mov	r0, r2
 8004332:	4619      	mov	r1, r3
 8004334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004338:	2200      	movs	r2, #0
 800433a:	64bb      	str	r3, [r7, #72]	; 0x48
 800433c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800433e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004342:	f7fc fcd1 	bl	8000ce8 <__aeabi_uldivmod>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4613      	mov	r3, r2
 800434c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004350:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <HAL_RCC_GetSysClockFreq+0x458>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	0f1b      	lsrs	r3, r3, #28
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800435e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004362:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004366:	fbb2 f3f3 	udiv	r3, r2, r3
 800436a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800436e:	e003      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004370:	4b06      	ldr	r3, [pc, #24]	; (800438c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004372:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004376:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004378:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800437c:	4618      	mov	r0, r3
 800437e:	37b8      	adds	r7, #184	; 0xb8
 8004380:	46bd      	mov	sp, r7
 8004382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800
 800438c:	00f42400 	.word	0x00f42400

08004390 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e28d      	b.n	80048be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 8083 	beq.w	80044b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043b0:	4b94      	ldr	r3, [pc, #592]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 030c 	and.w	r3, r3, #12
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d019      	beq.n	80043f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043bc:	4b91      	ldr	r3, [pc, #580]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d106      	bne.n	80043d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043c8:	4b8e      	ldr	r3, [pc, #568]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d4:	d00c      	beq.n	80043f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043d6:	4b8b      	ldr	r3, [pc, #556]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043de:	2b0c      	cmp	r3, #12
 80043e0:	d112      	bne.n	8004408 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043e2:	4b88      	ldr	r3, [pc, #544]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ee:	d10b      	bne.n	8004408 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f0:	4b84      	ldr	r3, [pc, #528]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d05b      	beq.n	80044b4 <HAL_RCC_OscConfig+0x124>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d157      	bne.n	80044b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e25a      	b.n	80048be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004410:	d106      	bne.n	8004420 <HAL_RCC_OscConfig+0x90>
 8004412:	4b7c      	ldr	r3, [pc, #496]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a7b      	ldr	r2, [pc, #492]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 8004418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	e01d      	b.n	800445c <HAL_RCC_OscConfig+0xcc>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004428:	d10c      	bne.n	8004444 <HAL_RCC_OscConfig+0xb4>
 800442a:	4b76      	ldr	r3, [pc, #472]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a75      	ldr	r2, [pc, #468]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 8004430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	4b73      	ldr	r3, [pc, #460]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a72      	ldr	r2, [pc, #456]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 800443c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	e00b      	b.n	800445c <HAL_RCC_OscConfig+0xcc>
 8004444:	4b6f      	ldr	r3, [pc, #444]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a6e      	ldr	r2, [pc, #440]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 800444a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	4b6c      	ldr	r3, [pc, #432]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a6b      	ldr	r2, [pc, #428]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 8004456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800445a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d013      	beq.n	800448c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004464:	f7ff f88a 	bl	800357c <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800446c:	f7ff f886 	bl	800357c <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b64      	cmp	r3, #100	; 0x64
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e21f      	b.n	80048be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447e:	4b61      	ldr	r3, [pc, #388]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0f0      	beq.n	800446c <HAL_RCC_OscConfig+0xdc>
 800448a:	e014      	b.n	80044b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448c:	f7ff f876 	bl	800357c <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004494:	f7ff f872 	bl	800357c <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b64      	cmp	r3, #100	; 0x64
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e20b      	b.n	80048be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044a6:	4b57      	ldr	r3, [pc, #348]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f0      	bne.n	8004494 <HAL_RCC_OscConfig+0x104>
 80044b2:	e000      	b.n	80044b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d06f      	beq.n	80045a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044c2:	4b50      	ldr	r3, [pc, #320]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d017      	beq.n	80044fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044ce:	4b4d      	ldr	r3, [pc, #308]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d105      	bne.n	80044e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044da:	4b4a      	ldr	r3, [pc, #296]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00b      	beq.n	80044fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044e6:	4b47      	ldr	r3, [pc, #284]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044ee:	2b0c      	cmp	r3, #12
 80044f0:	d11c      	bne.n	800452c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044f2:	4b44      	ldr	r3, [pc, #272]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d116      	bne.n	800452c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fe:	4b41      	ldr	r3, [pc, #260]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <HAL_RCC_OscConfig+0x186>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d001      	beq.n	8004516 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e1d3      	b.n	80048be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004516:	4b3b      	ldr	r3, [pc, #236]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	4937      	ldr	r1, [pc, #220]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 8004526:	4313      	orrs	r3, r2
 8004528:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800452a:	e03a      	b.n	80045a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d020      	beq.n	8004576 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004534:	4b34      	ldr	r3, [pc, #208]	; (8004608 <HAL_RCC_OscConfig+0x278>)
 8004536:	2201      	movs	r2, #1
 8004538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453a:	f7ff f81f 	bl	800357c <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004542:	f7ff f81b 	bl	800357c <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e1b4      	b.n	80048be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004554:	4b2b      	ldr	r3, [pc, #172]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004560:	4b28      	ldr	r3, [pc, #160]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	4925      	ldr	r1, [pc, #148]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 8004570:	4313      	orrs	r3, r2
 8004572:	600b      	str	r3, [r1, #0]
 8004574:	e015      	b.n	80045a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004576:	4b24      	ldr	r3, [pc, #144]	; (8004608 <HAL_RCC_OscConfig+0x278>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7fe fffe 	bl	800357c <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004584:	f7fe fffa 	bl	800357c <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e193      	b.n	80048be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004596:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d036      	beq.n	800461c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d016      	beq.n	80045e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045b6:	4b15      	ldr	r3, [pc, #84]	; (800460c <HAL_RCC_OscConfig+0x27c>)
 80045b8:	2201      	movs	r2, #1
 80045ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045bc:	f7fe ffde 	bl	800357c <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c4:	f7fe ffda 	bl	800357c <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e173      	b.n	80048be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045d6:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <HAL_RCC_OscConfig+0x274>)
 80045d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0f0      	beq.n	80045c4 <HAL_RCC_OscConfig+0x234>
 80045e2:	e01b      	b.n	800461c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045e4:	4b09      	ldr	r3, [pc, #36]	; (800460c <HAL_RCC_OscConfig+0x27c>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ea:	f7fe ffc7 	bl	800357c <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f0:	e00e      	b.n	8004610 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045f2:	f7fe ffc3 	bl	800357c <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d907      	bls.n	8004610 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e15c      	b.n	80048be <HAL_RCC_OscConfig+0x52e>
 8004604:	40023800 	.word	0x40023800
 8004608:	42470000 	.word	0x42470000
 800460c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004610:	4b8a      	ldr	r3, [pc, #552]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 8004612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1ea      	bne.n	80045f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8097 	beq.w	8004758 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800462a:	2300      	movs	r3, #0
 800462c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800462e:	4b83      	ldr	r3, [pc, #524]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10f      	bne.n	800465a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	4b7f      	ldr	r3, [pc, #508]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	4a7e      	ldr	r2, [pc, #504]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 8004644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004648:	6413      	str	r3, [r2, #64]	; 0x40
 800464a:	4b7c      	ldr	r3, [pc, #496]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004652:	60bb      	str	r3, [r7, #8]
 8004654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004656:	2301      	movs	r3, #1
 8004658:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465a:	4b79      	ldr	r3, [pc, #484]	; (8004840 <HAL_RCC_OscConfig+0x4b0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004662:	2b00      	cmp	r3, #0
 8004664:	d118      	bne.n	8004698 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004666:	4b76      	ldr	r3, [pc, #472]	; (8004840 <HAL_RCC_OscConfig+0x4b0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a75      	ldr	r2, [pc, #468]	; (8004840 <HAL_RCC_OscConfig+0x4b0>)
 800466c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004672:	f7fe ff83 	bl	800357c <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467a:	f7fe ff7f 	bl	800357c <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e118      	b.n	80048be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468c:	4b6c      	ldr	r3, [pc, #432]	; (8004840 <HAL_RCC_OscConfig+0x4b0>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0f0      	beq.n	800467a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d106      	bne.n	80046ae <HAL_RCC_OscConfig+0x31e>
 80046a0:	4b66      	ldr	r3, [pc, #408]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	4a65      	ldr	r2, [pc, #404]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	6713      	str	r3, [r2, #112]	; 0x70
 80046ac:	e01c      	b.n	80046e8 <HAL_RCC_OscConfig+0x358>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b05      	cmp	r3, #5
 80046b4:	d10c      	bne.n	80046d0 <HAL_RCC_OscConfig+0x340>
 80046b6:	4b61      	ldr	r3, [pc, #388]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	4a60      	ldr	r2, [pc, #384]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 80046bc:	f043 0304 	orr.w	r3, r3, #4
 80046c0:	6713      	str	r3, [r2, #112]	; 0x70
 80046c2:	4b5e      	ldr	r3, [pc, #376]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	4a5d      	ldr	r2, [pc, #372]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 80046c8:	f043 0301 	orr.w	r3, r3, #1
 80046cc:	6713      	str	r3, [r2, #112]	; 0x70
 80046ce:	e00b      	b.n	80046e8 <HAL_RCC_OscConfig+0x358>
 80046d0:	4b5a      	ldr	r3, [pc, #360]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	4a59      	ldr	r2, [pc, #356]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 80046d6:	f023 0301 	bic.w	r3, r3, #1
 80046da:	6713      	str	r3, [r2, #112]	; 0x70
 80046dc:	4b57      	ldr	r3, [pc, #348]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 80046de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e0:	4a56      	ldr	r2, [pc, #344]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 80046e2:	f023 0304 	bic.w	r3, r3, #4
 80046e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d015      	beq.n	800471c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f0:	f7fe ff44 	bl	800357c <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f6:	e00a      	b.n	800470e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f8:	f7fe ff40 	bl	800357c <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	f241 3288 	movw	r2, #5000	; 0x1388
 8004706:	4293      	cmp	r3, r2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e0d7      	b.n	80048be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470e:	4b4b      	ldr	r3, [pc, #300]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0ee      	beq.n	80046f8 <HAL_RCC_OscConfig+0x368>
 800471a:	e014      	b.n	8004746 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471c:	f7fe ff2e 	bl	800357c <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004722:	e00a      	b.n	800473a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004724:	f7fe ff2a 	bl	800357c <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e0c1      	b.n	80048be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800473a:	4b40      	ldr	r3, [pc, #256]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 800473c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1ee      	bne.n	8004724 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004746:	7dfb      	ldrb	r3, [r7, #23]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d105      	bne.n	8004758 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800474c:	4b3b      	ldr	r3, [pc, #236]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	4a3a      	ldr	r2, [pc, #232]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 8004752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004756:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80ad 	beq.w	80048bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004762:	4b36      	ldr	r3, [pc, #216]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	2b08      	cmp	r3, #8
 800476c:	d060      	beq.n	8004830 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d145      	bne.n	8004802 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004776:	4b33      	ldr	r3, [pc, #204]	; (8004844 <HAL_RCC_OscConfig+0x4b4>)
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477c:	f7fe fefe 	bl	800357c <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004784:	f7fe fefa 	bl	800357c <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e093      	b.n	80048be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004796:	4b29      	ldr	r3, [pc, #164]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69da      	ldr	r2, [r3, #28]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	019b      	lsls	r3, r3, #6
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b8:	085b      	lsrs	r3, r3, #1
 80047ba:	3b01      	subs	r3, #1
 80047bc:	041b      	lsls	r3, r3, #16
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	061b      	lsls	r3, r3, #24
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	071b      	lsls	r3, r3, #28
 80047ce:	491b      	ldr	r1, [pc, #108]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d4:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <HAL_RCC_OscConfig+0x4b4>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047da:	f7fe fecf 	bl	800357c <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e2:	f7fe fecb 	bl	800357c <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e064      	b.n	80048be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f4:	4b11      	ldr	r3, [pc, #68]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCC_OscConfig+0x452>
 8004800:	e05c      	b.n	80048bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004802:	4b10      	ldr	r3, [pc, #64]	; (8004844 <HAL_RCC_OscConfig+0x4b4>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004808:	f7fe feb8 	bl	800357c <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004810:	f7fe feb4 	bl	800357c <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e04d      	b.n	80048be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004822:	4b06      	ldr	r3, [pc, #24]	; (800483c <HAL_RCC_OscConfig+0x4ac>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x480>
 800482e:	e045      	b.n	80048bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d107      	bne.n	8004848 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e040      	b.n	80048be <HAL_RCC_OscConfig+0x52e>
 800483c:	40023800 	.word	0x40023800
 8004840:	40007000 	.word	0x40007000
 8004844:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004848:	4b1f      	ldr	r3, [pc, #124]	; (80048c8 <HAL_RCC_OscConfig+0x538>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d030      	beq.n	80048b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004860:	429a      	cmp	r2, r3
 8004862:	d129      	bne.n	80048b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d122      	bne.n	80048b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004878:	4013      	ands	r3, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800487e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004880:	4293      	cmp	r3, r2
 8004882:	d119      	bne.n	80048b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	085b      	lsrs	r3, r3, #1
 8004890:	3b01      	subs	r3, #1
 8004892:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004894:	429a      	cmp	r2, r3
 8004896:	d10f      	bne.n	80048b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d107      	bne.n	80048b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800

080048cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e07b      	b.n	80049d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d108      	bne.n	80048f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ee:	d009      	beq.n	8004904 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	61da      	str	r2, [r3, #28]
 80048f6:	e005      	b.n	8004904 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d106      	bne.n	8004924 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fe fb48 	bl	8002fb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800493a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004988:	ea42 0103 	orr.w	r1, r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004990:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	0c1b      	lsrs	r3, r3, #16
 80049a2:	f003 0104 	and.w	r1, r3, #4
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	f003 0210 	and.w	r2, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69da      	ldr	r2, [r3, #28]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e041      	b.n	8004a74 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d106      	bne.n	8004a0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7fe fb6b 	bl	80030e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	f000 fb03 	bl	8005028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d001      	beq.n	8004a94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e046      	b.n	8004b22 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a23      	ldr	r2, [pc, #140]	; (8004b30 <HAL_TIM_Base_Start+0xb4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d022      	beq.n	8004aec <HAL_TIM_Base_Start+0x70>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aae:	d01d      	beq.n	8004aec <HAL_TIM_Base_Start+0x70>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a1f      	ldr	r2, [pc, #124]	; (8004b34 <HAL_TIM_Base_Start+0xb8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d018      	beq.n	8004aec <HAL_TIM_Base_Start+0x70>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a1e      	ldr	r2, [pc, #120]	; (8004b38 <HAL_TIM_Base_Start+0xbc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d013      	beq.n	8004aec <HAL_TIM_Base_Start+0x70>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a1c      	ldr	r2, [pc, #112]	; (8004b3c <HAL_TIM_Base_Start+0xc0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00e      	beq.n	8004aec <HAL_TIM_Base_Start+0x70>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a1b      	ldr	r2, [pc, #108]	; (8004b40 <HAL_TIM_Base_Start+0xc4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d009      	beq.n	8004aec <HAL_TIM_Base_Start+0x70>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a19      	ldr	r2, [pc, #100]	; (8004b44 <HAL_TIM_Base_Start+0xc8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <HAL_TIM_Base_Start+0x70>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <HAL_TIM_Base_Start+0xcc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d111      	bne.n	8004b10 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b06      	cmp	r3, #6
 8004afc:	d010      	beq.n	8004b20 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0201 	orr.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0e:	e007      	b.n	8004b20 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40010000 	.word	0x40010000
 8004b34:	40000400 	.word	0x40000400
 8004b38:	40000800 	.word	0x40000800
 8004b3c:	40000c00 	.word	0x40000c00
 8004b40:	40010400 	.word	0x40010400
 8004b44:	40014000 	.word	0x40014000
 8004b48:	40001800 	.word	0x40001800

08004b4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e097      	b.n	8004c90 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d106      	bne.n	8004b7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7fe fa65 	bl	8003044 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b90:	f023 0307 	bic.w	r3, r3, #7
 8004b94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f000 fa41 	bl	8005028 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bce:	f023 0303 	bic.w	r3, r3, #3
 8004bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	021b      	lsls	r3, r3, #8
 8004bde:	4313      	orrs	r3, r2
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004bec:	f023 030c 	bic.w	r3, r3, #12
 8004bf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	011a      	lsls	r2, r3, #4
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	031b      	lsls	r3, r3, #12
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c2a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004c32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ca8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cb0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cb8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004cc0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d110      	bne.n	8004cea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d102      	bne.n	8004cd4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cce:	7b7b      	ldrb	r3, [r7, #13]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d001      	beq.n	8004cd8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e069      	b.n	8004dac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce8:	e031      	b.n	8004d4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d110      	bne.n	8004d12 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cf0:	7bbb      	ldrb	r3, [r7, #14]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d102      	bne.n	8004cfc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cf6:	7b3b      	ldrb	r3, [r7, #12]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d001      	beq.n	8004d00 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e055      	b.n	8004dac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d10:	e01d      	b.n	8004d4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d108      	bne.n	8004d2a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d18:	7bbb      	ldrb	r3, [r7, #14]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d105      	bne.n	8004d2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d1e:	7b7b      	ldrb	r3, [r7, #13]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d102      	bne.n	8004d2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d24:	7b3b      	ldrb	r3, [r7, #12]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d001      	beq.n	8004d2e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e03e      	b.n	8004dac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2202      	movs	r2, #2
 8004d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2202      	movs	r2, #2
 8004d3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2202      	movs	r2, #2
 8004d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2202      	movs	r2, #2
 8004d4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <HAL_TIM_Encoder_Start+0xc4>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d008      	beq.n	8004d6c <HAL_TIM_Encoder_Start+0xd4>
 8004d5a:	e00f      	b.n	8004d7c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2201      	movs	r2, #1
 8004d62:	2100      	movs	r1, #0
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 f9ff 	bl	8005168 <TIM_CCxChannelCmd>
      break;
 8004d6a:	e016      	b.n	8004d9a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2201      	movs	r2, #1
 8004d72:	2104      	movs	r1, #4
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 f9f7 	bl	8005168 <TIM_CCxChannelCmd>
      break;
 8004d7a:	e00e      	b.n	8004d9a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2201      	movs	r2, #1
 8004d82:	2100      	movs	r1, #0
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 f9ef 	bl	8005168 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	2104      	movs	r1, #4
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 f9e8 	bl	8005168 <TIM_CCxChannelCmd>
      break;
 8004d98:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0201 	orr.w	r2, r2, #1
 8004da8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d122      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d11b      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0202 	mvn.w	r2, #2
 8004de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f8f8 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 8004dfc:	e005      	b.n	8004e0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f8ea 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f8fb 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d122      	bne.n	8004e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d11b      	bne.n	8004e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0204 	mvn.w	r2, #4
 8004e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f8ce 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 8004e50:	e005      	b.n	8004e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f8c0 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f8d1 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d122      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d11b      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f06f 0208 	mvn.w	r2, #8
 8004e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2204      	movs	r2, #4
 8004e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f8a4 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 8004ea4:	e005      	b.n	8004eb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f896 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f8a7 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	2b10      	cmp	r3, #16
 8004ec4:	d122      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b10      	cmp	r3, #16
 8004ed2:	d11b      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0210 	mvn.w	r2, #16
 8004edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f87a 	bl	8004fec <HAL_TIM_IC_CaptureCallback>
 8004ef8:	e005      	b.n	8004f06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f86c 	bl	8004fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f87d 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d10e      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d107      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f06f 0201 	mvn.w	r2, #1
 8004f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f846 	bl	8004fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f42:	2b80      	cmp	r3, #128	; 0x80
 8004f44:	d10e      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f50:	2b80      	cmp	r3, #128	; 0x80
 8004f52:	d107      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f9ae 	bl	80052c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6e:	2b40      	cmp	r3, #64	; 0x40
 8004f70:	d10e      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	d107      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f842 	bl	8005014 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d10e      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d107      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f06f 0220 	mvn.w	r2, #32
 8004fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f978 	bl	80052ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fbc:	bf00      	nop
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a40      	ldr	r2, [pc, #256]	; (800513c <TIM_Base_SetConfig+0x114>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d013      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005046:	d00f      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a3d      	ldr	r2, [pc, #244]	; (8005140 <TIM_Base_SetConfig+0x118>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00b      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a3c      	ldr	r2, [pc, #240]	; (8005144 <TIM_Base_SetConfig+0x11c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d007      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a3b      	ldr	r2, [pc, #236]	; (8005148 <TIM_Base_SetConfig+0x120>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d003      	beq.n	8005068 <TIM_Base_SetConfig+0x40>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a3a      	ldr	r2, [pc, #232]	; (800514c <TIM_Base_SetConfig+0x124>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d108      	bne.n	800507a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a2f      	ldr	r2, [pc, #188]	; (800513c <TIM_Base_SetConfig+0x114>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d02b      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005088:	d027      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a2c      	ldr	r2, [pc, #176]	; (8005140 <TIM_Base_SetConfig+0x118>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d023      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a2b      	ldr	r2, [pc, #172]	; (8005144 <TIM_Base_SetConfig+0x11c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d01f      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a2a      	ldr	r2, [pc, #168]	; (8005148 <TIM_Base_SetConfig+0x120>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d01b      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a29      	ldr	r2, [pc, #164]	; (800514c <TIM_Base_SetConfig+0x124>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d017      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a28      	ldr	r2, [pc, #160]	; (8005150 <TIM_Base_SetConfig+0x128>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d013      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a27      	ldr	r2, [pc, #156]	; (8005154 <TIM_Base_SetConfig+0x12c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00f      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a26      	ldr	r2, [pc, #152]	; (8005158 <TIM_Base_SetConfig+0x130>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00b      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a25      	ldr	r2, [pc, #148]	; (800515c <TIM_Base_SetConfig+0x134>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d007      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a24      	ldr	r2, [pc, #144]	; (8005160 <TIM_Base_SetConfig+0x138>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d003      	beq.n	80050da <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a23      	ldr	r2, [pc, #140]	; (8005164 <TIM_Base_SetConfig+0x13c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d108      	bne.n	80050ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a0a      	ldr	r2, [pc, #40]	; (800513c <TIM_Base_SetConfig+0x114>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <TIM_Base_SetConfig+0xf8>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a0c      	ldr	r2, [pc, #48]	; (800514c <TIM_Base_SetConfig+0x124>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d103      	bne.n	8005128 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	615a      	str	r2, [r3, #20]
}
 800512e:	bf00      	nop
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40010000 	.word	0x40010000
 8005140:	40000400 	.word	0x40000400
 8005144:	40000800 	.word	0x40000800
 8005148:	40000c00 	.word	0x40000c00
 800514c:	40010400 	.word	0x40010400
 8005150:	40014000 	.word	0x40014000
 8005154:	40014400 	.word	0x40014400
 8005158:	40014800 	.word	0x40014800
 800515c:	40001800 	.word	0x40001800
 8005160:	40001c00 	.word	0x40001c00
 8005164:	40002000 	.word	0x40002000

08005168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f003 031f 	and.w	r3, r3, #31
 800517a:	2201      	movs	r2, #1
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a1a      	ldr	r2, [r3, #32]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	43db      	mvns	r3, r3
 800518a:	401a      	ands	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a1a      	ldr	r2, [r3, #32]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f003 031f 	and.w	r3, r3, #31
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	fa01 f303 	lsl.w	r3, r1, r3
 80051a0:	431a      	orrs	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e05a      	b.n	8005282 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a21      	ldr	r2, [pc, #132]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d022      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005218:	d01d      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d018      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1b      	ldr	r2, [pc, #108]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1a      	ldr	r2, [pc, #104]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00e      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a18      	ldr	r2, [pc, #96]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d009      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a17      	ldr	r2, [pc, #92]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a15      	ldr	r2, [pc, #84]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d10c      	bne.n	8005270 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800525c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	4313      	orrs	r3, r2
 8005266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40010000 	.word	0x40010000
 8005294:	40000400 	.word	0x40000400
 8005298:	40000800 	.word	0x40000800
 800529c:	40000c00 	.word	0x40000c00
 80052a0:	40010400 	.word	0x40010400
 80052a4:	40014000 	.word	0x40014000
 80052a8:	40001800 	.word	0x40001800

080052ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e03f      	b.n	8005366 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d106      	bne.n	8005300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fd ff28 	bl	8003150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2224      	movs	r2, #36	; 0x24
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fe37 	bl	8005f8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800532c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695a      	ldr	r2, [r3, #20]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800533c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800534c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2220      	movs	r2, #32
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b08a      	sub	sp, #40	; 0x28
 8005372:	af02      	add	r7, sp, #8
 8005374:	60f8      	str	r0, [r7, #12]
 8005376:	60b9      	str	r1, [r7, #8]
 8005378:	603b      	str	r3, [r7, #0]
 800537a:	4613      	mov	r3, r2
 800537c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b20      	cmp	r3, #32
 800538c:	d17c      	bne.n	8005488 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <HAL_UART_Transmit+0x2c>
 8005394:	88fb      	ldrh	r3, [r7, #6]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e075      	b.n	800548a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_UART_Transmit+0x3e>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e06e      	b.n	800548a <HAL_UART_Transmit+0x11c>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2221      	movs	r2, #33	; 0x21
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053c2:	f7fe f8db 	bl	800357c <HAL_GetTick>
 80053c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	88fa      	ldrh	r2, [r7, #6]
 80053cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	88fa      	ldrh	r2, [r7, #6]
 80053d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053dc:	d108      	bne.n	80053f0 <HAL_UART_Transmit+0x82>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d104      	bne.n	80053f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	e003      	b.n	80053f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053f4:	2300      	movs	r3, #0
 80053f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005400:	e02a      	b.n	8005458 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2200      	movs	r2, #0
 800540a:	2180      	movs	r1, #128	; 0x80
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 fb77 	bl	8005b00 <UART_WaitOnFlagUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e036      	b.n	800548a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10b      	bne.n	800543a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005430:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	3302      	adds	r3, #2
 8005436:	61bb      	str	r3, [r7, #24]
 8005438:	e007      	b.n	800544a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	781a      	ldrb	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	3301      	adds	r3, #1
 8005448:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800545c:	b29b      	uxth	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1cf      	bne.n	8005402 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2200      	movs	r2, #0
 800546a:	2140      	movs	r1, #64	; 0x40
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 fb47 	bl	8005b00 <UART_WaitOnFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e006      	b.n	800548a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2220      	movs	r2, #32
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	e000      	b.n	800548a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005488:	2302      	movs	r3, #2
  }
}
 800548a:	4618      	mov	r0, r3
 800548c:	3720      	adds	r7, #32
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b084      	sub	sp, #16
 8005496:	af00      	add	r7, sp, #0
 8005498:	60f8      	str	r0, [r7, #12]
 800549a:	60b9      	str	r1, [r7, #8]
 800549c:	4613      	mov	r3, r2
 800549e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d11d      	bne.n	80054e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_UART_Receive_IT+0x26>
 80054b2:	88fb      	ldrh	r3, [r7, #6]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e016      	b.n	80054ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <HAL_UART_Receive_IT+0x38>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e00f      	b.n	80054ea <HAL_UART_Receive_IT+0x58>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054d8:	88fb      	ldrh	r3, [r7, #6]
 80054da:	461a      	mov	r2, r3
 80054dc:	68b9      	ldr	r1, [r7, #8]
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 fb7c 	bl	8005bdc <UART_Start_Receive_IT>
 80054e4:	4603      	mov	r3, r0
 80054e6:	e000      	b.n	80054ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80054e8:	2302      	movs	r3, #2
  }
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b08c      	sub	sp, #48	; 0x30
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	60f8      	str	r0, [r7, #12]
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	4613      	mov	r3, r2
 80054fe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b20      	cmp	r3, #32
 800550a:	d152      	bne.n	80055b2 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8005512:	88fb      	ldrh	r3, [r7, #6]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e04b      	b.n	80055b4 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8005526:	2302      	movs	r3, #2
 8005528:	e044      	b.n	80055b4 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005538:	88fb      	ldrh	r3, [r7, #6]
 800553a:	461a      	mov	r2, r3
 800553c:	68b9      	ldr	r1, [r7, #8]
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 fb4c 	bl	8005bdc <UART_Start_Receive_IT>
 8005544:	4603      	mov	r3, r0
 8005546:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800554a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800554e:	2b00      	cmp	r3, #0
 8005550:	d12c      	bne.n	80055ac <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005556:	2b01      	cmp	r3, #1
 8005558:	d125      	bne.n	80055a6 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800555a:	2300      	movs	r3, #0
 800555c:	613b      	str	r3, [r7, #16]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	330c      	adds	r3, #12
 8005576:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	e853 3f00 	ldrex	r3, [r3]
 800557e:	617b      	str	r3, [r7, #20]
   return(result);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f043 0310 	orr.w	r3, r3, #16
 8005586:	62bb      	str	r3, [r7, #40]	; 0x28
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	330c      	adds	r3, #12
 800558e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005590:	627a      	str	r2, [r7, #36]	; 0x24
 8005592:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005594:	6a39      	ldr	r1, [r7, #32]
 8005596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005598:	e841 2300 	strex	r3, r2, [r1]
 800559c:	61fb      	str	r3, [r7, #28]
   return(result);
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1e5      	bne.n	8005570 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 80055a4:	e002      	b.n	80055ac <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80055ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055b0:	e000      	b.n	80055b4 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80055b2:	2302      	movs	r3, #2
  }
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3730      	adds	r7, #48	; 0x30
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b0ba      	sub	sp, #232	; 0xe8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80055fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10f      	bne.n	8005622 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <HAL_UART_IRQHandler+0x66>
 800560e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fbfb 	bl	8005e16 <UART_Receive_IT>
      return;
 8005620:	e256      	b.n	8005ad0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005622:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 80de 	beq.w	80057e8 <HAL_UART_IRQHandler+0x22c>
 800562c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d106      	bne.n	8005646 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800563c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 80d1 	beq.w	80057e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00b      	beq.n	800566a <HAL_UART_IRQHandler+0xae>
 8005652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	f043 0201 	orr.w	r2, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800566a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00b      	beq.n	800568e <HAL_UART_IRQHandler+0xd2>
 8005676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d005      	beq.n	800568e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f043 0202 	orr.w	r2, r3, #2
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800568e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00b      	beq.n	80056b2 <HAL_UART_IRQHandler+0xf6>
 800569a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d005      	beq.n	80056b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	f043 0204 	orr.w	r2, r3, #4
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d011      	beq.n	80056e2 <HAL_UART_IRQHandler+0x126>
 80056be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d105      	bne.n	80056d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d005      	beq.n	80056e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	f043 0208 	orr.w	r2, r3, #8
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 81ed 	beq.w	8005ac6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f0:	f003 0320 	and.w	r3, r3, #32
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d008      	beq.n	800570a <HAL_UART_IRQHandler+0x14e>
 80056f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056fc:	f003 0320 	and.w	r3, r3, #32
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fb86 	bl	8005e16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005714:	2b40      	cmp	r3, #64	; 0x40
 8005716:	bf0c      	ite	eq
 8005718:	2301      	moveq	r3, #1
 800571a:	2300      	movne	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d103      	bne.n	8005736 <HAL_UART_IRQHandler+0x17a>
 800572e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005732:	2b00      	cmp	r3, #0
 8005734:	d04f      	beq.n	80057d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fa8e 	bl	8005c58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	d141      	bne.n	80057ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3314      	adds	r3, #20
 8005750:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005758:	e853 3f00 	ldrex	r3, [r3]
 800575c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005760:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3314      	adds	r3, #20
 8005772:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005776:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800577a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005782:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800578e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1d9      	bne.n	800574a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579a:	2b00      	cmp	r3, #0
 800579c:	d013      	beq.n	80057c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a2:	4a7d      	ldr	r2, [pc, #500]	; (8005998 <HAL_UART_IRQHandler+0x3dc>)
 80057a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fe f8a5 	bl	80038fa <HAL_DMA_Abort_IT>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d016      	beq.n	80057e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057c0:	4610      	mov	r0, r2
 80057c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c4:	e00e      	b.n	80057e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f990 	bl	8005aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057cc:	e00a      	b.n	80057e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f98c 	bl	8005aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d4:	e006      	b.n	80057e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f988 	bl	8005aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80057e2:	e170      	b.n	8005ac6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e4:	bf00      	nop
    return;
 80057e6:	e16e      	b.n	8005ac6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	f040 814a 	bne.w	8005a86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80057f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f6:	f003 0310 	and.w	r3, r3, #16
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 8143 	beq.w	8005a86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005804:	f003 0310 	and.w	r3, r3, #16
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 813c 	beq.w	8005a86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800580e:	2300      	movs	r3, #0
 8005810:	60bb      	str	r3, [r7, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	60bb      	str	r3, [r7, #8]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	60bb      	str	r3, [r7, #8]
 8005822:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582e:	2b40      	cmp	r3, #64	; 0x40
 8005830:	f040 80b4 	bne.w	800599c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005840:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 8140 	beq.w	8005aca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800584e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005852:	429a      	cmp	r2, r3
 8005854:	f080 8139 	bcs.w	8005aca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800585e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800586a:	f000 8088 	beq.w	800597e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	330c      	adds	r3, #12
 8005874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005884:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800588c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	330c      	adds	r3, #12
 8005896:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800589a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800589e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1d9      	bne.n	800586e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	3314      	adds	r3, #20
 80058c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058c4:	e853 3f00 	ldrex	r3, [r3]
 80058c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058cc:	f023 0301 	bic.w	r3, r3, #1
 80058d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3314      	adds	r3, #20
 80058da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80058f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1e1      	bne.n	80058ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3314      	adds	r3, #20
 80058fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005900:	e853 3f00 	ldrex	r3, [r3]
 8005904:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800590c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3314      	adds	r3, #20
 8005916:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800591a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800591c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005920:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005922:	e841 2300 	strex	r3, r2, [r1]
 8005926:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1e3      	bne.n	80058f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2220      	movs	r2, #32
 8005932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	330c      	adds	r3, #12
 8005942:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005946:	e853 3f00 	ldrex	r3, [r3]
 800594a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800594c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800594e:	f023 0310 	bic.w	r3, r3, #16
 8005952:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	330c      	adds	r3, #12
 800595c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005960:	65ba      	str	r2, [r7, #88]	; 0x58
 8005962:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005964:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005966:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005968:	e841 2300 	strex	r3, r2, [r1]
 800596c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800596e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e3      	bne.n	800593c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	4618      	mov	r0, r3
 800597a:	f7fd ff4e 	bl	800381a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005986:	b29b      	uxth	r3, r3
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	b29b      	uxth	r3, r3
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fc fc6a 	bl	8002268 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005994:	e099      	b.n	8005aca <HAL_UART_IRQHandler+0x50e>
 8005996:	bf00      	nop
 8005998:	08005d1f 	.word	0x08005d1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 808b 	beq.w	8005ace <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80059b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 8086 	beq.w	8005ace <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	330c      	adds	r3, #12
 80059c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	330c      	adds	r3, #12
 80059e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80059e6:	647a      	str	r2, [r7, #68]	; 0x44
 80059e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059ee:	e841 2300 	strex	r3, r2, [r1]
 80059f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1e3      	bne.n	80059c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3314      	adds	r3, #20
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	623b      	str	r3, [r7, #32]
   return(result);
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	f023 0301 	bic.w	r3, r3, #1
 8005a10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3314      	adds	r3, #20
 8005a1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a1e:	633a      	str	r2, [r7, #48]	; 0x30
 8005a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a26:	e841 2300 	strex	r3, r2, [r1]
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1e3      	bne.n	80059fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	330c      	adds	r3, #12
 8005a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0310 	bic.w	r3, r3, #16
 8005a56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	330c      	adds	r3, #12
 8005a60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005a64:	61fa      	str	r2, [r7, #28]
 8005a66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a68:	69b9      	ldr	r1, [r7, #24]
 8005a6a:	69fa      	ldr	r2, [r7, #28]
 8005a6c:	e841 2300 	strex	r3, r2, [r1]
 8005a70:	617b      	str	r3, [r7, #20]
   return(result);
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1e3      	bne.n	8005a40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fc fbf2 	bl	8002268 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a84:	e023      	b.n	8005ace <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d009      	beq.n	8005aa6 <HAL_UART_IRQHandler+0x4ea>
 8005a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f951 	bl	8005d46 <UART_Transmit_IT>
    return;
 8005aa4:	e014      	b.n	8005ad0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00e      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x514>
 8005ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d008      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f991 	bl	8005de6 <UART_EndTransmit_IT>
    return;
 8005ac4:	e004      	b.n	8005ad0 <HAL_UART_IRQHandler+0x514>
    return;
 8005ac6:	bf00      	nop
 8005ac8:	e002      	b.n	8005ad0 <HAL_UART_IRQHandler+0x514>
      return;
 8005aca:	bf00      	nop
 8005acc:	e000      	b.n	8005ad0 <HAL_UART_IRQHandler+0x514>
      return;
 8005ace:	bf00      	nop
  }
}
 8005ad0:	37e8      	adds	r7, #232	; 0xe8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop

08005ad8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b090      	sub	sp, #64	; 0x40
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	603b      	str	r3, [r7, #0]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b10:	e050      	b.n	8005bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b18:	d04c      	beq.n	8005bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d007      	beq.n	8005b30 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b20:	f7fd fd2c 	bl	800357c <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d241      	bcs.n	8005bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	330c      	adds	r3, #12
 8005b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	330c      	adds	r3, #12
 8005b4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b50:	637a      	str	r2, [r7, #52]	; 0x34
 8005b52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e5      	bne.n	8005b30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3314      	adds	r3, #20
 8005b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	613b      	str	r3, [r7, #16]
   return(result);
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f023 0301 	bic.w	r3, r3, #1
 8005b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3314      	adds	r3, #20
 8005b82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b84:	623a      	str	r2, [r7, #32]
 8005b86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	69f9      	ldr	r1, [r7, #28]
 8005b8a:	6a3a      	ldr	r2, [r7, #32]
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e5      	bne.n	8005b64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e00f      	b.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	bf0c      	ite	eq
 8005bc4:	2301      	moveq	r3, #1
 8005bc6:	2300      	movne	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	461a      	mov	r2, r3
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d09f      	beq.n	8005b12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3740      	adds	r7, #64	; 0x40
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	4613      	mov	r3, r2
 8005be8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	88fa      	ldrh	r2, [r7, #6]
 8005bf4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	88fa      	ldrh	r2, [r7, #6]
 8005bfa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2222      	movs	r2, #34	; 0x22
 8005c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d007      	beq.n	8005c2a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68da      	ldr	r2, [r3, #12]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c28:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695a      	ldr	r2, [r3, #20]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0201 	orr.w	r2, r2, #1
 8005c38:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0220 	orr.w	r2, r2, #32
 8005c48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b095      	sub	sp, #84	; 0x54
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	330c      	adds	r3, #12
 8005c66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6a:	e853 3f00 	ldrex	r3, [r3]
 8005c6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c80:	643a      	str	r2, [r7, #64]	; 0x40
 8005c82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c88:	e841 2300 	strex	r3, r2, [r1]
 8005c8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e5      	bne.n	8005c60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3314      	adds	r3, #20
 8005c9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	e853 3f00 	ldrex	r3, [r3]
 8005ca2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f023 0301 	bic.w	r3, r3, #1
 8005caa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3314      	adds	r3, #20
 8005cb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cbc:	e841 2300 	strex	r3, r2, [r1]
 8005cc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e5      	bne.n	8005c94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d119      	bne.n	8005d04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	330c      	adds	r3, #12
 8005cd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f023 0310 	bic.w	r3, r3, #16
 8005ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cf0:	61ba      	str	r2, [r7, #24]
 8005cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	6979      	ldr	r1, [r7, #20]
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e5      	bne.n	8005cd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d12:	bf00      	nop
 8005d14:	3754      	adds	r7, #84	; 0x54
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f7ff fed7 	bl	8005aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d3e:	bf00      	nop
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b21      	cmp	r3, #33	; 0x21
 8005d58:	d13e      	bne.n	8005dd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d62:	d114      	bne.n	8005d8e <UART_Transmit_IT+0x48>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d110      	bne.n	8005d8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	1c9a      	adds	r2, r3, #2
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	621a      	str	r2, [r3, #32]
 8005d8c:	e008      	b.n	8005da0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	1c59      	adds	r1, r3, #1
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6211      	str	r1, [r2, #32]
 8005d98:	781a      	ldrb	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	4619      	mov	r1, r3
 8005dae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10f      	bne.n	8005dd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e000      	b.n	8005dda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005dd8:	2302      	movs	r3, #2
  }
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dfc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7ff fe66 	bl	8005ad8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b08c      	sub	sp, #48	; 0x30
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b22      	cmp	r3, #34	; 0x22
 8005e28:	f040 80ab 	bne.w	8005f82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e34:	d117      	bne.n	8005e66 <UART_Receive_IT+0x50>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d113      	bne.n	8005e66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5e:	1c9a      	adds	r2, r3, #2
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	629a      	str	r2, [r3, #40]	; 0x28
 8005e64:	e026      	b.n	8005eb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e78:	d007      	beq.n	8005e8a <UART_Receive_IT+0x74>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10a      	bne.n	8005e98 <UART_Receive_IT+0x82>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d106      	bne.n	8005e98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	701a      	strb	r2, [r3, #0]
 8005e96:	e008      	b.n	8005eaa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d15a      	bne.n	8005f7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0220 	bic.w	r2, r2, #32
 8005ed6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ee6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695a      	ldr	r2, [r3, #20]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0201 	bic.w	r2, r2, #1
 8005ef6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d135      	bne.n	8005f74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	330c      	adds	r3, #12
 8005f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	e853 3f00 	ldrex	r3, [r3]
 8005f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f023 0310 	bic.w	r3, r3, #16
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	330c      	adds	r3, #12
 8005f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f2e:	623a      	str	r2, [r7, #32]
 8005f30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	69f9      	ldr	r1, [r7, #28]
 8005f34:	6a3a      	ldr	r2, [r7, #32]
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e5      	bne.n	8005f0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0310 	and.w	r3, r3, #16
 8005f4c:	2b10      	cmp	r3, #16
 8005f4e:	d10a      	bne.n	8005f66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7fc f97b 	bl	8002268 <HAL_UARTEx_RxEventCallback>
 8005f72:	e002      	b.n	8005f7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7fc fa3d 	bl	80023f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	e002      	b.n	8005f84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	e000      	b.n	8005f84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005f82:	2302      	movs	r3, #2
  }
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3730      	adds	r7, #48	; 0x30
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f90:	b0c0      	sub	sp, #256	; 0x100
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa8:	68d9      	ldr	r1, [r3, #12]
 8005faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	ea40 0301 	orr.w	r3, r0, r1
 8005fb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fe4:	f021 010c 	bic.w	r1, r1, #12
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ff2:	430b      	orrs	r3, r1
 8005ff4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006006:	6999      	ldr	r1, [r3, #24]
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	ea40 0301 	orr.w	r3, r0, r1
 8006012:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	4b8f      	ldr	r3, [pc, #572]	; (8006258 <UART_SetConfig+0x2cc>)
 800601c:	429a      	cmp	r2, r3
 800601e:	d005      	beq.n	800602c <UART_SetConfig+0xa0>
 8006020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	4b8d      	ldr	r3, [pc, #564]	; (800625c <UART_SetConfig+0x2d0>)
 8006028:	429a      	cmp	r2, r3
 800602a:	d104      	bne.n	8006036 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800602c:	f7fd ff6c 	bl	8003f08 <HAL_RCC_GetPCLK2Freq>
 8006030:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006034:	e003      	b.n	800603e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006036:	f7fd ff53 	bl	8003ee0 <HAL_RCC_GetPCLK1Freq>
 800603a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800603e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006048:	f040 810c 	bne.w	8006264 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800604c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006050:	2200      	movs	r2, #0
 8006052:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006056:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800605a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800605e:	4622      	mov	r2, r4
 8006060:	462b      	mov	r3, r5
 8006062:	1891      	adds	r1, r2, r2
 8006064:	65b9      	str	r1, [r7, #88]	; 0x58
 8006066:	415b      	adcs	r3, r3
 8006068:	65fb      	str	r3, [r7, #92]	; 0x5c
 800606a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800606e:	4621      	mov	r1, r4
 8006070:	eb12 0801 	adds.w	r8, r2, r1
 8006074:	4629      	mov	r1, r5
 8006076:	eb43 0901 	adc.w	r9, r3, r1
 800607a:	f04f 0200 	mov.w	r2, #0
 800607e:	f04f 0300 	mov.w	r3, #0
 8006082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800608a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800608e:	4690      	mov	r8, r2
 8006090:	4699      	mov	r9, r3
 8006092:	4623      	mov	r3, r4
 8006094:	eb18 0303 	adds.w	r3, r8, r3
 8006098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800609c:	462b      	mov	r3, r5
 800609e:	eb49 0303 	adc.w	r3, r9, r3
 80060a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060ba:	460b      	mov	r3, r1
 80060bc:	18db      	adds	r3, r3, r3
 80060be:	653b      	str	r3, [r7, #80]	; 0x50
 80060c0:	4613      	mov	r3, r2
 80060c2:	eb42 0303 	adc.w	r3, r2, r3
 80060c6:	657b      	str	r3, [r7, #84]	; 0x54
 80060c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060d0:	f7fa fe0a 	bl	8000ce8 <__aeabi_uldivmod>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4b61      	ldr	r3, [pc, #388]	; (8006260 <UART_SetConfig+0x2d4>)
 80060da:	fba3 2302 	umull	r2, r3, r3, r2
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	011c      	lsls	r4, r3, #4
 80060e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060e6:	2200      	movs	r2, #0
 80060e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80060f4:	4642      	mov	r2, r8
 80060f6:	464b      	mov	r3, r9
 80060f8:	1891      	adds	r1, r2, r2
 80060fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80060fc:	415b      	adcs	r3, r3
 80060fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006100:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006104:	4641      	mov	r1, r8
 8006106:	eb12 0a01 	adds.w	sl, r2, r1
 800610a:	4649      	mov	r1, r9
 800610c:	eb43 0b01 	adc.w	fp, r3, r1
 8006110:	f04f 0200 	mov.w	r2, #0
 8006114:	f04f 0300 	mov.w	r3, #0
 8006118:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800611c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006120:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006124:	4692      	mov	sl, r2
 8006126:	469b      	mov	fp, r3
 8006128:	4643      	mov	r3, r8
 800612a:	eb1a 0303 	adds.w	r3, sl, r3
 800612e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006132:	464b      	mov	r3, r9
 8006134:	eb4b 0303 	adc.w	r3, fp, r3
 8006138:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006148:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800614c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006150:	460b      	mov	r3, r1
 8006152:	18db      	adds	r3, r3, r3
 8006154:	643b      	str	r3, [r7, #64]	; 0x40
 8006156:	4613      	mov	r3, r2
 8006158:	eb42 0303 	adc.w	r3, r2, r3
 800615c:	647b      	str	r3, [r7, #68]	; 0x44
 800615e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006162:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006166:	f7fa fdbf 	bl	8000ce8 <__aeabi_uldivmod>
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	4611      	mov	r1, r2
 8006170:	4b3b      	ldr	r3, [pc, #236]	; (8006260 <UART_SetConfig+0x2d4>)
 8006172:	fba3 2301 	umull	r2, r3, r3, r1
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	2264      	movs	r2, #100	; 0x64
 800617a:	fb02 f303 	mul.w	r3, r2, r3
 800617e:	1acb      	subs	r3, r1, r3
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006186:	4b36      	ldr	r3, [pc, #216]	; (8006260 <UART_SetConfig+0x2d4>)
 8006188:	fba3 2302 	umull	r2, r3, r3, r2
 800618c:	095b      	lsrs	r3, r3, #5
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006194:	441c      	add	r4, r3
 8006196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800619a:	2200      	movs	r2, #0
 800619c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061a8:	4642      	mov	r2, r8
 80061aa:	464b      	mov	r3, r9
 80061ac:	1891      	adds	r1, r2, r2
 80061ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80061b0:	415b      	adcs	r3, r3
 80061b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061b8:	4641      	mov	r1, r8
 80061ba:	1851      	adds	r1, r2, r1
 80061bc:	6339      	str	r1, [r7, #48]	; 0x30
 80061be:	4649      	mov	r1, r9
 80061c0:	414b      	adcs	r3, r1
 80061c2:	637b      	str	r3, [r7, #52]	; 0x34
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061d0:	4659      	mov	r1, fp
 80061d2:	00cb      	lsls	r3, r1, #3
 80061d4:	4651      	mov	r1, sl
 80061d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061da:	4651      	mov	r1, sl
 80061dc:	00ca      	lsls	r2, r1, #3
 80061de:	4610      	mov	r0, r2
 80061e0:	4619      	mov	r1, r3
 80061e2:	4603      	mov	r3, r0
 80061e4:	4642      	mov	r2, r8
 80061e6:	189b      	adds	r3, r3, r2
 80061e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061ec:	464b      	mov	r3, r9
 80061ee:	460a      	mov	r2, r1
 80061f0:	eb42 0303 	adc.w	r3, r2, r3
 80061f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006204:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006208:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800620c:	460b      	mov	r3, r1
 800620e:	18db      	adds	r3, r3, r3
 8006210:	62bb      	str	r3, [r7, #40]	; 0x28
 8006212:	4613      	mov	r3, r2
 8006214:	eb42 0303 	adc.w	r3, r2, r3
 8006218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800621a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800621e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006222:	f7fa fd61 	bl	8000ce8 <__aeabi_uldivmod>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4b0d      	ldr	r3, [pc, #52]	; (8006260 <UART_SetConfig+0x2d4>)
 800622c:	fba3 1302 	umull	r1, r3, r3, r2
 8006230:	095b      	lsrs	r3, r3, #5
 8006232:	2164      	movs	r1, #100	; 0x64
 8006234:	fb01 f303 	mul.w	r3, r1, r3
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	3332      	adds	r3, #50	; 0x32
 800623e:	4a08      	ldr	r2, [pc, #32]	; (8006260 <UART_SetConfig+0x2d4>)
 8006240:	fba2 2303 	umull	r2, r3, r2, r3
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	f003 0207 	and.w	r2, r3, #7
 800624a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4422      	add	r2, r4
 8006252:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006254:	e105      	b.n	8006462 <UART_SetConfig+0x4d6>
 8006256:	bf00      	nop
 8006258:	40011000 	.word	0x40011000
 800625c:	40011400 	.word	0x40011400
 8006260:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006268:	2200      	movs	r2, #0
 800626a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800626e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006272:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006276:	4642      	mov	r2, r8
 8006278:	464b      	mov	r3, r9
 800627a:	1891      	adds	r1, r2, r2
 800627c:	6239      	str	r1, [r7, #32]
 800627e:	415b      	adcs	r3, r3
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
 8006282:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006286:	4641      	mov	r1, r8
 8006288:	1854      	adds	r4, r2, r1
 800628a:	4649      	mov	r1, r9
 800628c:	eb43 0501 	adc.w	r5, r3, r1
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	00eb      	lsls	r3, r5, #3
 800629a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800629e:	00e2      	lsls	r2, r4, #3
 80062a0:	4614      	mov	r4, r2
 80062a2:	461d      	mov	r5, r3
 80062a4:	4643      	mov	r3, r8
 80062a6:	18e3      	adds	r3, r4, r3
 80062a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062ac:	464b      	mov	r3, r9
 80062ae:	eb45 0303 	adc.w	r3, r5, r3
 80062b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062c6:	f04f 0200 	mov.w	r2, #0
 80062ca:	f04f 0300 	mov.w	r3, #0
 80062ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062d2:	4629      	mov	r1, r5
 80062d4:	008b      	lsls	r3, r1, #2
 80062d6:	4621      	mov	r1, r4
 80062d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062dc:	4621      	mov	r1, r4
 80062de:	008a      	lsls	r2, r1, #2
 80062e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062e4:	f7fa fd00 	bl	8000ce8 <__aeabi_uldivmod>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4b60      	ldr	r3, [pc, #384]	; (8006470 <UART_SetConfig+0x4e4>)
 80062ee:	fba3 2302 	umull	r2, r3, r3, r2
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	011c      	lsls	r4, r3, #4
 80062f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006300:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006304:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006308:	4642      	mov	r2, r8
 800630a:	464b      	mov	r3, r9
 800630c:	1891      	adds	r1, r2, r2
 800630e:	61b9      	str	r1, [r7, #24]
 8006310:	415b      	adcs	r3, r3
 8006312:	61fb      	str	r3, [r7, #28]
 8006314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006318:	4641      	mov	r1, r8
 800631a:	1851      	adds	r1, r2, r1
 800631c:	6139      	str	r1, [r7, #16]
 800631e:	4649      	mov	r1, r9
 8006320:	414b      	adcs	r3, r1
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006330:	4659      	mov	r1, fp
 8006332:	00cb      	lsls	r3, r1, #3
 8006334:	4651      	mov	r1, sl
 8006336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800633a:	4651      	mov	r1, sl
 800633c:	00ca      	lsls	r2, r1, #3
 800633e:	4610      	mov	r0, r2
 8006340:	4619      	mov	r1, r3
 8006342:	4603      	mov	r3, r0
 8006344:	4642      	mov	r2, r8
 8006346:	189b      	adds	r3, r3, r2
 8006348:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800634c:	464b      	mov	r3, r9
 800634e:	460a      	mov	r2, r1
 8006350:	eb42 0303 	adc.w	r3, r2, r3
 8006354:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	67bb      	str	r3, [r7, #120]	; 0x78
 8006362:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006370:	4649      	mov	r1, r9
 8006372:	008b      	lsls	r3, r1, #2
 8006374:	4641      	mov	r1, r8
 8006376:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800637a:	4641      	mov	r1, r8
 800637c:	008a      	lsls	r2, r1, #2
 800637e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006382:	f7fa fcb1 	bl	8000ce8 <__aeabi_uldivmod>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4b39      	ldr	r3, [pc, #228]	; (8006470 <UART_SetConfig+0x4e4>)
 800638c:	fba3 1302 	umull	r1, r3, r3, r2
 8006390:	095b      	lsrs	r3, r3, #5
 8006392:	2164      	movs	r1, #100	; 0x64
 8006394:	fb01 f303 	mul.w	r3, r1, r3
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	011b      	lsls	r3, r3, #4
 800639c:	3332      	adds	r3, #50	; 0x32
 800639e:	4a34      	ldr	r2, [pc, #208]	; (8006470 <UART_SetConfig+0x4e4>)
 80063a0:	fba2 2303 	umull	r2, r3, r2, r3
 80063a4:	095b      	lsrs	r3, r3, #5
 80063a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063aa:	441c      	add	r4, r3
 80063ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063b0:	2200      	movs	r2, #0
 80063b2:	673b      	str	r3, [r7, #112]	; 0x70
 80063b4:	677a      	str	r2, [r7, #116]	; 0x74
 80063b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063ba:	4642      	mov	r2, r8
 80063bc:	464b      	mov	r3, r9
 80063be:	1891      	adds	r1, r2, r2
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	415b      	adcs	r3, r3
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063ca:	4641      	mov	r1, r8
 80063cc:	1851      	adds	r1, r2, r1
 80063ce:	6039      	str	r1, [r7, #0]
 80063d0:	4649      	mov	r1, r9
 80063d2:	414b      	adcs	r3, r1
 80063d4:	607b      	str	r3, [r7, #4]
 80063d6:	f04f 0200 	mov.w	r2, #0
 80063da:	f04f 0300 	mov.w	r3, #0
 80063de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063e2:	4659      	mov	r1, fp
 80063e4:	00cb      	lsls	r3, r1, #3
 80063e6:	4651      	mov	r1, sl
 80063e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ec:	4651      	mov	r1, sl
 80063ee:	00ca      	lsls	r2, r1, #3
 80063f0:	4610      	mov	r0, r2
 80063f2:	4619      	mov	r1, r3
 80063f4:	4603      	mov	r3, r0
 80063f6:	4642      	mov	r2, r8
 80063f8:	189b      	adds	r3, r3, r2
 80063fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80063fc:	464b      	mov	r3, r9
 80063fe:	460a      	mov	r2, r1
 8006400:	eb42 0303 	adc.w	r3, r2, r3
 8006404:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	663b      	str	r3, [r7, #96]	; 0x60
 8006410:	667a      	str	r2, [r7, #100]	; 0x64
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800641e:	4649      	mov	r1, r9
 8006420:	008b      	lsls	r3, r1, #2
 8006422:	4641      	mov	r1, r8
 8006424:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006428:	4641      	mov	r1, r8
 800642a:	008a      	lsls	r2, r1, #2
 800642c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006430:	f7fa fc5a 	bl	8000ce8 <__aeabi_uldivmod>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4b0d      	ldr	r3, [pc, #52]	; (8006470 <UART_SetConfig+0x4e4>)
 800643a:	fba3 1302 	umull	r1, r3, r3, r2
 800643e:	095b      	lsrs	r3, r3, #5
 8006440:	2164      	movs	r1, #100	; 0x64
 8006442:	fb01 f303 	mul.w	r3, r1, r3
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	011b      	lsls	r3, r3, #4
 800644a:	3332      	adds	r3, #50	; 0x32
 800644c:	4a08      	ldr	r2, [pc, #32]	; (8006470 <UART_SetConfig+0x4e4>)
 800644e:	fba2 2303 	umull	r2, r3, r2, r3
 8006452:	095b      	lsrs	r3, r3, #5
 8006454:	f003 020f 	and.w	r2, r3, #15
 8006458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4422      	add	r2, r4
 8006460:	609a      	str	r2, [r3, #8]
}
 8006462:	bf00      	nop
 8006464:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006468:	46bd      	mov	sp, r7
 800646a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800646e:	bf00      	nop
 8006470:	51eb851f 	.word	0x51eb851f

08006474 <__errno>:
 8006474:	4b01      	ldr	r3, [pc, #4]	; (800647c <__errno+0x8>)
 8006476:	6818      	ldr	r0, [r3, #0]
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	20000070 	.word	0x20000070

08006480 <__libc_init_array>:
 8006480:	b570      	push	{r4, r5, r6, lr}
 8006482:	4d0d      	ldr	r5, [pc, #52]	; (80064b8 <__libc_init_array+0x38>)
 8006484:	4c0d      	ldr	r4, [pc, #52]	; (80064bc <__libc_init_array+0x3c>)
 8006486:	1b64      	subs	r4, r4, r5
 8006488:	10a4      	asrs	r4, r4, #2
 800648a:	2600      	movs	r6, #0
 800648c:	42a6      	cmp	r6, r4
 800648e:	d109      	bne.n	80064a4 <__libc_init_array+0x24>
 8006490:	4d0b      	ldr	r5, [pc, #44]	; (80064c0 <__libc_init_array+0x40>)
 8006492:	4c0c      	ldr	r4, [pc, #48]	; (80064c4 <__libc_init_array+0x44>)
 8006494:	f004 fbc6 	bl	800ac24 <_init>
 8006498:	1b64      	subs	r4, r4, r5
 800649a:	10a4      	asrs	r4, r4, #2
 800649c:	2600      	movs	r6, #0
 800649e:	42a6      	cmp	r6, r4
 80064a0:	d105      	bne.n	80064ae <__libc_init_array+0x2e>
 80064a2:	bd70      	pop	{r4, r5, r6, pc}
 80064a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a8:	4798      	blx	r3
 80064aa:	3601      	adds	r6, #1
 80064ac:	e7ee      	b.n	800648c <__libc_init_array+0xc>
 80064ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b2:	4798      	blx	r3
 80064b4:	3601      	adds	r6, #1
 80064b6:	e7f2      	b.n	800649e <__libc_init_array+0x1e>
 80064b8:	0800b250 	.word	0x0800b250
 80064bc:	0800b250 	.word	0x0800b250
 80064c0:	0800b250 	.word	0x0800b250
 80064c4:	0800b254 	.word	0x0800b254

080064c8 <malloc>:
 80064c8:	4b02      	ldr	r3, [pc, #8]	; (80064d4 <malloc+0xc>)
 80064ca:	4601      	mov	r1, r0
 80064cc:	6818      	ldr	r0, [r3, #0]
 80064ce:	f000 b899 	b.w	8006604 <_malloc_r>
 80064d2:	bf00      	nop
 80064d4:	20000070 	.word	0x20000070

080064d8 <free>:
 80064d8:	4b02      	ldr	r3, [pc, #8]	; (80064e4 <free+0xc>)
 80064da:	4601      	mov	r1, r0
 80064dc:	6818      	ldr	r0, [r3, #0]
 80064de:	f000 b825 	b.w	800652c <_free_r>
 80064e2:	bf00      	nop
 80064e4:	20000070 	.word	0x20000070

080064e8 <memmove>:
 80064e8:	4288      	cmp	r0, r1
 80064ea:	b510      	push	{r4, lr}
 80064ec:	eb01 0402 	add.w	r4, r1, r2
 80064f0:	d902      	bls.n	80064f8 <memmove+0x10>
 80064f2:	4284      	cmp	r4, r0
 80064f4:	4623      	mov	r3, r4
 80064f6:	d807      	bhi.n	8006508 <memmove+0x20>
 80064f8:	1e43      	subs	r3, r0, #1
 80064fa:	42a1      	cmp	r1, r4
 80064fc:	d008      	beq.n	8006510 <memmove+0x28>
 80064fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006502:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006506:	e7f8      	b.n	80064fa <memmove+0x12>
 8006508:	4402      	add	r2, r0
 800650a:	4601      	mov	r1, r0
 800650c:	428a      	cmp	r2, r1
 800650e:	d100      	bne.n	8006512 <memmove+0x2a>
 8006510:	bd10      	pop	{r4, pc}
 8006512:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006516:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800651a:	e7f7      	b.n	800650c <memmove+0x24>

0800651c <memset>:
 800651c:	4402      	add	r2, r0
 800651e:	4603      	mov	r3, r0
 8006520:	4293      	cmp	r3, r2
 8006522:	d100      	bne.n	8006526 <memset+0xa>
 8006524:	4770      	bx	lr
 8006526:	f803 1b01 	strb.w	r1, [r3], #1
 800652a:	e7f9      	b.n	8006520 <memset+0x4>

0800652c <_free_r>:
 800652c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800652e:	2900      	cmp	r1, #0
 8006530:	d044      	beq.n	80065bc <_free_r+0x90>
 8006532:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006536:	9001      	str	r0, [sp, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	f1a1 0404 	sub.w	r4, r1, #4
 800653e:	bfb8      	it	lt
 8006540:	18e4      	addlt	r4, r4, r3
 8006542:	f003 f99f 	bl	8009884 <__malloc_lock>
 8006546:	4a1e      	ldr	r2, [pc, #120]	; (80065c0 <_free_r+0x94>)
 8006548:	9801      	ldr	r0, [sp, #4]
 800654a:	6813      	ldr	r3, [r2, #0]
 800654c:	b933      	cbnz	r3, 800655c <_free_r+0x30>
 800654e:	6063      	str	r3, [r4, #4]
 8006550:	6014      	str	r4, [r2, #0]
 8006552:	b003      	add	sp, #12
 8006554:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006558:	f003 b99a 	b.w	8009890 <__malloc_unlock>
 800655c:	42a3      	cmp	r3, r4
 800655e:	d908      	bls.n	8006572 <_free_r+0x46>
 8006560:	6825      	ldr	r5, [r4, #0]
 8006562:	1961      	adds	r1, r4, r5
 8006564:	428b      	cmp	r3, r1
 8006566:	bf01      	itttt	eq
 8006568:	6819      	ldreq	r1, [r3, #0]
 800656a:	685b      	ldreq	r3, [r3, #4]
 800656c:	1949      	addeq	r1, r1, r5
 800656e:	6021      	streq	r1, [r4, #0]
 8006570:	e7ed      	b.n	800654e <_free_r+0x22>
 8006572:	461a      	mov	r2, r3
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	b10b      	cbz	r3, 800657c <_free_r+0x50>
 8006578:	42a3      	cmp	r3, r4
 800657a:	d9fa      	bls.n	8006572 <_free_r+0x46>
 800657c:	6811      	ldr	r1, [r2, #0]
 800657e:	1855      	adds	r5, r2, r1
 8006580:	42a5      	cmp	r5, r4
 8006582:	d10b      	bne.n	800659c <_free_r+0x70>
 8006584:	6824      	ldr	r4, [r4, #0]
 8006586:	4421      	add	r1, r4
 8006588:	1854      	adds	r4, r2, r1
 800658a:	42a3      	cmp	r3, r4
 800658c:	6011      	str	r1, [r2, #0]
 800658e:	d1e0      	bne.n	8006552 <_free_r+0x26>
 8006590:	681c      	ldr	r4, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	6053      	str	r3, [r2, #4]
 8006596:	4421      	add	r1, r4
 8006598:	6011      	str	r1, [r2, #0]
 800659a:	e7da      	b.n	8006552 <_free_r+0x26>
 800659c:	d902      	bls.n	80065a4 <_free_r+0x78>
 800659e:	230c      	movs	r3, #12
 80065a0:	6003      	str	r3, [r0, #0]
 80065a2:	e7d6      	b.n	8006552 <_free_r+0x26>
 80065a4:	6825      	ldr	r5, [r4, #0]
 80065a6:	1961      	adds	r1, r4, r5
 80065a8:	428b      	cmp	r3, r1
 80065aa:	bf04      	itt	eq
 80065ac:	6819      	ldreq	r1, [r3, #0]
 80065ae:	685b      	ldreq	r3, [r3, #4]
 80065b0:	6063      	str	r3, [r4, #4]
 80065b2:	bf04      	itt	eq
 80065b4:	1949      	addeq	r1, r1, r5
 80065b6:	6021      	streq	r1, [r4, #0]
 80065b8:	6054      	str	r4, [r2, #4]
 80065ba:	e7ca      	b.n	8006552 <_free_r+0x26>
 80065bc:	b003      	add	sp, #12
 80065be:	bd30      	pop	{r4, r5, pc}
 80065c0:	20000a08 	.word	0x20000a08

080065c4 <sbrk_aligned>:
 80065c4:	b570      	push	{r4, r5, r6, lr}
 80065c6:	4e0e      	ldr	r6, [pc, #56]	; (8006600 <sbrk_aligned+0x3c>)
 80065c8:	460c      	mov	r4, r1
 80065ca:	6831      	ldr	r1, [r6, #0]
 80065cc:	4605      	mov	r5, r0
 80065ce:	b911      	cbnz	r1, 80065d6 <sbrk_aligned+0x12>
 80065d0:	f000 fd6c 	bl	80070ac <_sbrk_r>
 80065d4:	6030      	str	r0, [r6, #0]
 80065d6:	4621      	mov	r1, r4
 80065d8:	4628      	mov	r0, r5
 80065da:	f000 fd67 	bl	80070ac <_sbrk_r>
 80065de:	1c43      	adds	r3, r0, #1
 80065e0:	d00a      	beq.n	80065f8 <sbrk_aligned+0x34>
 80065e2:	1cc4      	adds	r4, r0, #3
 80065e4:	f024 0403 	bic.w	r4, r4, #3
 80065e8:	42a0      	cmp	r0, r4
 80065ea:	d007      	beq.n	80065fc <sbrk_aligned+0x38>
 80065ec:	1a21      	subs	r1, r4, r0
 80065ee:	4628      	mov	r0, r5
 80065f0:	f000 fd5c 	bl	80070ac <_sbrk_r>
 80065f4:	3001      	adds	r0, #1
 80065f6:	d101      	bne.n	80065fc <sbrk_aligned+0x38>
 80065f8:	f04f 34ff 	mov.w	r4, #4294967295
 80065fc:	4620      	mov	r0, r4
 80065fe:	bd70      	pop	{r4, r5, r6, pc}
 8006600:	20000a0c 	.word	0x20000a0c

08006604 <_malloc_r>:
 8006604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006608:	1ccd      	adds	r5, r1, #3
 800660a:	f025 0503 	bic.w	r5, r5, #3
 800660e:	3508      	adds	r5, #8
 8006610:	2d0c      	cmp	r5, #12
 8006612:	bf38      	it	cc
 8006614:	250c      	movcc	r5, #12
 8006616:	2d00      	cmp	r5, #0
 8006618:	4607      	mov	r7, r0
 800661a:	db01      	blt.n	8006620 <_malloc_r+0x1c>
 800661c:	42a9      	cmp	r1, r5
 800661e:	d905      	bls.n	800662c <_malloc_r+0x28>
 8006620:	230c      	movs	r3, #12
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	2600      	movs	r6, #0
 8006626:	4630      	mov	r0, r6
 8006628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800662c:	4e2e      	ldr	r6, [pc, #184]	; (80066e8 <_malloc_r+0xe4>)
 800662e:	f003 f929 	bl	8009884 <__malloc_lock>
 8006632:	6833      	ldr	r3, [r6, #0]
 8006634:	461c      	mov	r4, r3
 8006636:	bb34      	cbnz	r4, 8006686 <_malloc_r+0x82>
 8006638:	4629      	mov	r1, r5
 800663a:	4638      	mov	r0, r7
 800663c:	f7ff ffc2 	bl	80065c4 <sbrk_aligned>
 8006640:	1c43      	adds	r3, r0, #1
 8006642:	4604      	mov	r4, r0
 8006644:	d14d      	bne.n	80066e2 <_malloc_r+0xde>
 8006646:	6834      	ldr	r4, [r6, #0]
 8006648:	4626      	mov	r6, r4
 800664a:	2e00      	cmp	r6, #0
 800664c:	d140      	bne.n	80066d0 <_malloc_r+0xcc>
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	4631      	mov	r1, r6
 8006652:	4638      	mov	r0, r7
 8006654:	eb04 0803 	add.w	r8, r4, r3
 8006658:	f000 fd28 	bl	80070ac <_sbrk_r>
 800665c:	4580      	cmp	r8, r0
 800665e:	d13a      	bne.n	80066d6 <_malloc_r+0xd2>
 8006660:	6821      	ldr	r1, [r4, #0]
 8006662:	3503      	adds	r5, #3
 8006664:	1a6d      	subs	r5, r5, r1
 8006666:	f025 0503 	bic.w	r5, r5, #3
 800666a:	3508      	adds	r5, #8
 800666c:	2d0c      	cmp	r5, #12
 800666e:	bf38      	it	cc
 8006670:	250c      	movcc	r5, #12
 8006672:	4629      	mov	r1, r5
 8006674:	4638      	mov	r0, r7
 8006676:	f7ff ffa5 	bl	80065c4 <sbrk_aligned>
 800667a:	3001      	adds	r0, #1
 800667c:	d02b      	beq.n	80066d6 <_malloc_r+0xd2>
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	442b      	add	r3, r5
 8006682:	6023      	str	r3, [r4, #0]
 8006684:	e00e      	b.n	80066a4 <_malloc_r+0xa0>
 8006686:	6822      	ldr	r2, [r4, #0]
 8006688:	1b52      	subs	r2, r2, r5
 800668a:	d41e      	bmi.n	80066ca <_malloc_r+0xc6>
 800668c:	2a0b      	cmp	r2, #11
 800668e:	d916      	bls.n	80066be <_malloc_r+0xba>
 8006690:	1961      	adds	r1, r4, r5
 8006692:	42a3      	cmp	r3, r4
 8006694:	6025      	str	r5, [r4, #0]
 8006696:	bf18      	it	ne
 8006698:	6059      	strne	r1, [r3, #4]
 800669a:	6863      	ldr	r3, [r4, #4]
 800669c:	bf08      	it	eq
 800669e:	6031      	streq	r1, [r6, #0]
 80066a0:	5162      	str	r2, [r4, r5]
 80066a2:	604b      	str	r3, [r1, #4]
 80066a4:	4638      	mov	r0, r7
 80066a6:	f104 060b 	add.w	r6, r4, #11
 80066aa:	f003 f8f1 	bl	8009890 <__malloc_unlock>
 80066ae:	f026 0607 	bic.w	r6, r6, #7
 80066b2:	1d23      	adds	r3, r4, #4
 80066b4:	1af2      	subs	r2, r6, r3
 80066b6:	d0b6      	beq.n	8006626 <_malloc_r+0x22>
 80066b8:	1b9b      	subs	r3, r3, r6
 80066ba:	50a3      	str	r3, [r4, r2]
 80066bc:	e7b3      	b.n	8006626 <_malloc_r+0x22>
 80066be:	6862      	ldr	r2, [r4, #4]
 80066c0:	42a3      	cmp	r3, r4
 80066c2:	bf0c      	ite	eq
 80066c4:	6032      	streq	r2, [r6, #0]
 80066c6:	605a      	strne	r2, [r3, #4]
 80066c8:	e7ec      	b.n	80066a4 <_malloc_r+0xa0>
 80066ca:	4623      	mov	r3, r4
 80066cc:	6864      	ldr	r4, [r4, #4]
 80066ce:	e7b2      	b.n	8006636 <_malloc_r+0x32>
 80066d0:	4634      	mov	r4, r6
 80066d2:	6876      	ldr	r6, [r6, #4]
 80066d4:	e7b9      	b.n	800664a <_malloc_r+0x46>
 80066d6:	230c      	movs	r3, #12
 80066d8:	603b      	str	r3, [r7, #0]
 80066da:	4638      	mov	r0, r7
 80066dc:	f003 f8d8 	bl	8009890 <__malloc_unlock>
 80066e0:	e7a1      	b.n	8006626 <_malloc_r+0x22>
 80066e2:	6025      	str	r5, [r4, #0]
 80066e4:	e7de      	b.n	80066a4 <_malloc_r+0xa0>
 80066e6:	bf00      	nop
 80066e8:	20000a08 	.word	0x20000a08

080066ec <__cvt>:
 80066ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066f0:	ec55 4b10 	vmov	r4, r5, d0
 80066f4:	2d00      	cmp	r5, #0
 80066f6:	460e      	mov	r6, r1
 80066f8:	4619      	mov	r1, r3
 80066fa:	462b      	mov	r3, r5
 80066fc:	bfbb      	ittet	lt
 80066fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006702:	461d      	movlt	r5, r3
 8006704:	2300      	movge	r3, #0
 8006706:	232d      	movlt	r3, #45	; 0x2d
 8006708:	700b      	strb	r3, [r1, #0]
 800670a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800670c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006710:	4691      	mov	r9, r2
 8006712:	f023 0820 	bic.w	r8, r3, #32
 8006716:	bfbc      	itt	lt
 8006718:	4622      	movlt	r2, r4
 800671a:	4614      	movlt	r4, r2
 800671c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006720:	d005      	beq.n	800672e <__cvt+0x42>
 8006722:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006726:	d100      	bne.n	800672a <__cvt+0x3e>
 8006728:	3601      	adds	r6, #1
 800672a:	2102      	movs	r1, #2
 800672c:	e000      	b.n	8006730 <__cvt+0x44>
 800672e:	2103      	movs	r1, #3
 8006730:	ab03      	add	r3, sp, #12
 8006732:	9301      	str	r3, [sp, #4]
 8006734:	ab02      	add	r3, sp, #8
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	ec45 4b10 	vmov	d0, r4, r5
 800673c:	4653      	mov	r3, sl
 800673e:	4632      	mov	r2, r6
 8006740:	f001 fcee 	bl	8008120 <_dtoa_r>
 8006744:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006748:	4607      	mov	r7, r0
 800674a:	d102      	bne.n	8006752 <__cvt+0x66>
 800674c:	f019 0f01 	tst.w	r9, #1
 8006750:	d022      	beq.n	8006798 <__cvt+0xac>
 8006752:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006756:	eb07 0906 	add.w	r9, r7, r6
 800675a:	d110      	bne.n	800677e <__cvt+0x92>
 800675c:	783b      	ldrb	r3, [r7, #0]
 800675e:	2b30      	cmp	r3, #48	; 0x30
 8006760:	d10a      	bne.n	8006778 <__cvt+0x8c>
 8006762:	2200      	movs	r2, #0
 8006764:	2300      	movs	r3, #0
 8006766:	4620      	mov	r0, r4
 8006768:	4629      	mov	r1, r5
 800676a:	f7fa f9dd 	bl	8000b28 <__aeabi_dcmpeq>
 800676e:	b918      	cbnz	r0, 8006778 <__cvt+0x8c>
 8006770:	f1c6 0601 	rsb	r6, r6, #1
 8006774:	f8ca 6000 	str.w	r6, [sl]
 8006778:	f8da 3000 	ldr.w	r3, [sl]
 800677c:	4499      	add	r9, r3
 800677e:	2200      	movs	r2, #0
 8006780:	2300      	movs	r3, #0
 8006782:	4620      	mov	r0, r4
 8006784:	4629      	mov	r1, r5
 8006786:	f7fa f9cf 	bl	8000b28 <__aeabi_dcmpeq>
 800678a:	b108      	cbz	r0, 8006790 <__cvt+0xa4>
 800678c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006790:	2230      	movs	r2, #48	; 0x30
 8006792:	9b03      	ldr	r3, [sp, #12]
 8006794:	454b      	cmp	r3, r9
 8006796:	d307      	bcc.n	80067a8 <__cvt+0xbc>
 8006798:	9b03      	ldr	r3, [sp, #12]
 800679a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800679c:	1bdb      	subs	r3, r3, r7
 800679e:	4638      	mov	r0, r7
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	b004      	add	sp, #16
 80067a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a8:	1c59      	adds	r1, r3, #1
 80067aa:	9103      	str	r1, [sp, #12]
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	e7f0      	b.n	8006792 <__cvt+0xa6>

080067b0 <__exponent>:
 80067b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067b2:	4603      	mov	r3, r0
 80067b4:	2900      	cmp	r1, #0
 80067b6:	bfb8      	it	lt
 80067b8:	4249      	neglt	r1, r1
 80067ba:	f803 2b02 	strb.w	r2, [r3], #2
 80067be:	bfb4      	ite	lt
 80067c0:	222d      	movlt	r2, #45	; 0x2d
 80067c2:	222b      	movge	r2, #43	; 0x2b
 80067c4:	2909      	cmp	r1, #9
 80067c6:	7042      	strb	r2, [r0, #1]
 80067c8:	dd2a      	ble.n	8006820 <__exponent+0x70>
 80067ca:	f10d 0407 	add.w	r4, sp, #7
 80067ce:	46a4      	mov	ip, r4
 80067d0:	270a      	movs	r7, #10
 80067d2:	46a6      	mov	lr, r4
 80067d4:	460a      	mov	r2, r1
 80067d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80067da:	fb07 1516 	mls	r5, r7, r6, r1
 80067de:	3530      	adds	r5, #48	; 0x30
 80067e0:	2a63      	cmp	r2, #99	; 0x63
 80067e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80067e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80067ea:	4631      	mov	r1, r6
 80067ec:	dcf1      	bgt.n	80067d2 <__exponent+0x22>
 80067ee:	3130      	adds	r1, #48	; 0x30
 80067f0:	f1ae 0502 	sub.w	r5, lr, #2
 80067f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80067f8:	1c44      	adds	r4, r0, #1
 80067fa:	4629      	mov	r1, r5
 80067fc:	4561      	cmp	r1, ip
 80067fe:	d30a      	bcc.n	8006816 <__exponent+0x66>
 8006800:	f10d 0209 	add.w	r2, sp, #9
 8006804:	eba2 020e 	sub.w	r2, r2, lr
 8006808:	4565      	cmp	r5, ip
 800680a:	bf88      	it	hi
 800680c:	2200      	movhi	r2, #0
 800680e:	4413      	add	r3, r2
 8006810:	1a18      	subs	r0, r3, r0
 8006812:	b003      	add	sp, #12
 8006814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800681a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800681e:	e7ed      	b.n	80067fc <__exponent+0x4c>
 8006820:	2330      	movs	r3, #48	; 0x30
 8006822:	3130      	adds	r1, #48	; 0x30
 8006824:	7083      	strb	r3, [r0, #2]
 8006826:	70c1      	strb	r1, [r0, #3]
 8006828:	1d03      	adds	r3, r0, #4
 800682a:	e7f1      	b.n	8006810 <__exponent+0x60>

0800682c <_printf_float>:
 800682c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006830:	ed2d 8b02 	vpush	{d8}
 8006834:	b08d      	sub	sp, #52	; 0x34
 8006836:	460c      	mov	r4, r1
 8006838:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800683c:	4616      	mov	r6, r2
 800683e:	461f      	mov	r7, r3
 8006840:	4605      	mov	r5, r0
 8006842:	f002 ff93 	bl	800976c <_localeconv_r>
 8006846:	f8d0 a000 	ldr.w	sl, [r0]
 800684a:	4650      	mov	r0, sl
 800684c:	f7f9 fcea 	bl	8000224 <strlen>
 8006850:	2300      	movs	r3, #0
 8006852:	930a      	str	r3, [sp, #40]	; 0x28
 8006854:	6823      	ldr	r3, [r4, #0]
 8006856:	9305      	str	r3, [sp, #20]
 8006858:	f8d8 3000 	ldr.w	r3, [r8]
 800685c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006860:	3307      	adds	r3, #7
 8006862:	f023 0307 	bic.w	r3, r3, #7
 8006866:	f103 0208 	add.w	r2, r3, #8
 800686a:	f8c8 2000 	str.w	r2, [r8]
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006876:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800687a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800687e:	9307      	str	r3, [sp, #28]
 8006880:	f8cd 8018 	str.w	r8, [sp, #24]
 8006884:	ee08 0a10 	vmov	s16, r0
 8006888:	4b9f      	ldr	r3, [pc, #636]	; (8006b08 <_printf_float+0x2dc>)
 800688a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800688e:	f04f 32ff 	mov.w	r2, #4294967295
 8006892:	f7fa f97b 	bl	8000b8c <__aeabi_dcmpun>
 8006896:	bb88      	cbnz	r0, 80068fc <_printf_float+0xd0>
 8006898:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800689c:	4b9a      	ldr	r3, [pc, #616]	; (8006b08 <_printf_float+0x2dc>)
 800689e:	f04f 32ff 	mov.w	r2, #4294967295
 80068a2:	f7fa f955 	bl	8000b50 <__aeabi_dcmple>
 80068a6:	bb48      	cbnz	r0, 80068fc <_printf_float+0xd0>
 80068a8:	2200      	movs	r2, #0
 80068aa:	2300      	movs	r3, #0
 80068ac:	4640      	mov	r0, r8
 80068ae:	4649      	mov	r1, r9
 80068b0:	f7fa f944 	bl	8000b3c <__aeabi_dcmplt>
 80068b4:	b110      	cbz	r0, 80068bc <_printf_float+0x90>
 80068b6:	232d      	movs	r3, #45	; 0x2d
 80068b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068bc:	4b93      	ldr	r3, [pc, #588]	; (8006b0c <_printf_float+0x2e0>)
 80068be:	4894      	ldr	r0, [pc, #592]	; (8006b10 <_printf_float+0x2e4>)
 80068c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80068c4:	bf94      	ite	ls
 80068c6:	4698      	movls	r8, r3
 80068c8:	4680      	movhi	r8, r0
 80068ca:	2303      	movs	r3, #3
 80068cc:	6123      	str	r3, [r4, #16]
 80068ce:	9b05      	ldr	r3, [sp, #20]
 80068d0:	f023 0204 	bic.w	r2, r3, #4
 80068d4:	6022      	str	r2, [r4, #0]
 80068d6:	f04f 0900 	mov.w	r9, #0
 80068da:	9700      	str	r7, [sp, #0]
 80068dc:	4633      	mov	r3, r6
 80068de:	aa0b      	add	r2, sp, #44	; 0x2c
 80068e0:	4621      	mov	r1, r4
 80068e2:	4628      	mov	r0, r5
 80068e4:	f000 f9d8 	bl	8006c98 <_printf_common>
 80068e8:	3001      	adds	r0, #1
 80068ea:	f040 8090 	bne.w	8006a0e <_printf_float+0x1e2>
 80068ee:	f04f 30ff 	mov.w	r0, #4294967295
 80068f2:	b00d      	add	sp, #52	; 0x34
 80068f4:	ecbd 8b02 	vpop	{d8}
 80068f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fc:	4642      	mov	r2, r8
 80068fe:	464b      	mov	r3, r9
 8006900:	4640      	mov	r0, r8
 8006902:	4649      	mov	r1, r9
 8006904:	f7fa f942 	bl	8000b8c <__aeabi_dcmpun>
 8006908:	b140      	cbz	r0, 800691c <_printf_float+0xf0>
 800690a:	464b      	mov	r3, r9
 800690c:	2b00      	cmp	r3, #0
 800690e:	bfbc      	itt	lt
 8006910:	232d      	movlt	r3, #45	; 0x2d
 8006912:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006916:	487f      	ldr	r0, [pc, #508]	; (8006b14 <_printf_float+0x2e8>)
 8006918:	4b7f      	ldr	r3, [pc, #508]	; (8006b18 <_printf_float+0x2ec>)
 800691a:	e7d1      	b.n	80068c0 <_printf_float+0x94>
 800691c:	6863      	ldr	r3, [r4, #4]
 800691e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006922:	9206      	str	r2, [sp, #24]
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	d13f      	bne.n	80069a8 <_printf_float+0x17c>
 8006928:	2306      	movs	r3, #6
 800692a:	6063      	str	r3, [r4, #4]
 800692c:	9b05      	ldr	r3, [sp, #20]
 800692e:	6861      	ldr	r1, [r4, #4]
 8006930:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006934:	2300      	movs	r3, #0
 8006936:	9303      	str	r3, [sp, #12]
 8006938:	ab0a      	add	r3, sp, #40	; 0x28
 800693a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800693e:	ab09      	add	r3, sp, #36	; 0x24
 8006940:	ec49 8b10 	vmov	d0, r8, r9
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	6022      	str	r2, [r4, #0]
 8006948:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800694c:	4628      	mov	r0, r5
 800694e:	f7ff fecd 	bl	80066ec <__cvt>
 8006952:	9b06      	ldr	r3, [sp, #24]
 8006954:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006956:	2b47      	cmp	r3, #71	; 0x47
 8006958:	4680      	mov	r8, r0
 800695a:	d108      	bne.n	800696e <_printf_float+0x142>
 800695c:	1cc8      	adds	r0, r1, #3
 800695e:	db02      	blt.n	8006966 <_printf_float+0x13a>
 8006960:	6863      	ldr	r3, [r4, #4]
 8006962:	4299      	cmp	r1, r3
 8006964:	dd41      	ble.n	80069ea <_printf_float+0x1be>
 8006966:	f1ab 0b02 	sub.w	fp, fp, #2
 800696a:	fa5f fb8b 	uxtb.w	fp, fp
 800696e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006972:	d820      	bhi.n	80069b6 <_printf_float+0x18a>
 8006974:	3901      	subs	r1, #1
 8006976:	465a      	mov	r2, fp
 8006978:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800697c:	9109      	str	r1, [sp, #36]	; 0x24
 800697e:	f7ff ff17 	bl	80067b0 <__exponent>
 8006982:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006984:	1813      	adds	r3, r2, r0
 8006986:	2a01      	cmp	r2, #1
 8006988:	4681      	mov	r9, r0
 800698a:	6123      	str	r3, [r4, #16]
 800698c:	dc02      	bgt.n	8006994 <_printf_float+0x168>
 800698e:	6822      	ldr	r2, [r4, #0]
 8006990:	07d2      	lsls	r2, r2, #31
 8006992:	d501      	bpl.n	8006998 <_printf_float+0x16c>
 8006994:	3301      	adds	r3, #1
 8006996:	6123      	str	r3, [r4, #16]
 8006998:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800699c:	2b00      	cmp	r3, #0
 800699e:	d09c      	beq.n	80068da <_printf_float+0xae>
 80069a0:	232d      	movs	r3, #45	; 0x2d
 80069a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069a6:	e798      	b.n	80068da <_printf_float+0xae>
 80069a8:	9a06      	ldr	r2, [sp, #24]
 80069aa:	2a47      	cmp	r2, #71	; 0x47
 80069ac:	d1be      	bne.n	800692c <_printf_float+0x100>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1bc      	bne.n	800692c <_printf_float+0x100>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e7b9      	b.n	800692a <_printf_float+0xfe>
 80069b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80069ba:	d118      	bne.n	80069ee <_printf_float+0x1c2>
 80069bc:	2900      	cmp	r1, #0
 80069be:	6863      	ldr	r3, [r4, #4]
 80069c0:	dd0b      	ble.n	80069da <_printf_float+0x1ae>
 80069c2:	6121      	str	r1, [r4, #16]
 80069c4:	b913      	cbnz	r3, 80069cc <_printf_float+0x1a0>
 80069c6:	6822      	ldr	r2, [r4, #0]
 80069c8:	07d0      	lsls	r0, r2, #31
 80069ca:	d502      	bpl.n	80069d2 <_printf_float+0x1a6>
 80069cc:	3301      	adds	r3, #1
 80069ce:	440b      	add	r3, r1
 80069d0:	6123      	str	r3, [r4, #16]
 80069d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80069d4:	f04f 0900 	mov.w	r9, #0
 80069d8:	e7de      	b.n	8006998 <_printf_float+0x16c>
 80069da:	b913      	cbnz	r3, 80069e2 <_printf_float+0x1b6>
 80069dc:	6822      	ldr	r2, [r4, #0]
 80069de:	07d2      	lsls	r2, r2, #31
 80069e0:	d501      	bpl.n	80069e6 <_printf_float+0x1ba>
 80069e2:	3302      	adds	r3, #2
 80069e4:	e7f4      	b.n	80069d0 <_printf_float+0x1a4>
 80069e6:	2301      	movs	r3, #1
 80069e8:	e7f2      	b.n	80069d0 <_printf_float+0x1a4>
 80069ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80069ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069f0:	4299      	cmp	r1, r3
 80069f2:	db05      	blt.n	8006a00 <_printf_float+0x1d4>
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	6121      	str	r1, [r4, #16]
 80069f8:	07d8      	lsls	r0, r3, #31
 80069fa:	d5ea      	bpl.n	80069d2 <_printf_float+0x1a6>
 80069fc:	1c4b      	adds	r3, r1, #1
 80069fe:	e7e7      	b.n	80069d0 <_printf_float+0x1a4>
 8006a00:	2900      	cmp	r1, #0
 8006a02:	bfd4      	ite	le
 8006a04:	f1c1 0202 	rsble	r2, r1, #2
 8006a08:	2201      	movgt	r2, #1
 8006a0a:	4413      	add	r3, r2
 8006a0c:	e7e0      	b.n	80069d0 <_printf_float+0x1a4>
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	055a      	lsls	r2, r3, #21
 8006a12:	d407      	bmi.n	8006a24 <_printf_float+0x1f8>
 8006a14:	6923      	ldr	r3, [r4, #16]
 8006a16:	4642      	mov	r2, r8
 8006a18:	4631      	mov	r1, r6
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	47b8      	blx	r7
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d12c      	bne.n	8006a7c <_printf_float+0x250>
 8006a22:	e764      	b.n	80068ee <_printf_float+0xc2>
 8006a24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a28:	f240 80e0 	bls.w	8006bec <_printf_float+0x3c0>
 8006a2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a30:	2200      	movs	r2, #0
 8006a32:	2300      	movs	r3, #0
 8006a34:	f7fa f878 	bl	8000b28 <__aeabi_dcmpeq>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d034      	beq.n	8006aa6 <_printf_float+0x27a>
 8006a3c:	4a37      	ldr	r2, [pc, #220]	; (8006b1c <_printf_float+0x2f0>)
 8006a3e:	2301      	movs	r3, #1
 8006a40:	4631      	mov	r1, r6
 8006a42:	4628      	mov	r0, r5
 8006a44:	47b8      	blx	r7
 8006a46:	3001      	adds	r0, #1
 8006a48:	f43f af51 	beq.w	80068ee <_printf_float+0xc2>
 8006a4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a50:	429a      	cmp	r2, r3
 8006a52:	db02      	blt.n	8006a5a <_printf_float+0x22e>
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	07d8      	lsls	r0, r3, #31
 8006a58:	d510      	bpl.n	8006a7c <_printf_float+0x250>
 8006a5a:	ee18 3a10 	vmov	r3, s16
 8006a5e:	4652      	mov	r2, sl
 8006a60:	4631      	mov	r1, r6
 8006a62:	4628      	mov	r0, r5
 8006a64:	47b8      	blx	r7
 8006a66:	3001      	adds	r0, #1
 8006a68:	f43f af41 	beq.w	80068ee <_printf_float+0xc2>
 8006a6c:	f04f 0800 	mov.w	r8, #0
 8006a70:	f104 091a 	add.w	r9, r4, #26
 8006a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a76:	3b01      	subs	r3, #1
 8006a78:	4543      	cmp	r3, r8
 8006a7a:	dc09      	bgt.n	8006a90 <_printf_float+0x264>
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	079b      	lsls	r3, r3, #30
 8006a80:	f100 8105 	bmi.w	8006c8e <_printf_float+0x462>
 8006a84:	68e0      	ldr	r0, [r4, #12]
 8006a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a88:	4298      	cmp	r0, r3
 8006a8a:	bfb8      	it	lt
 8006a8c:	4618      	movlt	r0, r3
 8006a8e:	e730      	b.n	80068f2 <_printf_float+0xc6>
 8006a90:	2301      	movs	r3, #1
 8006a92:	464a      	mov	r2, r9
 8006a94:	4631      	mov	r1, r6
 8006a96:	4628      	mov	r0, r5
 8006a98:	47b8      	blx	r7
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	f43f af27 	beq.w	80068ee <_printf_float+0xc2>
 8006aa0:	f108 0801 	add.w	r8, r8, #1
 8006aa4:	e7e6      	b.n	8006a74 <_printf_float+0x248>
 8006aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	dc39      	bgt.n	8006b20 <_printf_float+0x2f4>
 8006aac:	4a1b      	ldr	r2, [pc, #108]	; (8006b1c <_printf_float+0x2f0>)
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b8      	blx	r7
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	f43f af19 	beq.w	80068ee <_printf_float+0xc2>
 8006abc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	d102      	bne.n	8006aca <_printf_float+0x29e>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	07d9      	lsls	r1, r3, #31
 8006ac8:	d5d8      	bpl.n	8006a7c <_printf_float+0x250>
 8006aca:	ee18 3a10 	vmov	r3, s16
 8006ace:	4652      	mov	r2, sl
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	47b8      	blx	r7
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	f43f af09 	beq.w	80068ee <_printf_float+0xc2>
 8006adc:	f04f 0900 	mov.w	r9, #0
 8006ae0:	f104 0a1a 	add.w	sl, r4, #26
 8006ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae6:	425b      	negs	r3, r3
 8006ae8:	454b      	cmp	r3, r9
 8006aea:	dc01      	bgt.n	8006af0 <_printf_float+0x2c4>
 8006aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aee:	e792      	b.n	8006a16 <_printf_float+0x1ea>
 8006af0:	2301      	movs	r3, #1
 8006af2:	4652      	mov	r2, sl
 8006af4:	4631      	mov	r1, r6
 8006af6:	4628      	mov	r0, r5
 8006af8:	47b8      	blx	r7
 8006afa:	3001      	adds	r0, #1
 8006afc:	f43f aef7 	beq.w	80068ee <_printf_float+0xc2>
 8006b00:	f109 0901 	add.w	r9, r9, #1
 8006b04:	e7ee      	b.n	8006ae4 <_printf_float+0x2b8>
 8006b06:	bf00      	nop
 8006b08:	7fefffff 	.word	0x7fefffff
 8006b0c:	0800ae4c 	.word	0x0800ae4c
 8006b10:	0800ae50 	.word	0x0800ae50
 8006b14:	0800ae58 	.word	0x0800ae58
 8006b18:	0800ae54 	.word	0x0800ae54
 8006b1c:	0800ae5c 	.word	0x0800ae5c
 8006b20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b24:	429a      	cmp	r2, r3
 8006b26:	bfa8      	it	ge
 8006b28:	461a      	movge	r2, r3
 8006b2a:	2a00      	cmp	r2, #0
 8006b2c:	4691      	mov	r9, r2
 8006b2e:	dc37      	bgt.n	8006ba0 <_printf_float+0x374>
 8006b30:	f04f 0b00 	mov.w	fp, #0
 8006b34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b38:	f104 021a 	add.w	r2, r4, #26
 8006b3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b3e:	9305      	str	r3, [sp, #20]
 8006b40:	eba3 0309 	sub.w	r3, r3, r9
 8006b44:	455b      	cmp	r3, fp
 8006b46:	dc33      	bgt.n	8006bb0 <_printf_float+0x384>
 8006b48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	db3b      	blt.n	8006bc8 <_printf_float+0x39c>
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	07da      	lsls	r2, r3, #31
 8006b54:	d438      	bmi.n	8006bc8 <_printf_float+0x39c>
 8006b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b58:	9a05      	ldr	r2, [sp, #20]
 8006b5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b5c:	1a9a      	subs	r2, r3, r2
 8006b5e:	eba3 0901 	sub.w	r9, r3, r1
 8006b62:	4591      	cmp	r9, r2
 8006b64:	bfa8      	it	ge
 8006b66:	4691      	movge	r9, r2
 8006b68:	f1b9 0f00 	cmp.w	r9, #0
 8006b6c:	dc35      	bgt.n	8006bda <_printf_float+0x3ae>
 8006b6e:	f04f 0800 	mov.w	r8, #0
 8006b72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b76:	f104 0a1a 	add.w	sl, r4, #26
 8006b7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b7e:	1a9b      	subs	r3, r3, r2
 8006b80:	eba3 0309 	sub.w	r3, r3, r9
 8006b84:	4543      	cmp	r3, r8
 8006b86:	f77f af79 	ble.w	8006a7c <_printf_float+0x250>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	4652      	mov	r2, sl
 8006b8e:	4631      	mov	r1, r6
 8006b90:	4628      	mov	r0, r5
 8006b92:	47b8      	blx	r7
 8006b94:	3001      	adds	r0, #1
 8006b96:	f43f aeaa 	beq.w	80068ee <_printf_float+0xc2>
 8006b9a:	f108 0801 	add.w	r8, r8, #1
 8006b9e:	e7ec      	b.n	8006b7a <_printf_float+0x34e>
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	4631      	mov	r1, r6
 8006ba4:	4642      	mov	r2, r8
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	47b8      	blx	r7
 8006baa:	3001      	adds	r0, #1
 8006bac:	d1c0      	bne.n	8006b30 <_printf_float+0x304>
 8006bae:	e69e      	b.n	80068ee <_printf_float+0xc2>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	9205      	str	r2, [sp, #20]
 8006bb8:	47b8      	blx	r7
 8006bba:	3001      	adds	r0, #1
 8006bbc:	f43f ae97 	beq.w	80068ee <_printf_float+0xc2>
 8006bc0:	9a05      	ldr	r2, [sp, #20]
 8006bc2:	f10b 0b01 	add.w	fp, fp, #1
 8006bc6:	e7b9      	b.n	8006b3c <_printf_float+0x310>
 8006bc8:	ee18 3a10 	vmov	r3, s16
 8006bcc:	4652      	mov	r2, sl
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b8      	blx	r7
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d1be      	bne.n	8006b56 <_printf_float+0x32a>
 8006bd8:	e689      	b.n	80068ee <_printf_float+0xc2>
 8006bda:	9a05      	ldr	r2, [sp, #20]
 8006bdc:	464b      	mov	r3, r9
 8006bde:	4442      	add	r2, r8
 8006be0:	4631      	mov	r1, r6
 8006be2:	4628      	mov	r0, r5
 8006be4:	47b8      	blx	r7
 8006be6:	3001      	adds	r0, #1
 8006be8:	d1c1      	bne.n	8006b6e <_printf_float+0x342>
 8006bea:	e680      	b.n	80068ee <_printf_float+0xc2>
 8006bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bee:	2a01      	cmp	r2, #1
 8006bf0:	dc01      	bgt.n	8006bf6 <_printf_float+0x3ca>
 8006bf2:	07db      	lsls	r3, r3, #31
 8006bf4:	d538      	bpl.n	8006c68 <_printf_float+0x43c>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	4642      	mov	r2, r8
 8006bfa:	4631      	mov	r1, r6
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	47b8      	blx	r7
 8006c00:	3001      	adds	r0, #1
 8006c02:	f43f ae74 	beq.w	80068ee <_printf_float+0xc2>
 8006c06:	ee18 3a10 	vmov	r3, s16
 8006c0a:	4652      	mov	r2, sl
 8006c0c:	4631      	mov	r1, r6
 8006c0e:	4628      	mov	r0, r5
 8006c10:	47b8      	blx	r7
 8006c12:	3001      	adds	r0, #1
 8006c14:	f43f ae6b 	beq.w	80068ee <_printf_float+0xc2>
 8006c18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f7f9 ff82 	bl	8000b28 <__aeabi_dcmpeq>
 8006c24:	b9d8      	cbnz	r0, 8006c5e <_printf_float+0x432>
 8006c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c28:	f108 0201 	add.w	r2, r8, #1
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	4631      	mov	r1, r6
 8006c30:	4628      	mov	r0, r5
 8006c32:	47b8      	blx	r7
 8006c34:	3001      	adds	r0, #1
 8006c36:	d10e      	bne.n	8006c56 <_printf_float+0x42a>
 8006c38:	e659      	b.n	80068ee <_printf_float+0xc2>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	4652      	mov	r2, sl
 8006c3e:	4631      	mov	r1, r6
 8006c40:	4628      	mov	r0, r5
 8006c42:	47b8      	blx	r7
 8006c44:	3001      	adds	r0, #1
 8006c46:	f43f ae52 	beq.w	80068ee <_printf_float+0xc2>
 8006c4a:	f108 0801 	add.w	r8, r8, #1
 8006c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c50:	3b01      	subs	r3, #1
 8006c52:	4543      	cmp	r3, r8
 8006c54:	dcf1      	bgt.n	8006c3a <_printf_float+0x40e>
 8006c56:	464b      	mov	r3, r9
 8006c58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c5c:	e6dc      	b.n	8006a18 <_printf_float+0x1ec>
 8006c5e:	f04f 0800 	mov.w	r8, #0
 8006c62:	f104 0a1a 	add.w	sl, r4, #26
 8006c66:	e7f2      	b.n	8006c4e <_printf_float+0x422>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	4642      	mov	r2, r8
 8006c6c:	e7df      	b.n	8006c2e <_printf_float+0x402>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	464a      	mov	r2, r9
 8006c72:	4631      	mov	r1, r6
 8006c74:	4628      	mov	r0, r5
 8006c76:	47b8      	blx	r7
 8006c78:	3001      	adds	r0, #1
 8006c7a:	f43f ae38 	beq.w	80068ee <_printf_float+0xc2>
 8006c7e:	f108 0801 	add.w	r8, r8, #1
 8006c82:	68e3      	ldr	r3, [r4, #12]
 8006c84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c86:	1a5b      	subs	r3, r3, r1
 8006c88:	4543      	cmp	r3, r8
 8006c8a:	dcf0      	bgt.n	8006c6e <_printf_float+0x442>
 8006c8c:	e6fa      	b.n	8006a84 <_printf_float+0x258>
 8006c8e:	f04f 0800 	mov.w	r8, #0
 8006c92:	f104 0919 	add.w	r9, r4, #25
 8006c96:	e7f4      	b.n	8006c82 <_printf_float+0x456>

08006c98 <_printf_common>:
 8006c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c9c:	4616      	mov	r6, r2
 8006c9e:	4699      	mov	r9, r3
 8006ca0:	688a      	ldr	r2, [r1, #8]
 8006ca2:	690b      	ldr	r3, [r1, #16]
 8006ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	bfb8      	it	lt
 8006cac:	4613      	movlt	r3, r2
 8006cae:	6033      	str	r3, [r6, #0]
 8006cb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cb4:	4607      	mov	r7, r0
 8006cb6:	460c      	mov	r4, r1
 8006cb8:	b10a      	cbz	r2, 8006cbe <_printf_common+0x26>
 8006cba:	3301      	adds	r3, #1
 8006cbc:	6033      	str	r3, [r6, #0]
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	0699      	lsls	r1, r3, #26
 8006cc2:	bf42      	ittt	mi
 8006cc4:	6833      	ldrmi	r3, [r6, #0]
 8006cc6:	3302      	addmi	r3, #2
 8006cc8:	6033      	strmi	r3, [r6, #0]
 8006cca:	6825      	ldr	r5, [r4, #0]
 8006ccc:	f015 0506 	ands.w	r5, r5, #6
 8006cd0:	d106      	bne.n	8006ce0 <_printf_common+0x48>
 8006cd2:	f104 0a19 	add.w	sl, r4, #25
 8006cd6:	68e3      	ldr	r3, [r4, #12]
 8006cd8:	6832      	ldr	r2, [r6, #0]
 8006cda:	1a9b      	subs	r3, r3, r2
 8006cdc:	42ab      	cmp	r3, r5
 8006cde:	dc26      	bgt.n	8006d2e <_printf_common+0x96>
 8006ce0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ce4:	1e13      	subs	r3, r2, #0
 8006ce6:	6822      	ldr	r2, [r4, #0]
 8006ce8:	bf18      	it	ne
 8006cea:	2301      	movne	r3, #1
 8006cec:	0692      	lsls	r2, r2, #26
 8006cee:	d42b      	bmi.n	8006d48 <_printf_common+0xb0>
 8006cf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cf4:	4649      	mov	r1, r9
 8006cf6:	4638      	mov	r0, r7
 8006cf8:	47c0      	blx	r8
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	d01e      	beq.n	8006d3c <_printf_common+0xa4>
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	68e5      	ldr	r5, [r4, #12]
 8006d02:	6832      	ldr	r2, [r6, #0]
 8006d04:	f003 0306 	and.w	r3, r3, #6
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	bf08      	it	eq
 8006d0c:	1aad      	subeq	r5, r5, r2
 8006d0e:	68a3      	ldr	r3, [r4, #8]
 8006d10:	6922      	ldr	r2, [r4, #16]
 8006d12:	bf0c      	ite	eq
 8006d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d18:	2500      	movne	r5, #0
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	bfc4      	itt	gt
 8006d1e:	1a9b      	subgt	r3, r3, r2
 8006d20:	18ed      	addgt	r5, r5, r3
 8006d22:	2600      	movs	r6, #0
 8006d24:	341a      	adds	r4, #26
 8006d26:	42b5      	cmp	r5, r6
 8006d28:	d11a      	bne.n	8006d60 <_printf_common+0xc8>
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	e008      	b.n	8006d40 <_printf_common+0xa8>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	4652      	mov	r2, sl
 8006d32:	4649      	mov	r1, r9
 8006d34:	4638      	mov	r0, r7
 8006d36:	47c0      	blx	r8
 8006d38:	3001      	adds	r0, #1
 8006d3a:	d103      	bne.n	8006d44 <_printf_common+0xac>
 8006d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d44:	3501      	adds	r5, #1
 8006d46:	e7c6      	b.n	8006cd6 <_printf_common+0x3e>
 8006d48:	18e1      	adds	r1, r4, r3
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	2030      	movs	r0, #48	; 0x30
 8006d4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d52:	4422      	add	r2, r4
 8006d54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d5c:	3302      	adds	r3, #2
 8006d5e:	e7c7      	b.n	8006cf0 <_printf_common+0x58>
 8006d60:	2301      	movs	r3, #1
 8006d62:	4622      	mov	r2, r4
 8006d64:	4649      	mov	r1, r9
 8006d66:	4638      	mov	r0, r7
 8006d68:	47c0      	blx	r8
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	d0e6      	beq.n	8006d3c <_printf_common+0xa4>
 8006d6e:	3601      	adds	r6, #1
 8006d70:	e7d9      	b.n	8006d26 <_printf_common+0x8e>
	...

08006d74 <_printf_i>:
 8006d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d78:	7e0f      	ldrb	r7, [r1, #24]
 8006d7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d7c:	2f78      	cmp	r7, #120	; 0x78
 8006d7e:	4691      	mov	r9, r2
 8006d80:	4680      	mov	r8, r0
 8006d82:	460c      	mov	r4, r1
 8006d84:	469a      	mov	sl, r3
 8006d86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d8a:	d807      	bhi.n	8006d9c <_printf_i+0x28>
 8006d8c:	2f62      	cmp	r7, #98	; 0x62
 8006d8e:	d80a      	bhi.n	8006da6 <_printf_i+0x32>
 8006d90:	2f00      	cmp	r7, #0
 8006d92:	f000 80d8 	beq.w	8006f46 <_printf_i+0x1d2>
 8006d96:	2f58      	cmp	r7, #88	; 0x58
 8006d98:	f000 80a3 	beq.w	8006ee2 <_printf_i+0x16e>
 8006d9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006da0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006da4:	e03a      	b.n	8006e1c <_printf_i+0xa8>
 8006da6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006daa:	2b15      	cmp	r3, #21
 8006dac:	d8f6      	bhi.n	8006d9c <_printf_i+0x28>
 8006dae:	a101      	add	r1, pc, #4	; (adr r1, 8006db4 <_printf_i+0x40>)
 8006db0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006db4:	08006e0d 	.word	0x08006e0d
 8006db8:	08006e21 	.word	0x08006e21
 8006dbc:	08006d9d 	.word	0x08006d9d
 8006dc0:	08006d9d 	.word	0x08006d9d
 8006dc4:	08006d9d 	.word	0x08006d9d
 8006dc8:	08006d9d 	.word	0x08006d9d
 8006dcc:	08006e21 	.word	0x08006e21
 8006dd0:	08006d9d 	.word	0x08006d9d
 8006dd4:	08006d9d 	.word	0x08006d9d
 8006dd8:	08006d9d 	.word	0x08006d9d
 8006ddc:	08006d9d 	.word	0x08006d9d
 8006de0:	08006f2d 	.word	0x08006f2d
 8006de4:	08006e51 	.word	0x08006e51
 8006de8:	08006f0f 	.word	0x08006f0f
 8006dec:	08006d9d 	.word	0x08006d9d
 8006df0:	08006d9d 	.word	0x08006d9d
 8006df4:	08006f4f 	.word	0x08006f4f
 8006df8:	08006d9d 	.word	0x08006d9d
 8006dfc:	08006e51 	.word	0x08006e51
 8006e00:	08006d9d 	.word	0x08006d9d
 8006e04:	08006d9d 	.word	0x08006d9d
 8006e08:	08006f17 	.word	0x08006f17
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	1d1a      	adds	r2, r3, #4
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	602a      	str	r2, [r5, #0]
 8006e14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e0a3      	b.n	8006f68 <_printf_i+0x1f4>
 8006e20:	6820      	ldr	r0, [r4, #0]
 8006e22:	6829      	ldr	r1, [r5, #0]
 8006e24:	0606      	lsls	r6, r0, #24
 8006e26:	f101 0304 	add.w	r3, r1, #4
 8006e2a:	d50a      	bpl.n	8006e42 <_printf_i+0xce>
 8006e2c:	680e      	ldr	r6, [r1, #0]
 8006e2e:	602b      	str	r3, [r5, #0]
 8006e30:	2e00      	cmp	r6, #0
 8006e32:	da03      	bge.n	8006e3c <_printf_i+0xc8>
 8006e34:	232d      	movs	r3, #45	; 0x2d
 8006e36:	4276      	negs	r6, r6
 8006e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e3c:	485e      	ldr	r0, [pc, #376]	; (8006fb8 <_printf_i+0x244>)
 8006e3e:	230a      	movs	r3, #10
 8006e40:	e019      	b.n	8006e76 <_printf_i+0x102>
 8006e42:	680e      	ldr	r6, [r1, #0]
 8006e44:	602b      	str	r3, [r5, #0]
 8006e46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e4a:	bf18      	it	ne
 8006e4c:	b236      	sxthne	r6, r6
 8006e4e:	e7ef      	b.n	8006e30 <_printf_i+0xbc>
 8006e50:	682b      	ldr	r3, [r5, #0]
 8006e52:	6820      	ldr	r0, [r4, #0]
 8006e54:	1d19      	adds	r1, r3, #4
 8006e56:	6029      	str	r1, [r5, #0]
 8006e58:	0601      	lsls	r1, r0, #24
 8006e5a:	d501      	bpl.n	8006e60 <_printf_i+0xec>
 8006e5c:	681e      	ldr	r6, [r3, #0]
 8006e5e:	e002      	b.n	8006e66 <_printf_i+0xf2>
 8006e60:	0646      	lsls	r6, r0, #25
 8006e62:	d5fb      	bpl.n	8006e5c <_printf_i+0xe8>
 8006e64:	881e      	ldrh	r6, [r3, #0]
 8006e66:	4854      	ldr	r0, [pc, #336]	; (8006fb8 <_printf_i+0x244>)
 8006e68:	2f6f      	cmp	r7, #111	; 0x6f
 8006e6a:	bf0c      	ite	eq
 8006e6c:	2308      	moveq	r3, #8
 8006e6e:	230a      	movne	r3, #10
 8006e70:	2100      	movs	r1, #0
 8006e72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e76:	6865      	ldr	r5, [r4, #4]
 8006e78:	60a5      	str	r5, [r4, #8]
 8006e7a:	2d00      	cmp	r5, #0
 8006e7c:	bfa2      	ittt	ge
 8006e7e:	6821      	ldrge	r1, [r4, #0]
 8006e80:	f021 0104 	bicge.w	r1, r1, #4
 8006e84:	6021      	strge	r1, [r4, #0]
 8006e86:	b90e      	cbnz	r6, 8006e8c <_printf_i+0x118>
 8006e88:	2d00      	cmp	r5, #0
 8006e8a:	d04d      	beq.n	8006f28 <_printf_i+0x1b4>
 8006e8c:	4615      	mov	r5, r2
 8006e8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e92:	fb03 6711 	mls	r7, r3, r1, r6
 8006e96:	5dc7      	ldrb	r7, [r0, r7]
 8006e98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e9c:	4637      	mov	r7, r6
 8006e9e:	42bb      	cmp	r3, r7
 8006ea0:	460e      	mov	r6, r1
 8006ea2:	d9f4      	bls.n	8006e8e <_printf_i+0x11a>
 8006ea4:	2b08      	cmp	r3, #8
 8006ea6:	d10b      	bne.n	8006ec0 <_printf_i+0x14c>
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	07de      	lsls	r6, r3, #31
 8006eac:	d508      	bpl.n	8006ec0 <_printf_i+0x14c>
 8006eae:	6923      	ldr	r3, [r4, #16]
 8006eb0:	6861      	ldr	r1, [r4, #4]
 8006eb2:	4299      	cmp	r1, r3
 8006eb4:	bfde      	ittt	le
 8006eb6:	2330      	movle	r3, #48	; 0x30
 8006eb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ebc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ec0:	1b52      	subs	r2, r2, r5
 8006ec2:	6122      	str	r2, [r4, #16]
 8006ec4:	f8cd a000 	str.w	sl, [sp]
 8006ec8:	464b      	mov	r3, r9
 8006eca:	aa03      	add	r2, sp, #12
 8006ecc:	4621      	mov	r1, r4
 8006ece:	4640      	mov	r0, r8
 8006ed0:	f7ff fee2 	bl	8006c98 <_printf_common>
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	d14c      	bne.n	8006f72 <_printf_i+0x1fe>
 8006ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8006edc:	b004      	add	sp, #16
 8006ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee2:	4835      	ldr	r0, [pc, #212]	; (8006fb8 <_printf_i+0x244>)
 8006ee4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ee8:	6829      	ldr	r1, [r5, #0]
 8006eea:	6823      	ldr	r3, [r4, #0]
 8006eec:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ef0:	6029      	str	r1, [r5, #0]
 8006ef2:	061d      	lsls	r5, r3, #24
 8006ef4:	d514      	bpl.n	8006f20 <_printf_i+0x1ac>
 8006ef6:	07df      	lsls	r7, r3, #31
 8006ef8:	bf44      	itt	mi
 8006efa:	f043 0320 	orrmi.w	r3, r3, #32
 8006efe:	6023      	strmi	r3, [r4, #0]
 8006f00:	b91e      	cbnz	r6, 8006f0a <_printf_i+0x196>
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	f023 0320 	bic.w	r3, r3, #32
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	2310      	movs	r3, #16
 8006f0c:	e7b0      	b.n	8006e70 <_printf_i+0xfc>
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	f043 0320 	orr.w	r3, r3, #32
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	2378      	movs	r3, #120	; 0x78
 8006f18:	4828      	ldr	r0, [pc, #160]	; (8006fbc <_printf_i+0x248>)
 8006f1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f1e:	e7e3      	b.n	8006ee8 <_printf_i+0x174>
 8006f20:	0659      	lsls	r1, r3, #25
 8006f22:	bf48      	it	mi
 8006f24:	b2b6      	uxthmi	r6, r6
 8006f26:	e7e6      	b.n	8006ef6 <_printf_i+0x182>
 8006f28:	4615      	mov	r5, r2
 8006f2a:	e7bb      	b.n	8006ea4 <_printf_i+0x130>
 8006f2c:	682b      	ldr	r3, [r5, #0]
 8006f2e:	6826      	ldr	r6, [r4, #0]
 8006f30:	6961      	ldr	r1, [r4, #20]
 8006f32:	1d18      	adds	r0, r3, #4
 8006f34:	6028      	str	r0, [r5, #0]
 8006f36:	0635      	lsls	r5, r6, #24
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	d501      	bpl.n	8006f40 <_printf_i+0x1cc>
 8006f3c:	6019      	str	r1, [r3, #0]
 8006f3e:	e002      	b.n	8006f46 <_printf_i+0x1d2>
 8006f40:	0670      	lsls	r0, r6, #25
 8006f42:	d5fb      	bpl.n	8006f3c <_printf_i+0x1c8>
 8006f44:	8019      	strh	r1, [r3, #0]
 8006f46:	2300      	movs	r3, #0
 8006f48:	6123      	str	r3, [r4, #16]
 8006f4a:	4615      	mov	r5, r2
 8006f4c:	e7ba      	b.n	8006ec4 <_printf_i+0x150>
 8006f4e:	682b      	ldr	r3, [r5, #0]
 8006f50:	1d1a      	adds	r2, r3, #4
 8006f52:	602a      	str	r2, [r5, #0]
 8006f54:	681d      	ldr	r5, [r3, #0]
 8006f56:	6862      	ldr	r2, [r4, #4]
 8006f58:	2100      	movs	r1, #0
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	f7f9 f970 	bl	8000240 <memchr>
 8006f60:	b108      	cbz	r0, 8006f66 <_printf_i+0x1f2>
 8006f62:	1b40      	subs	r0, r0, r5
 8006f64:	6060      	str	r0, [r4, #4]
 8006f66:	6863      	ldr	r3, [r4, #4]
 8006f68:	6123      	str	r3, [r4, #16]
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f70:	e7a8      	b.n	8006ec4 <_printf_i+0x150>
 8006f72:	6923      	ldr	r3, [r4, #16]
 8006f74:	462a      	mov	r2, r5
 8006f76:	4649      	mov	r1, r9
 8006f78:	4640      	mov	r0, r8
 8006f7a:	47d0      	blx	sl
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d0ab      	beq.n	8006ed8 <_printf_i+0x164>
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	079b      	lsls	r3, r3, #30
 8006f84:	d413      	bmi.n	8006fae <_printf_i+0x23a>
 8006f86:	68e0      	ldr	r0, [r4, #12]
 8006f88:	9b03      	ldr	r3, [sp, #12]
 8006f8a:	4298      	cmp	r0, r3
 8006f8c:	bfb8      	it	lt
 8006f8e:	4618      	movlt	r0, r3
 8006f90:	e7a4      	b.n	8006edc <_printf_i+0x168>
 8006f92:	2301      	movs	r3, #1
 8006f94:	4632      	mov	r2, r6
 8006f96:	4649      	mov	r1, r9
 8006f98:	4640      	mov	r0, r8
 8006f9a:	47d0      	blx	sl
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d09b      	beq.n	8006ed8 <_printf_i+0x164>
 8006fa0:	3501      	adds	r5, #1
 8006fa2:	68e3      	ldr	r3, [r4, #12]
 8006fa4:	9903      	ldr	r1, [sp, #12]
 8006fa6:	1a5b      	subs	r3, r3, r1
 8006fa8:	42ab      	cmp	r3, r5
 8006faa:	dcf2      	bgt.n	8006f92 <_printf_i+0x21e>
 8006fac:	e7eb      	b.n	8006f86 <_printf_i+0x212>
 8006fae:	2500      	movs	r5, #0
 8006fb0:	f104 0619 	add.w	r6, r4, #25
 8006fb4:	e7f5      	b.n	8006fa2 <_printf_i+0x22e>
 8006fb6:	bf00      	nop
 8006fb8:	0800ae5e 	.word	0x0800ae5e
 8006fbc:	0800ae6f 	.word	0x0800ae6f

08006fc0 <_puts_r>:
 8006fc0:	b570      	push	{r4, r5, r6, lr}
 8006fc2:	460e      	mov	r6, r1
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	b118      	cbz	r0, 8006fd0 <_puts_r+0x10>
 8006fc8:	6983      	ldr	r3, [r0, #24]
 8006fca:	b90b      	cbnz	r3, 8006fd0 <_puts_r+0x10>
 8006fcc:	f001 ffb0 	bl	8008f30 <__sinit>
 8006fd0:	69ab      	ldr	r3, [r5, #24]
 8006fd2:	68ac      	ldr	r4, [r5, #8]
 8006fd4:	b913      	cbnz	r3, 8006fdc <_puts_r+0x1c>
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	f001 ffaa 	bl	8008f30 <__sinit>
 8006fdc:	4b2c      	ldr	r3, [pc, #176]	; (8007090 <_puts_r+0xd0>)
 8006fde:	429c      	cmp	r4, r3
 8006fe0:	d120      	bne.n	8007024 <_puts_r+0x64>
 8006fe2:	686c      	ldr	r4, [r5, #4]
 8006fe4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fe6:	07db      	lsls	r3, r3, #31
 8006fe8:	d405      	bmi.n	8006ff6 <_puts_r+0x36>
 8006fea:	89a3      	ldrh	r3, [r4, #12]
 8006fec:	0598      	lsls	r0, r3, #22
 8006fee:	d402      	bmi.n	8006ff6 <_puts_r+0x36>
 8006ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ff2:	f002 fbc0 	bl	8009776 <__retarget_lock_acquire_recursive>
 8006ff6:	89a3      	ldrh	r3, [r4, #12]
 8006ff8:	0719      	lsls	r1, r3, #28
 8006ffa:	d51d      	bpl.n	8007038 <_puts_r+0x78>
 8006ffc:	6923      	ldr	r3, [r4, #16]
 8006ffe:	b1db      	cbz	r3, 8007038 <_puts_r+0x78>
 8007000:	3e01      	subs	r6, #1
 8007002:	68a3      	ldr	r3, [r4, #8]
 8007004:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007008:	3b01      	subs	r3, #1
 800700a:	60a3      	str	r3, [r4, #8]
 800700c:	bb39      	cbnz	r1, 800705e <_puts_r+0x9e>
 800700e:	2b00      	cmp	r3, #0
 8007010:	da38      	bge.n	8007084 <_puts_r+0xc4>
 8007012:	4622      	mov	r2, r4
 8007014:	210a      	movs	r1, #10
 8007016:	4628      	mov	r0, r5
 8007018:	f000 ff18 	bl	8007e4c <__swbuf_r>
 800701c:	3001      	adds	r0, #1
 800701e:	d011      	beq.n	8007044 <_puts_r+0x84>
 8007020:	250a      	movs	r5, #10
 8007022:	e011      	b.n	8007048 <_puts_r+0x88>
 8007024:	4b1b      	ldr	r3, [pc, #108]	; (8007094 <_puts_r+0xd4>)
 8007026:	429c      	cmp	r4, r3
 8007028:	d101      	bne.n	800702e <_puts_r+0x6e>
 800702a:	68ac      	ldr	r4, [r5, #8]
 800702c:	e7da      	b.n	8006fe4 <_puts_r+0x24>
 800702e:	4b1a      	ldr	r3, [pc, #104]	; (8007098 <_puts_r+0xd8>)
 8007030:	429c      	cmp	r4, r3
 8007032:	bf08      	it	eq
 8007034:	68ec      	ldreq	r4, [r5, #12]
 8007036:	e7d5      	b.n	8006fe4 <_puts_r+0x24>
 8007038:	4621      	mov	r1, r4
 800703a:	4628      	mov	r0, r5
 800703c:	f000 ff58 	bl	8007ef0 <__swsetup_r>
 8007040:	2800      	cmp	r0, #0
 8007042:	d0dd      	beq.n	8007000 <_puts_r+0x40>
 8007044:	f04f 35ff 	mov.w	r5, #4294967295
 8007048:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800704a:	07da      	lsls	r2, r3, #31
 800704c:	d405      	bmi.n	800705a <_puts_r+0x9a>
 800704e:	89a3      	ldrh	r3, [r4, #12]
 8007050:	059b      	lsls	r3, r3, #22
 8007052:	d402      	bmi.n	800705a <_puts_r+0x9a>
 8007054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007056:	f002 fb8f 	bl	8009778 <__retarget_lock_release_recursive>
 800705a:	4628      	mov	r0, r5
 800705c:	bd70      	pop	{r4, r5, r6, pc}
 800705e:	2b00      	cmp	r3, #0
 8007060:	da04      	bge.n	800706c <_puts_r+0xac>
 8007062:	69a2      	ldr	r2, [r4, #24]
 8007064:	429a      	cmp	r2, r3
 8007066:	dc06      	bgt.n	8007076 <_puts_r+0xb6>
 8007068:	290a      	cmp	r1, #10
 800706a:	d004      	beq.n	8007076 <_puts_r+0xb6>
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	1c5a      	adds	r2, r3, #1
 8007070:	6022      	str	r2, [r4, #0]
 8007072:	7019      	strb	r1, [r3, #0]
 8007074:	e7c5      	b.n	8007002 <_puts_r+0x42>
 8007076:	4622      	mov	r2, r4
 8007078:	4628      	mov	r0, r5
 800707a:	f000 fee7 	bl	8007e4c <__swbuf_r>
 800707e:	3001      	adds	r0, #1
 8007080:	d1bf      	bne.n	8007002 <_puts_r+0x42>
 8007082:	e7df      	b.n	8007044 <_puts_r+0x84>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	250a      	movs	r5, #10
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	6022      	str	r2, [r4, #0]
 800708c:	701d      	strb	r5, [r3, #0]
 800708e:	e7db      	b.n	8007048 <_puts_r+0x88>
 8007090:	0800b01c 	.word	0x0800b01c
 8007094:	0800b03c 	.word	0x0800b03c
 8007098:	0800affc 	.word	0x0800affc

0800709c <puts>:
 800709c:	4b02      	ldr	r3, [pc, #8]	; (80070a8 <puts+0xc>)
 800709e:	4601      	mov	r1, r0
 80070a0:	6818      	ldr	r0, [r3, #0]
 80070a2:	f7ff bf8d 	b.w	8006fc0 <_puts_r>
 80070a6:	bf00      	nop
 80070a8:	20000070 	.word	0x20000070

080070ac <_sbrk_r>:
 80070ac:	b538      	push	{r3, r4, r5, lr}
 80070ae:	4d06      	ldr	r5, [pc, #24]	; (80070c8 <_sbrk_r+0x1c>)
 80070b0:	2300      	movs	r3, #0
 80070b2:	4604      	mov	r4, r0
 80070b4:	4608      	mov	r0, r1
 80070b6:	602b      	str	r3, [r5, #0]
 80070b8:	f7fc f988 	bl	80033cc <_sbrk>
 80070bc:	1c43      	adds	r3, r0, #1
 80070be:	d102      	bne.n	80070c6 <_sbrk_r+0x1a>
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	b103      	cbz	r3, 80070c6 <_sbrk_r+0x1a>
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	bd38      	pop	{r3, r4, r5, pc}
 80070c8:	20000a14 	.word	0x20000a14

080070cc <siprintf>:
 80070cc:	b40e      	push	{r1, r2, r3}
 80070ce:	b500      	push	{lr}
 80070d0:	b09c      	sub	sp, #112	; 0x70
 80070d2:	ab1d      	add	r3, sp, #116	; 0x74
 80070d4:	9002      	str	r0, [sp, #8]
 80070d6:	9006      	str	r0, [sp, #24]
 80070d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070dc:	4809      	ldr	r0, [pc, #36]	; (8007104 <siprintf+0x38>)
 80070de:	9107      	str	r1, [sp, #28]
 80070e0:	9104      	str	r1, [sp, #16]
 80070e2:	4909      	ldr	r1, [pc, #36]	; (8007108 <siprintf+0x3c>)
 80070e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80070e8:	9105      	str	r1, [sp, #20]
 80070ea:	6800      	ldr	r0, [r0, #0]
 80070ec:	9301      	str	r3, [sp, #4]
 80070ee:	a902      	add	r1, sp, #8
 80070f0:	f003 f906 	bl	800a300 <_svfiprintf_r>
 80070f4:	9b02      	ldr	r3, [sp, #8]
 80070f6:	2200      	movs	r2, #0
 80070f8:	701a      	strb	r2, [r3, #0]
 80070fa:	b01c      	add	sp, #112	; 0x70
 80070fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007100:	b003      	add	sp, #12
 8007102:	4770      	bx	lr
 8007104:	20000070 	.word	0x20000070
 8007108:	ffff0208 	.word	0xffff0208

0800710c <strchr>:
 800710c:	b2c9      	uxtb	r1, r1
 800710e:	4603      	mov	r3, r0
 8007110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007114:	b11a      	cbz	r2, 800711e <strchr+0x12>
 8007116:	428a      	cmp	r2, r1
 8007118:	d1f9      	bne.n	800710e <strchr+0x2>
 800711a:	4618      	mov	r0, r3
 800711c:	4770      	bx	lr
 800711e:	2900      	cmp	r1, #0
 8007120:	bf18      	it	ne
 8007122:	2300      	movne	r3, #0
 8007124:	e7f9      	b.n	800711a <strchr+0xe>

08007126 <strcpy>:
 8007126:	4603      	mov	r3, r0
 8007128:	f811 2b01 	ldrb.w	r2, [r1], #1
 800712c:	f803 2b01 	strb.w	r2, [r3], #1
 8007130:	2a00      	cmp	r2, #0
 8007132:	d1f9      	bne.n	8007128 <strcpy+0x2>
 8007134:	4770      	bx	lr

08007136 <sulp>:
 8007136:	b570      	push	{r4, r5, r6, lr}
 8007138:	4604      	mov	r4, r0
 800713a:	460d      	mov	r5, r1
 800713c:	ec45 4b10 	vmov	d0, r4, r5
 8007140:	4616      	mov	r6, r2
 8007142:	f002 ff1d 	bl	8009f80 <__ulp>
 8007146:	ec51 0b10 	vmov	r0, r1, d0
 800714a:	b17e      	cbz	r6, 800716c <sulp+0x36>
 800714c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007150:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007154:	2b00      	cmp	r3, #0
 8007156:	dd09      	ble.n	800716c <sulp+0x36>
 8007158:	051b      	lsls	r3, r3, #20
 800715a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800715e:	2400      	movs	r4, #0
 8007160:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007164:	4622      	mov	r2, r4
 8007166:	462b      	mov	r3, r5
 8007168:	f7f9 fa76 	bl	8000658 <__aeabi_dmul>
 800716c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007170 <_strtod_l>:
 8007170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007174:	ed2d 8b02 	vpush	{d8}
 8007178:	b09d      	sub	sp, #116	; 0x74
 800717a:	461f      	mov	r7, r3
 800717c:	2300      	movs	r3, #0
 800717e:	9318      	str	r3, [sp, #96]	; 0x60
 8007180:	4ba2      	ldr	r3, [pc, #648]	; (800740c <_strtod_l+0x29c>)
 8007182:	9213      	str	r2, [sp, #76]	; 0x4c
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	9305      	str	r3, [sp, #20]
 8007188:	4604      	mov	r4, r0
 800718a:	4618      	mov	r0, r3
 800718c:	4688      	mov	r8, r1
 800718e:	f7f9 f849 	bl	8000224 <strlen>
 8007192:	f04f 0a00 	mov.w	sl, #0
 8007196:	4605      	mov	r5, r0
 8007198:	f04f 0b00 	mov.w	fp, #0
 800719c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80071a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071a2:	781a      	ldrb	r2, [r3, #0]
 80071a4:	2a2b      	cmp	r2, #43	; 0x2b
 80071a6:	d04e      	beq.n	8007246 <_strtod_l+0xd6>
 80071a8:	d83b      	bhi.n	8007222 <_strtod_l+0xb2>
 80071aa:	2a0d      	cmp	r2, #13
 80071ac:	d834      	bhi.n	8007218 <_strtod_l+0xa8>
 80071ae:	2a08      	cmp	r2, #8
 80071b0:	d834      	bhi.n	800721c <_strtod_l+0xac>
 80071b2:	2a00      	cmp	r2, #0
 80071b4:	d03e      	beq.n	8007234 <_strtod_l+0xc4>
 80071b6:	2300      	movs	r3, #0
 80071b8:	930a      	str	r3, [sp, #40]	; 0x28
 80071ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80071bc:	7833      	ldrb	r3, [r6, #0]
 80071be:	2b30      	cmp	r3, #48	; 0x30
 80071c0:	f040 80b0 	bne.w	8007324 <_strtod_l+0x1b4>
 80071c4:	7873      	ldrb	r3, [r6, #1]
 80071c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80071ca:	2b58      	cmp	r3, #88	; 0x58
 80071cc:	d168      	bne.n	80072a0 <_strtod_l+0x130>
 80071ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071d0:	9301      	str	r3, [sp, #4]
 80071d2:	ab18      	add	r3, sp, #96	; 0x60
 80071d4:	9702      	str	r7, [sp, #8]
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	4a8d      	ldr	r2, [pc, #564]	; (8007410 <_strtod_l+0x2a0>)
 80071da:	ab19      	add	r3, sp, #100	; 0x64
 80071dc:	a917      	add	r1, sp, #92	; 0x5c
 80071de:	4620      	mov	r0, r4
 80071e0:	f001 ffbc 	bl	800915c <__gethex>
 80071e4:	f010 0707 	ands.w	r7, r0, #7
 80071e8:	4605      	mov	r5, r0
 80071ea:	d005      	beq.n	80071f8 <_strtod_l+0x88>
 80071ec:	2f06      	cmp	r7, #6
 80071ee:	d12c      	bne.n	800724a <_strtod_l+0xda>
 80071f0:	3601      	adds	r6, #1
 80071f2:	2300      	movs	r3, #0
 80071f4:	9617      	str	r6, [sp, #92]	; 0x5c
 80071f6:	930a      	str	r3, [sp, #40]	; 0x28
 80071f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f040 8590 	bne.w	8007d20 <_strtod_l+0xbb0>
 8007200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007202:	b1eb      	cbz	r3, 8007240 <_strtod_l+0xd0>
 8007204:	4652      	mov	r2, sl
 8007206:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800720a:	ec43 2b10 	vmov	d0, r2, r3
 800720e:	b01d      	add	sp, #116	; 0x74
 8007210:	ecbd 8b02 	vpop	{d8}
 8007214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007218:	2a20      	cmp	r2, #32
 800721a:	d1cc      	bne.n	80071b6 <_strtod_l+0x46>
 800721c:	3301      	adds	r3, #1
 800721e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007220:	e7be      	b.n	80071a0 <_strtod_l+0x30>
 8007222:	2a2d      	cmp	r2, #45	; 0x2d
 8007224:	d1c7      	bne.n	80071b6 <_strtod_l+0x46>
 8007226:	2201      	movs	r2, #1
 8007228:	920a      	str	r2, [sp, #40]	; 0x28
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	9217      	str	r2, [sp, #92]	; 0x5c
 800722e:	785b      	ldrb	r3, [r3, #1]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1c2      	bne.n	80071ba <_strtod_l+0x4a>
 8007234:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007236:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800723a:	2b00      	cmp	r3, #0
 800723c:	f040 856e 	bne.w	8007d1c <_strtod_l+0xbac>
 8007240:	4652      	mov	r2, sl
 8007242:	465b      	mov	r3, fp
 8007244:	e7e1      	b.n	800720a <_strtod_l+0x9a>
 8007246:	2200      	movs	r2, #0
 8007248:	e7ee      	b.n	8007228 <_strtod_l+0xb8>
 800724a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800724c:	b13a      	cbz	r2, 800725e <_strtod_l+0xee>
 800724e:	2135      	movs	r1, #53	; 0x35
 8007250:	a81a      	add	r0, sp, #104	; 0x68
 8007252:	f002 ffa0 	bl	800a196 <__copybits>
 8007256:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007258:	4620      	mov	r0, r4
 800725a:	f002 fb5f 	bl	800991c <_Bfree>
 800725e:	3f01      	subs	r7, #1
 8007260:	2f04      	cmp	r7, #4
 8007262:	d806      	bhi.n	8007272 <_strtod_l+0x102>
 8007264:	e8df f007 	tbb	[pc, r7]
 8007268:	1714030a 	.word	0x1714030a
 800726c:	0a          	.byte	0x0a
 800726d:	00          	.byte	0x00
 800726e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007272:	0728      	lsls	r0, r5, #28
 8007274:	d5c0      	bpl.n	80071f8 <_strtod_l+0x88>
 8007276:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800727a:	e7bd      	b.n	80071f8 <_strtod_l+0x88>
 800727c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007280:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007282:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007286:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800728a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800728e:	e7f0      	b.n	8007272 <_strtod_l+0x102>
 8007290:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007414 <_strtod_l+0x2a4>
 8007294:	e7ed      	b.n	8007272 <_strtod_l+0x102>
 8007296:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800729a:	f04f 3aff 	mov.w	sl, #4294967295
 800729e:	e7e8      	b.n	8007272 <_strtod_l+0x102>
 80072a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072a2:	1c5a      	adds	r2, r3, #1
 80072a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80072a6:	785b      	ldrb	r3, [r3, #1]
 80072a8:	2b30      	cmp	r3, #48	; 0x30
 80072aa:	d0f9      	beq.n	80072a0 <_strtod_l+0x130>
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d0a3      	beq.n	80071f8 <_strtod_l+0x88>
 80072b0:	2301      	movs	r3, #1
 80072b2:	f04f 0900 	mov.w	r9, #0
 80072b6:	9304      	str	r3, [sp, #16]
 80072b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072ba:	9308      	str	r3, [sp, #32]
 80072bc:	f8cd 901c 	str.w	r9, [sp, #28]
 80072c0:	464f      	mov	r7, r9
 80072c2:	220a      	movs	r2, #10
 80072c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80072c6:	7806      	ldrb	r6, [r0, #0]
 80072c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80072cc:	b2d9      	uxtb	r1, r3
 80072ce:	2909      	cmp	r1, #9
 80072d0:	d92a      	bls.n	8007328 <_strtod_l+0x1b8>
 80072d2:	9905      	ldr	r1, [sp, #20]
 80072d4:	462a      	mov	r2, r5
 80072d6:	f003 faba 	bl	800a84e <strncmp>
 80072da:	b398      	cbz	r0, 8007344 <_strtod_l+0x1d4>
 80072dc:	2000      	movs	r0, #0
 80072de:	4632      	mov	r2, r6
 80072e0:	463d      	mov	r5, r7
 80072e2:	9005      	str	r0, [sp, #20]
 80072e4:	4603      	mov	r3, r0
 80072e6:	2a65      	cmp	r2, #101	; 0x65
 80072e8:	d001      	beq.n	80072ee <_strtod_l+0x17e>
 80072ea:	2a45      	cmp	r2, #69	; 0x45
 80072ec:	d118      	bne.n	8007320 <_strtod_l+0x1b0>
 80072ee:	b91d      	cbnz	r5, 80072f8 <_strtod_l+0x188>
 80072f0:	9a04      	ldr	r2, [sp, #16]
 80072f2:	4302      	orrs	r2, r0
 80072f4:	d09e      	beq.n	8007234 <_strtod_l+0xc4>
 80072f6:	2500      	movs	r5, #0
 80072f8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80072fc:	f108 0201 	add.w	r2, r8, #1
 8007300:	9217      	str	r2, [sp, #92]	; 0x5c
 8007302:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007306:	2a2b      	cmp	r2, #43	; 0x2b
 8007308:	d075      	beq.n	80073f6 <_strtod_l+0x286>
 800730a:	2a2d      	cmp	r2, #45	; 0x2d
 800730c:	d07b      	beq.n	8007406 <_strtod_l+0x296>
 800730e:	f04f 0c00 	mov.w	ip, #0
 8007312:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007316:	2909      	cmp	r1, #9
 8007318:	f240 8082 	bls.w	8007420 <_strtod_l+0x2b0>
 800731c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007320:	2600      	movs	r6, #0
 8007322:	e09d      	b.n	8007460 <_strtod_l+0x2f0>
 8007324:	2300      	movs	r3, #0
 8007326:	e7c4      	b.n	80072b2 <_strtod_l+0x142>
 8007328:	2f08      	cmp	r7, #8
 800732a:	bfd8      	it	le
 800732c:	9907      	ldrle	r1, [sp, #28]
 800732e:	f100 0001 	add.w	r0, r0, #1
 8007332:	bfda      	itte	le
 8007334:	fb02 3301 	mlale	r3, r2, r1, r3
 8007338:	9307      	strle	r3, [sp, #28]
 800733a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800733e:	3701      	adds	r7, #1
 8007340:	9017      	str	r0, [sp, #92]	; 0x5c
 8007342:	e7bf      	b.n	80072c4 <_strtod_l+0x154>
 8007344:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007346:	195a      	adds	r2, r3, r5
 8007348:	9217      	str	r2, [sp, #92]	; 0x5c
 800734a:	5d5a      	ldrb	r2, [r3, r5]
 800734c:	2f00      	cmp	r7, #0
 800734e:	d037      	beq.n	80073c0 <_strtod_l+0x250>
 8007350:	9005      	str	r0, [sp, #20]
 8007352:	463d      	mov	r5, r7
 8007354:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007358:	2b09      	cmp	r3, #9
 800735a:	d912      	bls.n	8007382 <_strtod_l+0x212>
 800735c:	2301      	movs	r3, #1
 800735e:	e7c2      	b.n	80072e6 <_strtod_l+0x176>
 8007360:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	9217      	str	r2, [sp, #92]	; 0x5c
 8007366:	785a      	ldrb	r2, [r3, #1]
 8007368:	3001      	adds	r0, #1
 800736a:	2a30      	cmp	r2, #48	; 0x30
 800736c:	d0f8      	beq.n	8007360 <_strtod_l+0x1f0>
 800736e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007372:	2b08      	cmp	r3, #8
 8007374:	f200 84d9 	bhi.w	8007d2a <_strtod_l+0xbba>
 8007378:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800737a:	9005      	str	r0, [sp, #20]
 800737c:	2000      	movs	r0, #0
 800737e:	9308      	str	r3, [sp, #32]
 8007380:	4605      	mov	r5, r0
 8007382:	3a30      	subs	r2, #48	; 0x30
 8007384:	f100 0301 	add.w	r3, r0, #1
 8007388:	d014      	beq.n	80073b4 <_strtod_l+0x244>
 800738a:	9905      	ldr	r1, [sp, #20]
 800738c:	4419      	add	r1, r3
 800738e:	9105      	str	r1, [sp, #20]
 8007390:	462b      	mov	r3, r5
 8007392:	eb00 0e05 	add.w	lr, r0, r5
 8007396:	210a      	movs	r1, #10
 8007398:	4573      	cmp	r3, lr
 800739a:	d113      	bne.n	80073c4 <_strtod_l+0x254>
 800739c:	182b      	adds	r3, r5, r0
 800739e:	2b08      	cmp	r3, #8
 80073a0:	f105 0501 	add.w	r5, r5, #1
 80073a4:	4405      	add	r5, r0
 80073a6:	dc1c      	bgt.n	80073e2 <_strtod_l+0x272>
 80073a8:	9907      	ldr	r1, [sp, #28]
 80073aa:	230a      	movs	r3, #10
 80073ac:	fb03 2301 	mla	r3, r3, r1, r2
 80073b0:	9307      	str	r3, [sp, #28]
 80073b2:	2300      	movs	r3, #0
 80073b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073b6:	1c51      	adds	r1, r2, #1
 80073b8:	9117      	str	r1, [sp, #92]	; 0x5c
 80073ba:	7852      	ldrb	r2, [r2, #1]
 80073bc:	4618      	mov	r0, r3
 80073be:	e7c9      	b.n	8007354 <_strtod_l+0x1e4>
 80073c0:	4638      	mov	r0, r7
 80073c2:	e7d2      	b.n	800736a <_strtod_l+0x1fa>
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	dc04      	bgt.n	80073d2 <_strtod_l+0x262>
 80073c8:	9e07      	ldr	r6, [sp, #28]
 80073ca:	434e      	muls	r6, r1
 80073cc:	9607      	str	r6, [sp, #28]
 80073ce:	3301      	adds	r3, #1
 80073d0:	e7e2      	b.n	8007398 <_strtod_l+0x228>
 80073d2:	f103 0c01 	add.w	ip, r3, #1
 80073d6:	f1bc 0f10 	cmp.w	ip, #16
 80073da:	bfd8      	it	le
 80073dc:	fb01 f909 	mulle.w	r9, r1, r9
 80073e0:	e7f5      	b.n	80073ce <_strtod_l+0x25e>
 80073e2:	2d10      	cmp	r5, #16
 80073e4:	bfdc      	itt	le
 80073e6:	230a      	movle	r3, #10
 80073e8:	fb03 2909 	mlale	r9, r3, r9, r2
 80073ec:	e7e1      	b.n	80073b2 <_strtod_l+0x242>
 80073ee:	2300      	movs	r3, #0
 80073f0:	9305      	str	r3, [sp, #20]
 80073f2:	2301      	movs	r3, #1
 80073f4:	e77c      	b.n	80072f0 <_strtod_l+0x180>
 80073f6:	f04f 0c00 	mov.w	ip, #0
 80073fa:	f108 0202 	add.w	r2, r8, #2
 80073fe:	9217      	str	r2, [sp, #92]	; 0x5c
 8007400:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007404:	e785      	b.n	8007312 <_strtod_l+0x1a2>
 8007406:	f04f 0c01 	mov.w	ip, #1
 800740a:	e7f6      	b.n	80073fa <_strtod_l+0x28a>
 800740c:	0800b0c4 	.word	0x0800b0c4
 8007410:	0800ae80 	.word	0x0800ae80
 8007414:	7ff00000 	.word	0x7ff00000
 8007418:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800741a:	1c51      	adds	r1, r2, #1
 800741c:	9117      	str	r1, [sp, #92]	; 0x5c
 800741e:	7852      	ldrb	r2, [r2, #1]
 8007420:	2a30      	cmp	r2, #48	; 0x30
 8007422:	d0f9      	beq.n	8007418 <_strtod_l+0x2a8>
 8007424:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007428:	2908      	cmp	r1, #8
 800742a:	f63f af79 	bhi.w	8007320 <_strtod_l+0x1b0>
 800742e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007432:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007434:	9206      	str	r2, [sp, #24]
 8007436:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007438:	1c51      	adds	r1, r2, #1
 800743a:	9117      	str	r1, [sp, #92]	; 0x5c
 800743c:	7852      	ldrb	r2, [r2, #1]
 800743e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007442:	2e09      	cmp	r6, #9
 8007444:	d937      	bls.n	80074b6 <_strtod_l+0x346>
 8007446:	9e06      	ldr	r6, [sp, #24]
 8007448:	1b89      	subs	r1, r1, r6
 800744a:	2908      	cmp	r1, #8
 800744c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007450:	dc02      	bgt.n	8007458 <_strtod_l+0x2e8>
 8007452:	4576      	cmp	r6, lr
 8007454:	bfa8      	it	ge
 8007456:	4676      	movge	r6, lr
 8007458:	f1bc 0f00 	cmp.w	ip, #0
 800745c:	d000      	beq.n	8007460 <_strtod_l+0x2f0>
 800745e:	4276      	negs	r6, r6
 8007460:	2d00      	cmp	r5, #0
 8007462:	d14d      	bne.n	8007500 <_strtod_l+0x390>
 8007464:	9904      	ldr	r1, [sp, #16]
 8007466:	4301      	orrs	r1, r0
 8007468:	f47f aec6 	bne.w	80071f8 <_strtod_l+0x88>
 800746c:	2b00      	cmp	r3, #0
 800746e:	f47f aee1 	bne.w	8007234 <_strtod_l+0xc4>
 8007472:	2a69      	cmp	r2, #105	; 0x69
 8007474:	d027      	beq.n	80074c6 <_strtod_l+0x356>
 8007476:	dc24      	bgt.n	80074c2 <_strtod_l+0x352>
 8007478:	2a49      	cmp	r2, #73	; 0x49
 800747a:	d024      	beq.n	80074c6 <_strtod_l+0x356>
 800747c:	2a4e      	cmp	r2, #78	; 0x4e
 800747e:	f47f aed9 	bne.w	8007234 <_strtod_l+0xc4>
 8007482:	499f      	ldr	r1, [pc, #636]	; (8007700 <_strtod_l+0x590>)
 8007484:	a817      	add	r0, sp, #92	; 0x5c
 8007486:	f002 f8c1 	bl	800960c <__match>
 800748a:	2800      	cmp	r0, #0
 800748c:	f43f aed2 	beq.w	8007234 <_strtod_l+0xc4>
 8007490:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	2b28      	cmp	r3, #40	; 0x28
 8007496:	d12d      	bne.n	80074f4 <_strtod_l+0x384>
 8007498:	499a      	ldr	r1, [pc, #616]	; (8007704 <_strtod_l+0x594>)
 800749a:	aa1a      	add	r2, sp, #104	; 0x68
 800749c:	a817      	add	r0, sp, #92	; 0x5c
 800749e:	f002 f8c9 	bl	8009634 <__hexnan>
 80074a2:	2805      	cmp	r0, #5
 80074a4:	d126      	bne.n	80074f4 <_strtod_l+0x384>
 80074a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80074ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80074b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80074b4:	e6a0      	b.n	80071f8 <_strtod_l+0x88>
 80074b6:	210a      	movs	r1, #10
 80074b8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80074bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80074c0:	e7b9      	b.n	8007436 <_strtod_l+0x2c6>
 80074c2:	2a6e      	cmp	r2, #110	; 0x6e
 80074c4:	e7db      	b.n	800747e <_strtod_l+0x30e>
 80074c6:	4990      	ldr	r1, [pc, #576]	; (8007708 <_strtod_l+0x598>)
 80074c8:	a817      	add	r0, sp, #92	; 0x5c
 80074ca:	f002 f89f 	bl	800960c <__match>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	f43f aeb0 	beq.w	8007234 <_strtod_l+0xc4>
 80074d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074d6:	498d      	ldr	r1, [pc, #564]	; (800770c <_strtod_l+0x59c>)
 80074d8:	3b01      	subs	r3, #1
 80074da:	a817      	add	r0, sp, #92	; 0x5c
 80074dc:	9317      	str	r3, [sp, #92]	; 0x5c
 80074de:	f002 f895 	bl	800960c <__match>
 80074e2:	b910      	cbnz	r0, 80074ea <_strtod_l+0x37a>
 80074e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074e6:	3301      	adds	r3, #1
 80074e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80074ea:	f8df b230 	ldr.w	fp, [pc, #560]	; 800771c <_strtod_l+0x5ac>
 80074ee:	f04f 0a00 	mov.w	sl, #0
 80074f2:	e681      	b.n	80071f8 <_strtod_l+0x88>
 80074f4:	4886      	ldr	r0, [pc, #536]	; (8007710 <_strtod_l+0x5a0>)
 80074f6:	f003 f95f 	bl	800a7b8 <nan>
 80074fa:	ec5b ab10 	vmov	sl, fp, d0
 80074fe:	e67b      	b.n	80071f8 <_strtod_l+0x88>
 8007500:	9b05      	ldr	r3, [sp, #20]
 8007502:	9807      	ldr	r0, [sp, #28]
 8007504:	1af3      	subs	r3, r6, r3
 8007506:	2f00      	cmp	r7, #0
 8007508:	bf08      	it	eq
 800750a:	462f      	moveq	r7, r5
 800750c:	2d10      	cmp	r5, #16
 800750e:	9306      	str	r3, [sp, #24]
 8007510:	46a8      	mov	r8, r5
 8007512:	bfa8      	it	ge
 8007514:	f04f 0810 	movge.w	r8, #16
 8007518:	f7f9 f824 	bl	8000564 <__aeabi_ui2d>
 800751c:	2d09      	cmp	r5, #9
 800751e:	4682      	mov	sl, r0
 8007520:	468b      	mov	fp, r1
 8007522:	dd13      	ble.n	800754c <_strtod_l+0x3dc>
 8007524:	4b7b      	ldr	r3, [pc, #492]	; (8007714 <_strtod_l+0x5a4>)
 8007526:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800752a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800752e:	f7f9 f893 	bl	8000658 <__aeabi_dmul>
 8007532:	4682      	mov	sl, r0
 8007534:	4648      	mov	r0, r9
 8007536:	468b      	mov	fp, r1
 8007538:	f7f9 f814 	bl	8000564 <__aeabi_ui2d>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4650      	mov	r0, sl
 8007542:	4659      	mov	r1, fp
 8007544:	f7f8 fed2 	bl	80002ec <__adddf3>
 8007548:	4682      	mov	sl, r0
 800754a:	468b      	mov	fp, r1
 800754c:	2d0f      	cmp	r5, #15
 800754e:	dc38      	bgt.n	80075c2 <_strtod_l+0x452>
 8007550:	9b06      	ldr	r3, [sp, #24]
 8007552:	2b00      	cmp	r3, #0
 8007554:	f43f ae50 	beq.w	80071f8 <_strtod_l+0x88>
 8007558:	dd24      	ble.n	80075a4 <_strtod_l+0x434>
 800755a:	2b16      	cmp	r3, #22
 800755c:	dc0b      	bgt.n	8007576 <_strtod_l+0x406>
 800755e:	496d      	ldr	r1, [pc, #436]	; (8007714 <_strtod_l+0x5a4>)
 8007560:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007564:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007568:	4652      	mov	r2, sl
 800756a:	465b      	mov	r3, fp
 800756c:	f7f9 f874 	bl	8000658 <__aeabi_dmul>
 8007570:	4682      	mov	sl, r0
 8007572:	468b      	mov	fp, r1
 8007574:	e640      	b.n	80071f8 <_strtod_l+0x88>
 8007576:	9a06      	ldr	r2, [sp, #24]
 8007578:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800757c:	4293      	cmp	r3, r2
 800757e:	db20      	blt.n	80075c2 <_strtod_l+0x452>
 8007580:	4c64      	ldr	r4, [pc, #400]	; (8007714 <_strtod_l+0x5a4>)
 8007582:	f1c5 050f 	rsb	r5, r5, #15
 8007586:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800758a:	4652      	mov	r2, sl
 800758c:	465b      	mov	r3, fp
 800758e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007592:	f7f9 f861 	bl	8000658 <__aeabi_dmul>
 8007596:	9b06      	ldr	r3, [sp, #24]
 8007598:	1b5d      	subs	r5, r3, r5
 800759a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800759e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80075a2:	e7e3      	b.n	800756c <_strtod_l+0x3fc>
 80075a4:	9b06      	ldr	r3, [sp, #24]
 80075a6:	3316      	adds	r3, #22
 80075a8:	db0b      	blt.n	80075c2 <_strtod_l+0x452>
 80075aa:	9b05      	ldr	r3, [sp, #20]
 80075ac:	1b9e      	subs	r6, r3, r6
 80075ae:	4b59      	ldr	r3, [pc, #356]	; (8007714 <_strtod_l+0x5a4>)
 80075b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80075b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075b8:	4650      	mov	r0, sl
 80075ba:	4659      	mov	r1, fp
 80075bc:	f7f9 f976 	bl	80008ac <__aeabi_ddiv>
 80075c0:	e7d6      	b.n	8007570 <_strtod_l+0x400>
 80075c2:	9b06      	ldr	r3, [sp, #24]
 80075c4:	eba5 0808 	sub.w	r8, r5, r8
 80075c8:	4498      	add	r8, r3
 80075ca:	f1b8 0f00 	cmp.w	r8, #0
 80075ce:	dd74      	ble.n	80076ba <_strtod_l+0x54a>
 80075d0:	f018 030f 	ands.w	r3, r8, #15
 80075d4:	d00a      	beq.n	80075ec <_strtod_l+0x47c>
 80075d6:	494f      	ldr	r1, [pc, #316]	; (8007714 <_strtod_l+0x5a4>)
 80075d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075dc:	4652      	mov	r2, sl
 80075de:	465b      	mov	r3, fp
 80075e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075e4:	f7f9 f838 	bl	8000658 <__aeabi_dmul>
 80075e8:	4682      	mov	sl, r0
 80075ea:	468b      	mov	fp, r1
 80075ec:	f038 080f 	bics.w	r8, r8, #15
 80075f0:	d04f      	beq.n	8007692 <_strtod_l+0x522>
 80075f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80075f6:	dd22      	ble.n	800763e <_strtod_l+0x4ce>
 80075f8:	2500      	movs	r5, #0
 80075fa:	462e      	mov	r6, r5
 80075fc:	9507      	str	r5, [sp, #28]
 80075fe:	9505      	str	r5, [sp, #20]
 8007600:	2322      	movs	r3, #34	; 0x22
 8007602:	f8df b118 	ldr.w	fp, [pc, #280]	; 800771c <_strtod_l+0x5ac>
 8007606:	6023      	str	r3, [r4, #0]
 8007608:	f04f 0a00 	mov.w	sl, #0
 800760c:	9b07      	ldr	r3, [sp, #28]
 800760e:	2b00      	cmp	r3, #0
 8007610:	f43f adf2 	beq.w	80071f8 <_strtod_l+0x88>
 8007614:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007616:	4620      	mov	r0, r4
 8007618:	f002 f980 	bl	800991c <_Bfree>
 800761c:	9905      	ldr	r1, [sp, #20]
 800761e:	4620      	mov	r0, r4
 8007620:	f002 f97c 	bl	800991c <_Bfree>
 8007624:	4631      	mov	r1, r6
 8007626:	4620      	mov	r0, r4
 8007628:	f002 f978 	bl	800991c <_Bfree>
 800762c:	9907      	ldr	r1, [sp, #28]
 800762e:	4620      	mov	r0, r4
 8007630:	f002 f974 	bl	800991c <_Bfree>
 8007634:	4629      	mov	r1, r5
 8007636:	4620      	mov	r0, r4
 8007638:	f002 f970 	bl	800991c <_Bfree>
 800763c:	e5dc      	b.n	80071f8 <_strtod_l+0x88>
 800763e:	4b36      	ldr	r3, [pc, #216]	; (8007718 <_strtod_l+0x5a8>)
 8007640:	9304      	str	r3, [sp, #16]
 8007642:	2300      	movs	r3, #0
 8007644:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007648:	4650      	mov	r0, sl
 800764a:	4659      	mov	r1, fp
 800764c:	4699      	mov	r9, r3
 800764e:	f1b8 0f01 	cmp.w	r8, #1
 8007652:	dc21      	bgt.n	8007698 <_strtod_l+0x528>
 8007654:	b10b      	cbz	r3, 800765a <_strtod_l+0x4ea>
 8007656:	4682      	mov	sl, r0
 8007658:	468b      	mov	fp, r1
 800765a:	4b2f      	ldr	r3, [pc, #188]	; (8007718 <_strtod_l+0x5a8>)
 800765c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007660:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007664:	4652      	mov	r2, sl
 8007666:	465b      	mov	r3, fp
 8007668:	e9d9 0100 	ldrd	r0, r1, [r9]
 800766c:	f7f8 fff4 	bl	8000658 <__aeabi_dmul>
 8007670:	4b2a      	ldr	r3, [pc, #168]	; (800771c <_strtod_l+0x5ac>)
 8007672:	460a      	mov	r2, r1
 8007674:	400b      	ands	r3, r1
 8007676:	492a      	ldr	r1, [pc, #168]	; (8007720 <_strtod_l+0x5b0>)
 8007678:	428b      	cmp	r3, r1
 800767a:	4682      	mov	sl, r0
 800767c:	d8bc      	bhi.n	80075f8 <_strtod_l+0x488>
 800767e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007682:	428b      	cmp	r3, r1
 8007684:	bf86      	itte	hi
 8007686:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007724 <_strtod_l+0x5b4>
 800768a:	f04f 3aff 	movhi.w	sl, #4294967295
 800768e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007692:	2300      	movs	r3, #0
 8007694:	9304      	str	r3, [sp, #16]
 8007696:	e084      	b.n	80077a2 <_strtod_l+0x632>
 8007698:	f018 0f01 	tst.w	r8, #1
 800769c:	d005      	beq.n	80076aa <_strtod_l+0x53a>
 800769e:	9b04      	ldr	r3, [sp, #16]
 80076a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a4:	f7f8 ffd8 	bl	8000658 <__aeabi_dmul>
 80076a8:	2301      	movs	r3, #1
 80076aa:	9a04      	ldr	r2, [sp, #16]
 80076ac:	3208      	adds	r2, #8
 80076ae:	f109 0901 	add.w	r9, r9, #1
 80076b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80076b6:	9204      	str	r2, [sp, #16]
 80076b8:	e7c9      	b.n	800764e <_strtod_l+0x4de>
 80076ba:	d0ea      	beq.n	8007692 <_strtod_l+0x522>
 80076bc:	f1c8 0800 	rsb	r8, r8, #0
 80076c0:	f018 020f 	ands.w	r2, r8, #15
 80076c4:	d00a      	beq.n	80076dc <_strtod_l+0x56c>
 80076c6:	4b13      	ldr	r3, [pc, #76]	; (8007714 <_strtod_l+0x5a4>)
 80076c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076cc:	4650      	mov	r0, sl
 80076ce:	4659      	mov	r1, fp
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f7f9 f8ea 	bl	80008ac <__aeabi_ddiv>
 80076d8:	4682      	mov	sl, r0
 80076da:	468b      	mov	fp, r1
 80076dc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80076e0:	d0d7      	beq.n	8007692 <_strtod_l+0x522>
 80076e2:	f1b8 0f1f 	cmp.w	r8, #31
 80076e6:	dd1f      	ble.n	8007728 <_strtod_l+0x5b8>
 80076e8:	2500      	movs	r5, #0
 80076ea:	462e      	mov	r6, r5
 80076ec:	9507      	str	r5, [sp, #28]
 80076ee:	9505      	str	r5, [sp, #20]
 80076f0:	2322      	movs	r3, #34	; 0x22
 80076f2:	f04f 0a00 	mov.w	sl, #0
 80076f6:	f04f 0b00 	mov.w	fp, #0
 80076fa:	6023      	str	r3, [r4, #0]
 80076fc:	e786      	b.n	800760c <_strtod_l+0x49c>
 80076fe:	bf00      	nop
 8007700:	0800ae59 	.word	0x0800ae59
 8007704:	0800ae94 	.word	0x0800ae94
 8007708:	0800ae51 	.word	0x0800ae51
 800770c:	0800af83 	.word	0x0800af83
 8007710:	0800af7f 	.word	0x0800af7f
 8007714:	0800b160 	.word	0x0800b160
 8007718:	0800b138 	.word	0x0800b138
 800771c:	7ff00000 	.word	0x7ff00000
 8007720:	7ca00000 	.word	0x7ca00000
 8007724:	7fefffff 	.word	0x7fefffff
 8007728:	f018 0310 	ands.w	r3, r8, #16
 800772c:	bf18      	it	ne
 800772e:	236a      	movne	r3, #106	; 0x6a
 8007730:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007ae0 <_strtod_l+0x970>
 8007734:	9304      	str	r3, [sp, #16]
 8007736:	4650      	mov	r0, sl
 8007738:	4659      	mov	r1, fp
 800773a:	2300      	movs	r3, #0
 800773c:	f018 0f01 	tst.w	r8, #1
 8007740:	d004      	beq.n	800774c <_strtod_l+0x5dc>
 8007742:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007746:	f7f8 ff87 	bl	8000658 <__aeabi_dmul>
 800774a:	2301      	movs	r3, #1
 800774c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007750:	f109 0908 	add.w	r9, r9, #8
 8007754:	d1f2      	bne.n	800773c <_strtod_l+0x5cc>
 8007756:	b10b      	cbz	r3, 800775c <_strtod_l+0x5ec>
 8007758:	4682      	mov	sl, r0
 800775a:	468b      	mov	fp, r1
 800775c:	9b04      	ldr	r3, [sp, #16]
 800775e:	b1c3      	cbz	r3, 8007792 <_strtod_l+0x622>
 8007760:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007764:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007768:	2b00      	cmp	r3, #0
 800776a:	4659      	mov	r1, fp
 800776c:	dd11      	ble.n	8007792 <_strtod_l+0x622>
 800776e:	2b1f      	cmp	r3, #31
 8007770:	f340 8124 	ble.w	80079bc <_strtod_l+0x84c>
 8007774:	2b34      	cmp	r3, #52	; 0x34
 8007776:	bfde      	ittt	le
 8007778:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800777c:	f04f 33ff 	movle.w	r3, #4294967295
 8007780:	fa03 f202 	lslle.w	r2, r3, r2
 8007784:	f04f 0a00 	mov.w	sl, #0
 8007788:	bfcc      	ite	gt
 800778a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800778e:	ea02 0b01 	andle.w	fp, r2, r1
 8007792:	2200      	movs	r2, #0
 8007794:	2300      	movs	r3, #0
 8007796:	4650      	mov	r0, sl
 8007798:	4659      	mov	r1, fp
 800779a:	f7f9 f9c5 	bl	8000b28 <__aeabi_dcmpeq>
 800779e:	2800      	cmp	r0, #0
 80077a0:	d1a2      	bne.n	80076e8 <_strtod_l+0x578>
 80077a2:	9b07      	ldr	r3, [sp, #28]
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	9908      	ldr	r1, [sp, #32]
 80077a8:	462b      	mov	r3, r5
 80077aa:	463a      	mov	r2, r7
 80077ac:	4620      	mov	r0, r4
 80077ae:	f002 f91d 	bl	80099ec <__s2b>
 80077b2:	9007      	str	r0, [sp, #28]
 80077b4:	2800      	cmp	r0, #0
 80077b6:	f43f af1f 	beq.w	80075f8 <_strtod_l+0x488>
 80077ba:	9b05      	ldr	r3, [sp, #20]
 80077bc:	1b9e      	subs	r6, r3, r6
 80077be:	9b06      	ldr	r3, [sp, #24]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	bfb4      	ite	lt
 80077c4:	4633      	movlt	r3, r6
 80077c6:	2300      	movge	r3, #0
 80077c8:	930c      	str	r3, [sp, #48]	; 0x30
 80077ca:	9b06      	ldr	r3, [sp, #24]
 80077cc:	2500      	movs	r5, #0
 80077ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80077d2:	9312      	str	r3, [sp, #72]	; 0x48
 80077d4:	462e      	mov	r6, r5
 80077d6:	9b07      	ldr	r3, [sp, #28]
 80077d8:	4620      	mov	r0, r4
 80077da:	6859      	ldr	r1, [r3, #4]
 80077dc:	f002 f85e 	bl	800989c <_Balloc>
 80077e0:	9005      	str	r0, [sp, #20]
 80077e2:	2800      	cmp	r0, #0
 80077e4:	f43f af0c 	beq.w	8007600 <_strtod_l+0x490>
 80077e8:	9b07      	ldr	r3, [sp, #28]
 80077ea:	691a      	ldr	r2, [r3, #16]
 80077ec:	3202      	adds	r2, #2
 80077ee:	f103 010c 	add.w	r1, r3, #12
 80077f2:	0092      	lsls	r2, r2, #2
 80077f4:	300c      	adds	r0, #12
 80077f6:	f002 f837 	bl	8009868 <memcpy>
 80077fa:	ec4b ab10 	vmov	d0, sl, fp
 80077fe:	aa1a      	add	r2, sp, #104	; 0x68
 8007800:	a919      	add	r1, sp, #100	; 0x64
 8007802:	4620      	mov	r0, r4
 8007804:	f002 fc38 	bl	800a078 <__d2b>
 8007808:	ec4b ab18 	vmov	d8, sl, fp
 800780c:	9018      	str	r0, [sp, #96]	; 0x60
 800780e:	2800      	cmp	r0, #0
 8007810:	f43f aef6 	beq.w	8007600 <_strtod_l+0x490>
 8007814:	2101      	movs	r1, #1
 8007816:	4620      	mov	r0, r4
 8007818:	f002 f982 	bl	8009b20 <__i2b>
 800781c:	4606      	mov	r6, r0
 800781e:	2800      	cmp	r0, #0
 8007820:	f43f aeee 	beq.w	8007600 <_strtod_l+0x490>
 8007824:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007826:	9904      	ldr	r1, [sp, #16]
 8007828:	2b00      	cmp	r3, #0
 800782a:	bfab      	itete	ge
 800782c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800782e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007830:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007832:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007836:	bfac      	ite	ge
 8007838:	eb03 0902 	addge.w	r9, r3, r2
 800783c:	1ad7      	sublt	r7, r2, r3
 800783e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007840:	eba3 0801 	sub.w	r8, r3, r1
 8007844:	4490      	add	r8, r2
 8007846:	4ba1      	ldr	r3, [pc, #644]	; (8007acc <_strtod_l+0x95c>)
 8007848:	f108 38ff 	add.w	r8, r8, #4294967295
 800784c:	4598      	cmp	r8, r3
 800784e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007852:	f280 80c7 	bge.w	80079e4 <_strtod_l+0x874>
 8007856:	eba3 0308 	sub.w	r3, r3, r8
 800785a:	2b1f      	cmp	r3, #31
 800785c:	eba2 0203 	sub.w	r2, r2, r3
 8007860:	f04f 0101 	mov.w	r1, #1
 8007864:	f300 80b1 	bgt.w	80079ca <_strtod_l+0x85a>
 8007868:	fa01 f303 	lsl.w	r3, r1, r3
 800786c:	930d      	str	r3, [sp, #52]	; 0x34
 800786e:	2300      	movs	r3, #0
 8007870:	9308      	str	r3, [sp, #32]
 8007872:	eb09 0802 	add.w	r8, r9, r2
 8007876:	9b04      	ldr	r3, [sp, #16]
 8007878:	45c1      	cmp	r9, r8
 800787a:	4417      	add	r7, r2
 800787c:	441f      	add	r7, r3
 800787e:	464b      	mov	r3, r9
 8007880:	bfa8      	it	ge
 8007882:	4643      	movge	r3, r8
 8007884:	42bb      	cmp	r3, r7
 8007886:	bfa8      	it	ge
 8007888:	463b      	movge	r3, r7
 800788a:	2b00      	cmp	r3, #0
 800788c:	bfc2      	ittt	gt
 800788e:	eba8 0803 	subgt.w	r8, r8, r3
 8007892:	1aff      	subgt	r7, r7, r3
 8007894:	eba9 0903 	subgt.w	r9, r9, r3
 8007898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800789a:	2b00      	cmp	r3, #0
 800789c:	dd17      	ble.n	80078ce <_strtod_l+0x75e>
 800789e:	4631      	mov	r1, r6
 80078a0:	461a      	mov	r2, r3
 80078a2:	4620      	mov	r0, r4
 80078a4:	f002 f9fc 	bl	8009ca0 <__pow5mult>
 80078a8:	4606      	mov	r6, r0
 80078aa:	2800      	cmp	r0, #0
 80078ac:	f43f aea8 	beq.w	8007600 <_strtod_l+0x490>
 80078b0:	4601      	mov	r1, r0
 80078b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80078b4:	4620      	mov	r0, r4
 80078b6:	f002 f949 	bl	8009b4c <__multiply>
 80078ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80078bc:	2800      	cmp	r0, #0
 80078be:	f43f ae9f 	beq.w	8007600 <_strtod_l+0x490>
 80078c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80078c4:	4620      	mov	r0, r4
 80078c6:	f002 f829 	bl	800991c <_Bfree>
 80078ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078cc:	9318      	str	r3, [sp, #96]	; 0x60
 80078ce:	f1b8 0f00 	cmp.w	r8, #0
 80078d2:	f300 808c 	bgt.w	80079ee <_strtod_l+0x87e>
 80078d6:	9b06      	ldr	r3, [sp, #24]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	dd08      	ble.n	80078ee <_strtod_l+0x77e>
 80078dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078de:	9905      	ldr	r1, [sp, #20]
 80078e0:	4620      	mov	r0, r4
 80078e2:	f002 f9dd 	bl	8009ca0 <__pow5mult>
 80078e6:	9005      	str	r0, [sp, #20]
 80078e8:	2800      	cmp	r0, #0
 80078ea:	f43f ae89 	beq.w	8007600 <_strtod_l+0x490>
 80078ee:	2f00      	cmp	r7, #0
 80078f0:	dd08      	ble.n	8007904 <_strtod_l+0x794>
 80078f2:	9905      	ldr	r1, [sp, #20]
 80078f4:	463a      	mov	r2, r7
 80078f6:	4620      	mov	r0, r4
 80078f8:	f002 fa2c 	bl	8009d54 <__lshift>
 80078fc:	9005      	str	r0, [sp, #20]
 80078fe:	2800      	cmp	r0, #0
 8007900:	f43f ae7e 	beq.w	8007600 <_strtod_l+0x490>
 8007904:	f1b9 0f00 	cmp.w	r9, #0
 8007908:	dd08      	ble.n	800791c <_strtod_l+0x7ac>
 800790a:	4631      	mov	r1, r6
 800790c:	464a      	mov	r2, r9
 800790e:	4620      	mov	r0, r4
 8007910:	f002 fa20 	bl	8009d54 <__lshift>
 8007914:	4606      	mov	r6, r0
 8007916:	2800      	cmp	r0, #0
 8007918:	f43f ae72 	beq.w	8007600 <_strtod_l+0x490>
 800791c:	9a05      	ldr	r2, [sp, #20]
 800791e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007920:	4620      	mov	r0, r4
 8007922:	f002 faa3 	bl	8009e6c <__mdiff>
 8007926:	4605      	mov	r5, r0
 8007928:	2800      	cmp	r0, #0
 800792a:	f43f ae69 	beq.w	8007600 <_strtod_l+0x490>
 800792e:	68c3      	ldr	r3, [r0, #12]
 8007930:	930b      	str	r3, [sp, #44]	; 0x2c
 8007932:	2300      	movs	r3, #0
 8007934:	60c3      	str	r3, [r0, #12]
 8007936:	4631      	mov	r1, r6
 8007938:	f002 fa7c 	bl	8009e34 <__mcmp>
 800793c:	2800      	cmp	r0, #0
 800793e:	da60      	bge.n	8007a02 <_strtod_l+0x892>
 8007940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007942:	ea53 030a 	orrs.w	r3, r3, sl
 8007946:	f040 8082 	bne.w	8007a4e <_strtod_l+0x8de>
 800794a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800794e:	2b00      	cmp	r3, #0
 8007950:	d17d      	bne.n	8007a4e <_strtod_l+0x8de>
 8007952:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007956:	0d1b      	lsrs	r3, r3, #20
 8007958:	051b      	lsls	r3, r3, #20
 800795a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800795e:	d976      	bls.n	8007a4e <_strtod_l+0x8de>
 8007960:	696b      	ldr	r3, [r5, #20]
 8007962:	b913      	cbnz	r3, 800796a <_strtod_l+0x7fa>
 8007964:	692b      	ldr	r3, [r5, #16]
 8007966:	2b01      	cmp	r3, #1
 8007968:	dd71      	ble.n	8007a4e <_strtod_l+0x8de>
 800796a:	4629      	mov	r1, r5
 800796c:	2201      	movs	r2, #1
 800796e:	4620      	mov	r0, r4
 8007970:	f002 f9f0 	bl	8009d54 <__lshift>
 8007974:	4631      	mov	r1, r6
 8007976:	4605      	mov	r5, r0
 8007978:	f002 fa5c 	bl	8009e34 <__mcmp>
 800797c:	2800      	cmp	r0, #0
 800797e:	dd66      	ble.n	8007a4e <_strtod_l+0x8de>
 8007980:	9904      	ldr	r1, [sp, #16]
 8007982:	4a53      	ldr	r2, [pc, #332]	; (8007ad0 <_strtod_l+0x960>)
 8007984:	465b      	mov	r3, fp
 8007986:	2900      	cmp	r1, #0
 8007988:	f000 8081 	beq.w	8007a8e <_strtod_l+0x91e>
 800798c:	ea02 010b 	and.w	r1, r2, fp
 8007990:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007994:	dc7b      	bgt.n	8007a8e <_strtod_l+0x91e>
 8007996:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800799a:	f77f aea9 	ble.w	80076f0 <_strtod_l+0x580>
 800799e:	4b4d      	ldr	r3, [pc, #308]	; (8007ad4 <_strtod_l+0x964>)
 80079a0:	4650      	mov	r0, sl
 80079a2:	4659      	mov	r1, fp
 80079a4:	2200      	movs	r2, #0
 80079a6:	f7f8 fe57 	bl	8000658 <__aeabi_dmul>
 80079aa:	460b      	mov	r3, r1
 80079ac:	4303      	orrs	r3, r0
 80079ae:	bf08      	it	eq
 80079b0:	2322      	moveq	r3, #34	; 0x22
 80079b2:	4682      	mov	sl, r0
 80079b4:	468b      	mov	fp, r1
 80079b6:	bf08      	it	eq
 80079b8:	6023      	streq	r3, [r4, #0]
 80079ba:	e62b      	b.n	8007614 <_strtod_l+0x4a4>
 80079bc:	f04f 32ff 	mov.w	r2, #4294967295
 80079c0:	fa02 f303 	lsl.w	r3, r2, r3
 80079c4:	ea03 0a0a 	and.w	sl, r3, sl
 80079c8:	e6e3      	b.n	8007792 <_strtod_l+0x622>
 80079ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80079ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80079d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80079d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80079da:	fa01 f308 	lsl.w	r3, r1, r8
 80079de:	9308      	str	r3, [sp, #32]
 80079e0:	910d      	str	r1, [sp, #52]	; 0x34
 80079e2:	e746      	b.n	8007872 <_strtod_l+0x702>
 80079e4:	2300      	movs	r3, #0
 80079e6:	9308      	str	r3, [sp, #32]
 80079e8:	2301      	movs	r3, #1
 80079ea:	930d      	str	r3, [sp, #52]	; 0x34
 80079ec:	e741      	b.n	8007872 <_strtod_l+0x702>
 80079ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80079f0:	4642      	mov	r2, r8
 80079f2:	4620      	mov	r0, r4
 80079f4:	f002 f9ae 	bl	8009d54 <__lshift>
 80079f8:	9018      	str	r0, [sp, #96]	; 0x60
 80079fa:	2800      	cmp	r0, #0
 80079fc:	f47f af6b 	bne.w	80078d6 <_strtod_l+0x766>
 8007a00:	e5fe      	b.n	8007600 <_strtod_l+0x490>
 8007a02:	465f      	mov	r7, fp
 8007a04:	d16e      	bne.n	8007ae4 <_strtod_l+0x974>
 8007a06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a0c:	b342      	cbz	r2, 8007a60 <_strtod_l+0x8f0>
 8007a0e:	4a32      	ldr	r2, [pc, #200]	; (8007ad8 <_strtod_l+0x968>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d128      	bne.n	8007a66 <_strtod_l+0x8f6>
 8007a14:	9b04      	ldr	r3, [sp, #16]
 8007a16:	4651      	mov	r1, sl
 8007a18:	b1eb      	cbz	r3, 8007a56 <_strtod_l+0x8e6>
 8007a1a:	4b2d      	ldr	r3, [pc, #180]	; (8007ad0 <_strtod_l+0x960>)
 8007a1c:	403b      	ands	r3, r7
 8007a1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a22:	f04f 32ff 	mov.w	r2, #4294967295
 8007a26:	d819      	bhi.n	8007a5c <_strtod_l+0x8ec>
 8007a28:	0d1b      	lsrs	r3, r3, #20
 8007a2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a32:	4299      	cmp	r1, r3
 8007a34:	d117      	bne.n	8007a66 <_strtod_l+0x8f6>
 8007a36:	4b29      	ldr	r3, [pc, #164]	; (8007adc <_strtod_l+0x96c>)
 8007a38:	429f      	cmp	r7, r3
 8007a3a:	d102      	bne.n	8007a42 <_strtod_l+0x8d2>
 8007a3c:	3101      	adds	r1, #1
 8007a3e:	f43f addf 	beq.w	8007600 <_strtod_l+0x490>
 8007a42:	4b23      	ldr	r3, [pc, #140]	; (8007ad0 <_strtod_l+0x960>)
 8007a44:	403b      	ands	r3, r7
 8007a46:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007a4a:	f04f 0a00 	mov.w	sl, #0
 8007a4e:	9b04      	ldr	r3, [sp, #16]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1a4      	bne.n	800799e <_strtod_l+0x82e>
 8007a54:	e5de      	b.n	8007614 <_strtod_l+0x4a4>
 8007a56:	f04f 33ff 	mov.w	r3, #4294967295
 8007a5a:	e7ea      	b.n	8007a32 <_strtod_l+0x8c2>
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	e7e8      	b.n	8007a32 <_strtod_l+0x8c2>
 8007a60:	ea53 030a 	orrs.w	r3, r3, sl
 8007a64:	d08c      	beq.n	8007980 <_strtod_l+0x810>
 8007a66:	9b08      	ldr	r3, [sp, #32]
 8007a68:	b1db      	cbz	r3, 8007aa2 <_strtod_l+0x932>
 8007a6a:	423b      	tst	r3, r7
 8007a6c:	d0ef      	beq.n	8007a4e <_strtod_l+0x8de>
 8007a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a70:	9a04      	ldr	r2, [sp, #16]
 8007a72:	4650      	mov	r0, sl
 8007a74:	4659      	mov	r1, fp
 8007a76:	b1c3      	cbz	r3, 8007aaa <_strtod_l+0x93a>
 8007a78:	f7ff fb5d 	bl	8007136 <sulp>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	ec51 0b18 	vmov	r0, r1, d8
 8007a84:	f7f8 fc32 	bl	80002ec <__adddf3>
 8007a88:	4682      	mov	sl, r0
 8007a8a:	468b      	mov	fp, r1
 8007a8c:	e7df      	b.n	8007a4e <_strtod_l+0x8de>
 8007a8e:	4013      	ands	r3, r2
 8007a90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a9c:	f04f 3aff 	mov.w	sl, #4294967295
 8007aa0:	e7d5      	b.n	8007a4e <_strtod_l+0x8de>
 8007aa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007aa4:	ea13 0f0a 	tst.w	r3, sl
 8007aa8:	e7e0      	b.n	8007a6c <_strtod_l+0x8fc>
 8007aaa:	f7ff fb44 	bl	8007136 <sulp>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	ec51 0b18 	vmov	r0, r1, d8
 8007ab6:	f7f8 fc17 	bl	80002e8 <__aeabi_dsub>
 8007aba:	2200      	movs	r2, #0
 8007abc:	2300      	movs	r3, #0
 8007abe:	4682      	mov	sl, r0
 8007ac0:	468b      	mov	fp, r1
 8007ac2:	f7f9 f831 	bl	8000b28 <__aeabi_dcmpeq>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d0c1      	beq.n	8007a4e <_strtod_l+0x8de>
 8007aca:	e611      	b.n	80076f0 <_strtod_l+0x580>
 8007acc:	fffffc02 	.word	0xfffffc02
 8007ad0:	7ff00000 	.word	0x7ff00000
 8007ad4:	39500000 	.word	0x39500000
 8007ad8:	000fffff 	.word	0x000fffff
 8007adc:	7fefffff 	.word	0x7fefffff
 8007ae0:	0800aea8 	.word	0x0800aea8
 8007ae4:	4631      	mov	r1, r6
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f002 fb22 	bl	800a130 <__ratio>
 8007aec:	ec59 8b10 	vmov	r8, r9, d0
 8007af0:	ee10 0a10 	vmov	r0, s0
 8007af4:	2200      	movs	r2, #0
 8007af6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007afa:	4649      	mov	r1, r9
 8007afc:	f7f9 f828 	bl	8000b50 <__aeabi_dcmple>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	d07a      	beq.n	8007bfa <_strtod_l+0xa8a>
 8007b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d04a      	beq.n	8007ba0 <_strtod_l+0xa30>
 8007b0a:	4b95      	ldr	r3, [pc, #596]	; (8007d60 <_strtod_l+0xbf0>)
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b12:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007d60 <_strtod_l+0xbf0>
 8007b16:	f04f 0800 	mov.w	r8, #0
 8007b1a:	4b92      	ldr	r3, [pc, #584]	; (8007d64 <_strtod_l+0xbf4>)
 8007b1c:	403b      	ands	r3, r7
 8007b1e:	930d      	str	r3, [sp, #52]	; 0x34
 8007b20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b22:	4b91      	ldr	r3, [pc, #580]	; (8007d68 <_strtod_l+0xbf8>)
 8007b24:	429a      	cmp	r2, r3
 8007b26:	f040 80b0 	bne.w	8007c8a <_strtod_l+0xb1a>
 8007b2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b2e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007b32:	ec4b ab10 	vmov	d0, sl, fp
 8007b36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b3a:	f002 fa21 	bl	8009f80 <__ulp>
 8007b3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b42:	ec53 2b10 	vmov	r2, r3, d0
 8007b46:	f7f8 fd87 	bl	8000658 <__aeabi_dmul>
 8007b4a:	4652      	mov	r2, sl
 8007b4c:	465b      	mov	r3, fp
 8007b4e:	f7f8 fbcd 	bl	80002ec <__adddf3>
 8007b52:	460b      	mov	r3, r1
 8007b54:	4983      	ldr	r1, [pc, #524]	; (8007d64 <_strtod_l+0xbf4>)
 8007b56:	4a85      	ldr	r2, [pc, #532]	; (8007d6c <_strtod_l+0xbfc>)
 8007b58:	4019      	ands	r1, r3
 8007b5a:	4291      	cmp	r1, r2
 8007b5c:	4682      	mov	sl, r0
 8007b5e:	d960      	bls.n	8007c22 <_strtod_l+0xab2>
 8007b60:	ee18 3a90 	vmov	r3, s17
 8007b64:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d104      	bne.n	8007b76 <_strtod_l+0xa06>
 8007b6c:	ee18 3a10 	vmov	r3, s16
 8007b70:	3301      	adds	r3, #1
 8007b72:	f43f ad45 	beq.w	8007600 <_strtod_l+0x490>
 8007b76:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007d78 <_strtod_l+0xc08>
 8007b7a:	f04f 3aff 	mov.w	sl, #4294967295
 8007b7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b80:	4620      	mov	r0, r4
 8007b82:	f001 fecb 	bl	800991c <_Bfree>
 8007b86:	9905      	ldr	r1, [sp, #20]
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f001 fec7 	bl	800991c <_Bfree>
 8007b8e:	4631      	mov	r1, r6
 8007b90:	4620      	mov	r0, r4
 8007b92:	f001 fec3 	bl	800991c <_Bfree>
 8007b96:	4629      	mov	r1, r5
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f001 febf 	bl	800991c <_Bfree>
 8007b9e:	e61a      	b.n	80077d6 <_strtod_l+0x666>
 8007ba0:	f1ba 0f00 	cmp.w	sl, #0
 8007ba4:	d11b      	bne.n	8007bde <_strtod_l+0xa6e>
 8007ba6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007baa:	b9f3      	cbnz	r3, 8007bea <_strtod_l+0xa7a>
 8007bac:	4b6c      	ldr	r3, [pc, #432]	; (8007d60 <_strtod_l+0xbf0>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	4640      	mov	r0, r8
 8007bb2:	4649      	mov	r1, r9
 8007bb4:	f7f8 ffc2 	bl	8000b3c <__aeabi_dcmplt>
 8007bb8:	b9d0      	cbnz	r0, 8007bf0 <_strtod_l+0xa80>
 8007bba:	4640      	mov	r0, r8
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	4b6c      	ldr	r3, [pc, #432]	; (8007d70 <_strtod_l+0xc00>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f7f8 fd49 	bl	8000658 <__aeabi_dmul>
 8007bc6:	4680      	mov	r8, r0
 8007bc8:	4689      	mov	r9, r1
 8007bca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007bce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007bd2:	9315      	str	r3, [sp, #84]	; 0x54
 8007bd4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007bd8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007bdc:	e79d      	b.n	8007b1a <_strtod_l+0x9aa>
 8007bde:	f1ba 0f01 	cmp.w	sl, #1
 8007be2:	d102      	bne.n	8007bea <_strtod_l+0xa7a>
 8007be4:	2f00      	cmp	r7, #0
 8007be6:	f43f ad83 	beq.w	80076f0 <_strtod_l+0x580>
 8007bea:	4b62      	ldr	r3, [pc, #392]	; (8007d74 <_strtod_l+0xc04>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	e78e      	b.n	8007b0e <_strtod_l+0x99e>
 8007bf0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007d70 <_strtod_l+0xc00>
 8007bf4:	f04f 0800 	mov.w	r8, #0
 8007bf8:	e7e7      	b.n	8007bca <_strtod_l+0xa5a>
 8007bfa:	4b5d      	ldr	r3, [pc, #372]	; (8007d70 <_strtod_l+0xc00>)
 8007bfc:	4640      	mov	r0, r8
 8007bfe:	4649      	mov	r1, r9
 8007c00:	2200      	movs	r2, #0
 8007c02:	f7f8 fd29 	bl	8000658 <__aeabi_dmul>
 8007c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c08:	4680      	mov	r8, r0
 8007c0a:	4689      	mov	r9, r1
 8007c0c:	b933      	cbnz	r3, 8007c1c <_strtod_l+0xaac>
 8007c0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c12:	900e      	str	r0, [sp, #56]	; 0x38
 8007c14:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007c1a:	e7dd      	b.n	8007bd8 <_strtod_l+0xa68>
 8007c1c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007c20:	e7f9      	b.n	8007c16 <_strtod_l+0xaa6>
 8007c22:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007c26:	9b04      	ldr	r3, [sp, #16]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1a8      	bne.n	8007b7e <_strtod_l+0xa0e>
 8007c2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c32:	0d1b      	lsrs	r3, r3, #20
 8007c34:	051b      	lsls	r3, r3, #20
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d1a1      	bne.n	8007b7e <_strtod_l+0xa0e>
 8007c3a:	4640      	mov	r0, r8
 8007c3c:	4649      	mov	r1, r9
 8007c3e:	f7f9 f86b 	bl	8000d18 <__aeabi_d2lz>
 8007c42:	f7f8 fcdb 	bl	80005fc <__aeabi_l2d>
 8007c46:	4602      	mov	r2, r0
 8007c48:	460b      	mov	r3, r1
 8007c4a:	4640      	mov	r0, r8
 8007c4c:	4649      	mov	r1, r9
 8007c4e:	f7f8 fb4b 	bl	80002e8 <__aeabi_dsub>
 8007c52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c58:	ea43 030a 	orr.w	r3, r3, sl
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	4680      	mov	r8, r0
 8007c60:	4689      	mov	r9, r1
 8007c62:	d055      	beq.n	8007d10 <_strtod_l+0xba0>
 8007c64:	a336      	add	r3, pc, #216	; (adr r3, 8007d40 <_strtod_l+0xbd0>)
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	f7f8 ff67 	bl	8000b3c <__aeabi_dcmplt>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	f47f acd0 	bne.w	8007614 <_strtod_l+0x4a4>
 8007c74:	a334      	add	r3, pc, #208	; (adr r3, 8007d48 <_strtod_l+0xbd8>)
 8007c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	f7f8 ff7b 	bl	8000b78 <__aeabi_dcmpgt>
 8007c82:	2800      	cmp	r0, #0
 8007c84:	f43f af7b 	beq.w	8007b7e <_strtod_l+0xa0e>
 8007c88:	e4c4      	b.n	8007614 <_strtod_l+0x4a4>
 8007c8a:	9b04      	ldr	r3, [sp, #16]
 8007c8c:	b333      	cbz	r3, 8007cdc <_strtod_l+0xb6c>
 8007c8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c90:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c94:	d822      	bhi.n	8007cdc <_strtod_l+0xb6c>
 8007c96:	a32e      	add	r3, pc, #184	; (adr r3, 8007d50 <_strtod_l+0xbe0>)
 8007c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9c:	4640      	mov	r0, r8
 8007c9e:	4649      	mov	r1, r9
 8007ca0:	f7f8 ff56 	bl	8000b50 <__aeabi_dcmple>
 8007ca4:	b1a0      	cbz	r0, 8007cd0 <_strtod_l+0xb60>
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	4640      	mov	r0, r8
 8007caa:	f7f8 ffad 	bl	8000c08 <__aeabi_d2uiz>
 8007cae:	2801      	cmp	r0, #1
 8007cb0:	bf38      	it	cc
 8007cb2:	2001      	movcc	r0, #1
 8007cb4:	f7f8 fc56 	bl	8000564 <__aeabi_ui2d>
 8007cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cba:	4680      	mov	r8, r0
 8007cbc:	4689      	mov	r9, r1
 8007cbe:	bb23      	cbnz	r3, 8007d0a <_strtod_l+0xb9a>
 8007cc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cc4:	9010      	str	r0, [sp, #64]	; 0x40
 8007cc6:	9311      	str	r3, [sp, #68]	; 0x44
 8007cc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ccc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cd4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007cd8:	1a9b      	subs	r3, r3, r2
 8007cda:	9309      	str	r3, [sp, #36]	; 0x24
 8007cdc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ce0:	eeb0 0a48 	vmov.f32	s0, s16
 8007ce4:	eef0 0a68 	vmov.f32	s1, s17
 8007ce8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007cec:	f002 f948 	bl	8009f80 <__ulp>
 8007cf0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007cf4:	ec53 2b10 	vmov	r2, r3, d0
 8007cf8:	f7f8 fcae 	bl	8000658 <__aeabi_dmul>
 8007cfc:	ec53 2b18 	vmov	r2, r3, d8
 8007d00:	f7f8 faf4 	bl	80002ec <__adddf3>
 8007d04:	4682      	mov	sl, r0
 8007d06:	468b      	mov	fp, r1
 8007d08:	e78d      	b.n	8007c26 <_strtod_l+0xab6>
 8007d0a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007d0e:	e7db      	b.n	8007cc8 <_strtod_l+0xb58>
 8007d10:	a311      	add	r3, pc, #68	; (adr r3, 8007d58 <_strtod_l+0xbe8>)
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	f7f8 ff11 	bl	8000b3c <__aeabi_dcmplt>
 8007d1a:	e7b2      	b.n	8007c82 <_strtod_l+0xb12>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	f7ff ba6b 	b.w	8007200 <_strtod_l+0x90>
 8007d2a:	2a65      	cmp	r2, #101	; 0x65
 8007d2c:	f43f ab5f 	beq.w	80073ee <_strtod_l+0x27e>
 8007d30:	2a45      	cmp	r2, #69	; 0x45
 8007d32:	f43f ab5c 	beq.w	80073ee <_strtod_l+0x27e>
 8007d36:	2301      	movs	r3, #1
 8007d38:	f7ff bb94 	b.w	8007464 <_strtod_l+0x2f4>
 8007d3c:	f3af 8000 	nop.w
 8007d40:	94a03595 	.word	0x94a03595
 8007d44:	3fdfffff 	.word	0x3fdfffff
 8007d48:	35afe535 	.word	0x35afe535
 8007d4c:	3fe00000 	.word	0x3fe00000
 8007d50:	ffc00000 	.word	0xffc00000
 8007d54:	41dfffff 	.word	0x41dfffff
 8007d58:	94a03595 	.word	0x94a03595
 8007d5c:	3fcfffff 	.word	0x3fcfffff
 8007d60:	3ff00000 	.word	0x3ff00000
 8007d64:	7ff00000 	.word	0x7ff00000
 8007d68:	7fe00000 	.word	0x7fe00000
 8007d6c:	7c9fffff 	.word	0x7c9fffff
 8007d70:	3fe00000 	.word	0x3fe00000
 8007d74:	bff00000 	.word	0xbff00000
 8007d78:	7fefffff 	.word	0x7fefffff

08007d7c <strtod>:
 8007d7c:	460a      	mov	r2, r1
 8007d7e:	4601      	mov	r1, r0
 8007d80:	4802      	ldr	r0, [pc, #8]	; (8007d8c <strtod+0x10>)
 8007d82:	4b03      	ldr	r3, [pc, #12]	; (8007d90 <strtod+0x14>)
 8007d84:	6800      	ldr	r0, [r0, #0]
 8007d86:	f7ff b9f3 	b.w	8007170 <_strtod_l>
 8007d8a:	bf00      	nop
 8007d8c:	20000070 	.word	0x20000070
 8007d90:	200000d8 	.word	0x200000d8

08007d94 <strtok>:
 8007d94:	4b16      	ldr	r3, [pc, #88]	; (8007df0 <strtok+0x5c>)
 8007d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d98:	681e      	ldr	r6, [r3, #0]
 8007d9a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007d9c:	4605      	mov	r5, r0
 8007d9e:	b9fc      	cbnz	r4, 8007de0 <strtok+0x4c>
 8007da0:	2050      	movs	r0, #80	; 0x50
 8007da2:	9101      	str	r1, [sp, #4]
 8007da4:	f7fe fb90 	bl	80064c8 <malloc>
 8007da8:	9901      	ldr	r1, [sp, #4]
 8007daa:	65b0      	str	r0, [r6, #88]	; 0x58
 8007dac:	4602      	mov	r2, r0
 8007dae:	b920      	cbnz	r0, 8007dba <strtok+0x26>
 8007db0:	4b10      	ldr	r3, [pc, #64]	; (8007df4 <strtok+0x60>)
 8007db2:	4811      	ldr	r0, [pc, #68]	; (8007df8 <strtok+0x64>)
 8007db4:	2157      	movs	r1, #87	; 0x57
 8007db6:	f000 f909 	bl	8007fcc <__assert_func>
 8007dba:	e9c0 4400 	strd	r4, r4, [r0]
 8007dbe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007dc2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007dc6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007dca:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007dce:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007dd2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007dd6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007dda:	6184      	str	r4, [r0, #24]
 8007ddc:	7704      	strb	r4, [r0, #28]
 8007dde:	6244      	str	r4, [r0, #36]	; 0x24
 8007de0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8007de2:	2301      	movs	r3, #1
 8007de4:	4628      	mov	r0, r5
 8007de6:	b002      	add	sp, #8
 8007de8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007dec:	f000 b806 	b.w	8007dfc <__strtok_r>
 8007df0:	20000070 	.word	0x20000070
 8007df4:	0800aed0 	.word	0x0800aed0
 8007df8:	0800aee7 	.word	0x0800aee7

08007dfc <__strtok_r>:
 8007dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dfe:	b908      	cbnz	r0, 8007e04 <__strtok_r+0x8>
 8007e00:	6810      	ldr	r0, [r2, #0]
 8007e02:	b188      	cbz	r0, 8007e28 <__strtok_r+0x2c>
 8007e04:	4604      	mov	r4, r0
 8007e06:	4620      	mov	r0, r4
 8007e08:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007e0c:	460f      	mov	r7, r1
 8007e0e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007e12:	b91e      	cbnz	r6, 8007e1c <__strtok_r+0x20>
 8007e14:	b965      	cbnz	r5, 8007e30 <__strtok_r+0x34>
 8007e16:	6015      	str	r5, [r2, #0]
 8007e18:	4628      	mov	r0, r5
 8007e1a:	e005      	b.n	8007e28 <__strtok_r+0x2c>
 8007e1c:	42b5      	cmp	r5, r6
 8007e1e:	d1f6      	bne.n	8007e0e <__strtok_r+0x12>
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1f0      	bne.n	8007e06 <__strtok_r+0xa>
 8007e24:	6014      	str	r4, [r2, #0]
 8007e26:	7003      	strb	r3, [r0, #0]
 8007e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e2a:	461c      	mov	r4, r3
 8007e2c:	e00c      	b.n	8007e48 <__strtok_r+0x4c>
 8007e2e:	b915      	cbnz	r5, 8007e36 <__strtok_r+0x3a>
 8007e30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e34:	460e      	mov	r6, r1
 8007e36:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007e3a:	42ab      	cmp	r3, r5
 8007e3c:	d1f7      	bne.n	8007e2e <__strtok_r+0x32>
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0f3      	beq.n	8007e2a <__strtok_r+0x2e>
 8007e42:	2300      	movs	r3, #0
 8007e44:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007e48:	6014      	str	r4, [r2, #0]
 8007e4a:	e7ed      	b.n	8007e28 <__strtok_r+0x2c>

08007e4c <__swbuf_r>:
 8007e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4e:	460e      	mov	r6, r1
 8007e50:	4614      	mov	r4, r2
 8007e52:	4605      	mov	r5, r0
 8007e54:	b118      	cbz	r0, 8007e5e <__swbuf_r+0x12>
 8007e56:	6983      	ldr	r3, [r0, #24]
 8007e58:	b90b      	cbnz	r3, 8007e5e <__swbuf_r+0x12>
 8007e5a:	f001 f869 	bl	8008f30 <__sinit>
 8007e5e:	4b21      	ldr	r3, [pc, #132]	; (8007ee4 <__swbuf_r+0x98>)
 8007e60:	429c      	cmp	r4, r3
 8007e62:	d12b      	bne.n	8007ebc <__swbuf_r+0x70>
 8007e64:	686c      	ldr	r4, [r5, #4]
 8007e66:	69a3      	ldr	r3, [r4, #24]
 8007e68:	60a3      	str	r3, [r4, #8]
 8007e6a:	89a3      	ldrh	r3, [r4, #12]
 8007e6c:	071a      	lsls	r2, r3, #28
 8007e6e:	d52f      	bpl.n	8007ed0 <__swbuf_r+0x84>
 8007e70:	6923      	ldr	r3, [r4, #16]
 8007e72:	b36b      	cbz	r3, 8007ed0 <__swbuf_r+0x84>
 8007e74:	6923      	ldr	r3, [r4, #16]
 8007e76:	6820      	ldr	r0, [r4, #0]
 8007e78:	1ac0      	subs	r0, r0, r3
 8007e7a:	6963      	ldr	r3, [r4, #20]
 8007e7c:	b2f6      	uxtb	r6, r6
 8007e7e:	4283      	cmp	r3, r0
 8007e80:	4637      	mov	r7, r6
 8007e82:	dc04      	bgt.n	8007e8e <__swbuf_r+0x42>
 8007e84:	4621      	mov	r1, r4
 8007e86:	4628      	mov	r0, r5
 8007e88:	f000 ffbe 	bl	8008e08 <_fflush_r>
 8007e8c:	bb30      	cbnz	r0, 8007edc <__swbuf_r+0x90>
 8007e8e:	68a3      	ldr	r3, [r4, #8]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	60a3      	str	r3, [r4, #8]
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	6022      	str	r2, [r4, #0]
 8007e9a:	701e      	strb	r6, [r3, #0]
 8007e9c:	6963      	ldr	r3, [r4, #20]
 8007e9e:	3001      	adds	r0, #1
 8007ea0:	4283      	cmp	r3, r0
 8007ea2:	d004      	beq.n	8007eae <__swbuf_r+0x62>
 8007ea4:	89a3      	ldrh	r3, [r4, #12]
 8007ea6:	07db      	lsls	r3, r3, #31
 8007ea8:	d506      	bpl.n	8007eb8 <__swbuf_r+0x6c>
 8007eaa:	2e0a      	cmp	r6, #10
 8007eac:	d104      	bne.n	8007eb8 <__swbuf_r+0x6c>
 8007eae:	4621      	mov	r1, r4
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	f000 ffa9 	bl	8008e08 <_fflush_r>
 8007eb6:	b988      	cbnz	r0, 8007edc <__swbuf_r+0x90>
 8007eb8:	4638      	mov	r0, r7
 8007eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ebc:	4b0a      	ldr	r3, [pc, #40]	; (8007ee8 <__swbuf_r+0x9c>)
 8007ebe:	429c      	cmp	r4, r3
 8007ec0:	d101      	bne.n	8007ec6 <__swbuf_r+0x7a>
 8007ec2:	68ac      	ldr	r4, [r5, #8]
 8007ec4:	e7cf      	b.n	8007e66 <__swbuf_r+0x1a>
 8007ec6:	4b09      	ldr	r3, [pc, #36]	; (8007eec <__swbuf_r+0xa0>)
 8007ec8:	429c      	cmp	r4, r3
 8007eca:	bf08      	it	eq
 8007ecc:	68ec      	ldreq	r4, [r5, #12]
 8007ece:	e7ca      	b.n	8007e66 <__swbuf_r+0x1a>
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f000 f80c 	bl	8007ef0 <__swsetup_r>
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	d0cb      	beq.n	8007e74 <__swbuf_r+0x28>
 8007edc:	f04f 37ff 	mov.w	r7, #4294967295
 8007ee0:	e7ea      	b.n	8007eb8 <__swbuf_r+0x6c>
 8007ee2:	bf00      	nop
 8007ee4:	0800b01c 	.word	0x0800b01c
 8007ee8:	0800b03c 	.word	0x0800b03c
 8007eec:	0800affc 	.word	0x0800affc

08007ef0 <__swsetup_r>:
 8007ef0:	4b32      	ldr	r3, [pc, #200]	; (8007fbc <__swsetup_r+0xcc>)
 8007ef2:	b570      	push	{r4, r5, r6, lr}
 8007ef4:	681d      	ldr	r5, [r3, #0]
 8007ef6:	4606      	mov	r6, r0
 8007ef8:	460c      	mov	r4, r1
 8007efa:	b125      	cbz	r5, 8007f06 <__swsetup_r+0x16>
 8007efc:	69ab      	ldr	r3, [r5, #24]
 8007efe:	b913      	cbnz	r3, 8007f06 <__swsetup_r+0x16>
 8007f00:	4628      	mov	r0, r5
 8007f02:	f001 f815 	bl	8008f30 <__sinit>
 8007f06:	4b2e      	ldr	r3, [pc, #184]	; (8007fc0 <__swsetup_r+0xd0>)
 8007f08:	429c      	cmp	r4, r3
 8007f0a:	d10f      	bne.n	8007f2c <__swsetup_r+0x3c>
 8007f0c:	686c      	ldr	r4, [r5, #4]
 8007f0e:	89a3      	ldrh	r3, [r4, #12]
 8007f10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f14:	0719      	lsls	r1, r3, #28
 8007f16:	d42c      	bmi.n	8007f72 <__swsetup_r+0x82>
 8007f18:	06dd      	lsls	r5, r3, #27
 8007f1a:	d411      	bmi.n	8007f40 <__swsetup_r+0x50>
 8007f1c:	2309      	movs	r3, #9
 8007f1e:	6033      	str	r3, [r6, #0]
 8007f20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f24:	81a3      	strh	r3, [r4, #12]
 8007f26:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2a:	e03e      	b.n	8007faa <__swsetup_r+0xba>
 8007f2c:	4b25      	ldr	r3, [pc, #148]	; (8007fc4 <__swsetup_r+0xd4>)
 8007f2e:	429c      	cmp	r4, r3
 8007f30:	d101      	bne.n	8007f36 <__swsetup_r+0x46>
 8007f32:	68ac      	ldr	r4, [r5, #8]
 8007f34:	e7eb      	b.n	8007f0e <__swsetup_r+0x1e>
 8007f36:	4b24      	ldr	r3, [pc, #144]	; (8007fc8 <__swsetup_r+0xd8>)
 8007f38:	429c      	cmp	r4, r3
 8007f3a:	bf08      	it	eq
 8007f3c:	68ec      	ldreq	r4, [r5, #12]
 8007f3e:	e7e6      	b.n	8007f0e <__swsetup_r+0x1e>
 8007f40:	0758      	lsls	r0, r3, #29
 8007f42:	d512      	bpl.n	8007f6a <__swsetup_r+0x7a>
 8007f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f46:	b141      	cbz	r1, 8007f5a <__swsetup_r+0x6a>
 8007f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f4c:	4299      	cmp	r1, r3
 8007f4e:	d002      	beq.n	8007f56 <__swsetup_r+0x66>
 8007f50:	4630      	mov	r0, r6
 8007f52:	f7fe faeb 	bl	800652c <_free_r>
 8007f56:	2300      	movs	r3, #0
 8007f58:	6363      	str	r3, [r4, #52]	; 0x34
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f60:	81a3      	strh	r3, [r4, #12]
 8007f62:	2300      	movs	r3, #0
 8007f64:	6063      	str	r3, [r4, #4]
 8007f66:	6923      	ldr	r3, [r4, #16]
 8007f68:	6023      	str	r3, [r4, #0]
 8007f6a:	89a3      	ldrh	r3, [r4, #12]
 8007f6c:	f043 0308 	orr.w	r3, r3, #8
 8007f70:	81a3      	strh	r3, [r4, #12]
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	b94b      	cbnz	r3, 8007f8a <__swsetup_r+0x9a>
 8007f76:	89a3      	ldrh	r3, [r4, #12]
 8007f78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f80:	d003      	beq.n	8007f8a <__swsetup_r+0x9a>
 8007f82:	4621      	mov	r1, r4
 8007f84:	4630      	mov	r0, r6
 8007f86:	f001 fc1d 	bl	80097c4 <__smakebuf_r>
 8007f8a:	89a0      	ldrh	r0, [r4, #12]
 8007f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f90:	f010 0301 	ands.w	r3, r0, #1
 8007f94:	d00a      	beq.n	8007fac <__swsetup_r+0xbc>
 8007f96:	2300      	movs	r3, #0
 8007f98:	60a3      	str	r3, [r4, #8]
 8007f9a:	6963      	ldr	r3, [r4, #20]
 8007f9c:	425b      	negs	r3, r3
 8007f9e:	61a3      	str	r3, [r4, #24]
 8007fa0:	6923      	ldr	r3, [r4, #16]
 8007fa2:	b943      	cbnz	r3, 8007fb6 <__swsetup_r+0xc6>
 8007fa4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007fa8:	d1ba      	bne.n	8007f20 <__swsetup_r+0x30>
 8007faa:	bd70      	pop	{r4, r5, r6, pc}
 8007fac:	0781      	lsls	r1, r0, #30
 8007fae:	bf58      	it	pl
 8007fb0:	6963      	ldrpl	r3, [r4, #20]
 8007fb2:	60a3      	str	r3, [r4, #8]
 8007fb4:	e7f4      	b.n	8007fa0 <__swsetup_r+0xb0>
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	e7f7      	b.n	8007faa <__swsetup_r+0xba>
 8007fba:	bf00      	nop
 8007fbc:	20000070 	.word	0x20000070
 8007fc0:	0800b01c 	.word	0x0800b01c
 8007fc4:	0800b03c 	.word	0x0800b03c
 8007fc8:	0800affc 	.word	0x0800affc

08007fcc <__assert_func>:
 8007fcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007fce:	4614      	mov	r4, r2
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	4b09      	ldr	r3, [pc, #36]	; (8007ff8 <__assert_func+0x2c>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4605      	mov	r5, r0
 8007fd8:	68d8      	ldr	r0, [r3, #12]
 8007fda:	b14c      	cbz	r4, 8007ff0 <__assert_func+0x24>
 8007fdc:	4b07      	ldr	r3, [pc, #28]	; (8007ffc <__assert_func+0x30>)
 8007fde:	9100      	str	r1, [sp, #0]
 8007fe0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007fe4:	4906      	ldr	r1, [pc, #24]	; (8008000 <__assert_func+0x34>)
 8007fe6:	462b      	mov	r3, r5
 8007fe8:	f001 f820 	bl	800902c <fiprintf>
 8007fec:	f002 fc62 	bl	800a8b4 <abort>
 8007ff0:	4b04      	ldr	r3, [pc, #16]	; (8008004 <__assert_func+0x38>)
 8007ff2:	461c      	mov	r4, r3
 8007ff4:	e7f3      	b.n	8007fde <__assert_func+0x12>
 8007ff6:	bf00      	nop
 8007ff8:	20000070 	.word	0x20000070
 8007ffc:	0800af44 	.word	0x0800af44
 8008000:	0800af51 	.word	0x0800af51
 8008004:	0800af7f 	.word	0x0800af7f

08008008 <quorem>:
 8008008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800c:	6903      	ldr	r3, [r0, #16]
 800800e:	690c      	ldr	r4, [r1, #16]
 8008010:	42a3      	cmp	r3, r4
 8008012:	4607      	mov	r7, r0
 8008014:	f2c0 8081 	blt.w	800811a <quorem+0x112>
 8008018:	3c01      	subs	r4, #1
 800801a:	f101 0814 	add.w	r8, r1, #20
 800801e:	f100 0514 	add.w	r5, r0, #20
 8008022:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008026:	9301      	str	r3, [sp, #4]
 8008028:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800802c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008030:	3301      	adds	r3, #1
 8008032:	429a      	cmp	r2, r3
 8008034:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008038:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800803c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008040:	d331      	bcc.n	80080a6 <quorem+0x9e>
 8008042:	f04f 0e00 	mov.w	lr, #0
 8008046:	4640      	mov	r0, r8
 8008048:	46ac      	mov	ip, r5
 800804a:	46f2      	mov	sl, lr
 800804c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008050:	b293      	uxth	r3, r2
 8008052:	fb06 e303 	mla	r3, r6, r3, lr
 8008056:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800805a:	b29b      	uxth	r3, r3
 800805c:	ebaa 0303 	sub.w	r3, sl, r3
 8008060:	f8dc a000 	ldr.w	sl, [ip]
 8008064:	0c12      	lsrs	r2, r2, #16
 8008066:	fa13 f38a 	uxtah	r3, r3, sl
 800806a:	fb06 e202 	mla	r2, r6, r2, lr
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	9b00      	ldr	r3, [sp, #0]
 8008072:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008076:	b292      	uxth	r2, r2
 8008078:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800807c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008080:	f8bd 3000 	ldrh.w	r3, [sp]
 8008084:	4581      	cmp	r9, r0
 8008086:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800808a:	f84c 3b04 	str.w	r3, [ip], #4
 800808e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008092:	d2db      	bcs.n	800804c <quorem+0x44>
 8008094:	f855 300b 	ldr.w	r3, [r5, fp]
 8008098:	b92b      	cbnz	r3, 80080a6 <quorem+0x9e>
 800809a:	9b01      	ldr	r3, [sp, #4]
 800809c:	3b04      	subs	r3, #4
 800809e:	429d      	cmp	r5, r3
 80080a0:	461a      	mov	r2, r3
 80080a2:	d32e      	bcc.n	8008102 <quorem+0xfa>
 80080a4:	613c      	str	r4, [r7, #16]
 80080a6:	4638      	mov	r0, r7
 80080a8:	f001 fec4 	bl	8009e34 <__mcmp>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	db24      	blt.n	80080fa <quorem+0xf2>
 80080b0:	3601      	adds	r6, #1
 80080b2:	4628      	mov	r0, r5
 80080b4:	f04f 0c00 	mov.w	ip, #0
 80080b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80080bc:	f8d0 e000 	ldr.w	lr, [r0]
 80080c0:	b293      	uxth	r3, r2
 80080c2:	ebac 0303 	sub.w	r3, ip, r3
 80080c6:	0c12      	lsrs	r2, r2, #16
 80080c8:	fa13 f38e 	uxtah	r3, r3, lr
 80080cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080da:	45c1      	cmp	r9, r8
 80080dc:	f840 3b04 	str.w	r3, [r0], #4
 80080e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080e4:	d2e8      	bcs.n	80080b8 <quorem+0xb0>
 80080e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080ee:	b922      	cbnz	r2, 80080fa <quorem+0xf2>
 80080f0:	3b04      	subs	r3, #4
 80080f2:	429d      	cmp	r5, r3
 80080f4:	461a      	mov	r2, r3
 80080f6:	d30a      	bcc.n	800810e <quorem+0x106>
 80080f8:	613c      	str	r4, [r7, #16]
 80080fa:	4630      	mov	r0, r6
 80080fc:	b003      	add	sp, #12
 80080fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008102:	6812      	ldr	r2, [r2, #0]
 8008104:	3b04      	subs	r3, #4
 8008106:	2a00      	cmp	r2, #0
 8008108:	d1cc      	bne.n	80080a4 <quorem+0x9c>
 800810a:	3c01      	subs	r4, #1
 800810c:	e7c7      	b.n	800809e <quorem+0x96>
 800810e:	6812      	ldr	r2, [r2, #0]
 8008110:	3b04      	subs	r3, #4
 8008112:	2a00      	cmp	r2, #0
 8008114:	d1f0      	bne.n	80080f8 <quorem+0xf0>
 8008116:	3c01      	subs	r4, #1
 8008118:	e7eb      	b.n	80080f2 <quorem+0xea>
 800811a:	2000      	movs	r0, #0
 800811c:	e7ee      	b.n	80080fc <quorem+0xf4>
	...

08008120 <_dtoa_r>:
 8008120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008124:	ed2d 8b04 	vpush	{d8-d9}
 8008128:	ec57 6b10 	vmov	r6, r7, d0
 800812c:	b093      	sub	sp, #76	; 0x4c
 800812e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008130:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008134:	9106      	str	r1, [sp, #24]
 8008136:	ee10 aa10 	vmov	sl, s0
 800813a:	4604      	mov	r4, r0
 800813c:	9209      	str	r2, [sp, #36]	; 0x24
 800813e:	930c      	str	r3, [sp, #48]	; 0x30
 8008140:	46bb      	mov	fp, r7
 8008142:	b975      	cbnz	r5, 8008162 <_dtoa_r+0x42>
 8008144:	2010      	movs	r0, #16
 8008146:	f7fe f9bf 	bl	80064c8 <malloc>
 800814a:	4602      	mov	r2, r0
 800814c:	6260      	str	r0, [r4, #36]	; 0x24
 800814e:	b920      	cbnz	r0, 800815a <_dtoa_r+0x3a>
 8008150:	4ba7      	ldr	r3, [pc, #668]	; (80083f0 <_dtoa_r+0x2d0>)
 8008152:	21ea      	movs	r1, #234	; 0xea
 8008154:	48a7      	ldr	r0, [pc, #668]	; (80083f4 <_dtoa_r+0x2d4>)
 8008156:	f7ff ff39 	bl	8007fcc <__assert_func>
 800815a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800815e:	6005      	str	r5, [r0, #0]
 8008160:	60c5      	str	r5, [r0, #12]
 8008162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008164:	6819      	ldr	r1, [r3, #0]
 8008166:	b151      	cbz	r1, 800817e <_dtoa_r+0x5e>
 8008168:	685a      	ldr	r2, [r3, #4]
 800816a:	604a      	str	r2, [r1, #4]
 800816c:	2301      	movs	r3, #1
 800816e:	4093      	lsls	r3, r2
 8008170:	608b      	str	r3, [r1, #8]
 8008172:	4620      	mov	r0, r4
 8008174:	f001 fbd2 	bl	800991c <_Bfree>
 8008178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800817a:	2200      	movs	r2, #0
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	1e3b      	subs	r3, r7, #0
 8008180:	bfaa      	itet	ge
 8008182:	2300      	movge	r3, #0
 8008184:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008188:	f8c8 3000 	strge.w	r3, [r8]
 800818c:	4b9a      	ldr	r3, [pc, #616]	; (80083f8 <_dtoa_r+0x2d8>)
 800818e:	bfbc      	itt	lt
 8008190:	2201      	movlt	r2, #1
 8008192:	f8c8 2000 	strlt.w	r2, [r8]
 8008196:	ea33 030b 	bics.w	r3, r3, fp
 800819a:	d11b      	bne.n	80081d4 <_dtoa_r+0xb4>
 800819c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800819e:	f242 730f 	movw	r3, #9999	; 0x270f
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081a8:	4333      	orrs	r3, r6
 80081aa:	f000 8592 	beq.w	8008cd2 <_dtoa_r+0xbb2>
 80081ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081b0:	b963      	cbnz	r3, 80081cc <_dtoa_r+0xac>
 80081b2:	4b92      	ldr	r3, [pc, #584]	; (80083fc <_dtoa_r+0x2dc>)
 80081b4:	e022      	b.n	80081fc <_dtoa_r+0xdc>
 80081b6:	4b92      	ldr	r3, [pc, #584]	; (8008400 <_dtoa_r+0x2e0>)
 80081b8:	9301      	str	r3, [sp, #4]
 80081ba:	3308      	adds	r3, #8
 80081bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081be:	6013      	str	r3, [r2, #0]
 80081c0:	9801      	ldr	r0, [sp, #4]
 80081c2:	b013      	add	sp, #76	; 0x4c
 80081c4:	ecbd 8b04 	vpop	{d8-d9}
 80081c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081cc:	4b8b      	ldr	r3, [pc, #556]	; (80083fc <_dtoa_r+0x2dc>)
 80081ce:	9301      	str	r3, [sp, #4]
 80081d0:	3303      	adds	r3, #3
 80081d2:	e7f3      	b.n	80081bc <_dtoa_r+0x9c>
 80081d4:	2200      	movs	r2, #0
 80081d6:	2300      	movs	r3, #0
 80081d8:	4650      	mov	r0, sl
 80081da:	4659      	mov	r1, fp
 80081dc:	f7f8 fca4 	bl	8000b28 <__aeabi_dcmpeq>
 80081e0:	ec4b ab19 	vmov	d9, sl, fp
 80081e4:	4680      	mov	r8, r0
 80081e6:	b158      	cbz	r0, 8008200 <_dtoa_r+0xe0>
 80081e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081ea:	2301      	movs	r3, #1
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 856b 	beq.w	8008ccc <_dtoa_r+0xbac>
 80081f6:	4883      	ldr	r0, [pc, #524]	; (8008404 <_dtoa_r+0x2e4>)
 80081f8:	6018      	str	r0, [r3, #0]
 80081fa:	1e43      	subs	r3, r0, #1
 80081fc:	9301      	str	r3, [sp, #4]
 80081fe:	e7df      	b.n	80081c0 <_dtoa_r+0xa0>
 8008200:	ec4b ab10 	vmov	d0, sl, fp
 8008204:	aa10      	add	r2, sp, #64	; 0x40
 8008206:	a911      	add	r1, sp, #68	; 0x44
 8008208:	4620      	mov	r0, r4
 800820a:	f001 ff35 	bl	800a078 <__d2b>
 800820e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008212:	ee08 0a10 	vmov	s16, r0
 8008216:	2d00      	cmp	r5, #0
 8008218:	f000 8084 	beq.w	8008324 <_dtoa_r+0x204>
 800821c:	ee19 3a90 	vmov	r3, s19
 8008220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008224:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008228:	4656      	mov	r6, sl
 800822a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800822e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008232:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008236:	4b74      	ldr	r3, [pc, #464]	; (8008408 <_dtoa_r+0x2e8>)
 8008238:	2200      	movs	r2, #0
 800823a:	4630      	mov	r0, r6
 800823c:	4639      	mov	r1, r7
 800823e:	f7f8 f853 	bl	80002e8 <__aeabi_dsub>
 8008242:	a365      	add	r3, pc, #404	; (adr r3, 80083d8 <_dtoa_r+0x2b8>)
 8008244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008248:	f7f8 fa06 	bl	8000658 <__aeabi_dmul>
 800824c:	a364      	add	r3, pc, #400	; (adr r3, 80083e0 <_dtoa_r+0x2c0>)
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	f7f8 f84b 	bl	80002ec <__adddf3>
 8008256:	4606      	mov	r6, r0
 8008258:	4628      	mov	r0, r5
 800825a:	460f      	mov	r7, r1
 800825c:	f7f8 f992 	bl	8000584 <__aeabi_i2d>
 8008260:	a361      	add	r3, pc, #388	; (adr r3, 80083e8 <_dtoa_r+0x2c8>)
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	f7f8 f9f7 	bl	8000658 <__aeabi_dmul>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	4630      	mov	r0, r6
 8008270:	4639      	mov	r1, r7
 8008272:	f7f8 f83b 	bl	80002ec <__adddf3>
 8008276:	4606      	mov	r6, r0
 8008278:	460f      	mov	r7, r1
 800827a:	f7f8 fc9d 	bl	8000bb8 <__aeabi_d2iz>
 800827e:	2200      	movs	r2, #0
 8008280:	9000      	str	r0, [sp, #0]
 8008282:	2300      	movs	r3, #0
 8008284:	4630      	mov	r0, r6
 8008286:	4639      	mov	r1, r7
 8008288:	f7f8 fc58 	bl	8000b3c <__aeabi_dcmplt>
 800828c:	b150      	cbz	r0, 80082a4 <_dtoa_r+0x184>
 800828e:	9800      	ldr	r0, [sp, #0]
 8008290:	f7f8 f978 	bl	8000584 <__aeabi_i2d>
 8008294:	4632      	mov	r2, r6
 8008296:	463b      	mov	r3, r7
 8008298:	f7f8 fc46 	bl	8000b28 <__aeabi_dcmpeq>
 800829c:	b910      	cbnz	r0, 80082a4 <_dtoa_r+0x184>
 800829e:	9b00      	ldr	r3, [sp, #0]
 80082a0:	3b01      	subs	r3, #1
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	9b00      	ldr	r3, [sp, #0]
 80082a6:	2b16      	cmp	r3, #22
 80082a8:	d85a      	bhi.n	8008360 <_dtoa_r+0x240>
 80082aa:	9a00      	ldr	r2, [sp, #0]
 80082ac:	4b57      	ldr	r3, [pc, #348]	; (800840c <_dtoa_r+0x2ec>)
 80082ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	ec51 0b19 	vmov	r0, r1, d9
 80082ba:	f7f8 fc3f 	bl	8000b3c <__aeabi_dcmplt>
 80082be:	2800      	cmp	r0, #0
 80082c0:	d050      	beq.n	8008364 <_dtoa_r+0x244>
 80082c2:	9b00      	ldr	r3, [sp, #0]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	2300      	movs	r3, #0
 80082ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80082cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082ce:	1b5d      	subs	r5, r3, r5
 80082d0:	1e6b      	subs	r3, r5, #1
 80082d2:	9305      	str	r3, [sp, #20]
 80082d4:	bf45      	ittet	mi
 80082d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80082da:	9304      	strmi	r3, [sp, #16]
 80082dc:	2300      	movpl	r3, #0
 80082de:	2300      	movmi	r3, #0
 80082e0:	bf4c      	ite	mi
 80082e2:	9305      	strmi	r3, [sp, #20]
 80082e4:	9304      	strpl	r3, [sp, #16]
 80082e6:	9b00      	ldr	r3, [sp, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	db3d      	blt.n	8008368 <_dtoa_r+0x248>
 80082ec:	9b05      	ldr	r3, [sp, #20]
 80082ee:	9a00      	ldr	r2, [sp, #0]
 80082f0:	920a      	str	r2, [sp, #40]	; 0x28
 80082f2:	4413      	add	r3, r2
 80082f4:	9305      	str	r3, [sp, #20]
 80082f6:	2300      	movs	r3, #0
 80082f8:	9307      	str	r3, [sp, #28]
 80082fa:	9b06      	ldr	r3, [sp, #24]
 80082fc:	2b09      	cmp	r3, #9
 80082fe:	f200 8089 	bhi.w	8008414 <_dtoa_r+0x2f4>
 8008302:	2b05      	cmp	r3, #5
 8008304:	bfc4      	itt	gt
 8008306:	3b04      	subgt	r3, #4
 8008308:	9306      	strgt	r3, [sp, #24]
 800830a:	9b06      	ldr	r3, [sp, #24]
 800830c:	f1a3 0302 	sub.w	r3, r3, #2
 8008310:	bfcc      	ite	gt
 8008312:	2500      	movgt	r5, #0
 8008314:	2501      	movle	r5, #1
 8008316:	2b03      	cmp	r3, #3
 8008318:	f200 8087 	bhi.w	800842a <_dtoa_r+0x30a>
 800831c:	e8df f003 	tbb	[pc, r3]
 8008320:	59383a2d 	.word	0x59383a2d
 8008324:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008328:	441d      	add	r5, r3
 800832a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800832e:	2b20      	cmp	r3, #32
 8008330:	bfc1      	itttt	gt
 8008332:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008336:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800833a:	fa0b f303 	lslgt.w	r3, fp, r3
 800833e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008342:	bfda      	itte	le
 8008344:	f1c3 0320 	rsble	r3, r3, #32
 8008348:	fa06 f003 	lslle.w	r0, r6, r3
 800834c:	4318      	orrgt	r0, r3
 800834e:	f7f8 f909 	bl	8000564 <__aeabi_ui2d>
 8008352:	2301      	movs	r3, #1
 8008354:	4606      	mov	r6, r0
 8008356:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800835a:	3d01      	subs	r5, #1
 800835c:	930e      	str	r3, [sp, #56]	; 0x38
 800835e:	e76a      	b.n	8008236 <_dtoa_r+0x116>
 8008360:	2301      	movs	r3, #1
 8008362:	e7b2      	b.n	80082ca <_dtoa_r+0x1aa>
 8008364:	900b      	str	r0, [sp, #44]	; 0x2c
 8008366:	e7b1      	b.n	80082cc <_dtoa_r+0x1ac>
 8008368:	9b04      	ldr	r3, [sp, #16]
 800836a:	9a00      	ldr	r2, [sp, #0]
 800836c:	1a9b      	subs	r3, r3, r2
 800836e:	9304      	str	r3, [sp, #16]
 8008370:	4253      	negs	r3, r2
 8008372:	9307      	str	r3, [sp, #28]
 8008374:	2300      	movs	r3, #0
 8008376:	930a      	str	r3, [sp, #40]	; 0x28
 8008378:	e7bf      	b.n	80082fa <_dtoa_r+0x1da>
 800837a:	2300      	movs	r3, #0
 800837c:	9308      	str	r3, [sp, #32]
 800837e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008380:	2b00      	cmp	r3, #0
 8008382:	dc55      	bgt.n	8008430 <_dtoa_r+0x310>
 8008384:	2301      	movs	r3, #1
 8008386:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800838a:	461a      	mov	r2, r3
 800838c:	9209      	str	r2, [sp, #36]	; 0x24
 800838e:	e00c      	b.n	80083aa <_dtoa_r+0x28a>
 8008390:	2301      	movs	r3, #1
 8008392:	e7f3      	b.n	800837c <_dtoa_r+0x25c>
 8008394:	2300      	movs	r3, #0
 8008396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008398:	9308      	str	r3, [sp, #32]
 800839a:	9b00      	ldr	r3, [sp, #0]
 800839c:	4413      	add	r3, r2
 800839e:	9302      	str	r3, [sp, #8]
 80083a0:	3301      	adds	r3, #1
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	9303      	str	r3, [sp, #12]
 80083a6:	bfb8      	it	lt
 80083a8:	2301      	movlt	r3, #1
 80083aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80083ac:	2200      	movs	r2, #0
 80083ae:	6042      	str	r2, [r0, #4]
 80083b0:	2204      	movs	r2, #4
 80083b2:	f102 0614 	add.w	r6, r2, #20
 80083b6:	429e      	cmp	r6, r3
 80083b8:	6841      	ldr	r1, [r0, #4]
 80083ba:	d93d      	bls.n	8008438 <_dtoa_r+0x318>
 80083bc:	4620      	mov	r0, r4
 80083be:	f001 fa6d 	bl	800989c <_Balloc>
 80083c2:	9001      	str	r0, [sp, #4]
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d13b      	bne.n	8008440 <_dtoa_r+0x320>
 80083c8:	4b11      	ldr	r3, [pc, #68]	; (8008410 <_dtoa_r+0x2f0>)
 80083ca:	4602      	mov	r2, r0
 80083cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083d0:	e6c0      	b.n	8008154 <_dtoa_r+0x34>
 80083d2:	2301      	movs	r3, #1
 80083d4:	e7df      	b.n	8008396 <_dtoa_r+0x276>
 80083d6:	bf00      	nop
 80083d8:	636f4361 	.word	0x636f4361
 80083dc:	3fd287a7 	.word	0x3fd287a7
 80083e0:	8b60c8b3 	.word	0x8b60c8b3
 80083e4:	3fc68a28 	.word	0x3fc68a28
 80083e8:	509f79fb 	.word	0x509f79fb
 80083ec:	3fd34413 	.word	0x3fd34413
 80083f0:	0800aed0 	.word	0x0800aed0
 80083f4:	0800af8d 	.word	0x0800af8d
 80083f8:	7ff00000 	.word	0x7ff00000
 80083fc:	0800af89 	.word	0x0800af89
 8008400:	0800af80 	.word	0x0800af80
 8008404:	0800ae5d 	.word	0x0800ae5d
 8008408:	3ff80000 	.word	0x3ff80000
 800840c:	0800b160 	.word	0x0800b160
 8008410:	0800afe8 	.word	0x0800afe8
 8008414:	2501      	movs	r5, #1
 8008416:	2300      	movs	r3, #0
 8008418:	9306      	str	r3, [sp, #24]
 800841a:	9508      	str	r5, [sp, #32]
 800841c:	f04f 33ff 	mov.w	r3, #4294967295
 8008420:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008424:	2200      	movs	r2, #0
 8008426:	2312      	movs	r3, #18
 8008428:	e7b0      	b.n	800838c <_dtoa_r+0x26c>
 800842a:	2301      	movs	r3, #1
 800842c:	9308      	str	r3, [sp, #32]
 800842e:	e7f5      	b.n	800841c <_dtoa_r+0x2fc>
 8008430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008432:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008436:	e7b8      	b.n	80083aa <_dtoa_r+0x28a>
 8008438:	3101      	adds	r1, #1
 800843a:	6041      	str	r1, [r0, #4]
 800843c:	0052      	lsls	r2, r2, #1
 800843e:	e7b8      	b.n	80083b2 <_dtoa_r+0x292>
 8008440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008442:	9a01      	ldr	r2, [sp, #4]
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	9b03      	ldr	r3, [sp, #12]
 8008448:	2b0e      	cmp	r3, #14
 800844a:	f200 809d 	bhi.w	8008588 <_dtoa_r+0x468>
 800844e:	2d00      	cmp	r5, #0
 8008450:	f000 809a 	beq.w	8008588 <_dtoa_r+0x468>
 8008454:	9b00      	ldr	r3, [sp, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	dd32      	ble.n	80084c0 <_dtoa_r+0x3a0>
 800845a:	4ab7      	ldr	r2, [pc, #732]	; (8008738 <_dtoa_r+0x618>)
 800845c:	f003 030f 	and.w	r3, r3, #15
 8008460:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008464:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008468:	9b00      	ldr	r3, [sp, #0]
 800846a:	05d8      	lsls	r0, r3, #23
 800846c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008470:	d516      	bpl.n	80084a0 <_dtoa_r+0x380>
 8008472:	4bb2      	ldr	r3, [pc, #712]	; (800873c <_dtoa_r+0x61c>)
 8008474:	ec51 0b19 	vmov	r0, r1, d9
 8008478:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800847c:	f7f8 fa16 	bl	80008ac <__aeabi_ddiv>
 8008480:	f007 070f 	and.w	r7, r7, #15
 8008484:	4682      	mov	sl, r0
 8008486:	468b      	mov	fp, r1
 8008488:	2503      	movs	r5, #3
 800848a:	4eac      	ldr	r6, [pc, #688]	; (800873c <_dtoa_r+0x61c>)
 800848c:	b957      	cbnz	r7, 80084a4 <_dtoa_r+0x384>
 800848e:	4642      	mov	r2, r8
 8008490:	464b      	mov	r3, r9
 8008492:	4650      	mov	r0, sl
 8008494:	4659      	mov	r1, fp
 8008496:	f7f8 fa09 	bl	80008ac <__aeabi_ddiv>
 800849a:	4682      	mov	sl, r0
 800849c:	468b      	mov	fp, r1
 800849e:	e028      	b.n	80084f2 <_dtoa_r+0x3d2>
 80084a0:	2502      	movs	r5, #2
 80084a2:	e7f2      	b.n	800848a <_dtoa_r+0x36a>
 80084a4:	07f9      	lsls	r1, r7, #31
 80084a6:	d508      	bpl.n	80084ba <_dtoa_r+0x39a>
 80084a8:	4640      	mov	r0, r8
 80084aa:	4649      	mov	r1, r9
 80084ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084b0:	f7f8 f8d2 	bl	8000658 <__aeabi_dmul>
 80084b4:	3501      	adds	r5, #1
 80084b6:	4680      	mov	r8, r0
 80084b8:	4689      	mov	r9, r1
 80084ba:	107f      	asrs	r7, r7, #1
 80084bc:	3608      	adds	r6, #8
 80084be:	e7e5      	b.n	800848c <_dtoa_r+0x36c>
 80084c0:	f000 809b 	beq.w	80085fa <_dtoa_r+0x4da>
 80084c4:	9b00      	ldr	r3, [sp, #0]
 80084c6:	4f9d      	ldr	r7, [pc, #628]	; (800873c <_dtoa_r+0x61c>)
 80084c8:	425e      	negs	r6, r3
 80084ca:	4b9b      	ldr	r3, [pc, #620]	; (8008738 <_dtoa_r+0x618>)
 80084cc:	f006 020f 	and.w	r2, r6, #15
 80084d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d8:	ec51 0b19 	vmov	r0, r1, d9
 80084dc:	f7f8 f8bc 	bl	8000658 <__aeabi_dmul>
 80084e0:	1136      	asrs	r6, r6, #4
 80084e2:	4682      	mov	sl, r0
 80084e4:	468b      	mov	fp, r1
 80084e6:	2300      	movs	r3, #0
 80084e8:	2502      	movs	r5, #2
 80084ea:	2e00      	cmp	r6, #0
 80084ec:	d17a      	bne.n	80085e4 <_dtoa_r+0x4c4>
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1d3      	bne.n	800849a <_dtoa_r+0x37a>
 80084f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 8082 	beq.w	80085fe <_dtoa_r+0x4de>
 80084fa:	4b91      	ldr	r3, [pc, #580]	; (8008740 <_dtoa_r+0x620>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	4650      	mov	r0, sl
 8008500:	4659      	mov	r1, fp
 8008502:	f7f8 fb1b 	bl	8000b3c <__aeabi_dcmplt>
 8008506:	2800      	cmp	r0, #0
 8008508:	d079      	beq.n	80085fe <_dtoa_r+0x4de>
 800850a:	9b03      	ldr	r3, [sp, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d076      	beq.n	80085fe <_dtoa_r+0x4de>
 8008510:	9b02      	ldr	r3, [sp, #8]
 8008512:	2b00      	cmp	r3, #0
 8008514:	dd36      	ble.n	8008584 <_dtoa_r+0x464>
 8008516:	9b00      	ldr	r3, [sp, #0]
 8008518:	4650      	mov	r0, sl
 800851a:	4659      	mov	r1, fp
 800851c:	1e5f      	subs	r7, r3, #1
 800851e:	2200      	movs	r2, #0
 8008520:	4b88      	ldr	r3, [pc, #544]	; (8008744 <_dtoa_r+0x624>)
 8008522:	f7f8 f899 	bl	8000658 <__aeabi_dmul>
 8008526:	9e02      	ldr	r6, [sp, #8]
 8008528:	4682      	mov	sl, r0
 800852a:	468b      	mov	fp, r1
 800852c:	3501      	adds	r5, #1
 800852e:	4628      	mov	r0, r5
 8008530:	f7f8 f828 	bl	8000584 <__aeabi_i2d>
 8008534:	4652      	mov	r2, sl
 8008536:	465b      	mov	r3, fp
 8008538:	f7f8 f88e 	bl	8000658 <__aeabi_dmul>
 800853c:	4b82      	ldr	r3, [pc, #520]	; (8008748 <_dtoa_r+0x628>)
 800853e:	2200      	movs	r2, #0
 8008540:	f7f7 fed4 	bl	80002ec <__adddf3>
 8008544:	46d0      	mov	r8, sl
 8008546:	46d9      	mov	r9, fp
 8008548:	4682      	mov	sl, r0
 800854a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800854e:	2e00      	cmp	r6, #0
 8008550:	d158      	bne.n	8008604 <_dtoa_r+0x4e4>
 8008552:	4b7e      	ldr	r3, [pc, #504]	; (800874c <_dtoa_r+0x62c>)
 8008554:	2200      	movs	r2, #0
 8008556:	4640      	mov	r0, r8
 8008558:	4649      	mov	r1, r9
 800855a:	f7f7 fec5 	bl	80002e8 <__aeabi_dsub>
 800855e:	4652      	mov	r2, sl
 8008560:	465b      	mov	r3, fp
 8008562:	4680      	mov	r8, r0
 8008564:	4689      	mov	r9, r1
 8008566:	f7f8 fb07 	bl	8000b78 <__aeabi_dcmpgt>
 800856a:	2800      	cmp	r0, #0
 800856c:	f040 8295 	bne.w	8008a9a <_dtoa_r+0x97a>
 8008570:	4652      	mov	r2, sl
 8008572:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008576:	4640      	mov	r0, r8
 8008578:	4649      	mov	r1, r9
 800857a:	f7f8 fadf 	bl	8000b3c <__aeabi_dcmplt>
 800857e:	2800      	cmp	r0, #0
 8008580:	f040 8289 	bne.w	8008a96 <_dtoa_r+0x976>
 8008584:	ec5b ab19 	vmov	sl, fp, d9
 8008588:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800858a:	2b00      	cmp	r3, #0
 800858c:	f2c0 8148 	blt.w	8008820 <_dtoa_r+0x700>
 8008590:	9a00      	ldr	r2, [sp, #0]
 8008592:	2a0e      	cmp	r2, #14
 8008594:	f300 8144 	bgt.w	8008820 <_dtoa_r+0x700>
 8008598:	4b67      	ldr	r3, [pc, #412]	; (8008738 <_dtoa_r+0x618>)
 800859a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800859e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f280 80d5 	bge.w	8008754 <_dtoa_r+0x634>
 80085aa:	9b03      	ldr	r3, [sp, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f300 80d1 	bgt.w	8008754 <_dtoa_r+0x634>
 80085b2:	f040 826f 	bne.w	8008a94 <_dtoa_r+0x974>
 80085b6:	4b65      	ldr	r3, [pc, #404]	; (800874c <_dtoa_r+0x62c>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	4640      	mov	r0, r8
 80085bc:	4649      	mov	r1, r9
 80085be:	f7f8 f84b 	bl	8000658 <__aeabi_dmul>
 80085c2:	4652      	mov	r2, sl
 80085c4:	465b      	mov	r3, fp
 80085c6:	f7f8 facd 	bl	8000b64 <__aeabi_dcmpge>
 80085ca:	9e03      	ldr	r6, [sp, #12]
 80085cc:	4637      	mov	r7, r6
 80085ce:	2800      	cmp	r0, #0
 80085d0:	f040 8245 	bne.w	8008a5e <_dtoa_r+0x93e>
 80085d4:	9d01      	ldr	r5, [sp, #4]
 80085d6:	2331      	movs	r3, #49	; 0x31
 80085d8:	f805 3b01 	strb.w	r3, [r5], #1
 80085dc:	9b00      	ldr	r3, [sp, #0]
 80085de:	3301      	adds	r3, #1
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	e240      	b.n	8008a66 <_dtoa_r+0x946>
 80085e4:	07f2      	lsls	r2, r6, #31
 80085e6:	d505      	bpl.n	80085f4 <_dtoa_r+0x4d4>
 80085e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085ec:	f7f8 f834 	bl	8000658 <__aeabi_dmul>
 80085f0:	3501      	adds	r5, #1
 80085f2:	2301      	movs	r3, #1
 80085f4:	1076      	asrs	r6, r6, #1
 80085f6:	3708      	adds	r7, #8
 80085f8:	e777      	b.n	80084ea <_dtoa_r+0x3ca>
 80085fa:	2502      	movs	r5, #2
 80085fc:	e779      	b.n	80084f2 <_dtoa_r+0x3d2>
 80085fe:	9f00      	ldr	r7, [sp, #0]
 8008600:	9e03      	ldr	r6, [sp, #12]
 8008602:	e794      	b.n	800852e <_dtoa_r+0x40e>
 8008604:	9901      	ldr	r1, [sp, #4]
 8008606:	4b4c      	ldr	r3, [pc, #304]	; (8008738 <_dtoa_r+0x618>)
 8008608:	4431      	add	r1, r6
 800860a:	910d      	str	r1, [sp, #52]	; 0x34
 800860c:	9908      	ldr	r1, [sp, #32]
 800860e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008612:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008616:	2900      	cmp	r1, #0
 8008618:	d043      	beq.n	80086a2 <_dtoa_r+0x582>
 800861a:	494d      	ldr	r1, [pc, #308]	; (8008750 <_dtoa_r+0x630>)
 800861c:	2000      	movs	r0, #0
 800861e:	f7f8 f945 	bl	80008ac <__aeabi_ddiv>
 8008622:	4652      	mov	r2, sl
 8008624:	465b      	mov	r3, fp
 8008626:	f7f7 fe5f 	bl	80002e8 <__aeabi_dsub>
 800862a:	9d01      	ldr	r5, [sp, #4]
 800862c:	4682      	mov	sl, r0
 800862e:	468b      	mov	fp, r1
 8008630:	4649      	mov	r1, r9
 8008632:	4640      	mov	r0, r8
 8008634:	f7f8 fac0 	bl	8000bb8 <__aeabi_d2iz>
 8008638:	4606      	mov	r6, r0
 800863a:	f7f7 ffa3 	bl	8000584 <__aeabi_i2d>
 800863e:	4602      	mov	r2, r0
 8008640:	460b      	mov	r3, r1
 8008642:	4640      	mov	r0, r8
 8008644:	4649      	mov	r1, r9
 8008646:	f7f7 fe4f 	bl	80002e8 <__aeabi_dsub>
 800864a:	3630      	adds	r6, #48	; 0x30
 800864c:	f805 6b01 	strb.w	r6, [r5], #1
 8008650:	4652      	mov	r2, sl
 8008652:	465b      	mov	r3, fp
 8008654:	4680      	mov	r8, r0
 8008656:	4689      	mov	r9, r1
 8008658:	f7f8 fa70 	bl	8000b3c <__aeabi_dcmplt>
 800865c:	2800      	cmp	r0, #0
 800865e:	d163      	bne.n	8008728 <_dtoa_r+0x608>
 8008660:	4642      	mov	r2, r8
 8008662:	464b      	mov	r3, r9
 8008664:	4936      	ldr	r1, [pc, #216]	; (8008740 <_dtoa_r+0x620>)
 8008666:	2000      	movs	r0, #0
 8008668:	f7f7 fe3e 	bl	80002e8 <__aeabi_dsub>
 800866c:	4652      	mov	r2, sl
 800866e:	465b      	mov	r3, fp
 8008670:	f7f8 fa64 	bl	8000b3c <__aeabi_dcmplt>
 8008674:	2800      	cmp	r0, #0
 8008676:	f040 80b5 	bne.w	80087e4 <_dtoa_r+0x6c4>
 800867a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800867c:	429d      	cmp	r5, r3
 800867e:	d081      	beq.n	8008584 <_dtoa_r+0x464>
 8008680:	4b30      	ldr	r3, [pc, #192]	; (8008744 <_dtoa_r+0x624>)
 8008682:	2200      	movs	r2, #0
 8008684:	4650      	mov	r0, sl
 8008686:	4659      	mov	r1, fp
 8008688:	f7f7 ffe6 	bl	8000658 <__aeabi_dmul>
 800868c:	4b2d      	ldr	r3, [pc, #180]	; (8008744 <_dtoa_r+0x624>)
 800868e:	4682      	mov	sl, r0
 8008690:	468b      	mov	fp, r1
 8008692:	4640      	mov	r0, r8
 8008694:	4649      	mov	r1, r9
 8008696:	2200      	movs	r2, #0
 8008698:	f7f7 ffde 	bl	8000658 <__aeabi_dmul>
 800869c:	4680      	mov	r8, r0
 800869e:	4689      	mov	r9, r1
 80086a0:	e7c6      	b.n	8008630 <_dtoa_r+0x510>
 80086a2:	4650      	mov	r0, sl
 80086a4:	4659      	mov	r1, fp
 80086a6:	f7f7 ffd7 	bl	8000658 <__aeabi_dmul>
 80086aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ac:	9d01      	ldr	r5, [sp, #4]
 80086ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80086b0:	4682      	mov	sl, r0
 80086b2:	468b      	mov	fp, r1
 80086b4:	4649      	mov	r1, r9
 80086b6:	4640      	mov	r0, r8
 80086b8:	f7f8 fa7e 	bl	8000bb8 <__aeabi_d2iz>
 80086bc:	4606      	mov	r6, r0
 80086be:	f7f7 ff61 	bl	8000584 <__aeabi_i2d>
 80086c2:	3630      	adds	r6, #48	; 0x30
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	4640      	mov	r0, r8
 80086ca:	4649      	mov	r1, r9
 80086cc:	f7f7 fe0c 	bl	80002e8 <__aeabi_dsub>
 80086d0:	f805 6b01 	strb.w	r6, [r5], #1
 80086d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086d6:	429d      	cmp	r5, r3
 80086d8:	4680      	mov	r8, r0
 80086da:	4689      	mov	r9, r1
 80086dc:	f04f 0200 	mov.w	r2, #0
 80086e0:	d124      	bne.n	800872c <_dtoa_r+0x60c>
 80086e2:	4b1b      	ldr	r3, [pc, #108]	; (8008750 <_dtoa_r+0x630>)
 80086e4:	4650      	mov	r0, sl
 80086e6:	4659      	mov	r1, fp
 80086e8:	f7f7 fe00 	bl	80002ec <__adddf3>
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	4640      	mov	r0, r8
 80086f2:	4649      	mov	r1, r9
 80086f4:	f7f8 fa40 	bl	8000b78 <__aeabi_dcmpgt>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	d173      	bne.n	80087e4 <_dtoa_r+0x6c4>
 80086fc:	4652      	mov	r2, sl
 80086fe:	465b      	mov	r3, fp
 8008700:	4913      	ldr	r1, [pc, #76]	; (8008750 <_dtoa_r+0x630>)
 8008702:	2000      	movs	r0, #0
 8008704:	f7f7 fdf0 	bl	80002e8 <__aeabi_dsub>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4640      	mov	r0, r8
 800870e:	4649      	mov	r1, r9
 8008710:	f7f8 fa14 	bl	8000b3c <__aeabi_dcmplt>
 8008714:	2800      	cmp	r0, #0
 8008716:	f43f af35 	beq.w	8008584 <_dtoa_r+0x464>
 800871a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800871c:	1e6b      	subs	r3, r5, #1
 800871e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008720:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008724:	2b30      	cmp	r3, #48	; 0x30
 8008726:	d0f8      	beq.n	800871a <_dtoa_r+0x5fa>
 8008728:	9700      	str	r7, [sp, #0]
 800872a:	e049      	b.n	80087c0 <_dtoa_r+0x6a0>
 800872c:	4b05      	ldr	r3, [pc, #20]	; (8008744 <_dtoa_r+0x624>)
 800872e:	f7f7 ff93 	bl	8000658 <__aeabi_dmul>
 8008732:	4680      	mov	r8, r0
 8008734:	4689      	mov	r9, r1
 8008736:	e7bd      	b.n	80086b4 <_dtoa_r+0x594>
 8008738:	0800b160 	.word	0x0800b160
 800873c:	0800b138 	.word	0x0800b138
 8008740:	3ff00000 	.word	0x3ff00000
 8008744:	40240000 	.word	0x40240000
 8008748:	401c0000 	.word	0x401c0000
 800874c:	40140000 	.word	0x40140000
 8008750:	3fe00000 	.word	0x3fe00000
 8008754:	9d01      	ldr	r5, [sp, #4]
 8008756:	4656      	mov	r6, sl
 8008758:	465f      	mov	r7, fp
 800875a:	4642      	mov	r2, r8
 800875c:	464b      	mov	r3, r9
 800875e:	4630      	mov	r0, r6
 8008760:	4639      	mov	r1, r7
 8008762:	f7f8 f8a3 	bl	80008ac <__aeabi_ddiv>
 8008766:	f7f8 fa27 	bl	8000bb8 <__aeabi_d2iz>
 800876a:	4682      	mov	sl, r0
 800876c:	f7f7 ff0a 	bl	8000584 <__aeabi_i2d>
 8008770:	4642      	mov	r2, r8
 8008772:	464b      	mov	r3, r9
 8008774:	f7f7 ff70 	bl	8000658 <__aeabi_dmul>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4630      	mov	r0, r6
 800877e:	4639      	mov	r1, r7
 8008780:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008784:	f7f7 fdb0 	bl	80002e8 <__aeabi_dsub>
 8008788:	f805 6b01 	strb.w	r6, [r5], #1
 800878c:	9e01      	ldr	r6, [sp, #4]
 800878e:	9f03      	ldr	r7, [sp, #12]
 8008790:	1bae      	subs	r6, r5, r6
 8008792:	42b7      	cmp	r7, r6
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	d135      	bne.n	8008806 <_dtoa_r+0x6e6>
 800879a:	f7f7 fda7 	bl	80002ec <__adddf3>
 800879e:	4642      	mov	r2, r8
 80087a0:	464b      	mov	r3, r9
 80087a2:	4606      	mov	r6, r0
 80087a4:	460f      	mov	r7, r1
 80087a6:	f7f8 f9e7 	bl	8000b78 <__aeabi_dcmpgt>
 80087aa:	b9d0      	cbnz	r0, 80087e2 <_dtoa_r+0x6c2>
 80087ac:	4642      	mov	r2, r8
 80087ae:	464b      	mov	r3, r9
 80087b0:	4630      	mov	r0, r6
 80087b2:	4639      	mov	r1, r7
 80087b4:	f7f8 f9b8 	bl	8000b28 <__aeabi_dcmpeq>
 80087b8:	b110      	cbz	r0, 80087c0 <_dtoa_r+0x6a0>
 80087ba:	f01a 0f01 	tst.w	sl, #1
 80087be:	d110      	bne.n	80087e2 <_dtoa_r+0x6c2>
 80087c0:	4620      	mov	r0, r4
 80087c2:	ee18 1a10 	vmov	r1, s16
 80087c6:	f001 f8a9 	bl	800991c <_Bfree>
 80087ca:	2300      	movs	r3, #0
 80087cc:	9800      	ldr	r0, [sp, #0]
 80087ce:	702b      	strb	r3, [r5, #0]
 80087d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087d2:	3001      	adds	r0, #1
 80087d4:	6018      	str	r0, [r3, #0]
 80087d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f43f acf1 	beq.w	80081c0 <_dtoa_r+0xa0>
 80087de:	601d      	str	r5, [r3, #0]
 80087e0:	e4ee      	b.n	80081c0 <_dtoa_r+0xa0>
 80087e2:	9f00      	ldr	r7, [sp, #0]
 80087e4:	462b      	mov	r3, r5
 80087e6:	461d      	mov	r5, r3
 80087e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087ec:	2a39      	cmp	r2, #57	; 0x39
 80087ee:	d106      	bne.n	80087fe <_dtoa_r+0x6de>
 80087f0:	9a01      	ldr	r2, [sp, #4]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d1f7      	bne.n	80087e6 <_dtoa_r+0x6c6>
 80087f6:	9901      	ldr	r1, [sp, #4]
 80087f8:	2230      	movs	r2, #48	; 0x30
 80087fa:	3701      	adds	r7, #1
 80087fc:	700a      	strb	r2, [r1, #0]
 80087fe:	781a      	ldrb	r2, [r3, #0]
 8008800:	3201      	adds	r2, #1
 8008802:	701a      	strb	r2, [r3, #0]
 8008804:	e790      	b.n	8008728 <_dtoa_r+0x608>
 8008806:	4ba6      	ldr	r3, [pc, #664]	; (8008aa0 <_dtoa_r+0x980>)
 8008808:	2200      	movs	r2, #0
 800880a:	f7f7 ff25 	bl	8000658 <__aeabi_dmul>
 800880e:	2200      	movs	r2, #0
 8008810:	2300      	movs	r3, #0
 8008812:	4606      	mov	r6, r0
 8008814:	460f      	mov	r7, r1
 8008816:	f7f8 f987 	bl	8000b28 <__aeabi_dcmpeq>
 800881a:	2800      	cmp	r0, #0
 800881c:	d09d      	beq.n	800875a <_dtoa_r+0x63a>
 800881e:	e7cf      	b.n	80087c0 <_dtoa_r+0x6a0>
 8008820:	9a08      	ldr	r2, [sp, #32]
 8008822:	2a00      	cmp	r2, #0
 8008824:	f000 80d7 	beq.w	80089d6 <_dtoa_r+0x8b6>
 8008828:	9a06      	ldr	r2, [sp, #24]
 800882a:	2a01      	cmp	r2, #1
 800882c:	f300 80ba 	bgt.w	80089a4 <_dtoa_r+0x884>
 8008830:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008832:	2a00      	cmp	r2, #0
 8008834:	f000 80b2 	beq.w	800899c <_dtoa_r+0x87c>
 8008838:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800883c:	9e07      	ldr	r6, [sp, #28]
 800883e:	9d04      	ldr	r5, [sp, #16]
 8008840:	9a04      	ldr	r2, [sp, #16]
 8008842:	441a      	add	r2, r3
 8008844:	9204      	str	r2, [sp, #16]
 8008846:	9a05      	ldr	r2, [sp, #20]
 8008848:	2101      	movs	r1, #1
 800884a:	441a      	add	r2, r3
 800884c:	4620      	mov	r0, r4
 800884e:	9205      	str	r2, [sp, #20]
 8008850:	f001 f966 	bl	8009b20 <__i2b>
 8008854:	4607      	mov	r7, r0
 8008856:	2d00      	cmp	r5, #0
 8008858:	dd0c      	ble.n	8008874 <_dtoa_r+0x754>
 800885a:	9b05      	ldr	r3, [sp, #20]
 800885c:	2b00      	cmp	r3, #0
 800885e:	dd09      	ble.n	8008874 <_dtoa_r+0x754>
 8008860:	42ab      	cmp	r3, r5
 8008862:	9a04      	ldr	r2, [sp, #16]
 8008864:	bfa8      	it	ge
 8008866:	462b      	movge	r3, r5
 8008868:	1ad2      	subs	r2, r2, r3
 800886a:	9204      	str	r2, [sp, #16]
 800886c:	9a05      	ldr	r2, [sp, #20]
 800886e:	1aed      	subs	r5, r5, r3
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	9305      	str	r3, [sp, #20]
 8008874:	9b07      	ldr	r3, [sp, #28]
 8008876:	b31b      	cbz	r3, 80088c0 <_dtoa_r+0x7a0>
 8008878:	9b08      	ldr	r3, [sp, #32]
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 80af 	beq.w	80089de <_dtoa_r+0x8be>
 8008880:	2e00      	cmp	r6, #0
 8008882:	dd13      	ble.n	80088ac <_dtoa_r+0x78c>
 8008884:	4639      	mov	r1, r7
 8008886:	4632      	mov	r2, r6
 8008888:	4620      	mov	r0, r4
 800888a:	f001 fa09 	bl	8009ca0 <__pow5mult>
 800888e:	ee18 2a10 	vmov	r2, s16
 8008892:	4601      	mov	r1, r0
 8008894:	4607      	mov	r7, r0
 8008896:	4620      	mov	r0, r4
 8008898:	f001 f958 	bl	8009b4c <__multiply>
 800889c:	ee18 1a10 	vmov	r1, s16
 80088a0:	4680      	mov	r8, r0
 80088a2:	4620      	mov	r0, r4
 80088a4:	f001 f83a 	bl	800991c <_Bfree>
 80088a8:	ee08 8a10 	vmov	s16, r8
 80088ac:	9b07      	ldr	r3, [sp, #28]
 80088ae:	1b9a      	subs	r2, r3, r6
 80088b0:	d006      	beq.n	80088c0 <_dtoa_r+0x7a0>
 80088b2:	ee18 1a10 	vmov	r1, s16
 80088b6:	4620      	mov	r0, r4
 80088b8:	f001 f9f2 	bl	8009ca0 <__pow5mult>
 80088bc:	ee08 0a10 	vmov	s16, r0
 80088c0:	2101      	movs	r1, #1
 80088c2:	4620      	mov	r0, r4
 80088c4:	f001 f92c 	bl	8009b20 <__i2b>
 80088c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	4606      	mov	r6, r0
 80088ce:	f340 8088 	ble.w	80089e2 <_dtoa_r+0x8c2>
 80088d2:	461a      	mov	r2, r3
 80088d4:	4601      	mov	r1, r0
 80088d6:	4620      	mov	r0, r4
 80088d8:	f001 f9e2 	bl	8009ca0 <__pow5mult>
 80088dc:	9b06      	ldr	r3, [sp, #24]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	4606      	mov	r6, r0
 80088e2:	f340 8081 	ble.w	80089e8 <_dtoa_r+0x8c8>
 80088e6:	f04f 0800 	mov.w	r8, #0
 80088ea:	6933      	ldr	r3, [r6, #16]
 80088ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80088f0:	6918      	ldr	r0, [r3, #16]
 80088f2:	f001 f8c5 	bl	8009a80 <__hi0bits>
 80088f6:	f1c0 0020 	rsb	r0, r0, #32
 80088fa:	9b05      	ldr	r3, [sp, #20]
 80088fc:	4418      	add	r0, r3
 80088fe:	f010 001f 	ands.w	r0, r0, #31
 8008902:	f000 8092 	beq.w	8008a2a <_dtoa_r+0x90a>
 8008906:	f1c0 0320 	rsb	r3, r0, #32
 800890a:	2b04      	cmp	r3, #4
 800890c:	f340 808a 	ble.w	8008a24 <_dtoa_r+0x904>
 8008910:	f1c0 001c 	rsb	r0, r0, #28
 8008914:	9b04      	ldr	r3, [sp, #16]
 8008916:	4403      	add	r3, r0
 8008918:	9304      	str	r3, [sp, #16]
 800891a:	9b05      	ldr	r3, [sp, #20]
 800891c:	4403      	add	r3, r0
 800891e:	4405      	add	r5, r0
 8008920:	9305      	str	r3, [sp, #20]
 8008922:	9b04      	ldr	r3, [sp, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	dd07      	ble.n	8008938 <_dtoa_r+0x818>
 8008928:	ee18 1a10 	vmov	r1, s16
 800892c:	461a      	mov	r2, r3
 800892e:	4620      	mov	r0, r4
 8008930:	f001 fa10 	bl	8009d54 <__lshift>
 8008934:	ee08 0a10 	vmov	s16, r0
 8008938:	9b05      	ldr	r3, [sp, #20]
 800893a:	2b00      	cmp	r3, #0
 800893c:	dd05      	ble.n	800894a <_dtoa_r+0x82a>
 800893e:	4631      	mov	r1, r6
 8008940:	461a      	mov	r2, r3
 8008942:	4620      	mov	r0, r4
 8008944:	f001 fa06 	bl	8009d54 <__lshift>
 8008948:	4606      	mov	r6, r0
 800894a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800894c:	2b00      	cmp	r3, #0
 800894e:	d06e      	beq.n	8008a2e <_dtoa_r+0x90e>
 8008950:	ee18 0a10 	vmov	r0, s16
 8008954:	4631      	mov	r1, r6
 8008956:	f001 fa6d 	bl	8009e34 <__mcmp>
 800895a:	2800      	cmp	r0, #0
 800895c:	da67      	bge.n	8008a2e <_dtoa_r+0x90e>
 800895e:	9b00      	ldr	r3, [sp, #0]
 8008960:	3b01      	subs	r3, #1
 8008962:	ee18 1a10 	vmov	r1, s16
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	220a      	movs	r2, #10
 800896a:	2300      	movs	r3, #0
 800896c:	4620      	mov	r0, r4
 800896e:	f000 fff7 	bl	8009960 <__multadd>
 8008972:	9b08      	ldr	r3, [sp, #32]
 8008974:	ee08 0a10 	vmov	s16, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 81b1 	beq.w	8008ce0 <_dtoa_r+0xbc0>
 800897e:	2300      	movs	r3, #0
 8008980:	4639      	mov	r1, r7
 8008982:	220a      	movs	r2, #10
 8008984:	4620      	mov	r0, r4
 8008986:	f000 ffeb 	bl	8009960 <__multadd>
 800898a:	9b02      	ldr	r3, [sp, #8]
 800898c:	2b00      	cmp	r3, #0
 800898e:	4607      	mov	r7, r0
 8008990:	f300 808e 	bgt.w	8008ab0 <_dtoa_r+0x990>
 8008994:	9b06      	ldr	r3, [sp, #24]
 8008996:	2b02      	cmp	r3, #2
 8008998:	dc51      	bgt.n	8008a3e <_dtoa_r+0x91e>
 800899a:	e089      	b.n	8008ab0 <_dtoa_r+0x990>
 800899c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800899e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089a2:	e74b      	b.n	800883c <_dtoa_r+0x71c>
 80089a4:	9b03      	ldr	r3, [sp, #12]
 80089a6:	1e5e      	subs	r6, r3, #1
 80089a8:	9b07      	ldr	r3, [sp, #28]
 80089aa:	42b3      	cmp	r3, r6
 80089ac:	bfbf      	itttt	lt
 80089ae:	9b07      	ldrlt	r3, [sp, #28]
 80089b0:	9607      	strlt	r6, [sp, #28]
 80089b2:	1af2      	sublt	r2, r6, r3
 80089b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80089b6:	bfb6      	itet	lt
 80089b8:	189b      	addlt	r3, r3, r2
 80089ba:	1b9e      	subge	r6, r3, r6
 80089bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80089be:	9b03      	ldr	r3, [sp, #12]
 80089c0:	bfb8      	it	lt
 80089c2:	2600      	movlt	r6, #0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	bfb7      	itett	lt
 80089c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80089cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80089d0:	1a9d      	sublt	r5, r3, r2
 80089d2:	2300      	movlt	r3, #0
 80089d4:	e734      	b.n	8008840 <_dtoa_r+0x720>
 80089d6:	9e07      	ldr	r6, [sp, #28]
 80089d8:	9d04      	ldr	r5, [sp, #16]
 80089da:	9f08      	ldr	r7, [sp, #32]
 80089dc:	e73b      	b.n	8008856 <_dtoa_r+0x736>
 80089de:	9a07      	ldr	r2, [sp, #28]
 80089e0:	e767      	b.n	80088b2 <_dtoa_r+0x792>
 80089e2:	9b06      	ldr	r3, [sp, #24]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	dc18      	bgt.n	8008a1a <_dtoa_r+0x8fa>
 80089e8:	f1ba 0f00 	cmp.w	sl, #0
 80089ec:	d115      	bne.n	8008a1a <_dtoa_r+0x8fa>
 80089ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089f2:	b993      	cbnz	r3, 8008a1a <_dtoa_r+0x8fa>
 80089f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089f8:	0d1b      	lsrs	r3, r3, #20
 80089fa:	051b      	lsls	r3, r3, #20
 80089fc:	b183      	cbz	r3, 8008a20 <_dtoa_r+0x900>
 80089fe:	9b04      	ldr	r3, [sp, #16]
 8008a00:	3301      	adds	r3, #1
 8008a02:	9304      	str	r3, [sp, #16]
 8008a04:	9b05      	ldr	r3, [sp, #20]
 8008a06:	3301      	adds	r3, #1
 8008a08:	9305      	str	r3, [sp, #20]
 8008a0a:	f04f 0801 	mov.w	r8, #1
 8008a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f47f af6a 	bne.w	80088ea <_dtoa_r+0x7ca>
 8008a16:	2001      	movs	r0, #1
 8008a18:	e76f      	b.n	80088fa <_dtoa_r+0x7da>
 8008a1a:	f04f 0800 	mov.w	r8, #0
 8008a1e:	e7f6      	b.n	8008a0e <_dtoa_r+0x8ee>
 8008a20:	4698      	mov	r8, r3
 8008a22:	e7f4      	b.n	8008a0e <_dtoa_r+0x8ee>
 8008a24:	f43f af7d 	beq.w	8008922 <_dtoa_r+0x802>
 8008a28:	4618      	mov	r0, r3
 8008a2a:	301c      	adds	r0, #28
 8008a2c:	e772      	b.n	8008914 <_dtoa_r+0x7f4>
 8008a2e:	9b03      	ldr	r3, [sp, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dc37      	bgt.n	8008aa4 <_dtoa_r+0x984>
 8008a34:	9b06      	ldr	r3, [sp, #24]
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	dd34      	ble.n	8008aa4 <_dtoa_r+0x984>
 8008a3a:	9b03      	ldr	r3, [sp, #12]
 8008a3c:	9302      	str	r3, [sp, #8]
 8008a3e:	9b02      	ldr	r3, [sp, #8]
 8008a40:	b96b      	cbnz	r3, 8008a5e <_dtoa_r+0x93e>
 8008a42:	4631      	mov	r1, r6
 8008a44:	2205      	movs	r2, #5
 8008a46:	4620      	mov	r0, r4
 8008a48:	f000 ff8a 	bl	8009960 <__multadd>
 8008a4c:	4601      	mov	r1, r0
 8008a4e:	4606      	mov	r6, r0
 8008a50:	ee18 0a10 	vmov	r0, s16
 8008a54:	f001 f9ee 	bl	8009e34 <__mcmp>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	f73f adbb 	bgt.w	80085d4 <_dtoa_r+0x4b4>
 8008a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a60:	9d01      	ldr	r5, [sp, #4]
 8008a62:	43db      	mvns	r3, r3
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	f04f 0800 	mov.w	r8, #0
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f000 ff55 	bl	800991c <_Bfree>
 8008a72:	2f00      	cmp	r7, #0
 8008a74:	f43f aea4 	beq.w	80087c0 <_dtoa_r+0x6a0>
 8008a78:	f1b8 0f00 	cmp.w	r8, #0
 8008a7c:	d005      	beq.n	8008a8a <_dtoa_r+0x96a>
 8008a7e:	45b8      	cmp	r8, r7
 8008a80:	d003      	beq.n	8008a8a <_dtoa_r+0x96a>
 8008a82:	4641      	mov	r1, r8
 8008a84:	4620      	mov	r0, r4
 8008a86:	f000 ff49 	bl	800991c <_Bfree>
 8008a8a:	4639      	mov	r1, r7
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f000 ff45 	bl	800991c <_Bfree>
 8008a92:	e695      	b.n	80087c0 <_dtoa_r+0x6a0>
 8008a94:	2600      	movs	r6, #0
 8008a96:	4637      	mov	r7, r6
 8008a98:	e7e1      	b.n	8008a5e <_dtoa_r+0x93e>
 8008a9a:	9700      	str	r7, [sp, #0]
 8008a9c:	4637      	mov	r7, r6
 8008a9e:	e599      	b.n	80085d4 <_dtoa_r+0x4b4>
 8008aa0:	40240000 	.word	0x40240000
 8008aa4:	9b08      	ldr	r3, [sp, #32]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f000 80ca 	beq.w	8008c40 <_dtoa_r+0xb20>
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	9302      	str	r3, [sp, #8]
 8008ab0:	2d00      	cmp	r5, #0
 8008ab2:	dd05      	ble.n	8008ac0 <_dtoa_r+0x9a0>
 8008ab4:	4639      	mov	r1, r7
 8008ab6:	462a      	mov	r2, r5
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f001 f94b 	bl	8009d54 <__lshift>
 8008abe:	4607      	mov	r7, r0
 8008ac0:	f1b8 0f00 	cmp.w	r8, #0
 8008ac4:	d05b      	beq.n	8008b7e <_dtoa_r+0xa5e>
 8008ac6:	6879      	ldr	r1, [r7, #4]
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f000 fee7 	bl	800989c <_Balloc>
 8008ace:	4605      	mov	r5, r0
 8008ad0:	b928      	cbnz	r0, 8008ade <_dtoa_r+0x9be>
 8008ad2:	4b87      	ldr	r3, [pc, #540]	; (8008cf0 <_dtoa_r+0xbd0>)
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008ada:	f7ff bb3b 	b.w	8008154 <_dtoa_r+0x34>
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	3202      	adds	r2, #2
 8008ae2:	0092      	lsls	r2, r2, #2
 8008ae4:	f107 010c 	add.w	r1, r7, #12
 8008ae8:	300c      	adds	r0, #12
 8008aea:	f000 febd 	bl	8009868 <memcpy>
 8008aee:	2201      	movs	r2, #1
 8008af0:	4629      	mov	r1, r5
 8008af2:	4620      	mov	r0, r4
 8008af4:	f001 f92e 	bl	8009d54 <__lshift>
 8008af8:	9b01      	ldr	r3, [sp, #4]
 8008afa:	f103 0901 	add.w	r9, r3, #1
 8008afe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008b02:	4413      	add	r3, r2
 8008b04:	9305      	str	r3, [sp, #20]
 8008b06:	f00a 0301 	and.w	r3, sl, #1
 8008b0a:	46b8      	mov	r8, r7
 8008b0c:	9304      	str	r3, [sp, #16]
 8008b0e:	4607      	mov	r7, r0
 8008b10:	4631      	mov	r1, r6
 8008b12:	ee18 0a10 	vmov	r0, s16
 8008b16:	f7ff fa77 	bl	8008008 <quorem>
 8008b1a:	4641      	mov	r1, r8
 8008b1c:	9002      	str	r0, [sp, #8]
 8008b1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b22:	ee18 0a10 	vmov	r0, s16
 8008b26:	f001 f985 	bl	8009e34 <__mcmp>
 8008b2a:	463a      	mov	r2, r7
 8008b2c:	9003      	str	r0, [sp, #12]
 8008b2e:	4631      	mov	r1, r6
 8008b30:	4620      	mov	r0, r4
 8008b32:	f001 f99b 	bl	8009e6c <__mdiff>
 8008b36:	68c2      	ldr	r2, [r0, #12]
 8008b38:	f109 3bff 	add.w	fp, r9, #4294967295
 8008b3c:	4605      	mov	r5, r0
 8008b3e:	bb02      	cbnz	r2, 8008b82 <_dtoa_r+0xa62>
 8008b40:	4601      	mov	r1, r0
 8008b42:	ee18 0a10 	vmov	r0, s16
 8008b46:	f001 f975 	bl	8009e34 <__mcmp>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4620      	mov	r0, r4
 8008b50:	9207      	str	r2, [sp, #28]
 8008b52:	f000 fee3 	bl	800991c <_Bfree>
 8008b56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008b5a:	ea43 0102 	orr.w	r1, r3, r2
 8008b5e:	9b04      	ldr	r3, [sp, #16]
 8008b60:	430b      	orrs	r3, r1
 8008b62:	464d      	mov	r5, r9
 8008b64:	d10f      	bne.n	8008b86 <_dtoa_r+0xa66>
 8008b66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b6a:	d02a      	beq.n	8008bc2 <_dtoa_r+0xaa2>
 8008b6c:	9b03      	ldr	r3, [sp, #12]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	dd02      	ble.n	8008b78 <_dtoa_r+0xa58>
 8008b72:	9b02      	ldr	r3, [sp, #8]
 8008b74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008b78:	f88b a000 	strb.w	sl, [fp]
 8008b7c:	e775      	b.n	8008a6a <_dtoa_r+0x94a>
 8008b7e:	4638      	mov	r0, r7
 8008b80:	e7ba      	b.n	8008af8 <_dtoa_r+0x9d8>
 8008b82:	2201      	movs	r2, #1
 8008b84:	e7e2      	b.n	8008b4c <_dtoa_r+0xa2c>
 8008b86:	9b03      	ldr	r3, [sp, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	db04      	blt.n	8008b96 <_dtoa_r+0xa76>
 8008b8c:	9906      	ldr	r1, [sp, #24]
 8008b8e:	430b      	orrs	r3, r1
 8008b90:	9904      	ldr	r1, [sp, #16]
 8008b92:	430b      	orrs	r3, r1
 8008b94:	d122      	bne.n	8008bdc <_dtoa_r+0xabc>
 8008b96:	2a00      	cmp	r2, #0
 8008b98:	ddee      	ble.n	8008b78 <_dtoa_r+0xa58>
 8008b9a:	ee18 1a10 	vmov	r1, s16
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f001 f8d7 	bl	8009d54 <__lshift>
 8008ba6:	4631      	mov	r1, r6
 8008ba8:	ee08 0a10 	vmov	s16, r0
 8008bac:	f001 f942 	bl	8009e34 <__mcmp>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	dc03      	bgt.n	8008bbc <_dtoa_r+0xa9c>
 8008bb4:	d1e0      	bne.n	8008b78 <_dtoa_r+0xa58>
 8008bb6:	f01a 0f01 	tst.w	sl, #1
 8008bba:	d0dd      	beq.n	8008b78 <_dtoa_r+0xa58>
 8008bbc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bc0:	d1d7      	bne.n	8008b72 <_dtoa_r+0xa52>
 8008bc2:	2339      	movs	r3, #57	; 0x39
 8008bc4:	f88b 3000 	strb.w	r3, [fp]
 8008bc8:	462b      	mov	r3, r5
 8008bca:	461d      	mov	r5, r3
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008bd2:	2a39      	cmp	r2, #57	; 0x39
 8008bd4:	d071      	beq.n	8008cba <_dtoa_r+0xb9a>
 8008bd6:	3201      	adds	r2, #1
 8008bd8:	701a      	strb	r2, [r3, #0]
 8008bda:	e746      	b.n	8008a6a <_dtoa_r+0x94a>
 8008bdc:	2a00      	cmp	r2, #0
 8008bde:	dd07      	ble.n	8008bf0 <_dtoa_r+0xad0>
 8008be0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008be4:	d0ed      	beq.n	8008bc2 <_dtoa_r+0xaa2>
 8008be6:	f10a 0301 	add.w	r3, sl, #1
 8008bea:	f88b 3000 	strb.w	r3, [fp]
 8008bee:	e73c      	b.n	8008a6a <_dtoa_r+0x94a>
 8008bf0:	9b05      	ldr	r3, [sp, #20]
 8008bf2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008bf6:	4599      	cmp	r9, r3
 8008bf8:	d047      	beq.n	8008c8a <_dtoa_r+0xb6a>
 8008bfa:	ee18 1a10 	vmov	r1, s16
 8008bfe:	2300      	movs	r3, #0
 8008c00:	220a      	movs	r2, #10
 8008c02:	4620      	mov	r0, r4
 8008c04:	f000 feac 	bl	8009960 <__multadd>
 8008c08:	45b8      	cmp	r8, r7
 8008c0a:	ee08 0a10 	vmov	s16, r0
 8008c0e:	f04f 0300 	mov.w	r3, #0
 8008c12:	f04f 020a 	mov.w	r2, #10
 8008c16:	4641      	mov	r1, r8
 8008c18:	4620      	mov	r0, r4
 8008c1a:	d106      	bne.n	8008c2a <_dtoa_r+0xb0a>
 8008c1c:	f000 fea0 	bl	8009960 <__multadd>
 8008c20:	4680      	mov	r8, r0
 8008c22:	4607      	mov	r7, r0
 8008c24:	f109 0901 	add.w	r9, r9, #1
 8008c28:	e772      	b.n	8008b10 <_dtoa_r+0x9f0>
 8008c2a:	f000 fe99 	bl	8009960 <__multadd>
 8008c2e:	4639      	mov	r1, r7
 8008c30:	4680      	mov	r8, r0
 8008c32:	2300      	movs	r3, #0
 8008c34:	220a      	movs	r2, #10
 8008c36:	4620      	mov	r0, r4
 8008c38:	f000 fe92 	bl	8009960 <__multadd>
 8008c3c:	4607      	mov	r7, r0
 8008c3e:	e7f1      	b.n	8008c24 <_dtoa_r+0xb04>
 8008c40:	9b03      	ldr	r3, [sp, #12]
 8008c42:	9302      	str	r3, [sp, #8]
 8008c44:	9d01      	ldr	r5, [sp, #4]
 8008c46:	ee18 0a10 	vmov	r0, s16
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	f7ff f9dc 	bl	8008008 <quorem>
 8008c50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c54:	9b01      	ldr	r3, [sp, #4]
 8008c56:	f805 ab01 	strb.w	sl, [r5], #1
 8008c5a:	1aea      	subs	r2, r5, r3
 8008c5c:	9b02      	ldr	r3, [sp, #8]
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	dd09      	ble.n	8008c76 <_dtoa_r+0xb56>
 8008c62:	ee18 1a10 	vmov	r1, s16
 8008c66:	2300      	movs	r3, #0
 8008c68:	220a      	movs	r2, #10
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f000 fe78 	bl	8009960 <__multadd>
 8008c70:	ee08 0a10 	vmov	s16, r0
 8008c74:	e7e7      	b.n	8008c46 <_dtoa_r+0xb26>
 8008c76:	9b02      	ldr	r3, [sp, #8]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	bfc8      	it	gt
 8008c7c:	461d      	movgt	r5, r3
 8008c7e:	9b01      	ldr	r3, [sp, #4]
 8008c80:	bfd8      	it	le
 8008c82:	2501      	movle	r5, #1
 8008c84:	441d      	add	r5, r3
 8008c86:	f04f 0800 	mov.w	r8, #0
 8008c8a:	ee18 1a10 	vmov	r1, s16
 8008c8e:	2201      	movs	r2, #1
 8008c90:	4620      	mov	r0, r4
 8008c92:	f001 f85f 	bl	8009d54 <__lshift>
 8008c96:	4631      	mov	r1, r6
 8008c98:	ee08 0a10 	vmov	s16, r0
 8008c9c:	f001 f8ca 	bl	8009e34 <__mcmp>
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	dc91      	bgt.n	8008bc8 <_dtoa_r+0xaa8>
 8008ca4:	d102      	bne.n	8008cac <_dtoa_r+0xb8c>
 8008ca6:	f01a 0f01 	tst.w	sl, #1
 8008caa:	d18d      	bne.n	8008bc8 <_dtoa_r+0xaa8>
 8008cac:	462b      	mov	r3, r5
 8008cae:	461d      	mov	r5, r3
 8008cb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cb4:	2a30      	cmp	r2, #48	; 0x30
 8008cb6:	d0fa      	beq.n	8008cae <_dtoa_r+0xb8e>
 8008cb8:	e6d7      	b.n	8008a6a <_dtoa_r+0x94a>
 8008cba:	9a01      	ldr	r2, [sp, #4]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d184      	bne.n	8008bca <_dtoa_r+0xaaa>
 8008cc0:	9b00      	ldr	r3, [sp, #0]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	2331      	movs	r3, #49	; 0x31
 8008cc8:	7013      	strb	r3, [r2, #0]
 8008cca:	e6ce      	b.n	8008a6a <_dtoa_r+0x94a>
 8008ccc:	4b09      	ldr	r3, [pc, #36]	; (8008cf4 <_dtoa_r+0xbd4>)
 8008cce:	f7ff ba95 	b.w	80081fc <_dtoa_r+0xdc>
 8008cd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f47f aa6e 	bne.w	80081b6 <_dtoa_r+0x96>
 8008cda:	4b07      	ldr	r3, [pc, #28]	; (8008cf8 <_dtoa_r+0xbd8>)
 8008cdc:	f7ff ba8e 	b.w	80081fc <_dtoa_r+0xdc>
 8008ce0:	9b02      	ldr	r3, [sp, #8]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	dcae      	bgt.n	8008c44 <_dtoa_r+0xb24>
 8008ce6:	9b06      	ldr	r3, [sp, #24]
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	f73f aea8 	bgt.w	8008a3e <_dtoa_r+0x91e>
 8008cee:	e7a9      	b.n	8008c44 <_dtoa_r+0xb24>
 8008cf0:	0800afe8 	.word	0x0800afe8
 8008cf4:	0800ae5c 	.word	0x0800ae5c
 8008cf8:	0800af80 	.word	0x0800af80

08008cfc <__sflush_r>:
 8008cfc:	898a      	ldrh	r2, [r1, #12]
 8008cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d02:	4605      	mov	r5, r0
 8008d04:	0710      	lsls	r0, r2, #28
 8008d06:	460c      	mov	r4, r1
 8008d08:	d458      	bmi.n	8008dbc <__sflush_r+0xc0>
 8008d0a:	684b      	ldr	r3, [r1, #4]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	dc05      	bgt.n	8008d1c <__sflush_r+0x20>
 8008d10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	dc02      	bgt.n	8008d1c <__sflush_r+0x20>
 8008d16:	2000      	movs	r0, #0
 8008d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d1e:	2e00      	cmp	r6, #0
 8008d20:	d0f9      	beq.n	8008d16 <__sflush_r+0x1a>
 8008d22:	2300      	movs	r3, #0
 8008d24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d28:	682f      	ldr	r7, [r5, #0]
 8008d2a:	602b      	str	r3, [r5, #0]
 8008d2c:	d032      	beq.n	8008d94 <__sflush_r+0x98>
 8008d2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	075a      	lsls	r2, r3, #29
 8008d34:	d505      	bpl.n	8008d42 <__sflush_r+0x46>
 8008d36:	6863      	ldr	r3, [r4, #4]
 8008d38:	1ac0      	subs	r0, r0, r3
 8008d3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d3c:	b10b      	cbz	r3, 8008d42 <__sflush_r+0x46>
 8008d3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d40:	1ac0      	subs	r0, r0, r3
 8008d42:	2300      	movs	r3, #0
 8008d44:	4602      	mov	r2, r0
 8008d46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d48:	6a21      	ldr	r1, [r4, #32]
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	47b0      	blx	r6
 8008d4e:	1c43      	adds	r3, r0, #1
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	d106      	bne.n	8008d62 <__sflush_r+0x66>
 8008d54:	6829      	ldr	r1, [r5, #0]
 8008d56:	291d      	cmp	r1, #29
 8008d58:	d82c      	bhi.n	8008db4 <__sflush_r+0xb8>
 8008d5a:	4a2a      	ldr	r2, [pc, #168]	; (8008e04 <__sflush_r+0x108>)
 8008d5c:	40ca      	lsrs	r2, r1
 8008d5e:	07d6      	lsls	r6, r2, #31
 8008d60:	d528      	bpl.n	8008db4 <__sflush_r+0xb8>
 8008d62:	2200      	movs	r2, #0
 8008d64:	6062      	str	r2, [r4, #4]
 8008d66:	04d9      	lsls	r1, r3, #19
 8008d68:	6922      	ldr	r2, [r4, #16]
 8008d6a:	6022      	str	r2, [r4, #0]
 8008d6c:	d504      	bpl.n	8008d78 <__sflush_r+0x7c>
 8008d6e:	1c42      	adds	r2, r0, #1
 8008d70:	d101      	bne.n	8008d76 <__sflush_r+0x7a>
 8008d72:	682b      	ldr	r3, [r5, #0]
 8008d74:	b903      	cbnz	r3, 8008d78 <__sflush_r+0x7c>
 8008d76:	6560      	str	r0, [r4, #84]	; 0x54
 8008d78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d7a:	602f      	str	r7, [r5, #0]
 8008d7c:	2900      	cmp	r1, #0
 8008d7e:	d0ca      	beq.n	8008d16 <__sflush_r+0x1a>
 8008d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d84:	4299      	cmp	r1, r3
 8008d86:	d002      	beq.n	8008d8e <__sflush_r+0x92>
 8008d88:	4628      	mov	r0, r5
 8008d8a:	f7fd fbcf 	bl	800652c <_free_r>
 8008d8e:	2000      	movs	r0, #0
 8008d90:	6360      	str	r0, [r4, #52]	; 0x34
 8008d92:	e7c1      	b.n	8008d18 <__sflush_r+0x1c>
 8008d94:	6a21      	ldr	r1, [r4, #32]
 8008d96:	2301      	movs	r3, #1
 8008d98:	4628      	mov	r0, r5
 8008d9a:	47b0      	blx	r6
 8008d9c:	1c41      	adds	r1, r0, #1
 8008d9e:	d1c7      	bne.n	8008d30 <__sflush_r+0x34>
 8008da0:	682b      	ldr	r3, [r5, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d0c4      	beq.n	8008d30 <__sflush_r+0x34>
 8008da6:	2b1d      	cmp	r3, #29
 8008da8:	d001      	beq.n	8008dae <__sflush_r+0xb2>
 8008daa:	2b16      	cmp	r3, #22
 8008dac:	d101      	bne.n	8008db2 <__sflush_r+0xb6>
 8008dae:	602f      	str	r7, [r5, #0]
 8008db0:	e7b1      	b.n	8008d16 <__sflush_r+0x1a>
 8008db2:	89a3      	ldrh	r3, [r4, #12]
 8008db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db8:	81a3      	strh	r3, [r4, #12]
 8008dba:	e7ad      	b.n	8008d18 <__sflush_r+0x1c>
 8008dbc:	690f      	ldr	r7, [r1, #16]
 8008dbe:	2f00      	cmp	r7, #0
 8008dc0:	d0a9      	beq.n	8008d16 <__sflush_r+0x1a>
 8008dc2:	0793      	lsls	r3, r2, #30
 8008dc4:	680e      	ldr	r6, [r1, #0]
 8008dc6:	bf08      	it	eq
 8008dc8:	694b      	ldreq	r3, [r1, #20]
 8008dca:	600f      	str	r7, [r1, #0]
 8008dcc:	bf18      	it	ne
 8008dce:	2300      	movne	r3, #0
 8008dd0:	eba6 0807 	sub.w	r8, r6, r7
 8008dd4:	608b      	str	r3, [r1, #8]
 8008dd6:	f1b8 0f00 	cmp.w	r8, #0
 8008dda:	dd9c      	ble.n	8008d16 <__sflush_r+0x1a>
 8008ddc:	6a21      	ldr	r1, [r4, #32]
 8008dde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008de0:	4643      	mov	r3, r8
 8008de2:	463a      	mov	r2, r7
 8008de4:	4628      	mov	r0, r5
 8008de6:	47b0      	blx	r6
 8008de8:	2800      	cmp	r0, #0
 8008dea:	dc06      	bgt.n	8008dfa <__sflush_r+0xfe>
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008df2:	81a3      	strh	r3, [r4, #12]
 8008df4:	f04f 30ff 	mov.w	r0, #4294967295
 8008df8:	e78e      	b.n	8008d18 <__sflush_r+0x1c>
 8008dfa:	4407      	add	r7, r0
 8008dfc:	eba8 0800 	sub.w	r8, r8, r0
 8008e00:	e7e9      	b.n	8008dd6 <__sflush_r+0xda>
 8008e02:	bf00      	nop
 8008e04:	20400001 	.word	0x20400001

08008e08 <_fflush_r>:
 8008e08:	b538      	push	{r3, r4, r5, lr}
 8008e0a:	690b      	ldr	r3, [r1, #16]
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	460c      	mov	r4, r1
 8008e10:	b913      	cbnz	r3, 8008e18 <_fflush_r+0x10>
 8008e12:	2500      	movs	r5, #0
 8008e14:	4628      	mov	r0, r5
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	b118      	cbz	r0, 8008e22 <_fflush_r+0x1a>
 8008e1a:	6983      	ldr	r3, [r0, #24]
 8008e1c:	b90b      	cbnz	r3, 8008e22 <_fflush_r+0x1a>
 8008e1e:	f000 f887 	bl	8008f30 <__sinit>
 8008e22:	4b14      	ldr	r3, [pc, #80]	; (8008e74 <_fflush_r+0x6c>)
 8008e24:	429c      	cmp	r4, r3
 8008e26:	d11b      	bne.n	8008e60 <_fflush_r+0x58>
 8008e28:	686c      	ldr	r4, [r5, #4]
 8008e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d0ef      	beq.n	8008e12 <_fflush_r+0xa>
 8008e32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e34:	07d0      	lsls	r0, r2, #31
 8008e36:	d404      	bmi.n	8008e42 <_fflush_r+0x3a>
 8008e38:	0599      	lsls	r1, r3, #22
 8008e3a:	d402      	bmi.n	8008e42 <_fflush_r+0x3a>
 8008e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e3e:	f000 fc9a 	bl	8009776 <__retarget_lock_acquire_recursive>
 8008e42:	4628      	mov	r0, r5
 8008e44:	4621      	mov	r1, r4
 8008e46:	f7ff ff59 	bl	8008cfc <__sflush_r>
 8008e4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e4c:	07da      	lsls	r2, r3, #31
 8008e4e:	4605      	mov	r5, r0
 8008e50:	d4e0      	bmi.n	8008e14 <_fflush_r+0xc>
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	059b      	lsls	r3, r3, #22
 8008e56:	d4dd      	bmi.n	8008e14 <_fflush_r+0xc>
 8008e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e5a:	f000 fc8d 	bl	8009778 <__retarget_lock_release_recursive>
 8008e5e:	e7d9      	b.n	8008e14 <_fflush_r+0xc>
 8008e60:	4b05      	ldr	r3, [pc, #20]	; (8008e78 <_fflush_r+0x70>)
 8008e62:	429c      	cmp	r4, r3
 8008e64:	d101      	bne.n	8008e6a <_fflush_r+0x62>
 8008e66:	68ac      	ldr	r4, [r5, #8]
 8008e68:	e7df      	b.n	8008e2a <_fflush_r+0x22>
 8008e6a:	4b04      	ldr	r3, [pc, #16]	; (8008e7c <_fflush_r+0x74>)
 8008e6c:	429c      	cmp	r4, r3
 8008e6e:	bf08      	it	eq
 8008e70:	68ec      	ldreq	r4, [r5, #12]
 8008e72:	e7da      	b.n	8008e2a <_fflush_r+0x22>
 8008e74:	0800b01c 	.word	0x0800b01c
 8008e78:	0800b03c 	.word	0x0800b03c
 8008e7c:	0800affc 	.word	0x0800affc

08008e80 <std>:
 8008e80:	2300      	movs	r3, #0
 8008e82:	b510      	push	{r4, lr}
 8008e84:	4604      	mov	r4, r0
 8008e86:	e9c0 3300 	strd	r3, r3, [r0]
 8008e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e8e:	6083      	str	r3, [r0, #8]
 8008e90:	8181      	strh	r1, [r0, #12]
 8008e92:	6643      	str	r3, [r0, #100]	; 0x64
 8008e94:	81c2      	strh	r2, [r0, #14]
 8008e96:	6183      	str	r3, [r0, #24]
 8008e98:	4619      	mov	r1, r3
 8008e9a:	2208      	movs	r2, #8
 8008e9c:	305c      	adds	r0, #92	; 0x5c
 8008e9e:	f7fd fb3d 	bl	800651c <memset>
 8008ea2:	4b05      	ldr	r3, [pc, #20]	; (8008eb8 <std+0x38>)
 8008ea4:	6263      	str	r3, [r4, #36]	; 0x24
 8008ea6:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <std+0x3c>)
 8008ea8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008eaa:	4b05      	ldr	r3, [pc, #20]	; (8008ec0 <std+0x40>)
 8008eac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008eae:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <std+0x44>)
 8008eb0:	6224      	str	r4, [r4, #32]
 8008eb2:	6323      	str	r3, [r4, #48]	; 0x30
 8008eb4:	bd10      	pop	{r4, pc}
 8008eb6:	bf00      	nop
 8008eb8:	0800a7c9 	.word	0x0800a7c9
 8008ebc:	0800a7eb 	.word	0x0800a7eb
 8008ec0:	0800a823 	.word	0x0800a823
 8008ec4:	0800a847 	.word	0x0800a847

08008ec8 <_cleanup_r>:
 8008ec8:	4901      	ldr	r1, [pc, #4]	; (8008ed0 <_cleanup_r+0x8>)
 8008eca:	f000 b8c1 	b.w	8009050 <_fwalk_reent>
 8008ece:	bf00      	nop
 8008ed0:	08008e09 	.word	0x08008e09

08008ed4 <__sfmoreglue>:
 8008ed4:	b570      	push	{r4, r5, r6, lr}
 8008ed6:	2268      	movs	r2, #104	; 0x68
 8008ed8:	1e4d      	subs	r5, r1, #1
 8008eda:	4355      	muls	r5, r2
 8008edc:	460e      	mov	r6, r1
 8008ede:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ee2:	f7fd fb8f 	bl	8006604 <_malloc_r>
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	b140      	cbz	r0, 8008efc <__sfmoreglue+0x28>
 8008eea:	2100      	movs	r1, #0
 8008eec:	e9c0 1600 	strd	r1, r6, [r0]
 8008ef0:	300c      	adds	r0, #12
 8008ef2:	60a0      	str	r0, [r4, #8]
 8008ef4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ef8:	f7fd fb10 	bl	800651c <memset>
 8008efc:	4620      	mov	r0, r4
 8008efe:	bd70      	pop	{r4, r5, r6, pc}

08008f00 <__sfp_lock_acquire>:
 8008f00:	4801      	ldr	r0, [pc, #4]	; (8008f08 <__sfp_lock_acquire+0x8>)
 8008f02:	f000 bc38 	b.w	8009776 <__retarget_lock_acquire_recursive>
 8008f06:	bf00      	nop
 8008f08:	20000a11 	.word	0x20000a11

08008f0c <__sfp_lock_release>:
 8008f0c:	4801      	ldr	r0, [pc, #4]	; (8008f14 <__sfp_lock_release+0x8>)
 8008f0e:	f000 bc33 	b.w	8009778 <__retarget_lock_release_recursive>
 8008f12:	bf00      	nop
 8008f14:	20000a11 	.word	0x20000a11

08008f18 <__sinit_lock_acquire>:
 8008f18:	4801      	ldr	r0, [pc, #4]	; (8008f20 <__sinit_lock_acquire+0x8>)
 8008f1a:	f000 bc2c 	b.w	8009776 <__retarget_lock_acquire_recursive>
 8008f1e:	bf00      	nop
 8008f20:	20000a12 	.word	0x20000a12

08008f24 <__sinit_lock_release>:
 8008f24:	4801      	ldr	r0, [pc, #4]	; (8008f2c <__sinit_lock_release+0x8>)
 8008f26:	f000 bc27 	b.w	8009778 <__retarget_lock_release_recursive>
 8008f2a:	bf00      	nop
 8008f2c:	20000a12 	.word	0x20000a12

08008f30 <__sinit>:
 8008f30:	b510      	push	{r4, lr}
 8008f32:	4604      	mov	r4, r0
 8008f34:	f7ff fff0 	bl	8008f18 <__sinit_lock_acquire>
 8008f38:	69a3      	ldr	r3, [r4, #24]
 8008f3a:	b11b      	cbz	r3, 8008f44 <__sinit+0x14>
 8008f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f40:	f7ff bff0 	b.w	8008f24 <__sinit_lock_release>
 8008f44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f48:	6523      	str	r3, [r4, #80]	; 0x50
 8008f4a:	4b13      	ldr	r3, [pc, #76]	; (8008f98 <__sinit+0x68>)
 8008f4c:	4a13      	ldr	r2, [pc, #76]	; (8008f9c <__sinit+0x6c>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f52:	42a3      	cmp	r3, r4
 8008f54:	bf04      	itt	eq
 8008f56:	2301      	moveq	r3, #1
 8008f58:	61a3      	streq	r3, [r4, #24]
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f000 f820 	bl	8008fa0 <__sfp>
 8008f60:	6060      	str	r0, [r4, #4]
 8008f62:	4620      	mov	r0, r4
 8008f64:	f000 f81c 	bl	8008fa0 <__sfp>
 8008f68:	60a0      	str	r0, [r4, #8]
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f000 f818 	bl	8008fa0 <__sfp>
 8008f70:	2200      	movs	r2, #0
 8008f72:	60e0      	str	r0, [r4, #12]
 8008f74:	2104      	movs	r1, #4
 8008f76:	6860      	ldr	r0, [r4, #4]
 8008f78:	f7ff ff82 	bl	8008e80 <std>
 8008f7c:	68a0      	ldr	r0, [r4, #8]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	2109      	movs	r1, #9
 8008f82:	f7ff ff7d 	bl	8008e80 <std>
 8008f86:	68e0      	ldr	r0, [r4, #12]
 8008f88:	2202      	movs	r2, #2
 8008f8a:	2112      	movs	r1, #18
 8008f8c:	f7ff ff78 	bl	8008e80 <std>
 8008f90:	2301      	movs	r3, #1
 8008f92:	61a3      	str	r3, [r4, #24]
 8008f94:	e7d2      	b.n	8008f3c <__sinit+0xc>
 8008f96:	bf00      	nop
 8008f98:	0800ae48 	.word	0x0800ae48
 8008f9c:	08008ec9 	.word	0x08008ec9

08008fa0 <__sfp>:
 8008fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa2:	4607      	mov	r7, r0
 8008fa4:	f7ff ffac 	bl	8008f00 <__sfp_lock_acquire>
 8008fa8:	4b1e      	ldr	r3, [pc, #120]	; (8009024 <__sfp+0x84>)
 8008faa:	681e      	ldr	r6, [r3, #0]
 8008fac:	69b3      	ldr	r3, [r6, #24]
 8008fae:	b913      	cbnz	r3, 8008fb6 <__sfp+0x16>
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f7ff ffbd 	bl	8008f30 <__sinit>
 8008fb6:	3648      	adds	r6, #72	; 0x48
 8008fb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	d503      	bpl.n	8008fc8 <__sfp+0x28>
 8008fc0:	6833      	ldr	r3, [r6, #0]
 8008fc2:	b30b      	cbz	r3, 8009008 <__sfp+0x68>
 8008fc4:	6836      	ldr	r6, [r6, #0]
 8008fc6:	e7f7      	b.n	8008fb8 <__sfp+0x18>
 8008fc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008fcc:	b9d5      	cbnz	r5, 8009004 <__sfp+0x64>
 8008fce:	4b16      	ldr	r3, [pc, #88]	; (8009028 <__sfp+0x88>)
 8008fd0:	60e3      	str	r3, [r4, #12]
 8008fd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fd6:	6665      	str	r5, [r4, #100]	; 0x64
 8008fd8:	f000 fbcc 	bl	8009774 <__retarget_lock_init_recursive>
 8008fdc:	f7ff ff96 	bl	8008f0c <__sfp_lock_release>
 8008fe0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008fe4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008fe8:	6025      	str	r5, [r4, #0]
 8008fea:	61a5      	str	r5, [r4, #24]
 8008fec:	2208      	movs	r2, #8
 8008fee:	4629      	mov	r1, r5
 8008ff0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ff4:	f7fd fa92 	bl	800651c <memset>
 8008ff8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ffc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009000:	4620      	mov	r0, r4
 8009002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009004:	3468      	adds	r4, #104	; 0x68
 8009006:	e7d9      	b.n	8008fbc <__sfp+0x1c>
 8009008:	2104      	movs	r1, #4
 800900a:	4638      	mov	r0, r7
 800900c:	f7ff ff62 	bl	8008ed4 <__sfmoreglue>
 8009010:	4604      	mov	r4, r0
 8009012:	6030      	str	r0, [r6, #0]
 8009014:	2800      	cmp	r0, #0
 8009016:	d1d5      	bne.n	8008fc4 <__sfp+0x24>
 8009018:	f7ff ff78 	bl	8008f0c <__sfp_lock_release>
 800901c:	230c      	movs	r3, #12
 800901e:	603b      	str	r3, [r7, #0]
 8009020:	e7ee      	b.n	8009000 <__sfp+0x60>
 8009022:	bf00      	nop
 8009024:	0800ae48 	.word	0x0800ae48
 8009028:	ffff0001 	.word	0xffff0001

0800902c <fiprintf>:
 800902c:	b40e      	push	{r1, r2, r3}
 800902e:	b503      	push	{r0, r1, lr}
 8009030:	4601      	mov	r1, r0
 8009032:	ab03      	add	r3, sp, #12
 8009034:	4805      	ldr	r0, [pc, #20]	; (800904c <fiprintf+0x20>)
 8009036:	f853 2b04 	ldr.w	r2, [r3], #4
 800903a:	6800      	ldr	r0, [r0, #0]
 800903c:	9301      	str	r3, [sp, #4]
 800903e:	f001 fa89 	bl	800a554 <_vfiprintf_r>
 8009042:	b002      	add	sp, #8
 8009044:	f85d eb04 	ldr.w	lr, [sp], #4
 8009048:	b003      	add	sp, #12
 800904a:	4770      	bx	lr
 800904c:	20000070 	.word	0x20000070

08009050 <_fwalk_reent>:
 8009050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009054:	4606      	mov	r6, r0
 8009056:	4688      	mov	r8, r1
 8009058:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800905c:	2700      	movs	r7, #0
 800905e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009062:	f1b9 0901 	subs.w	r9, r9, #1
 8009066:	d505      	bpl.n	8009074 <_fwalk_reent+0x24>
 8009068:	6824      	ldr	r4, [r4, #0]
 800906a:	2c00      	cmp	r4, #0
 800906c:	d1f7      	bne.n	800905e <_fwalk_reent+0xe>
 800906e:	4638      	mov	r0, r7
 8009070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009074:	89ab      	ldrh	r3, [r5, #12]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d907      	bls.n	800908a <_fwalk_reent+0x3a>
 800907a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800907e:	3301      	adds	r3, #1
 8009080:	d003      	beq.n	800908a <_fwalk_reent+0x3a>
 8009082:	4629      	mov	r1, r5
 8009084:	4630      	mov	r0, r6
 8009086:	47c0      	blx	r8
 8009088:	4307      	orrs	r7, r0
 800908a:	3568      	adds	r5, #104	; 0x68
 800908c:	e7e9      	b.n	8009062 <_fwalk_reent+0x12>

0800908e <rshift>:
 800908e:	6903      	ldr	r3, [r0, #16]
 8009090:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009098:	ea4f 1261 	mov.w	r2, r1, asr #5
 800909c:	f100 0414 	add.w	r4, r0, #20
 80090a0:	dd45      	ble.n	800912e <rshift+0xa0>
 80090a2:	f011 011f 	ands.w	r1, r1, #31
 80090a6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80090aa:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80090ae:	d10c      	bne.n	80090ca <rshift+0x3c>
 80090b0:	f100 0710 	add.w	r7, r0, #16
 80090b4:	4629      	mov	r1, r5
 80090b6:	42b1      	cmp	r1, r6
 80090b8:	d334      	bcc.n	8009124 <rshift+0x96>
 80090ba:	1a9b      	subs	r3, r3, r2
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	1eea      	subs	r2, r5, #3
 80090c0:	4296      	cmp	r6, r2
 80090c2:	bf38      	it	cc
 80090c4:	2300      	movcc	r3, #0
 80090c6:	4423      	add	r3, r4
 80090c8:	e015      	b.n	80090f6 <rshift+0x68>
 80090ca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80090ce:	f1c1 0820 	rsb	r8, r1, #32
 80090d2:	40cf      	lsrs	r7, r1
 80090d4:	f105 0e04 	add.w	lr, r5, #4
 80090d8:	46a1      	mov	r9, r4
 80090da:	4576      	cmp	r6, lr
 80090dc:	46f4      	mov	ip, lr
 80090de:	d815      	bhi.n	800910c <rshift+0x7e>
 80090e0:	1a9a      	subs	r2, r3, r2
 80090e2:	0092      	lsls	r2, r2, #2
 80090e4:	3a04      	subs	r2, #4
 80090e6:	3501      	adds	r5, #1
 80090e8:	42ae      	cmp	r6, r5
 80090ea:	bf38      	it	cc
 80090ec:	2200      	movcc	r2, #0
 80090ee:	18a3      	adds	r3, r4, r2
 80090f0:	50a7      	str	r7, [r4, r2]
 80090f2:	b107      	cbz	r7, 80090f6 <rshift+0x68>
 80090f4:	3304      	adds	r3, #4
 80090f6:	1b1a      	subs	r2, r3, r4
 80090f8:	42a3      	cmp	r3, r4
 80090fa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80090fe:	bf08      	it	eq
 8009100:	2300      	moveq	r3, #0
 8009102:	6102      	str	r2, [r0, #16]
 8009104:	bf08      	it	eq
 8009106:	6143      	streq	r3, [r0, #20]
 8009108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800910c:	f8dc c000 	ldr.w	ip, [ip]
 8009110:	fa0c fc08 	lsl.w	ip, ip, r8
 8009114:	ea4c 0707 	orr.w	r7, ip, r7
 8009118:	f849 7b04 	str.w	r7, [r9], #4
 800911c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009120:	40cf      	lsrs	r7, r1
 8009122:	e7da      	b.n	80090da <rshift+0x4c>
 8009124:	f851 cb04 	ldr.w	ip, [r1], #4
 8009128:	f847 cf04 	str.w	ip, [r7, #4]!
 800912c:	e7c3      	b.n	80090b6 <rshift+0x28>
 800912e:	4623      	mov	r3, r4
 8009130:	e7e1      	b.n	80090f6 <rshift+0x68>

08009132 <__hexdig_fun>:
 8009132:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009136:	2b09      	cmp	r3, #9
 8009138:	d802      	bhi.n	8009140 <__hexdig_fun+0xe>
 800913a:	3820      	subs	r0, #32
 800913c:	b2c0      	uxtb	r0, r0
 800913e:	4770      	bx	lr
 8009140:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009144:	2b05      	cmp	r3, #5
 8009146:	d801      	bhi.n	800914c <__hexdig_fun+0x1a>
 8009148:	3847      	subs	r0, #71	; 0x47
 800914a:	e7f7      	b.n	800913c <__hexdig_fun+0xa>
 800914c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009150:	2b05      	cmp	r3, #5
 8009152:	d801      	bhi.n	8009158 <__hexdig_fun+0x26>
 8009154:	3827      	subs	r0, #39	; 0x27
 8009156:	e7f1      	b.n	800913c <__hexdig_fun+0xa>
 8009158:	2000      	movs	r0, #0
 800915a:	4770      	bx	lr

0800915c <__gethex>:
 800915c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009160:	ed2d 8b02 	vpush	{d8}
 8009164:	b089      	sub	sp, #36	; 0x24
 8009166:	ee08 0a10 	vmov	s16, r0
 800916a:	9304      	str	r3, [sp, #16]
 800916c:	4bb4      	ldr	r3, [pc, #720]	; (8009440 <__gethex+0x2e4>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	9301      	str	r3, [sp, #4]
 8009172:	4618      	mov	r0, r3
 8009174:	468b      	mov	fp, r1
 8009176:	4690      	mov	r8, r2
 8009178:	f7f7 f854 	bl	8000224 <strlen>
 800917c:	9b01      	ldr	r3, [sp, #4]
 800917e:	f8db 2000 	ldr.w	r2, [fp]
 8009182:	4403      	add	r3, r0
 8009184:	4682      	mov	sl, r0
 8009186:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800918a:	9305      	str	r3, [sp, #20]
 800918c:	1c93      	adds	r3, r2, #2
 800918e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009192:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009196:	32fe      	adds	r2, #254	; 0xfe
 8009198:	18d1      	adds	r1, r2, r3
 800919a:	461f      	mov	r7, r3
 800919c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80091a0:	9100      	str	r1, [sp, #0]
 80091a2:	2830      	cmp	r0, #48	; 0x30
 80091a4:	d0f8      	beq.n	8009198 <__gethex+0x3c>
 80091a6:	f7ff ffc4 	bl	8009132 <__hexdig_fun>
 80091aa:	4604      	mov	r4, r0
 80091ac:	2800      	cmp	r0, #0
 80091ae:	d13a      	bne.n	8009226 <__gethex+0xca>
 80091b0:	9901      	ldr	r1, [sp, #4]
 80091b2:	4652      	mov	r2, sl
 80091b4:	4638      	mov	r0, r7
 80091b6:	f001 fb4a 	bl	800a84e <strncmp>
 80091ba:	4605      	mov	r5, r0
 80091bc:	2800      	cmp	r0, #0
 80091be:	d168      	bne.n	8009292 <__gethex+0x136>
 80091c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80091c4:	eb07 060a 	add.w	r6, r7, sl
 80091c8:	f7ff ffb3 	bl	8009132 <__hexdig_fun>
 80091cc:	2800      	cmp	r0, #0
 80091ce:	d062      	beq.n	8009296 <__gethex+0x13a>
 80091d0:	4633      	mov	r3, r6
 80091d2:	7818      	ldrb	r0, [r3, #0]
 80091d4:	2830      	cmp	r0, #48	; 0x30
 80091d6:	461f      	mov	r7, r3
 80091d8:	f103 0301 	add.w	r3, r3, #1
 80091dc:	d0f9      	beq.n	80091d2 <__gethex+0x76>
 80091de:	f7ff ffa8 	bl	8009132 <__hexdig_fun>
 80091e2:	2301      	movs	r3, #1
 80091e4:	fab0 f480 	clz	r4, r0
 80091e8:	0964      	lsrs	r4, r4, #5
 80091ea:	4635      	mov	r5, r6
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	463a      	mov	r2, r7
 80091f0:	4616      	mov	r6, r2
 80091f2:	3201      	adds	r2, #1
 80091f4:	7830      	ldrb	r0, [r6, #0]
 80091f6:	f7ff ff9c 	bl	8009132 <__hexdig_fun>
 80091fa:	2800      	cmp	r0, #0
 80091fc:	d1f8      	bne.n	80091f0 <__gethex+0x94>
 80091fe:	9901      	ldr	r1, [sp, #4]
 8009200:	4652      	mov	r2, sl
 8009202:	4630      	mov	r0, r6
 8009204:	f001 fb23 	bl	800a84e <strncmp>
 8009208:	b980      	cbnz	r0, 800922c <__gethex+0xd0>
 800920a:	b94d      	cbnz	r5, 8009220 <__gethex+0xc4>
 800920c:	eb06 050a 	add.w	r5, r6, sl
 8009210:	462a      	mov	r2, r5
 8009212:	4616      	mov	r6, r2
 8009214:	3201      	adds	r2, #1
 8009216:	7830      	ldrb	r0, [r6, #0]
 8009218:	f7ff ff8b 	bl	8009132 <__hexdig_fun>
 800921c:	2800      	cmp	r0, #0
 800921e:	d1f8      	bne.n	8009212 <__gethex+0xb6>
 8009220:	1bad      	subs	r5, r5, r6
 8009222:	00ad      	lsls	r5, r5, #2
 8009224:	e004      	b.n	8009230 <__gethex+0xd4>
 8009226:	2400      	movs	r4, #0
 8009228:	4625      	mov	r5, r4
 800922a:	e7e0      	b.n	80091ee <__gethex+0x92>
 800922c:	2d00      	cmp	r5, #0
 800922e:	d1f7      	bne.n	8009220 <__gethex+0xc4>
 8009230:	7833      	ldrb	r3, [r6, #0]
 8009232:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009236:	2b50      	cmp	r3, #80	; 0x50
 8009238:	d13b      	bne.n	80092b2 <__gethex+0x156>
 800923a:	7873      	ldrb	r3, [r6, #1]
 800923c:	2b2b      	cmp	r3, #43	; 0x2b
 800923e:	d02c      	beq.n	800929a <__gethex+0x13e>
 8009240:	2b2d      	cmp	r3, #45	; 0x2d
 8009242:	d02e      	beq.n	80092a2 <__gethex+0x146>
 8009244:	1c71      	adds	r1, r6, #1
 8009246:	f04f 0900 	mov.w	r9, #0
 800924a:	7808      	ldrb	r0, [r1, #0]
 800924c:	f7ff ff71 	bl	8009132 <__hexdig_fun>
 8009250:	1e43      	subs	r3, r0, #1
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b18      	cmp	r3, #24
 8009256:	d82c      	bhi.n	80092b2 <__gethex+0x156>
 8009258:	f1a0 0210 	sub.w	r2, r0, #16
 800925c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009260:	f7ff ff67 	bl	8009132 <__hexdig_fun>
 8009264:	1e43      	subs	r3, r0, #1
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b18      	cmp	r3, #24
 800926a:	d91d      	bls.n	80092a8 <__gethex+0x14c>
 800926c:	f1b9 0f00 	cmp.w	r9, #0
 8009270:	d000      	beq.n	8009274 <__gethex+0x118>
 8009272:	4252      	negs	r2, r2
 8009274:	4415      	add	r5, r2
 8009276:	f8cb 1000 	str.w	r1, [fp]
 800927a:	b1e4      	cbz	r4, 80092b6 <__gethex+0x15a>
 800927c:	9b00      	ldr	r3, [sp, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	bf14      	ite	ne
 8009282:	2700      	movne	r7, #0
 8009284:	2706      	moveq	r7, #6
 8009286:	4638      	mov	r0, r7
 8009288:	b009      	add	sp, #36	; 0x24
 800928a:	ecbd 8b02 	vpop	{d8}
 800928e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009292:	463e      	mov	r6, r7
 8009294:	4625      	mov	r5, r4
 8009296:	2401      	movs	r4, #1
 8009298:	e7ca      	b.n	8009230 <__gethex+0xd4>
 800929a:	f04f 0900 	mov.w	r9, #0
 800929e:	1cb1      	adds	r1, r6, #2
 80092a0:	e7d3      	b.n	800924a <__gethex+0xee>
 80092a2:	f04f 0901 	mov.w	r9, #1
 80092a6:	e7fa      	b.n	800929e <__gethex+0x142>
 80092a8:	230a      	movs	r3, #10
 80092aa:	fb03 0202 	mla	r2, r3, r2, r0
 80092ae:	3a10      	subs	r2, #16
 80092b0:	e7d4      	b.n	800925c <__gethex+0x100>
 80092b2:	4631      	mov	r1, r6
 80092b4:	e7df      	b.n	8009276 <__gethex+0x11a>
 80092b6:	1bf3      	subs	r3, r6, r7
 80092b8:	3b01      	subs	r3, #1
 80092ba:	4621      	mov	r1, r4
 80092bc:	2b07      	cmp	r3, #7
 80092be:	dc0b      	bgt.n	80092d8 <__gethex+0x17c>
 80092c0:	ee18 0a10 	vmov	r0, s16
 80092c4:	f000 faea 	bl	800989c <_Balloc>
 80092c8:	4604      	mov	r4, r0
 80092ca:	b940      	cbnz	r0, 80092de <__gethex+0x182>
 80092cc:	4b5d      	ldr	r3, [pc, #372]	; (8009444 <__gethex+0x2e8>)
 80092ce:	4602      	mov	r2, r0
 80092d0:	21de      	movs	r1, #222	; 0xde
 80092d2:	485d      	ldr	r0, [pc, #372]	; (8009448 <__gethex+0x2ec>)
 80092d4:	f7fe fe7a 	bl	8007fcc <__assert_func>
 80092d8:	3101      	adds	r1, #1
 80092da:	105b      	asrs	r3, r3, #1
 80092dc:	e7ee      	b.n	80092bc <__gethex+0x160>
 80092de:	f100 0914 	add.w	r9, r0, #20
 80092e2:	f04f 0b00 	mov.w	fp, #0
 80092e6:	f1ca 0301 	rsb	r3, sl, #1
 80092ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80092ee:	f8cd b000 	str.w	fp, [sp]
 80092f2:	9306      	str	r3, [sp, #24]
 80092f4:	42b7      	cmp	r7, r6
 80092f6:	d340      	bcc.n	800937a <__gethex+0x21e>
 80092f8:	9802      	ldr	r0, [sp, #8]
 80092fa:	9b00      	ldr	r3, [sp, #0]
 80092fc:	f840 3b04 	str.w	r3, [r0], #4
 8009300:	eba0 0009 	sub.w	r0, r0, r9
 8009304:	1080      	asrs	r0, r0, #2
 8009306:	0146      	lsls	r6, r0, #5
 8009308:	6120      	str	r0, [r4, #16]
 800930a:	4618      	mov	r0, r3
 800930c:	f000 fbb8 	bl	8009a80 <__hi0bits>
 8009310:	1a30      	subs	r0, r6, r0
 8009312:	f8d8 6000 	ldr.w	r6, [r8]
 8009316:	42b0      	cmp	r0, r6
 8009318:	dd63      	ble.n	80093e2 <__gethex+0x286>
 800931a:	1b87      	subs	r7, r0, r6
 800931c:	4639      	mov	r1, r7
 800931e:	4620      	mov	r0, r4
 8009320:	f000 ff5c 	bl	800a1dc <__any_on>
 8009324:	4682      	mov	sl, r0
 8009326:	b1a8      	cbz	r0, 8009354 <__gethex+0x1f8>
 8009328:	1e7b      	subs	r3, r7, #1
 800932a:	1159      	asrs	r1, r3, #5
 800932c:	f003 021f 	and.w	r2, r3, #31
 8009330:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009334:	f04f 0a01 	mov.w	sl, #1
 8009338:	fa0a f202 	lsl.w	r2, sl, r2
 800933c:	420a      	tst	r2, r1
 800933e:	d009      	beq.n	8009354 <__gethex+0x1f8>
 8009340:	4553      	cmp	r3, sl
 8009342:	dd05      	ble.n	8009350 <__gethex+0x1f4>
 8009344:	1eb9      	subs	r1, r7, #2
 8009346:	4620      	mov	r0, r4
 8009348:	f000 ff48 	bl	800a1dc <__any_on>
 800934c:	2800      	cmp	r0, #0
 800934e:	d145      	bne.n	80093dc <__gethex+0x280>
 8009350:	f04f 0a02 	mov.w	sl, #2
 8009354:	4639      	mov	r1, r7
 8009356:	4620      	mov	r0, r4
 8009358:	f7ff fe99 	bl	800908e <rshift>
 800935c:	443d      	add	r5, r7
 800935e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009362:	42ab      	cmp	r3, r5
 8009364:	da4c      	bge.n	8009400 <__gethex+0x2a4>
 8009366:	ee18 0a10 	vmov	r0, s16
 800936a:	4621      	mov	r1, r4
 800936c:	f000 fad6 	bl	800991c <_Bfree>
 8009370:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009372:	2300      	movs	r3, #0
 8009374:	6013      	str	r3, [r2, #0]
 8009376:	27a3      	movs	r7, #163	; 0xa3
 8009378:	e785      	b.n	8009286 <__gethex+0x12a>
 800937a:	1e73      	subs	r3, r6, #1
 800937c:	9a05      	ldr	r2, [sp, #20]
 800937e:	9303      	str	r3, [sp, #12]
 8009380:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009384:	4293      	cmp	r3, r2
 8009386:	d019      	beq.n	80093bc <__gethex+0x260>
 8009388:	f1bb 0f20 	cmp.w	fp, #32
 800938c:	d107      	bne.n	800939e <__gethex+0x242>
 800938e:	9b02      	ldr	r3, [sp, #8]
 8009390:	9a00      	ldr	r2, [sp, #0]
 8009392:	f843 2b04 	str.w	r2, [r3], #4
 8009396:	9302      	str	r3, [sp, #8]
 8009398:	2300      	movs	r3, #0
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	469b      	mov	fp, r3
 800939e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80093a2:	f7ff fec6 	bl	8009132 <__hexdig_fun>
 80093a6:	9b00      	ldr	r3, [sp, #0]
 80093a8:	f000 000f 	and.w	r0, r0, #15
 80093ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80093b0:	4303      	orrs	r3, r0
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	f10b 0b04 	add.w	fp, fp, #4
 80093b8:	9b03      	ldr	r3, [sp, #12]
 80093ba:	e00d      	b.n	80093d8 <__gethex+0x27c>
 80093bc:	9b03      	ldr	r3, [sp, #12]
 80093be:	9a06      	ldr	r2, [sp, #24]
 80093c0:	4413      	add	r3, r2
 80093c2:	42bb      	cmp	r3, r7
 80093c4:	d3e0      	bcc.n	8009388 <__gethex+0x22c>
 80093c6:	4618      	mov	r0, r3
 80093c8:	9901      	ldr	r1, [sp, #4]
 80093ca:	9307      	str	r3, [sp, #28]
 80093cc:	4652      	mov	r2, sl
 80093ce:	f001 fa3e 	bl	800a84e <strncmp>
 80093d2:	9b07      	ldr	r3, [sp, #28]
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d1d7      	bne.n	8009388 <__gethex+0x22c>
 80093d8:	461e      	mov	r6, r3
 80093da:	e78b      	b.n	80092f4 <__gethex+0x198>
 80093dc:	f04f 0a03 	mov.w	sl, #3
 80093e0:	e7b8      	b.n	8009354 <__gethex+0x1f8>
 80093e2:	da0a      	bge.n	80093fa <__gethex+0x29e>
 80093e4:	1a37      	subs	r7, r6, r0
 80093e6:	4621      	mov	r1, r4
 80093e8:	ee18 0a10 	vmov	r0, s16
 80093ec:	463a      	mov	r2, r7
 80093ee:	f000 fcb1 	bl	8009d54 <__lshift>
 80093f2:	1bed      	subs	r5, r5, r7
 80093f4:	4604      	mov	r4, r0
 80093f6:	f100 0914 	add.w	r9, r0, #20
 80093fa:	f04f 0a00 	mov.w	sl, #0
 80093fe:	e7ae      	b.n	800935e <__gethex+0x202>
 8009400:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009404:	42a8      	cmp	r0, r5
 8009406:	dd72      	ble.n	80094ee <__gethex+0x392>
 8009408:	1b45      	subs	r5, r0, r5
 800940a:	42ae      	cmp	r6, r5
 800940c:	dc36      	bgt.n	800947c <__gethex+0x320>
 800940e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009412:	2b02      	cmp	r3, #2
 8009414:	d02a      	beq.n	800946c <__gethex+0x310>
 8009416:	2b03      	cmp	r3, #3
 8009418:	d02c      	beq.n	8009474 <__gethex+0x318>
 800941a:	2b01      	cmp	r3, #1
 800941c:	d11c      	bne.n	8009458 <__gethex+0x2fc>
 800941e:	42ae      	cmp	r6, r5
 8009420:	d11a      	bne.n	8009458 <__gethex+0x2fc>
 8009422:	2e01      	cmp	r6, #1
 8009424:	d112      	bne.n	800944c <__gethex+0x2f0>
 8009426:	9a04      	ldr	r2, [sp, #16]
 8009428:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800942c:	6013      	str	r3, [r2, #0]
 800942e:	2301      	movs	r3, #1
 8009430:	6123      	str	r3, [r4, #16]
 8009432:	f8c9 3000 	str.w	r3, [r9]
 8009436:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009438:	2762      	movs	r7, #98	; 0x62
 800943a:	601c      	str	r4, [r3, #0]
 800943c:	e723      	b.n	8009286 <__gethex+0x12a>
 800943e:	bf00      	nop
 8009440:	0800b0c4 	.word	0x0800b0c4
 8009444:	0800afe8 	.word	0x0800afe8
 8009448:	0800b05c 	.word	0x0800b05c
 800944c:	1e71      	subs	r1, r6, #1
 800944e:	4620      	mov	r0, r4
 8009450:	f000 fec4 	bl	800a1dc <__any_on>
 8009454:	2800      	cmp	r0, #0
 8009456:	d1e6      	bne.n	8009426 <__gethex+0x2ca>
 8009458:	ee18 0a10 	vmov	r0, s16
 800945c:	4621      	mov	r1, r4
 800945e:	f000 fa5d 	bl	800991c <_Bfree>
 8009462:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009464:	2300      	movs	r3, #0
 8009466:	6013      	str	r3, [r2, #0]
 8009468:	2750      	movs	r7, #80	; 0x50
 800946a:	e70c      	b.n	8009286 <__gethex+0x12a>
 800946c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1f2      	bne.n	8009458 <__gethex+0x2fc>
 8009472:	e7d8      	b.n	8009426 <__gethex+0x2ca>
 8009474:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1d5      	bne.n	8009426 <__gethex+0x2ca>
 800947a:	e7ed      	b.n	8009458 <__gethex+0x2fc>
 800947c:	1e6f      	subs	r7, r5, #1
 800947e:	f1ba 0f00 	cmp.w	sl, #0
 8009482:	d131      	bne.n	80094e8 <__gethex+0x38c>
 8009484:	b127      	cbz	r7, 8009490 <__gethex+0x334>
 8009486:	4639      	mov	r1, r7
 8009488:	4620      	mov	r0, r4
 800948a:	f000 fea7 	bl	800a1dc <__any_on>
 800948e:	4682      	mov	sl, r0
 8009490:	117b      	asrs	r3, r7, #5
 8009492:	2101      	movs	r1, #1
 8009494:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009498:	f007 071f 	and.w	r7, r7, #31
 800949c:	fa01 f707 	lsl.w	r7, r1, r7
 80094a0:	421f      	tst	r7, r3
 80094a2:	4629      	mov	r1, r5
 80094a4:	4620      	mov	r0, r4
 80094a6:	bf18      	it	ne
 80094a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80094ac:	1b76      	subs	r6, r6, r5
 80094ae:	f7ff fdee 	bl	800908e <rshift>
 80094b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80094b6:	2702      	movs	r7, #2
 80094b8:	f1ba 0f00 	cmp.w	sl, #0
 80094bc:	d048      	beq.n	8009550 <__gethex+0x3f4>
 80094be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d015      	beq.n	80094f2 <__gethex+0x396>
 80094c6:	2b03      	cmp	r3, #3
 80094c8:	d017      	beq.n	80094fa <__gethex+0x39e>
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d109      	bne.n	80094e2 <__gethex+0x386>
 80094ce:	f01a 0f02 	tst.w	sl, #2
 80094d2:	d006      	beq.n	80094e2 <__gethex+0x386>
 80094d4:	f8d9 0000 	ldr.w	r0, [r9]
 80094d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80094dc:	f01a 0f01 	tst.w	sl, #1
 80094e0:	d10e      	bne.n	8009500 <__gethex+0x3a4>
 80094e2:	f047 0710 	orr.w	r7, r7, #16
 80094e6:	e033      	b.n	8009550 <__gethex+0x3f4>
 80094e8:	f04f 0a01 	mov.w	sl, #1
 80094ec:	e7d0      	b.n	8009490 <__gethex+0x334>
 80094ee:	2701      	movs	r7, #1
 80094f0:	e7e2      	b.n	80094b8 <__gethex+0x35c>
 80094f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094f4:	f1c3 0301 	rsb	r3, r3, #1
 80094f8:	9315      	str	r3, [sp, #84]	; 0x54
 80094fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d0f0      	beq.n	80094e2 <__gethex+0x386>
 8009500:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009504:	f104 0314 	add.w	r3, r4, #20
 8009508:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800950c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009510:	f04f 0c00 	mov.w	ip, #0
 8009514:	4618      	mov	r0, r3
 8009516:	f853 2b04 	ldr.w	r2, [r3], #4
 800951a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800951e:	d01c      	beq.n	800955a <__gethex+0x3fe>
 8009520:	3201      	adds	r2, #1
 8009522:	6002      	str	r2, [r0, #0]
 8009524:	2f02      	cmp	r7, #2
 8009526:	f104 0314 	add.w	r3, r4, #20
 800952a:	d13f      	bne.n	80095ac <__gethex+0x450>
 800952c:	f8d8 2000 	ldr.w	r2, [r8]
 8009530:	3a01      	subs	r2, #1
 8009532:	42b2      	cmp	r2, r6
 8009534:	d10a      	bne.n	800954c <__gethex+0x3f0>
 8009536:	1171      	asrs	r1, r6, #5
 8009538:	2201      	movs	r2, #1
 800953a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800953e:	f006 061f 	and.w	r6, r6, #31
 8009542:	fa02 f606 	lsl.w	r6, r2, r6
 8009546:	421e      	tst	r6, r3
 8009548:	bf18      	it	ne
 800954a:	4617      	movne	r7, r2
 800954c:	f047 0720 	orr.w	r7, r7, #32
 8009550:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009552:	601c      	str	r4, [r3, #0]
 8009554:	9b04      	ldr	r3, [sp, #16]
 8009556:	601d      	str	r5, [r3, #0]
 8009558:	e695      	b.n	8009286 <__gethex+0x12a>
 800955a:	4299      	cmp	r1, r3
 800955c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009560:	d8d8      	bhi.n	8009514 <__gethex+0x3b8>
 8009562:	68a3      	ldr	r3, [r4, #8]
 8009564:	459b      	cmp	fp, r3
 8009566:	db19      	blt.n	800959c <__gethex+0x440>
 8009568:	6861      	ldr	r1, [r4, #4]
 800956a:	ee18 0a10 	vmov	r0, s16
 800956e:	3101      	adds	r1, #1
 8009570:	f000 f994 	bl	800989c <_Balloc>
 8009574:	4681      	mov	r9, r0
 8009576:	b918      	cbnz	r0, 8009580 <__gethex+0x424>
 8009578:	4b1a      	ldr	r3, [pc, #104]	; (80095e4 <__gethex+0x488>)
 800957a:	4602      	mov	r2, r0
 800957c:	2184      	movs	r1, #132	; 0x84
 800957e:	e6a8      	b.n	80092d2 <__gethex+0x176>
 8009580:	6922      	ldr	r2, [r4, #16]
 8009582:	3202      	adds	r2, #2
 8009584:	f104 010c 	add.w	r1, r4, #12
 8009588:	0092      	lsls	r2, r2, #2
 800958a:	300c      	adds	r0, #12
 800958c:	f000 f96c 	bl	8009868 <memcpy>
 8009590:	4621      	mov	r1, r4
 8009592:	ee18 0a10 	vmov	r0, s16
 8009596:	f000 f9c1 	bl	800991c <_Bfree>
 800959a:	464c      	mov	r4, r9
 800959c:	6923      	ldr	r3, [r4, #16]
 800959e:	1c5a      	adds	r2, r3, #1
 80095a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095a4:	6122      	str	r2, [r4, #16]
 80095a6:	2201      	movs	r2, #1
 80095a8:	615a      	str	r2, [r3, #20]
 80095aa:	e7bb      	b.n	8009524 <__gethex+0x3c8>
 80095ac:	6922      	ldr	r2, [r4, #16]
 80095ae:	455a      	cmp	r2, fp
 80095b0:	dd0b      	ble.n	80095ca <__gethex+0x46e>
 80095b2:	2101      	movs	r1, #1
 80095b4:	4620      	mov	r0, r4
 80095b6:	f7ff fd6a 	bl	800908e <rshift>
 80095ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095be:	3501      	adds	r5, #1
 80095c0:	42ab      	cmp	r3, r5
 80095c2:	f6ff aed0 	blt.w	8009366 <__gethex+0x20a>
 80095c6:	2701      	movs	r7, #1
 80095c8:	e7c0      	b.n	800954c <__gethex+0x3f0>
 80095ca:	f016 061f 	ands.w	r6, r6, #31
 80095ce:	d0fa      	beq.n	80095c6 <__gethex+0x46a>
 80095d0:	4453      	add	r3, sl
 80095d2:	f1c6 0620 	rsb	r6, r6, #32
 80095d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80095da:	f000 fa51 	bl	8009a80 <__hi0bits>
 80095de:	42b0      	cmp	r0, r6
 80095e0:	dbe7      	blt.n	80095b2 <__gethex+0x456>
 80095e2:	e7f0      	b.n	80095c6 <__gethex+0x46a>
 80095e4:	0800afe8 	.word	0x0800afe8

080095e8 <L_shift>:
 80095e8:	f1c2 0208 	rsb	r2, r2, #8
 80095ec:	0092      	lsls	r2, r2, #2
 80095ee:	b570      	push	{r4, r5, r6, lr}
 80095f0:	f1c2 0620 	rsb	r6, r2, #32
 80095f4:	6843      	ldr	r3, [r0, #4]
 80095f6:	6804      	ldr	r4, [r0, #0]
 80095f8:	fa03 f506 	lsl.w	r5, r3, r6
 80095fc:	432c      	orrs	r4, r5
 80095fe:	40d3      	lsrs	r3, r2
 8009600:	6004      	str	r4, [r0, #0]
 8009602:	f840 3f04 	str.w	r3, [r0, #4]!
 8009606:	4288      	cmp	r0, r1
 8009608:	d3f4      	bcc.n	80095f4 <L_shift+0xc>
 800960a:	bd70      	pop	{r4, r5, r6, pc}

0800960c <__match>:
 800960c:	b530      	push	{r4, r5, lr}
 800960e:	6803      	ldr	r3, [r0, #0]
 8009610:	3301      	adds	r3, #1
 8009612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009616:	b914      	cbnz	r4, 800961e <__match+0x12>
 8009618:	6003      	str	r3, [r0, #0]
 800961a:	2001      	movs	r0, #1
 800961c:	bd30      	pop	{r4, r5, pc}
 800961e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009622:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009626:	2d19      	cmp	r5, #25
 8009628:	bf98      	it	ls
 800962a:	3220      	addls	r2, #32
 800962c:	42a2      	cmp	r2, r4
 800962e:	d0f0      	beq.n	8009612 <__match+0x6>
 8009630:	2000      	movs	r0, #0
 8009632:	e7f3      	b.n	800961c <__match+0x10>

08009634 <__hexnan>:
 8009634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009638:	680b      	ldr	r3, [r1, #0]
 800963a:	115e      	asrs	r6, r3, #5
 800963c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009640:	f013 031f 	ands.w	r3, r3, #31
 8009644:	b087      	sub	sp, #28
 8009646:	bf18      	it	ne
 8009648:	3604      	addne	r6, #4
 800964a:	2500      	movs	r5, #0
 800964c:	1f37      	subs	r7, r6, #4
 800964e:	4690      	mov	r8, r2
 8009650:	6802      	ldr	r2, [r0, #0]
 8009652:	9301      	str	r3, [sp, #4]
 8009654:	4682      	mov	sl, r0
 8009656:	f846 5c04 	str.w	r5, [r6, #-4]
 800965a:	46b9      	mov	r9, r7
 800965c:	463c      	mov	r4, r7
 800965e:	9502      	str	r5, [sp, #8]
 8009660:	46ab      	mov	fp, r5
 8009662:	7851      	ldrb	r1, [r2, #1]
 8009664:	1c53      	adds	r3, r2, #1
 8009666:	9303      	str	r3, [sp, #12]
 8009668:	b341      	cbz	r1, 80096bc <__hexnan+0x88>
 800966a:	4608      	mov	r0, r1
 800966c:	9205      	str	r2, [sp, #20]
 800966e:	9104      	str	r1, [sp, #16]
 8009670:	f7ff fd5f 	bl	8009132 <__hexdig_fun>
 8009674:	2800      	cmp	r0, #0
 8009676:	d14f      	bne.n	8009718 <__hexnan+0xe4>
 8009678:	9904      	ldr	r1, [sp, #16]
 800967a:	9a05      	ldr	r2, [sp, #20]
 800967c:	2920      	cmp	r1, #32
 800967e:	d818      	bhi.n	80096b2 <__hexnan+0x7e>
 8009680:	9b02      	ldr	r3, [sp, #8]
 8009682:	459b      	cmp	fp, r3
 8009684:	dd13      	ble.n	80096ae <__hexnan+0x7a>
 8009686:	454c      	cmp	r4, r9
 8009688:	d206      	bcs.n	8009698 <__hexnan+0x64>
 800968a:	2d07      	cmp	r5, #7
 800968c:	dc04      	bgt.n	8009698 <__hexnan+0x64>
 800968e:	462a      	mov	r2, r5
 8009690:	4649      	mov	r1, r9
 8009692:	4620      	mov	r0, r4
 8009694:	f7ff ffa8 	bl	80095e8 <L_shift>
 8009698:	4544      	cmp	r4, r8
 800969a:	d950      	bls.n	800973e <__hexnan+0x10a>
 800969c:	2300      	movs	r3, #0
 800969e:	f1a4 0904 	sub.w	r9, r4, #4
 80096a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80096a6:	f8cd b008 	str.w	fp, [sp, #8]
 80096aa:	464c      	mov	r4, r9
 80096ac:	461d      	mov	r5, r3
 80096ae:	9a03      	ldr	r2, [sp, #12]
 80096b0:	e7d7      	b.n	8009662 <__hexnan+0x2e>
 80096b2:	2929      	cmp	r1, #41	; 0x29
 80096b4:	d156      	bne.n	8009764 <__hexnan+0x130>
 80096b6:	3202      	adds	r2, #2
 80096b8:	f8ca 2000 	str.w	r2, [sl]
 80096bc:	f1bb 0f00 	cmp.w	fp, #0
 80096c0:	d050      	beq.n	8009764 <__hexnan+0x130>
 80096c2:	454c      	cmp	r4, r9
 80096c4:	d206      	bcs.n	80096d4 <__hexnan+0xa0>
 80096c6:	2d07      	cmp	r5, #7
 80096c8:	dc04      	bgt.n	80096d4 <__hexnan+0xa0>
 80096ca:	462a      	mov	r2, r5
 80096cc:	4649      	mov	r1, r9
 80096ce:	4620      	mov	r0, r4
 80096d0:	f7ff ff8a 	bl	80095e8 <L_shift>
 80096d4:	4544      	cmp	r4, r8
 80096d6:	d934      	bls.n	8009742 <__hexnan+0x10e>
 80096d8:	f1a8 0204 	sub.w	r2, r8, #4
 80096dc:	4623      	mov	r3, r4
 80096de:	f853 1b04 	ldr.w	r1, [r3], #4
 80096e2:	f842 1f04 	str.w	r1, [r2, #4]!
 80096e6:	429f      	cmp	r7, r3
 80096e8:	d2f9      	bcs.n	80096de <__hexnan+0xaa>
 80096ea:	1b3b      	subs	r3, r7, r4
 80096ec:	f023 0303 	bic.w	r3, r3, #3
 80096f0:	3304      	adds	r3, #4
 80096f2:	3401      	adds	r4, #1
 80096f4:	3e03      	subs	r6, #3
 80096f6:	42b4      	cmp	r4, r6
 80096f8:	bf88      	it	hi
 80096fa:	2304      	movhi	r3, #4
 80096fc:	4443      	add	r3, r8
 80096fe:	2200      	movs	r2, #0
 8009700:	f843 2b04 	str.w	r2, [r3], #4
 8009704:	429f      	cmp	r7, r3
 8009706:	d2fb      	bcs.n	8009700 <__hexnan+0xcc>
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	b91b      	cbnz	r3, 8009714 <__hexnan+0xe0>
 800970c:	4547      	cmp	r7, r8
 800970e:	d127      	bne.n	8009760 <__hexnan+0x12c>
 8009710:	2301      	movs	r3, #1
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	2005      	movs	r0, #5
 8009716:	e026      	b.n	8009766 <__hexnan+0x132>
 8009718:	3501      	adds	r5, #1
 800971a:	2d08      	cmp	r5, #8
 800971c:	f10b 0b01 	add.w	fp, fp, #1
 8009720:	dd06      	ble.n	8009730 <__hexnan+0xfc>
 8009722:	4544      	cmp	r4, r8
 8009724:	d9c3      	bls.n	80096ae <__hexnan+0x7a>
 8009726:	2300      	movs	r3, #0
 8009728:	f844 3c04 	str.w	r3, [r4, #-4]
 800972c:	2501      	movs	r5, #1
 800972e:	3c04      	subs	r4, #4
 8009730:	6822      	ldr	r2, [r4, #0]
 8009732:	f000 000f 	and.w	r0, r0, #15
 8009736:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800973a:	6022      	str	r2, [r4, #0]
 800973c:	e7b7      	b.n	80096ae <__hexnan+0x7a>
 800973e:	2508      	movs	r5, #8
 8009740:	e7b5      	b.n	80096ae <__hexnan+0x7a>
 8009742:	9b01      	ldr	r3, [sp, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0df      	beq.n	8009708 <__hexnan+0xd4>
 8009748:	f04f 32ff 	mov.w	r2, #4294967295
 800974c:	f1c3 0320 	rsb	r3, r3, #32
 8009750:	fa22 f303 	lsr.w	r3, r2, r3
 8009754:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009758:	401a      	ands	r2, r3
 800975a:	f846 2c04 	str.w	r2, [r6, #-4]
 800975e:	e7d3      	b.n	8009708 <__hexnan+0xd4>
 8009760:	3f04      	subs	r7, #4
 8009762:	e7d1      	b.n	8009708 <__hexnan+0xd4>
 8009764:	2004      	movs	r0, #4
 8009766:	b007      	add	sp, #28
 8009768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800976c <_localeconv_r>:
 800976c:	4800      	ldr	r0, [pc, #0]	; (8009770 <_localeconv_r+0x4>)
 800976e:	4770      	bx	lr
 8009770:	200001c8 	.word	0x200001c8

08009774 <__retarget_lock_init_recursive>:
 8009774:	4770      	bx	lr

08009776 <__retarget_lock_acquire_recursive>:
 8009776:	4770      	bx	lr

08009778 <__retarget_lock_release_recursive>:
 8009778:	4770      	bx	lr

0800977a <__swhatbuf_r>:
 800977a:	b570      	push	{r4, r5, r6, lr}
 800977c:	460e      	mov	r6, r1
 800977e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009782:	2900      	cmp	r1, #0
 8009784:	b096      	sub	sp, #88	; 0x58
 8009786:	4614      	mov	r4, r2
 8009788:	461d      	mov	r5, r3
 800978a:	da08      	bge.n	800979e <__swhatbuf_r+0x24>
 800978c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	602a      	str	r2, [r5, #0]
 8009794:	061a      	lsls	r2, r3, #24
 8009796:	d410      	bmi.n	80097ba <__swhatbuf_r+0x40>
 8009798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800979c:	e00e      	b.n	80097bc <__swhatbuf_r+0x42>
 800979e:	466a      	mov	r2, sp
 80097a0:	f001 f8a0 	bl	800a8e4 <_fstat_r>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	dbf1      	blt.n	800978c <__swhatbuf_r+0x12>
 80097a8:	9a01      	ldr	r2, [sp, #4]
 80097aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80097b2:	425a      	negs	r2, r3
 80097b4:	415a      	adcs	r2, r3
 80097b6:	602a      	str	r2, [r5, #0]
 80097b8:	e7ee      	b.n	8009798 <__swhatbuf_r+0x1e>
 80097ba:	2340      	movs	r3, #64	; 0x40
 80097bc:	2000      	movs	r0, #0
 80097be:	6023      	str	r3, [r4, #0]
 80097c0:	b016      	add	sp, #88	; 0x58
 80097c2:	bd70      	pop	{r4, r5, r6, pc}

080097c4 <__smakebuf_r>:
 80097c4:	898b      	ldrh	r3, [r1, #12]
 80097c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097c8:	079d      	lsls	r5, r3, #30
 80097ca:	4606      	mov	r6, r0
 80097cc:	460c      	mov	r4, r1
 80097ce:	d507      	bpl.n	80097e0 <__smakebuf_r+0x1c>
 80097d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097d4:	6023      	str	r3, [r4, #0]
 80097d6:	6123      	str	r3, [r4, #16]
 80097d8:	2301      	movs	r3, #1
 80097da:	6163      	str	r3, [r4, #20]
 80097dc:	b002      	add	sp, #8
 80097de:	bd70      	pop	{r4, r5, r6, pc}
 80097e0:	ab01      	add	r3, sp, #4
 80097e2:	466a      	mov	r2, sp
 80097e4:	f7ff ffc9 	bl	800977a <__swhatbuf_r>
 80097e8:	9900      	ldr	r1, [sp, #0]
 80097ea:	4605      	mov	r5, r0
 80097ec:	4630      	mov	r0, r6
 80097ee:	f7fc ff09 	bl	8006604 <_malloc_r>
 80097f2:	b948      	cbnz	r0, 8009808 <__smakebuf_r+0x44>
 80097f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097f8:	059a      	lsls	r2, r3, #22
 80097fa:	d4ef      	bmi.n	80097dc <__smakebuf_r+0x18>
 80097fc:	f023 0303 	bic.w	r3, r3, #3
 8009800:	f043 0302 	orr.w	r3, r3, #2
 8009804:	81a3      	strh	r3, [r4, #12]
 8009806:	e7e3      	b.n	80097d0 <__smakebuf_r+0xc>
 8009808:	4b0d      	ldr	r3, [pc, #52]	; (8009840 <__smakebuf_r+0x7c>)
 800980a:	62b3      	str	r3, [r6, #40]	; 0x28
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	6020      	str	r0, [r4, #0]
 8009810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009814:	81a3      	strh	r3, [r4, #12]
 8009816:	9b00      	ldr	r3, [sp, #0]
 8009818:	6163      	str	r3, [r4, #20]
 800981a:	9b01      	ldr	r3, [sp, #4]
 800981c:	6120      	str	r0, [r4, #16]
 800981e:	b15b      	cbz	r3, 8009838 <__smakebuf_r+0x74>
 8009820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009824:	4630      	mov	r0, r6
 8009826:	f001 f86f 	bl	800a908 <_isatty_r>
 800982a:	b128      	cbz	r0, 8009838 <__smakebuf_r+0x74>
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	f023 0303 	bic.w	r3, r3, #3
 8009832:	f043 0301 	orr.w	r3, r3, #1
 8009836:	81a3      	strh	r3, [r4, #12]
 8009838:	89a0      	ldrh	r0, [r4, #12]
 800983a:	4305      	orrs	r5, r0
 800983c:	81a5      	strh	r5, [r4, #12]
 800983e:	e7cd      	b.n	80097dc <__smakebuf_r+0x18>
 8009840:	08008ec9 	.word	0x08008ec9

08009844 <__ascii_mbtowc>:
 8009844:	b082      	sub	sp, #8
 8009846:	b901      	cbnz	r1, 800984a <__ascii_mbtowc+0x6>
 8009848:	a901      	add	r1, sp, #4
 800984a:	b142      	cbz	r2, 800985e <__ascii_mbtowc+0x1a>
 800984c:	b14b      	cbz	r3, 8009862 <__ascii_mbtowc+0x1e>
 800984e:	7813      	ldrb	r3, [r2, #0]
 8009850:	600b      	str	r3, [r1, #0]
 8009852:	7812      	ldrb	r2, [r2, #0]
 8009854:	1e10      	subs	r0, r2, #0
 8009856:	bf18      	it	ne
 8009858:	2001      	movne	r0, #1
 800985a:	b002      	add	sp, #8
 800985c:	4770      	bx	lr
 800985e:	4610      	mov	r0, r2
 8009860:	e7fb      	b.n	800985a <__ascii_mbtowc+0x16>
 8009862:	f06f 0001 	mvn.w	r0, #1
 8009866:	e7f8      	b.n	800985a <__ascii_mbtowc+0x16>

08009868 <memcpy>:
 8009868:	440a      	add	r2, r1
 800986a:	4291      	cmp	r1, r2
 800986c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009870:	d100      	bne.n	8009874 <memcpy+0xc>
 8009872:	4770      	bx	lr
 8009874:	b510      	push	{r4, lr}
 8009876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800987a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800987e:	4291      	cmp	r1, r2
 8009880:	d1f9      	bne.n	8009876 <memcpy+0xe>
 8009882:	bd10      	pop	{r4, pc}

08009884 <__malloc_lock>:
 8009884:	4801      	ldr	r0, [pc, #4]	; (800988c <__malloc_lock+0x8>)
 8009886:	f7ff bf76 	b.w	8009776 <__retarget_lock_acquire_recursive>
 800988a:	bf00      	nop
 800988c:	20000a10 	.word	0x20000a10

08009890 <__malloc_unlock>:
 8009890:	4801      	ldr	r0, [pc, #4]	; (8009898 <__malloc_unlock+0x8>)
 8009892:	f7ff bf71 	b.w	8009778 <__retarget_lock_release_recursive>
 8009896:	bf00      	nop
 8009898:	20000a10 	.word	0x20000a10

0800989c <_Balloc>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098a0:	4604      	mov	r4, r0
 80098a2:	460d      	mov	r5, r1
 80098a4:	b976      	cbnz	r6, 80098c4 <_Balloc+0x28>
 80098a6:	2010      	movs	r0, #16
 80098a8:	f7fc fe0e 	bl	80064c8 <malloc>
 80098ac:	4602      	mov	r2, r0
 80098ae:	6260      	str	r0, [r4, #36]	; 0x24
 80098b0:	b920      	cbnz	r0, 80098bc <_Balloc+0x20>
 80098b2:	4b18      	ldr	r3, [pc, #96]	; (8009914 <_Balloc+0x78>)
 80098b4:	4818      	ldr	r0, [pc, #96]	; (8009918 <_Balloc+0x7c>)
 80098b6:	2166      	movs	r1, #102	; 0x66
 80098b8:	f7fe fb88 	bl	8007fcc <__assert_func>
 80098bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098c0:	6006      	str	r6, [r0, #0]
 80098c2:	60c6      	str	r6, [r0, #12]
 80098c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80098c6:	68f3      	ldr	r3, [r6, #12]
 80098c8:	b183      	cbz	r3, 80098ec <_Balloc+0x50>
 80098ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098d2:	b9b8      	cbnz	r0, 8009904 <_Balloc+0x68>
 80098d4:	2101      	movs	r1, #1
 80098d6:	fa01 f605 	lsl.w	r6, r1, r5
 80098da:	1d72      	adds	r2, r6, #5
 80098dc:	0092      	lsls	r2, r2, #2
 80098de:	4620      	mov	r0, r4
 80098e0:	f000 fc9d 	bl	800a21e <_calloc_r>
 80098e4:	b160      	cbz	r0, 8009900 <_Balloc+0x64>
 80098e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098ea:	e00e      	b.n	800990a <_Balloc+0x6e>
 80098ec:	2221      	movs	r2, #33	; 0x21
 80098ee:	2104      	movs	r1, #4
 80098f0:	4620      	mov	r0, r4
 80098f2:	f000 fc94 	bl	800a21e <_calloc_r>
 80098f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098f8:	60f0      	str	r0, [r6, #12]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1e4      	bne.n	80098ca <_Balloc+0x2e>
 8009900:	2000      	movs	r0, #0
 8009902:	bd70      	pop	{r4, r5, r6, pc}
 8009904:	6802      	ldr	r2, [r0, #0]
 8009906:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800990a:	2300      	movs	r3, #0
 800990c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009910:	e7f7      	b.n	8009902 <_Balloc+0x66>
 8009912:	bf00      	nop
 8009914:	0800aed0 	.word	0x0800aed0
 8009918:	0800b0d8 	.word	0x0800b0d8

0800991c <_Bfree>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009920:	4605      	mov	r5, r0
 8009922:	460c      	mov	r4, r1
 8009924:	b976      	cbnz	r6, 8009944 <_Bfree+0x28>
 8009926:	2010      	movs	r0, #16
 8009928:	f7fc fdce 	bl	80064c8 <malloc>
 800992c:	4602      	mov	r2, r0
 800992e:	6268      	str	r0, [r5, #36]	; 0x24
 8009930:	b920      	cbnz	r0, 800993c <_Bfree+0x20>
 8009932:	4b09      	ldr	r3, [pc, #36]	; (8009958 <_Bfree+0x3c>)
 8009934:	4809      	ldr	r0, [pc, #36]	; (800995c <_Bfree+0x40>)
 8009936:	218a      	movs	r1, #138	; 0x8a
 8009938:	f7fe fb48 	bl	8007fcc <__assert_func>
 800993c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009940:	6006      	str	r6, [r0, #0]
 8009942:	60c6      	str	r6, [r0, #12]
 8009944:	b13c      	cbz	r4, 8009956 <_Bfree+0x3a>
 8009946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009948:	6862      	ldr	r2, [r4, #4]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009950:	6021      	str	r1, [r4, #0]
 8009952:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009956:	bd70      	pop	{r4, r5, r6, pc}
 8009958:	0800aed0 	.word	0x0800aed0
 800995c:	0800b0d8 	.word	0x0800b0d8

08009960 <__multadd>:
 8009960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009964:	690d      	ldr	r5, [r1, #16]
 8009966:	4607      	mov	r7, r0
 8009968:	460c      	mov	r4, r1
 800996a:	461e      	mov	r6, r3
 800996c:	f101 0c14 	add.w	ip, r1, #20
 8009970:	2000      	movs	r0, #0
 8009972:	f8dc 3000 	ldr.w	r3, [ip]
 8009976:	b299      	uxth	r1, r3
 8009978:	fb02 6101 	mla	r1, r2, r1, r6
 800997c:	0c1e      	lsrs	r6, r3, #16
 800997e:	0c0b      	lsrs	r3, r1, #16
 8009980:	fb02 3306 	mla	r3, r2, r6, r3
 8009984:	b289      	uxth	r1, r1
 8009986:	3001      	adds	r0, #1
 8009988:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800998c:	4285      	cmp	r5, r0
 800998e:	f84c 1b04 	str.w	r1, [ip], #4
 8009992:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009996:	dcec      	bgt.n	8009972 <__multadd+0x12>
 8009998:	b30e      	cbz	r6, 80099de <__multadd+0x7e>
 800999a:	68a3      	ldr	r3, [r4, #8]
 800999c:	42ab      	cmp	r3, r5
 800999e:	dc19      	bgt.n	80099d4 <__multadd+0x74>
 80099a0:	6861      	ldr	r1, [r4, #4]
 80099a2:	4638      	mov	r0, r7
 80099a4:	3101      	adds	r1, #1
 80099a6:	f7ff ff79 	bl	800989c <_Balloc>
 80099aa:	4680      	mov	r8, r0
 80099ac:	b928      	cbnz	r0, 80099ba <__multadd+0x5a>
 80099ae:	4602      	mov	r2, r0
 80099b0:	4b0c      	ldr	r3, [pc, #48]	; (80099e4 <__multadd+0x84>)
 80099b2:	480d      	ldr	r0, [pc, #52]	; (80099e8 <__multadd+0x88>)
 80099b4:	21b5      	movs	r1, #181	; 0xb5
 80099b6:	f7fe fb09 	bl	8007fcc <__assert_func>
 80099ba:	6922      	ldr	r2, [r4, #16]
 80099bc:	3202      	adds	r2, #2
 80099be:	f104 010c 	add.w	r1, r4, #12
 80099c2:	0092      	lsls	r2, r2, #2
 80099c4:	300c      	adds	r0, #12
 80099c6:	f7ff ff4f 	bl	8009868 <memcpy>
 80099ca:	4621      	mov	r1, r4
 80099cc:	4638      	mov	r0, r7
 80099ce:	f7ff ffa5 	bl	800991c <_Bfree>
 80099d2:	4644      	mov	r4, r8
 80099d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099d8:	3501      	adds	r5, #1
 80099da:	615e      	str	r6, [r3, #20]
 80099dc:	6125      	str	r5, [r4, #16]
 80099de:	4620      	mov	r0, r4
 80099e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e4:	0800afe8 	.word	0x0800afe8
 80099e8:	0800b0d8 	.word	0x0800b0d8

080099ec <__s2b>:
 80099ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099f0:	460c      	mov	r4, r1
 80099f2:	4615      	mov	r5, r2
 80099f4:	461f      	mov	r7, r3
 80099f6:	2209      	movs	r2, #9
 80099f8:	3308      	adds	r3, #8
 80099fa:	4606      	mov	r6, r0
 80099fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a00:	2100      	movs	r1, #0
 8009a02:	2201      	movs	r2, #1
 8009a04:	429a      	cmp	r2, r3
 8009a06:	db09      	blt.n	8009a1c <__s2b+0x30>
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f7ff ff47 	bl	800989c <_Balloc>
 8009a0e:	b940      	cbnz	r0, 8009a22 <__s2b+0x36>
 8009a10:	4602      	mov	r2, r0
 8009a12:	4b19      	ldr	r3, [pc, #100]	; (8009a78 <__s2b+0x8c>)
 8009a14:	4819      	ldr	r0, [pc, #100]	; (8009a7c <__s2b+0x90>)
 8009a16:	21ce      	movs	r1, #206	; 0xce
 8009a18:	f7fe fad8 	bl	8007fcc <__assert_func>
 8009a1c:	0052      	lsls	r2, r2, #1
 8009a1e:	3101      	adds	r1, #1
 8009a20:	e7f0      	b.n	8009a04 <__s2b+0x18>
 8009a22:	9b08      	ldr	r3, [sp, #32]
 8009a24:	6143      	str	r3, [r0, #20]
 8009a26:	2d09      	cmp	r5, #9
 8009a28:	f04f 0301 	mov.w	r3, #1
 8009a2c:	6103      	str	r3, [r0, #16]
 8009a2e:	dd16      	ble.n	8009a5e <__s2b+0x72>
 8009a30:	f104 0909 	add.w	r9, r4, #9
 8009a34:	46c8      	mov	r8, r9
 8009a36:	442c      	add	r4, r5
 8009a38:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a3c:	4601      	mov	r1, r0
 8009a3e:	3b30      	subs	r3, #48	; 0x30
 8009a40:	220a      	movs	r2, #10
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7ff ff8c 	bl	8009960 <__multadd>
 8009a48:	45a0      	cmp	r8, r4
 8009a4a:	d1f5      	bne.n	8009a38 <__s2b+0x4c>
 8009a4c:	f1a5 0408 	sub.w	r4, r5, #8
 8009a50:	444c      	add	r4, r9
 8009a52:	1b2d      	subs	r5, r5, r4
 8009a54:	1963      	adds	r3, r4, r5
 8009a56:	42bb      	cmp	r3, r7
 8009a58:	db04      	blt.n	8009a64 <__s2b+0x78>
 8009a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a5e:	340a      	adds	r4, #10
 8009a60:	2509      	movs	r5, #9
 8009a62:	e7f6      	b.n	8009a52 <__s2b+0x66>
 8009a64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a68:	4601      	mov	r1, r0
 8009a6a:	3b30      	subs	r3, #48	; 0x30
 8009a6c:	220a      	movs	r2, #10
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f7ff ff76 	bl	8009960 <__multadd>
 8009a74:	e7ee      	b.n	8009a54 <__s2b+0x68>
 8009a76:	bf00      	nop
 8009a78:	0800afe8 	.word	0x0800afe8
 8009a7c:	0800b0d8 	.word	0x0800b0d8

08009a80 <__hi0bits>:
 8009a80:	0c03      	lsrs	r3, r0, #16
 8009a82:	041b      	lsls	r3, r3, #16
 8009a84:	b9d3      	cbnz	r3, 8009abc <__hi0bits+0x3c>
 8009a86:	0400      	lsls	r0, r0, #16
 8009a88:	2310      	movs	r3, #16
 8009a8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a8e:	bf04      	itt	eq
 8009a90:	0200      	lsleq	r0, r0, #8
 8009a92:	3308      	addeq	r3, #8
 8009a94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a98:	bf04      	itt	eq
 8009a9a:	0100      	lsleq	r0, r0, #4
 8009a9c:	3304      	addeq	r3, #4
 8009a9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009aa2:	bf04      	itt	eq
 8009aa4:	0080      	lsleq	r0, r0, #2
 8009aa6:	3302      	addeq	r3, #2
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	db05      	blt.n	8009ab8 <__hi0bits+0x38>
 8009aac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ab0:	f103 0301 	add.w	r3, r3, #1
 8009ab4:	bf08      	it	eq
 8009ab6:	2320      	moveq	r3, #32
 8009ab8:	4618      	mov	r0, r3
 8009aba:	4770      	bx	lr
 8009abc:	2300      	movs	r3, #0
 8009abe:	e7e4      	b.n	8009a8a <__hi0bits+0xa>

08009ac0 <__lo0bits>:
 8009ac0:	6803      	ldr	r3, [r0, #0]
 8009ac2:	f013 0207 	ands.w	r2, r3, #7
 8009ac6:	4601      	mov	r1, r0
 8009ac8:	d00b      	beq.n	8009ae2 <__lo0bits+0x22>
 8009aca:	07da      	lsls	r2, r3, #31
 8009acc:	d423      	bmi.n	8009b16 <__lo0bits+0x56>
 8009ace:	0798      	lsls	r0, r3, #30
 8009ad0:	bf49      	itett	mi
 8009ad2:	085b      	lsrmi	r3, r3, #1
 8009ad4:	089b      	lsrpl	r3, r3, #2
 8009ad6:	2001      	movmi	r0, #1
 8009ad8:	600b      	strmi	r3, [r1, #0]
 8009ada:	bf5c      	itt	pl
 8009adc:	600b      	strpl	r3, [r1, #0]
 8009ade:	2002      	movpl	r0, #2
 8009ae0:	4770      	bx	lr
 8009ae2:	b298      	uxth	r0, r3
 8009ae4:	b9a8      	cbnz	r0, 8009b12 <__lo0bits+0x52>
 8009ae6:	0c1b      	lsrs	r3, r3, #16
 8009ae8:	2010      	movs	r0, #16
 8009aea:	b2da      	uxtb	r2, r3
 8009aec:	b90a      	cbnz	r2, 8009af2 <__lo0bits+0x32>
 8009aee:	3008      	adds	r0, #8
 8009af0:	0a1b      	lsrs	r3, r3, #8
 8009af2:	071a      	lsls	r2, r3, #28
 8009af4:	bf04      	itt	eq
 8009af6:	091b      	lsreq	r3, r3, #4
 8009af8:	3004      	addeq	r0, #4
 8009afa:	079a      	lsls	r2, r3, #30
 8009afc:	bf04      	itt	eq
 8009afe:	089b      	lsreq	r3, r3, #2
 8009b00:	3002      	addeq	r0, #2
 8009b02:	07da      	lsls	r2, r3, #31
 8009b04:	d403      	bmi.n	8009b0e <__lo0bits+0x4e>
 8009b06:	085b      	lsrs	r3, r3, #1
 8009b08:	f100 0001 	add.w	r0, r0, #1
 8009b0c:	d005      	beq.n	8009b1a <__lo0bits+0x5a>
 8009b0e:	600b      	str	r3, [r1, #0]
 8009b10:	4770      	bx	lr
 8009b12:	4610      	mov	r0, r2
 8009b14:	e7e9      	b.n	8009aea <__lo0bits+0x2a>
 8009b16:	2000      	movs	r0, #0
 8009b18:	4770      	bx	lr
 8009b1a:	2020      	movs	r0, #32
 8009b1c:	4770      	bx	lr
	...

08009b20 <__i2b>:
 8009b20:	b510      	push	{r4, lr}
 8009b22:	460c      	mov	r4, r1
 8009b24:	2101      	movs	r1, #1
 8009b26:	f7ff feb9 	bl	800989c <_Balloc>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	b928      	cbnz	r0, 8009b3a <__i2b+0x1a>
 8009b2e:	4b05      	ldr	r3, [pc, #20]	; (8009b44 <__i2b+0x24>)
 8009b30:	4805      	ldr	r0, [pc, #20]	; (8009b48 <__i2b+0x28>)
 8009b32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009b36:	f7fe fa49 	bl	8007fcc <__assert_func>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	6144      	str	r4, [r0, #20]
 8009b3e:	6103      	str	r3, [r0, #16]
 8009b40:	bd10      	pop	{r4, pc}
 8009b42:	bf00      	nop
 8009b44:	0800afe8 	.word	0x0800afe8
 8009b48:	0800b0d8 	.word	0x0800b0d8

08009b4c <__multiply>:
 8009b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b50:	4691      	mov	r9, r2
 8009b52:	690a      	ldr	r2, [r1, #16]
 8009b54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	bfb8      	it	lt
 8009b5c:	460b      	movlt	r3, r1
 8009b5e:	460c      	mov	r4, r1
 8009b60:	bfbc      	itt	lt
 8009b62:	464c      	movlt	r4, r9
 8009b64:	4699      	movlt	r9, r3
 8009b66:	6927      	ldr	r7, [r4, #16]
 8009b68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b6c:	68a3      	ldr	r3, [r4, #8]
 8009b6e:	6861      	ldr	r1, [r4, #4]
 8009b70:	eb07 060a 	add.w	r6, r7, sl
 8009b74:	42b3      	cmp	r3, r6
 8009b76:	b085      	sub	sp, #20
 8009b78:	bfb8      	it	lt
 8009b7a:	3101      	addlt	r1, #1
 8009b7c:	f7ff fe8e 	bl	800989c <_Balloc>
 8009b80:	b930      	cbnz	r0, 8009b90 <__multiply+0x44>
 8009b82:	4602      	mov	r2, r0
 8009b84:	4b44      	ldr	r3, [pc, #272]	; (8009c98 <__multiply+0x14c>)
 8009b86:	4845      	ldr	r0, [pc, #276]	; (8009c9c <__multiply+0x150>)
 8009b88:	f240 115d 	movw	r1, #349	; 0x15d
 8009b8c:	f7fe fa1e 	bl	8007fcc <__assert_func>
 8009b90:	f100 0514 	add.w	r5, r0, #20
 8009b94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b98:	462b      	mov	r3, r5
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	4543      	cmp	r3, r8
 8009b9e:	d321      	bcc.n	8009be4 <__multiply+0x98>
 8009ba0:	f104 0314 	add.w	r3, r4, #20
 8009ba4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ba8:	f109 0314 	add.w	r3, r9, #20
 8009bac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009bb0:	9202      	str	r2, [sp, #8]
 8009bb2:	1b3a      	subs	r2, r7, r4
 8009bb4:	3a15      	subs	r2, #21
 8009bb6:	f022 0203 	bic.w	r2, r2, #3
 8009bba:	3204      	adds	r2, #4
 8009bbc:	f104 0115 	add.w	r1, r4, #21
 8009bc0:	428f      	cmp	r7, r1
 8009bc2:	bf38      	it	cc
 8009bc4:	2204      	movcc	r2, #4
 8009bc6:	9201      	str	r2, [sp, #4]
 8009bc8:	9a02      	ldr	r2, [sp, #8]
 8009bca:	9303      	str	r3, [sp, #12]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d80c      	bhi.n	8009bea <__multiply+0x9e>
 8009bd0:	2e00      	cmp	r6, #0
 8009bd2:	dd03      	ble.n	8009bdc <__multiply+0x90>
 8009bd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d05a      	beq.n	8009c92 <__multiply+0x146>
 8009bdc:	6106      	str	r6, [r0, #16]
 8009bde:	b005      	add	sp, #20
 8009be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be4:	f843 2b04 	str.w	r2, [r3], #4
 8009be8:	e7d8      	b.n	8009b9c <__multiply+0x50>
 8009bea:	f8b3 a000 	ldrh.w	sl, [r3]
 8009bee:	f1ba 0f00 	cmp.w	sl, #0
 8009bf2:	d024      	beq.n	8009c3e <__multiply+0xf2>
 8009bf4:	f104 0e14 	add.w	lr, r4, #20
 8009bf8:	46a9      	mov	r9, r5
 8009bfa:	f04f 0c00 	mov.w	ip, #0
 8009bfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c02:	f8d9 1000 	ldr.w	r1, [r9]
 8009c06:	fa1f fb82 	uxth.w	fp, r2
 8009c0a:	b289      	uxth	r1, r1
 8009c0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c14:	f8d9 2000 	ldr.w	r2, [r9]
 8009c18:	4461      	add	r1, ip
 8009c1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c26:	b289      	uxth	r1, r1
 8009c28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c2c:	4577      	cmp	r7, lr
 8009c2e:	f849 1b04 	str.w	r1, [r9], #4
 8009c32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c36:	d8e2      	bhi.n	8009bfe <__multiply+0xb2>
 8009c38:	9a01      	ldr	r2, [sp, #4]
 8009c3a:	f845 c002 	str.w	ip, [r5, r2]
 8009c3e:	9a03      	ldr	r2, [sp, #12]
 8009c40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c44:	3304      	adds	r3, #4
 8009c46:	f1b9 0f00 	cmp.w	r9, #0
 8009c4a:	d020      	beq.n	8009c8e <__multiply+0x142>
 8009c4c:	6829      	ldr	r1, [r5, #0]
 8009c4e:	f104 0c14 	add.w	ip, r4, #20
 8009c52:	46ae      	mov	lr, r5
 8009c54:	f04f 0a00 	mov.w	sl, #0
 8009c58:	f8bc b000 	ldrh.w	fp, [ip]
 8009c5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c60:	fb09 220b 	mla	r2, r9, fp, r2
 8009c64:	4492      	add	sl, r2
 8009c66:	b289      	uxth	r1, r1
 8009c68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009c6c:	f84e 1b04 	str.w	r1, [lr], #4
 8009c70:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009c74:	f8be 1000 	ldrh.w	r1, [lr]
 8009c78:	0c12      	lsrs	r2, r2, #16
 8009c7a:	fb09 1102 	mla	r1, r9, r2, r1
 8009c7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009c82:	4567      	cmp	r7, ip
 8009c84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c88:	d8e6      	bhi.n	8009c58 <__multiply+0x10c>
 8009c8a:	9a01      	ldr	r2, [sp, #4]
 8009c8c:	50a9      	str	r1, [r5, r2]
 8009c8e:	3504      	adds	r5, #4
 8009c90:	e79a      	b.n	8009bc8 <__multiply+0x7c>
 8009c92:	3e01      	subs	r6, #1
 8009c94:	e79c      	b.n	8009bd0 <__multiply+0x84>
 8009c96:	bf00      	nop
 8009c98:	0800afe8 	.word	0x0800afe8
 8009c9c:	0800b0d8 	.word	0x0800b0d8

08009ca0 <__pow5mult>:
 8009ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ca4:	4615      	mov	r5, r2
 8009ca6:	f012 0203 	ands.w	r2, r2, #3
 8009caa:	4606      	mov	r6, r0
 8009cac:	460f      	mov	r7, r1
 8009cae:	d007      	beq.n	8009cc0 <__pow5mult+0x20>
 8009cb0:	4c25      	ldr	r4, [pc, #148]	; (8009d48 <__pow5mult+0xa8>)
 8009cb2:	3a01      	subs	r2, #1
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cba:	f7ff fe51 	bl	8009960 <__multadd>
 8009cbe:	4607      	mov	r7, r0
 8009cc0:	10ad      	asrs	r5, r5, #2
 8009cc2:	d03d      	beq.n	8009d40 <__pow5mult+0xa0>
 8009cc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009cc6:	b97c      	cbnz	r4, 8009ce8 <__pow5mult+0x48>
 8009cc8:	2010      	movs	r0, #16
 8009cca:	f7fc fbfd 	bl	80064c8 <malloc>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	6270      	str	r0, [r6, #36]	; 0x24
 8009cd2:	b928      	cbnz	r0, 8009ce0 <__pow5mult+0x40>
 8009cd4:	4b1d      	ldr	r3, [pc, #116]	; (8009d4c <__pow5mult+0xac>)
 8009cd6:	481e      	ldr	r0, [pc, #120]	; (8009d50 <__pow5mult+0xb0>)
 8009cd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009cdc:	f7fe f976 	bl	8007fcc <__assert_func>
 8009ce0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ce4:	6004      	str	r4, [r0, #0]
 8009ce6:	60c4      	str	r4, [r0, #12]
 8009ce8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009cec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cf0:	b94c      	cbnz	r4, 8009d06 <__pow5mult+0x66>
 8009cf2:	f240 2171 	movw	r1, #625	; 0x271
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	f7ff ff12 	bl	8009b20 <__i2b>
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d02:	4604      	mov	r4, r0
 8009d04:	6003      	str	r3, [r0, #0]
 8009d06:	f04f 0900 	mov.w	r9, #0
 8009d0a:	07eb      	lsls	r3, r5, #31
 8009d0c:	d50a      	bpl.n	8009d24 <__pow5mult+0x84>
 8009d0e:	4639      	mov	r1, r7
 8009d10:	4622      	mov	r2, r4
 8009d12:	4630      	mov	r0, r6
 8009d14:	f7ff ff1a 	bl	8009b4c <__multiply>
 8009d18:	4639      	mov	r1, r7
 8009d1a:	4680      	mov	r8, r0
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f7ff fdfd 	bl	800991c <_Bfree>
 8009d22:	4647      	mov	r7, r8
 8009d24:	106d      	asrs	r5, r5, #1
 8009d26:	d00b      	beq.n	8009d40 <__pow5mult+0xa0>
 8009d28:	6820      	ldr	r0, [r4, #0]
 8009d2a:	b938      	cbnz	r0, 8009d3c <__pow5mult+0x9c>
 8009d2c:	4622      	mov	r2, r4
 8009d2e:	4621      	mov	r1, r4
 8009d30:	4630      	mov	r0, r6
 8009d32:	f7ff ff0b 	bl	8009b4c <__multiply>
 8009d36:	6020      	str	r0, [r4, #0]
 8009d38:	f8c0 9000 	str.w	r9, [r0]
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	e7e4      	b.n	8009d0a <__pow5mult+0x6a>
 8009d40:	4638      	mov	r0, r7
 8009d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d46:	bf00      	nop
 8009d48:	0800b228 	.word	0x0800b228
 8009d4c:	0800aed0 	.word	0x0800aed0
 8009d50:	0800b0d8 	.word	0x0800b0d8

08009d54 <__lshift>:
 8009d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d58:	460c      	mov	r4, r1
 8009d5a:	6849      	ldr	r1, [r1, #4]
 8009d5c:	6923      	ldr	r3, [r4, #16]
 8009d5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d62:	68a3      	ldr	r3, [r4, #8]
 8009d64:	4607      	mov	r7, r0
 8009d66:	4691      	mov	r9, r2
 8009d68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d6c:	f108 0601 	add.w	r6, r8, #1
 8009d70:	42b3      	cmp	r3, r6
 8009d72:	db0b      	blt.n	8009d8c <__lshift+0x38>
 8009d74:	4638      	mov	r0, r7
 8009d76:	f7ff fd91 	bl	800989c <_Balloc>
 8009d7a:	4605      	mov	r5, r0
 8009d7c:	b948      	cbnz	r0, 8009d92 <__lshift+0x3e>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	4b2a      	ldr	r3, [pc, #168]	; (8009e2c <__lshift+0xd8>)
 8009d82:	482b      	ldr	r0, [pc, #172]	; (8009e30 <__lshift+0xdc>)
 8009d84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009d88:	f7fe f920 	bl	8007fcc <__assert_func>
 8009d8c:	3101      	adds	r1, #1
 8009d8e:	005b      	lsls	r3, r3, #1
 8009d90:	e7ee      	b.n	8009d70 <__lshift+0x1c>
 8009d92:	2300      	movs	r3, #0
 8009d94:	f100 0114 	add.w	r1, r0, #20
 8009d98:	f100 0210 	add.w	r2, r0, #16
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	4553      	cmp	r3, sl
 8009da0:	db37      	blt.n	8009e12 <__lshift+0xbe>
 8009da2:	6920      	ldr	r0, [r4, #16]
 8009da4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009da8:	f104 0314 	add.w	r3, r4, #20
 8009dac:	f019 091f 	ands.w	r9, r9, #31
 8009db0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009db4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009db8:	d02f      	beq.n	8009e1a <__lshift+0xc6>
 8009dba:	f1c9 0e20 	rsb	lr, r9, #32
 8009dbe:	468a      	mov	sl, r1
 8009dc0:	f04f 0c00 	mov.w	ip, #0
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	fa02 f209 	lsl.w	r2, r2, r9
 8009dca:	ea42 020c 	orr.w	r2, r2, ip
 8009dce:	f84a 2b04 	str.w	r2, [sl], #4
 8009dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dd6:	4298      	cmp	r0, r3
 8009dd8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009ddc:	d8f2      	bhi.n	8009dc4 <__lshift+0x70>
 8009dde:	1b03      	subs	r3, r0, r4
 8009de0:	3b15      	subs	r3, #21
 8009de2:	f023 0303 	bic.w	r3, r3, #3
 8009de6:	3304      	adds	r3, #4
 8009de8:	f104 0215 	add.w	r2, r4, #21
 8009dec:	4290      	cmp	r0, r2
 8009dee:	bf38      	it	cc
 8009df0:	2304      	movcc	r3, #4
 8009df2:	f841 c003 	str.w	ip, [r1, r3]
 8009df6:	f1bc 0f00 	cmp.w	ip, #0
 8009dfa:	d001      	beq.n	8009e00 <__lshift+0xac>
 8009dfc:	f108 0602 	add.w	r6, r8, #2
 8009e00:	3e01      	subs	r6, #1
 8009e02:	4638      	mov	r0, r7
 8009e04:	612e      	str	r6, [r5, #16]
 8009e06:	4621      	mov	r1, r4
 8009e08:	f7ff fd88 	bl	800991c <_Bfree>
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e12:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e16:	3301      	adds	r3, #1
 8009e18:	e7c1      	b.n	8009d9e <__lshift+0x4a>
 8009e1a:	3904      	subs	r1, #4
 8009e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e20:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e24:	4298      	cmp	r0, r3
 8009e26:	d8f9      	bhi.n	8009e1c <__lshift+0xc8>
 8009e28:	e7ea      	b.n	8009e00 <__lshift+0xac>
 8009e2a:	bf00      	nop
 8009e2c:	0800afe8 	.word	0x0800afe8
 8009e30:	0800b0d8 	.word	0x0800b0d8

08009e34 <__mcmp>:
 8009e34:	b530      	push	{r4, r5, lr}
 8009e36:	6902      	ldr	r2, [r0, #16]
 8009e38:	690c      	ldr	r4, [r1, #16]
 8009e3a:	1b12      	subs	r2, r2, r4
 8009e3c:	d10e      	bne.n	8009e5c <__mcmp+0x28>
 8009e3e:	f100 0314 	add.w	r3, r0, #20
 8009e42:	3114      	adds	r1, #20
 8009e44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e54:	42a5      	cmp	r5, r4
 8009e56:	d003      	beq.n	8009e60 <__mcmp+0x2c>
 8009e58:	d305      	bcc.n	8009e66 <__mcmp+0x32>
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	bd30      	pop	{r4, r5, pc}
 8009e60:	4283      	cmp	r3, r0
 8009e62:	d3f3      	bcc.n	8009e4c <__mcmp+0x18>
 8009e64:	e7fa      	b.n	8009e5c <__mcmp+0x28>
 8009e66:	f04f 32ff 	mov.w	r2, #4294967295
 8009e6a:	e7f7      	b.n	8009e5c <__mcmp+0x28>

08009e6c <__mdiff>:
 8009e6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e70:	460c      	mov	r4, r1
 8009e72:	4606      	mov	r6, r0
 8009e74:	4611      	mov	r1, r2
 8009e76:	4620      	mov	r0, r4
 8009e78:	4690      	mov	r8, r2
 8009e7a:	f7ff ffdb 	bl	8009e34 <__mcmp>
 8009e7e:	1e05      	subs	r5, r0, #0
 8009e80:	d110      	bne.n	8009ea4 <__mdiff+0x38>
 8009e82:	4629      	mov	r1, r5
 8009e84:	4630      	mov	r0, r6
 8009e86:	f7ff fd09 	bl	800989c <_Balloc>
 8009e8a:	b930      	cbnz	r0, 8009e9a <__mdiff+0x2e>
 8009e8c:	4b3a      	ldr	r3, [pc, #232]	; (8009f78 <__mdiff+0x10c>)
 8009e8e:	4602      	mov	r2, r0
 8009e90:	f240 2132 	movw	r1, #562	; 0x232
 8009e94:	4839      	ldr	r0, [pc, #228]	; (8009f7c <__mdiff+0x110>)
 8009e96:	f7fe f899 	bl	8007fcc <__assert_func>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ea0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea4:	bfa4      	itt	ge
 8009ea6:	4643      	movge	r3, r8
 8009ea8:	46a0      	movge	r8, r4
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009eb0:	bfa6      	itte	ge
 8009eb2:	461c      	movge	r4, r3
 8009eb4:	2500      	movge	r5, #0
 8009eb6:	2501      	movlt	r5, #1
 8009eb8:	f7ff fcf0 	bl	800989c <_Balloc>
 8009ebc:	b920      	cbnz	r0, 8009ec8 <__mdiff+0x5c>
 8009ebe:	4b2e      	ldr	r3, [pc, #184]	; (8009f78 <__mdiff+0x10c>)
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ec6:	e7e5      	b.n	8009e94 <__mdiff+0x28>
 8009ec8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009ecc:	6926      	ldr	r6, [r4, #16]
 8009ece:	60c5      	str	r5, [r0, #12]
 8009ed0:	f104 0914 	add.w	r9, r4, #20
 8009ed4:	f108 0514 	add.w	r5, r8, #20
 8009ed8:	f100 0e14 	add.w	lr, r0, #20
 8009edc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009ee0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009ee4:	f108 0210 	add.w	r2, r8, #16
 8009ee8:	46f2      	mov	sl, lr
 8009eea:	2100      	movs	r1, #0
 8009eec:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ef0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ef4:	fa1f f883 	uxth.w	r8, r3
 8009ef8:	fa11 f18b 	uxtah	r1, r1, fp
 8009efc:	0c1b      	lsrs	r3, r3, #16
 8009efe:	eba1 0808 	sub.w	r8, r1, r8
 8009f02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f0a:	fa1f f888 	uxth.w	r8, r8
 8009f0e:	1419      	asrs	r1, r3, #16
 8009f10:	454e      	cmp	r6, r9
 8009f12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f16:	f84a 3b04 	str.w	r3, [sl], #4
 8009f1a:	d8e7      	bhi.n	8009eec <__mdiff+0x80>
 8009f1c:	1b33      	subs	r3, r6, r4
 8009f1e:	3b15      	subs	r3, #21
 8009f20:	f023 0303 	bic.w	r3, r3, #3
 8009f24:	3304      	adds	r3, #4
 8009f26:	3415      	adds	r4, #21
 8009f28:	42a6      	cmp	r6, r4
 8009f2a:	bf38      	it	cc
 8009f2c:	2304      	movcc	r3, #4
 8009f2e:	441d      	add	r5, r3
 8009f30:	4473      	add	r3, lr
 8009f32:	469e      	mov	lr, r3
 8009f34:	462e      	mov	r6, r5
 8009f36:	4566      	cmp	r6, ip
 8009f38:	d30e      	bcc.n	8009f58 <__mdiff+0xec>
 8009f3a:	f10c 0203 	add.w	r2, ip, #3
 8009f3e:	1b52      	subs	r2, r2, r5
 8009f40:	f022 0203 	bic.w	r2, r2, #3
 8009f44:	3d03      	subs	r5, #3
 8009f46:	45ac      	cmp	ip, r5
 8009f48:	bf38      	it	cc
 8009f4a:	2200      	movcc	r2, #0
 8009f4c:	441a      	add	r2, r3
 8009f4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009f52:	b17b      	cbz	r3, 8009f74 <__mdiff+0x108>
 8009f54:	6107      	str	r7, [r0, #16]
 8009f56:	e7a3      	b.n	8009ea0 <__mdiff+0x34>
 8009f58:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f5c:	fa11 f288 	uxtah	r2, r1, r8
 8009f60:	1414      	asrs	r4, r2, #16
 8009f62:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f66:	b292      	uxth	r2, r2
 8009f68:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f6c:	f84e 2b04 	str.w	r2, [lr], #4
 8009f70:	1421      	asrs	r1, r4, #16
 8009f72:	e7e0      	b.n	8009f36 <__mdiff+0xca>
 8009f74:	3f01      	subs	r7, #1
 8009f76:	e7ea      	b.n	8009f4e <__mdiff+0xe2>
 8009f78:	0800afe8 	.word	0x0800afe8
 8009f7c:	0800b0d8 	.word	0x0800b0d8

08009f80 <__ulp>:
 8009f80:	b082      	sub	sp, #8
 8009f82:	ed8d 0b00 	vstr	d0, [sp]
 8009f86:	9b01      	ldr	r3, [sp, #4]
 8009f88:	4912      	ldr	r1, [pc, #72]	; (8009fd4 <__ulp+0x54>)
 8009f8a:	4019      	ands	r1, r3
 8009f8c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009f90:	2900      	cmp	r1, #0
 8009f92:	dd05      	ble.n	8009fa0 <__ulp+0x20>
 8009f94:	2200      	movs	r2, #0
 8009f96:	460b      	mov	r3, r1
 8009f98:	ec43 2b10 	vmov	d0, r2, r3
 8009f9c:	b002      	add	sp, #8
 8009f9e:	4770      	bx	lr
 8009fa0:	4249      	negs	r1, r1
 8009fa2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009fa6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009faa:	f04f 0200 	mov.w	r2, #0
 8009fae:	f04f 0300 	mov.w	r3, #0
 8009fb2:	da04      	bge.n	8009fbe <__ulp+0x3e>
 8009fb4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009fb8:	fa41 f300 	asr.w	r3, r1, r0
 8009fbc:	e7ec      	b.n	8009f98 <__ulp+0x18>
 8009fbe:	f1a0 0114 	sub.w	r1, r0, #20
 8009fc2:	291e      	cmp	r1, #30
 8009fc4:	bfda      	itte	le
 8009fc6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009fca:	fa20 f101 	lsrle.w	r1, r0, r1
 8009fce:	2101      	movgt	r1, #1
 8009fd0:	460a      	mov	r2, r1
 8009fd2:	e7e1      	b.n	8009f98 <__ulp+0x18>
 8009fd4:	7ff00000 	.word	0x7ff00000

08009fd8 <__b2d>:
 8009fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fda:	6905      	ldr	r5, [r0, #16]
 8009fdc:	f100 0714 	add.w	r7, r0, #20
 8009fe0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009fe4:	1f2e      	subs	r6, r5, #4
 8009fe6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009fea:	4620      	mov	r0, r4
 8009fec:	f7ff fd48 	bl	8009a80 <__hi0bits>
 8009ff0:	f1c0 0320 	rsb	r3, r0, #32
 8009ff4:	280a      	cmp	r0, #10
 8009ff6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a074 <__b2d+0x9c>
 8009ffa:	600b      	str	r3, [r1, #0]
 8009ffc:	dc14      	bgt.n	800a028 <__b2d+0x50>
 8009ffe:	f1c0 0e0b 	rsb	lr, r0, #11
 800a002:	fa24 f10e 	lsr.w	r1, r4, lr
 800a006:	42b7      	cmp	r7, r6
 800a008:	ea41 030c 	orr.w	r3, r1, ip
 800a00c:	bf34      	ite	cc
 800a00e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a012:	2100      	movcs	r1, #0
 800a014:	3015      	adds	r0, #21
 800a016:	fa04 f000 	lsl.w	r0, r4, r0
 800a01a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a01e:	ea40 0201 	orr.w	r2, r0, r1
 800a022:	ec43 2b10 	vmov	d0, r2, r3
 800a026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a028:	42b7      	cmp	r7, r6
 800a02a:	bf3a      	itte	cc
 800a02c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a030:	f1a5 0608 	subcc.w	r6, r5, #8
 800a034:	2100      	movcs	r1, #0
 800a036:	380b      	subs	r0, #11
 800a038:	d017      	beq.n	800a06a <__b2d+0x92>
 800a03a:	f1c0 0c20 	rsb	ip, r0, #32
 800a03e:	fa04 f500 	lsl.w	r5, r4, r0
 800a042:	42be      	cmp	r6, r7
 800a044:	fa21 f40c 	lsr.w	r4, r1, ip
 800a048:	ea45 0504 	orr.w	r5, r5, r4
 800a04c:	bf8c      	ite	hi
 800a04e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a052:	2400      	movls	r4, #0
 800a054:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a058:	fa01 f000 	lsl.w	r0, r1, r0
 800a05c:	fa24 f40c 	lsr.w	r4, r4, ip
 800a060:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a064:	ea40 0204 	orr.w	r2, r0, r4
 800a068:	e7db      	b.n	800a022 <__b2d+0x4a>
 800a06a:	ea44 030c 	orr.w	r3, r4, ip
 800a06e:	460a      	mov	r2, r1
 800a070:	e7d7      	b.n	800a022 <__b2d+0x4a>
 800a072:	bf00      	nop
 800a074:	3ff00000 	.word	0x3ff00000

0800a078 <__d2b>:
 800a078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a07c:	4689      	mov	r9, r1
 800a07e:	2101      	movs	r1, #1
 800a080:	ec57 6b10 	vmov	r6, r7, d0
 800a084:	4690      	mov	r8, r2
 800a086:	f7ff fc09 	bl	800989c <_Balloc>
 800a08a:	4604      	mov	r4, r0
 800a08c:	b930      	cbnz	r0, 800a09c <__d2b+0x24>
 800a08e:	4602      	mov	r2, r0
 800a090:	4b25      	ldr	r3, [pc, #148]	; (800a128 <__d2b+0xb0>)
 800a092:	4826      	ldr	r0, [pc, #152]	; (800a12c <__d2b+0xb4>)
 800a094:	f240 310a 	movw	r1, #778	; 0x30a
 800a098:	f7fd ff98 	bl	8007fcc <__assert_func>
 800a09c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a0a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0a4:	bb35      	cbnz	r5, 800a0f4 <__d2b+0x7c>
 800a0a6:	2e00      	cmp	r6, #0
 800a0a8:	9301      	str	r3, [sp, #4]
 800a0aa:	d028      	beq.n	800a0fe <__d2b+0x86>
 800a0ac:	4668      	mov	r0, sp
 800a0ae:	9600      	str	r6, [sp, #0]
 800a0b0:	f7ff fd06 	bl	8009ac0 <__lo0bits>
 800a0b4:	9900      	ldr	r1, [sp, #0]
 800a0b6:	b300      	cbz	r0, 800a0fa <__d2b+0x82>
 800a0b8:	9a01      	ldr	r2, [sp, #4]
 800a0ba:	f1c0 0320 	rsb	r3, r0, #32
 800a0be:	fa02 f303 	lsl.w	r3, r2, r3
 800a0c2:	430b      	orrs	r3, r1
 800a0c4:	40c2      	lsrs	r2, r0
 800a0c6:	6163      	str	r3, [r4, #20]
 800a0c8:	9201      	str	r2, [sp, #4]
 800a0ca:	9b01      	ldr	r3, [sp, #4]
 800a0cc:	61a3      	str	r3, [r4, #24]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	bf14      	ite	ne
 800a0d2:	2202      	movne	r2, #2
 800a0d4:	2201      	moveq	r2, #1
 800a0d6:	6122      	str	r2, [r4, #16]
 800a0d8:	b1d5      	cbz	r5, 800a110 <__d2b+0x98>
 800a0da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a0de:	4405      	add	r5, r0
 800a0e0:	f8c9 5000 	str.w	r5, [r9]
 800a0e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a0e8:	f8c8 0000 	str.w	r0, [r8]
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	b003      	add	sp, #12
 800a0f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0f8:	e7d5      	b.n	800a0a6 <__d2b+0x2e>
 800a0fa:	6161      	str	r1, [r4, #20]
 800a0fc:	e7e5      	b.n	800a0ca <__d2b+0x52>
 800a0fe:	a801      	add	r0, sp, #4
 800a100:	f7ff fcde 	bl	8009ac0 <__lo0bits>
 800a104:	9b01      	ldr	r3, [sp, #4]
 800a106:	6163      	str	r3, [r4, #20]
 800a108:	2201      	movs	r2, #1
 800a10a:	6122      	str	r2, [r4, #16]
 800a10c:	3020      	adds	r0, #32
 800a10e:	e7e3      	b.n	800a0d8 <__d2b+0x60>
 800a110:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a114:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a118:	f8c9 0000 	str.w	r0, [r9]
 800a11c:	6918      	ldr	r0, [r3, #16]
 800a11e:	f7ff fcaf 	bl	8009a80 <__hi0bits>
 800a122:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a126:	e7df      	b.n	800a0e8 <__d2b+0x70>
 800a128:	0800afe8 	.word	0x0800afe8
 800a12c:	0800b0d8 	.word	0x0800b0d8

0800a130 <__ratio>:
 800a130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a134:	4688      	mov	r8, r1
 800a136:	4669      	mov	r1, sp
 800a138:	4681      	mov	r9, r0
 800a13a:	f7ff ff4d 	bl	8009fd8 <__b2d>
 800a13e:	a901      	add	r1, sp, #4
 800a140:	4640      	mov	r0, r8
 800a142:	ec55 4b10 	vmov	r4, r5, d0
 800a146:	f7ff ff47 	bl	8009fd8 <__b2d>
 800a14a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a14e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a152:	eba3 0c02 	sub.w	ip, r3, r2
 800a156:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a15a:	1a9b      	subs	r3, r3, r2
 800a15c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a160:	ec51 0b10 	vmov	r0, r1, d0
 800a164:	2b00      	cmp	r3, #0
 800a166:	bfd6      	itet	le
 800a168:	460a      	movle	r2, r1
 800a16a:	462a      	movgt	r2, r5
 800a16c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a170:	468b      	mov	fp, r1
 800a172:	462f      	mov	r7, r5
 800a174:	bfd4      	ite	le
 800a176:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a17a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a17e:	4620      	mov	r0, r4
 800a180:	ee10 2a10 	vmov	r2, s0
 800a184:	465b      	mov	r3, fp
 800a186:	4639      	mov	r1, r7
 800a188:	f7f6 fb90 	bl	80008ac <__aeabi_ddiv>
 800a18c:	ec41 0b10 	vmov	d0, r0, r1
 800a190:	b003      	add	sp, #12
 800a192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a196 <__copybits>:
 800a196:	3901      	subs	r1, #1
 800a198:	b570      	push	{r4, r5, r6, lr}
 800a19a:	1149      	asrs	r1, r1, #5
 800a19c:	6914      	ldr	r4, [r2, #16]
 800a19e:	3101      	adds	r1, #1
 800a1a0:	f102 0314 	add.w	r3, r2, #20
 800a1a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a1a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a1ac:	1f05      	subs	r5, r0, #4
 800a1ae:	42a3      	cmp	r3, r4
 800a1b0:	d30c      	bcc.n	800a1cc <__copybits+0x36>
 800a1b2:	1aa3      	subs	r3, r4, r2
 800a1b4:	3b11      	subs	r3, #17
 800a1b6:	f023 0303 	bic.w	r3, r3, #3
 800a1ba:	3211      	adds	r2, #17
 800a1bc:	42a2      	cmp	r2, r4
 800a1be:	bf88      	it	hi
 800a1c0:	2300      	movhi	r3, #0
 800a1c2:	4418      	add	r0, r3
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	4288      	cmp	r0, r1
 800a1c8:	d305      	bcc.n	800a1d6 <__copybits+0x40>
 800a1ca:	bd70      	pop	{r4, r5, r6, pc}
 800a1cc:	f853 6b04 	ldr.w	r6, [r3], #4
 800a1d0:	f845 6f04 	str.w	r6, [r5, #4]!
 800a1d4:	e7eb      	b.n	800a1ae <__copybits+0x18>
 800a1d6:	f840 3b04 	str.w	r3, [r0], #4
 800a1da:	e7f4      	b.n	800a1c6 <__copybits+0x30>

0800a1dc <__any_on>:
 800a1dc:	f100 0214 	add.w	r2, r0, #20
 800a1e0:	6900      	ldr	r0, [r0, #16]
 800a1e2:	114b      	asrs	r3, r1, #5
 800a1e4:	4298      	cmp	r0, r3
 800a1e6:	b510      	push	{r4, lr}
 800a1e8:	db11      	blt.n	800a20e <__any_on+0x32>
 800a1ea:	dd0a      	ble.n	800a202 <__any_on+0x26>
 800a1ec:	f011 011f 	ands.w	r1, r1, #31
 800a1f0:	d007      	beq.n	800a202 <__any_on+0x26>
 800a1f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a1f6:	fa24 f001 	lsr.w	r0, r4, r1
 800a1fa:	fa00 f101 	lsl.w	r1, r0, r1
 800a1fe:	428c      	cmp	r4, r1
 800a200:	d10b      	bne.n	800a21a <__any_on+0x3e>
 800a202:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a206:	4293      	cmp	r3, r2
 800a208:	d803      	bhi.n	800a212 <__any_on+0x36>
 800a20a:	2000      	movs	r0, #0
 800a20c:	bd10      	pop	{r4, pc}
 800a20e:	4603      	mov	r3, r0
 800a210:	e7f7      	b.n	800a202 <__any_on+0x26>
 800a212:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a216:	2900      	cmp	r1, #0
 800a218:	d0f5      	beq.n	800a206 <__any_on+0x2a>
 800a21a:	2001      	movs	r0, #1
 800a21c:	e7f6      	b.n	800a20c <__any_on+0x30>

0800a21e <_calloc_r>:
 800a21e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a220:	fba1 2402 	umull	r2, r4, r1, r2
 800a224:	b94c      	cbnz	r4, 800a23a <_calloc_r+0x1c>
 800a226:	4611      	mov	r1, r2
 800a228:	9201      	str	r2, [sp, #4]
 800a22a:	f7fc f9eb 	bl	8006604 <_malloc_r>
 800a22e:	9a01      	ldr	r2, [sp, #4]
 800a230:	4605      	mov	r5, r0
 800a232:	b930      	cbnz	r0, 800a242 <_calloc_r+0x24>
 800a234:	4628      	mov	r0, r5
 800a236:	b003      	add	sp, #12
 800a238:	bd30      	pop	{r4, r5, pc}
 800a23a:	220c      	movs	r2, #12
 800a23c:	6002      	str	r2, [r0, #0]
 800a23e:	2500      	movs	r5, #0
 800a240:	e7f8      	b.n	800a234 <_calloc_r+0x16>
 800a242:	4621      	mov	r1, r4
 800a244:	f7fc f96a 	bl	800651c <memset>
 800a248:	e7f4      	b.n	800a234 <_calloc_r+0x16>

0800a24a <__ssputs_r>:
 800a24a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a24e:	688e      	ldr	r6, [r1, #8]
 800a250:	429e      	cmp	r6, r3
 800a252:	4682      	mov	sl, r0
 800a254:	460c      	mov	r4, r1
 800a256:	4690      	mov	r8, r2
 800a258:	461f      	mov	r7, r3
 800a25a:	d838      	bhi.n	800a2ce <__ssputs_r+0x84>
 800a25c:	898a      	ldrh	r2, [r1, #12]
 800a25e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a262:	d032      	beq.n	800a2ca <__ssputs_r+0x80>
 800a264:	6825      	ldr	r5, [r4, #0]
 800a266:	6909      	ldr	r1, [r1, #16]
 800a268:	eba5 0901 	sub.w	r9, r5, r1
 800a26c:	6965      	ldr	r5, [r4, #20]
 800a26e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a272:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a276:	3301      	adds	r3, #1
 800a278:	444b      	add	r3, r9
 800a27a:	106d      	asrs	r5, r5, #1
 800a27c:	429d      	cmp	r5, r3
 800a27e:	bf38      	it	cc
 800a280:	461d      	movcc	r5, r3
 800a282:	0553      	lsls	r3, r2, #21
 800a284:	d531      	bpl.n	800a2ea <__ssputs_r+0xa0>
 800a286:	4629      	mov	r1, r5
 800a288:	f7fc f9bc 	bl	8006604 <_malloc_r>
 800a28c:	4606      	mov	r6, r0
 800a28e:	b950      	cbnz	r0, 800a2a6 <__ssputs_r+0x5c>
 800a290:	230c      	movs	r3, #12
 800a292:	f8ca 3000 	str.w	r3, [sl]
 800a296:	89a3      	ldrh	r3, [r4, #12]
 800a298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a29c:	81a3      	strh	r3, [r4, #12]
 800a29e:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a6:	6921      	ldr	r1, [r4, #16]
 800a2a8:	464a      	mov	r2, r9
 800a2aa:	f7ff fadd 	bl	8009868 <memcpy>
 800a2ae:	89a3      	ldrh	r3, [r4, #12]
 800a2b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a2b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2b8:	81a3      	strh	r3, [r4, #12]
 800a2ba:	6126      	str	r6, [r4, #16]
 800a2bc:	6165      	str	r5, [r4, #20]
 800a2be:	444e      	add	r6, r9
 800a2c0:	eba5 0509 	sub.w	r5, r5, r9
 800a2c4:	6026      	str	r6, [r4, #0]
 800a2c6:	60a5      	str	r5, [r4, #8]
 800a2c8:	463e      	mov	r6, r7
 800a2ca:	42be      	cmp	r6, r7
 800a2cc:	d900      	bls.n	800a2d0 <__ssputs_r+0x86>
 800a2ce:	463e      	mov	r6, r7
 800a2d0:	6820      	ldr	r0, [r4, #0]
 800a2d2:	4632      	mov	r2, r6
 800a2d4:	4641      	mov	r1, r8
 800a2d6:	f7fc f907 	bl	80064e8 <memmove>
 800a2da:	68a3      	ldr	r3, [r4, #8]
 800a2dc:	1b9b      	subs	r3, r3, r6
 800a2de:	60a3      	str	r3, [r4, #8]
 800a2e0:	6823      	ldr	r3, [r4, #0]
 800a2e2:	4433      	add	r3, r6
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	e7db      	b.n	800a2a2 <__ssputs_r+0x58>
 800a2ea:	462a      	mov	r2, r5
 800a2ec:	f000 fb2e 	bl	800a94c <_realloc_r>
 800a2f0:	4606      	mov	r6, r0
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	d1e1      	bne.n	800a2ba <__ssputs_r+0x70>
 800a2f6:	6921      	ldr	r1, [r4, #16]
 800a2f8:	4650      	mov	r0, sl
 800a2fa:	f7fc f917 	bl	800652c <_free_r>
 800a2fe:	e7c7      	b.n	800a290 <__ssputs_r+0x46>

0800a300 <_svfiprintf_r>:
 800a300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a304:	4698      	mov	r8, r3
 800a306:	898b      	ldrh	r3, [r1, #12]
 800a308:	061b      	lsls	r3, r3, #24
 800a30a:	b09d      	sub	sp, #116	; 0x74
 800a30c:	4607      	mov	r7, r0
 800a30e:	460d      	mov	r5, r1
 800a310:	4614      	mov	r4, r2
 800a312:	d50e      	bpl.n	800a332 <_svfiprintf_r+0x32>
 800a314:	690b      	ldr	r3, [r1, #16]
 800a316:	b963      	cbnz	r3, 800a332 <_svfiprintf_r+0x32>
 800a318:	2140      	movs	r1, #64	; 0x40
 800a31a:	f7fc f973 	bl	8006604 <_malloc_r>
 800a31e:	6028      	str	r0, [r5, #0]
 800a320:	6128      	str	r0, [r5, #16]
 800a322:	b920      	cbnz	r0, 800a32e <_svfiprintf_r+0x2e>
 800a324:	230c      	movs	r3, #12
 800a326:	603b      	str	r3, [r7, #0]
 800a328:	f04f 30ff 	mov.w	r0, #4294967295
 800a32c:	e0d1      	b.n	800a4d2 <_svfiprintf_r+0x1d2>
 800a32e:	2340      	movs	r3, #64	; 0x40
 800a330:	616b      	str	r3, [r5, #20]
 800a332:	2300      	movs	r3, #0
 800a334:	9309      	str	r3, [sp, #36]	; 0x24
 800a336:	2320      	movs	r3, #32
 800a338:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a33c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a340:	2330      	movs	r3, #48	; 0x30
 800a342:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a4ec <_svfiprintf_r+0x1ec>
 800a346:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a34a:	f04f 0901 	mov.w	r9, #1
 800a34e:	4623      	mov	r3, r4
 800a350:	469a      	mov	sl, r3
 800a352:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a356:	b10a      	cbz	r2, 800a35c <_svfiprintf_r+0x5c>
 800a358:	2a25      	cmp	r2, #37	; 0x25
 800a35a:	d1f9      	bne.n	800a350 <_svfiprintf_r+0x50>
 800a35c:	ebba 0b04 	subs.w	fp, sl, r4
 800a360:	d00b      	beq.n	800a37a <_svfiprintf_r+0x7a>
 800a362:	465b      	mov	r3, fp
 800a364:	4622      	mov	r2, r4
 800a366:	4629      	mov	r1, r5
 800a368:	4638      	mov	r0, r7
 800a36a:	f7ff ff6e 	bl	800a24a <__ssputs_r>
 800a36e:	3001      	adds	r0, #1
 800a370:	f000 80aa 	beq.w	800a4c8 <_svfiprintf_r+0x1c8>
 800a374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a376:	445a      	add	r2, fp
 800a378:	9209      	str	r2, [sp, #36]	; 0x24
 800a37a:	f89a 3000 	ldrb.w	r3, [sl]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f000 80a2 	beq.w	800a4c8 <_svfiprintf_r+0x1c8>
 800a384:	2300      	movs	r3, #0
 800a386:	f04f 32ff 	mov.w	r2, #4294967295
 800a38a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a38e:	f10a 0a01 	add.w	sl, sl, #1
 800a392:	9304      	str	r3, [sp, #16]
 800a394:	9307      	str	r3, [sp, #28]
 800a396:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a39a:	931a      	str	r3, [sp, #104]	; 0x68
 800a39c:	4654      	mov	r4, sl
 800a39e:	2205      	movs	r2, #5
 800a3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3a4:	4851      	ldr	r0, [pc, #324]	; (800a4ec <_svfiprintf_r+0x1ec>)
 800a3a6:	f7f5 ff4b 	bl	8000240 <memchr>
 800a3aa:	9a04      	ldr	r2, [sp, #16]
 800a3ac:	b9d8      	cbnz	r0, 800a3e6 <_svfiprintf_r+0xe6>
 800a3ae:	06d0      	lsls	r0, r2, #27
 800a3b0:	bf44      	itt	mi
 800a3b2:	2320      	movmi	r3, #32
 800a3b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3b8:	0711      	lsls	r1, r2, #28
 800a3ba:	bf44      	itt	mi
 800a3bc:	232b      	movmi	r3, #43	; 0x2b
 800a3be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a3c6:	2b2a      	cmp	r3, #42	; 0x2a
 800a3c8:	d015      	beq.n	800a3f6 <_svfiprintf_r+0xf6>
 800a3ca:	9a07      	ldr	r2, [sp, #28]
 800a3cc:	4654      	mov	r4, sl
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	f04f 0c0a 	mov.w	ip, #10
 800a3d4:	4621      	mov	r1, r4
 800a3d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3da:	3b30      	subs	r3, #48	; 0x30
 800a3dc:	2b09      	cmp	r3, #9
 800a3de:	d94e      	bls.n	800a47e <_svfiprintf_r+0x17e>
 800a3e0:	b1b0      	cbz	r0, 800a410 <_svfiprintf_r+0x110>
 800a3e2:	9207      	str	r2, [sp, #28]
 800a3e4:	e014      	b.n	800a410 <_svfiprintf_r+0x110>
 800a3e6:	eba0 0308 	sub.w	r3, r0, r8
 800a3ea:	fa09 f303 	lsl.w	r3, r9, r3
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	9304      	str	r3, [sp, #16]
 800a3f2:	46a2      	mov	sl, r4
 800a3f4:	e7d2      	b.n	800a39c <_svfiprintf_r+0x9c>
 800a3f6:	9b03      	ldr	r3, [sp, #12]
 800a3f8:	1d19      	adds	r1, r3, #4
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	9103      	str	r1, [sp, #12]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	bfbb      	ittet	lt
 800a402:	425b      	neglt	r3, r3
 800a404:	f042 0202 	orrlt.w	r2, r2, #2
 800a408:	9307      	strge	r3, [sp, #28]
 800a40a:	9307      	strlt	r3, [sp, #28]
 800a40c:	bfb8      	it	lt
 800a40e:	9204      	strlt	r2, [sp, #16]
 800a410:	7823      	ldrb	r3, [r4, #0]
 800a412:	2b2e      	cmp	r3, #46	; 0x2e
 800a414:	d10c      	bne.n	800a430 <_svfiprintf_r+0x130>
 800a416:	7863      	ldrb	r3, [r4, #1]
 800a418:	2b2a      	cmp	r3, #42	; 0x2a
 800a41a:	d135      	bne.n	800a488 <_svfiprintf_r+0x188>
 800a41c:	9b03      	ldr	r3, [sp, #12]
 800a41e:	1d1a      	adds	r2, r3, #4
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	9203      	str	r2, [sp, #12]
 800a424:	2b00      	cmp	r3, #0
 800a426:	bfb8      	it	lt
 800a428:	f04f 33ff 	movlt.w	r3, #4294967295
 800a42c:	3402      	adds	r4, #2
 800a42e:	9305      	str	r3, [sp, #20]
 800a430:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a4fc <_svfiprintf_r+0x1fc>
 800a434:	7821      	ldrb	r1, [r4, #0]
 800a436:	2203      	movs	r2, #3
 800a438:	4650      	mov	r0, sl
 800a43a:	f7f5 ff01 	bl	8000240 <memchr>
 800a43e:	b140      	cbz	r0, 800a452 <_svfiprintf_r+0x152>
 800a440:	2340      	movs	r3, #64	; 0x40
 800a442:	eba0 000a 	sub.w	r0, r0, sl
 800a446:	fa03 f000 	lsl.w	r0, r3, r0
 800a44a:	9b04      	ldr	r3, [sp, #16]
 800a44c:	4303      	orrs	r3, r0
 800a44e:	3401      	adds	r4, #1
 800a450:	9304      	str	r3, [sp, #16]
 800a452:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a456:	4826      	ldr	r0, [pc, #152]	; (800a4f0 <_svfiprintf_r+0x1f0>)
 800a458:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a45c:	2206      	movs	r2, #6
 800a45e:	f7f5 feef 	bl	8000240 <memchr>
 800a462:	2800      	cmp	r0, #0
 800a464:	d038      	beq.n	800a4d8 <_svfiprintf_r+0x1d8>
 800a466:	4b23      	ldr	r3, [pc, #140]	; (800a4f4 <_svfiprintf_r+0x1f4>)
 800a468:	bb1b      	cbnz	r3, 800a4b2 <_svfiprintf_r+0x1b2>
 800a46a:	9b03      	ldr	r3, [sp, #12]
 800a46c:	3307      	adds	r3, #7
 800a46e:	f023 0307 	bic.w	r3, r3, #7
 800a472:	3308      	adds	r3, #8
 800a474:	9303      	str	r3, [sp, #12]
 800a476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a478:	4433      	add	r3, r6
 800a47a:	9309      	str	r3, [sp, #36]	; 0x24
 800a47c:	e767      	b.n	800a34e <_svfiprintf_r+0x4e>
 800a47e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a482:	460c      	mov	r4, r1
 800a484:	2001      	movs	r0, #1
 800a486:	e7a5      	b.n	800a3d4 <_svfiprintf_r+0xd4>
 800a488:	2300      	movs	r3, #0
 800a48a:	3401      	adds	r4, #1
 800a48c:	9305      	str	r3, [sp, #20]
 800a48e:	4619      	mov	r1, r3
 800a490:	f04f 0c0a 	mov.w	ip, #10
 800a494:	4620      	mov	r0, r4
 800a496:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a49a:	3a30      	subs	r2, #48	; 0x30
 800a49c:	2a09      	cmp	r2, #9
 800a49e:	d903      	bls.n	800a4a8 <_svfiprintf_r+0x1a8>
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d0c5      	beq.n	800a430 <_svfiprintf_r+0x130>
 800a4a4:	9105      	str	r1, [sp, #20]
 800a4a6:	e7c3      	b.n	800a430 <_svfiprintf_r+0x130>
 800a4a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4ac:	4604      	mov	r4, r0
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e7f0      	b.n	800a494 <_svfiprintf_r+0x194>
 800a4b2:	ab03      	add	r3, sp, #12
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	462a      	mov	r2, r5
 800a4b8:	4b0f      	ldr	r3, [pc, #60]	; (800a4f8 <_svfiprintf_r+0x1f8>)
 800a4ba:	a904      	add	r1, sp, #16
 800a4bc:	4638      	mov	r0, r7
 800a4be:	f7fc f9b5 	bl	800682c <_printf_float>
 800a4c2:	1c42      	adds	r2, r0, #1
 800a4c4:	4606      	mov	r6, r0
 800a4c6:	d1d6      	bne.n	800a476 <_svfiprintf_r+0x176>
 800a4c8:	89ab      	ldrh	r3, [r5, #12]
 800a4ca:	065b      	lsls	r3, r3, #25
 800a4cc:	f53f af2c 	bmi.w	800a328 <_svfiprintf_r+0x28>
 800a4d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4d2:	b01d      	add	sp, #116	; 0x74
 800a4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d8:	ab03      	add	r3, sp, #12
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	462a      	mov	r2, r5
 800a4de:	4b06      	ldr	r3, [pc, #24]	; (800a4f8 <_svfiprintf_r+0x1f8>)
 800a4e0:	a904      	add	r1, sp, #16
 800a4e2:	4638      	mov	r0, r7
 800a4e4:	f7fc fc46 	bl	8006d74 <_printf_i>
 800a4e8:	e7eb      	b.n	800a4c2 <_svfiprintf_r+0x1c2>
 800a4ea:	bf00      	nop
 800a4ec:	0800b234 	.word	0x0800b234
 800a4f0:	0800b23e 	.word	0x0800b23e
 800a4f4:	0800682d 	.word	0x0800682d
 800a4f8:	0800a24b 	.word	0x0800a24b
 800a4fc:	0800b23a 	.word	0x0800b23a

0800a500 <__sfputc_r>:
 800a500:	6893      	ldr	r3, [r2, #8]
 800a502:	3b01      	subs	r3, #1
 800a504:	2b00      	cmp	r3, #0
 800a506:	b410      	push	{r4}
 800a508:	6093      	str	r3, [r2, #8]
 800a50a:	da08      	bge.n	800a51e <__sfputc_r+0x1e>
 800a50c:	6994      	ldr	r4, [r2, #24]
 800a50e:	42a3      	cmp	r3, r4
 800a510:	db01      	blt.n	800a516 <__sfputc_r+0x16>
 800a512:	290a      	cmp	r1, #10
 800a514:	d103      	bne.n	800a51e <__sfputc_r+0x1e>
 800a516:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a51a:	f7fd bc97 	b.w	8007e4c <__swbuf_r>
 800a51e:	6813      	ldr	r3, [r2, #0]
 800a520:	1c58      	adds	r0, r3, #1
 800a522:	6010      	str	r0, [r2, #0]
 800a524:	7019      	strb	r1, [r3, #0]
 800a526:	4608      	mov	r0, r1
 800a528:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <__sfputs_r>:
 800a52e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a530:	4606      	mov	r6, r0
 800a532:	460f      	mov	r7, r1
 800a534:	4614      	mov	r4, r2
 800a536:	18d5      	adds	r5, r2, r3
 800a538:	42ac      	cmp	r4, r5
 800a53a:	d101      	bne.n	800a540 <__sfputs_r+0x12>
 800a53c:	2000      	movs	r0, #0
 800a53e:	e007      	b.n	800a550 <__sfputs_r+0x22>
 800a540:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a544:	463a      	mov	r2, r7
 800a546:	4630      	mov	r0, r6
 800a548:	f7ff ffda 	bl	800a500 <__sfputc_r>
 800a54c:	1c43      	adds	r3, r0, #1
 800a54e:	d1f3      	bne.n	800a538 <__sfputs_r+0xa>
 800a550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a554 <_vfiprintf_r>:
 800a554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a558:	460d      	mov	r5, r1
 800a55a:	b09d      	sub	sp, #116	; 0x74
 800a55c:	4614      	mov	r4, r2
 800a55e:	4698      	mov	r8, r3
 800a560:	4606      	mov	r6, r0
 800a562:	b118      	cbz	r0, 800a56c <_vfiprintf_r+0x18>
 800a564:	6983      	ldr	r3, [r0, #24]
 800a566:	b90b      	cbnz	r3, 800a56c <_vfiprintf_r+0x18>
 800a568:	f7fe fce2 	bl	8008f30 <__sinit>
 800a56c:	4b89      	ldr	r3, [pc, #548]	; (800a794 <_vfiprintf_r+0x240>)
 800a56e:	429d      	cmp	r5, r3
 800a570:	d11b      	bne.n	800a5aa <_vfiprintf_r+0x56>
 800a572:	6875      	ldr	r5, [r6, #4]
 800a574:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a576:	07d9      	lsls	r1, r3, #31
 800a578:	d405      	bmi.n	800a586 <_vfiprintf_r+0x32>
 800a57a:	89ab      	ldrh	r3, [r5, #12]
 800a57c:	059a      	lsls	r2, r3, #22
 800a57e:	d402      	bmi.n	800a586 <_vfiprintf_r+0x32>
 800a580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a582:	f7ff f8f8 	bl	8009776 <__retarget_lock_acquire_recursive>
 800a586:	89ab      	ldrh	r3, [r5, #12]
 800a588:	071b      	lsls	r3, r3, #28
 800a58a:	d501      	bpl.n	800a590 <_vfiprintf_r+0x3c>
 800a58c:	692b      	ldr	r3, [r5, #16]
 800a58e:	b9eb      	cbnz	r3, 800a5cc <_vfiprintf_r+0x78>
 800a590:	4629      	mov	r1, r5
 800a592:	4630      	mov	r0, r6
 800a594:	f7fd fcac 	bl	8007ef0 <__swsetup_r>
 800a598:	b1c0      	cbz	r0, 800a5cc <_vfiprintf_r+0x78>
 800a59a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a59c:	07dc      	lsls	r4, r3, #31
 800a59e:	d50e      	bpl.n	800a5be <_vfiprintf_r+0x6a>
 800a5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a4:	b01d      	add	sp, #116	; 0x74
 800a5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5aa:	4b7b      	ldr	r3, [pc, #492]	; (800a798 <_vfiprintf_r+0x244>)
 800a5ac:	429d      	cmp	r5, r3
 800a5ae:	d101      	bne.n	800a5b4 <_vfiprintf_r+0x60>
 800a5b0:	68b5      	ldr	r5, [r6, #8]
 800a5b2:	e7df      	b.n	800a574 <_vfiprintf_r+0x20>
 800a5b4:	4b79      	ldr	r3, [pc, #484]	; (800a79c <_vfiprintf_r+0x248>)
 800a5b6:	429d      	cmp	r5, r3
 800a5b8:	bf08      	it	eq
 800a5ba:	68f5      	ldreq	r5, [r6, #12]
 800a5bc:	e7da      	b.n	800a574 <_vfiprintf_r+0x20>
 800a5be:	89ab      	ldrh	r3, [r5, #12]
 800a5c0:	0598      	lsls	r0, r3, #22
 800a5c2:	d4ed      	bmi.n	800a5a0 <_vfiprintf_r+0x4c>
 800a5c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5c6:	f7ff f8d7 	bl	8009778 <__retarget_lock_release_recursive>
 800a5ca:	e7e9      	b.n	800a5a0 <_vfiprintf_r+0x4c>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a5d0:	2320      	movs	r3, #32
 800a5d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5da:	2330      	movs	r3, #48	; 0x30
 800a5dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a7a0 <_vfiprintf_r+0x24c>
 800a5e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5e4:	f04f 0901 	mov.w	r9, #1
 800a5e8:	4623      	mov	r3, r4
 800a5ea:	469a      	mov	sl, r3
 800a5ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5f0:	b10a      	cbz	r2, 800a5f6 <_vfiprintf_r+0xa2>
 800a5f2:	2a25      	cmp	r2, #37	; 0x25
 800a5f4:	d1f9      	bne.n	800a5ea <_vfiprintf_r+0x96>
 800a5f6:	ebba 0b04 	subs.w	fp, sl, r4
 800a5fa:	d00b      	beq.n	800a614 <_vfiprintf_r+0xc0>
 800a5fc:	465b      	mov	r3, fp
 800a5fe:	4622      	mov	r2, r4
 800a600:	4629      	mov	r1, r5
 800a602:	4630      	mov	r0, r6
 800a604:	f7ff ff93 	bl	800a52e <__sfputs_r>
 800a608:	3001      	adds	r0, #1
 800a60a:	f000 80aa 	beq.w	800a762 <_vfiprintf_r+0x20e>
 800a60e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a610:	445a      	add	r2, fp
 800a612:	9209      	str	r2, [sp, #36]	; 0x24
 800a614:	f89a 3000 	ldrb.w	r3, [sl]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f000 80a2 	beq.w	800a762 <_vfiprintf_r+0x20e>
 800a61e:	2300      	movs	r3, #0
 800a620:	f04f 32ff 	mov.w	r2, #4294967295
 800a624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a628:	f10a 0a01 	add.w	sl, sl, #1
 800a62c:	9304      	str	r3, [sp, #16]
 800a62e:	9307      	str	r3, [sp, #28]
 800a630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a634:	931a      	str	r3, [sp, #104]	; 0x68
 800a636:	4654      	mov	r4, sl
 800a638:	2205      	movs	r2, #5
 800a63a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a63e:	4858      	ldr	r0, [pc, #352]	; (800a7a0 <_vfiprintf_r+0x24c>)
 800a640:	f7f5 fdfe 	bl	8000240 <memchr>
 800a644:	9a04      	ldr	r2, [sp, #16]
 800a646:	b9d8      	cbnz	r0, 800a680 <_vfiprintf_r+0x12c>
 800a648:	06d1      	lsls	r1, r2, #27
 800a64a:	bf44      	itt	mi
 800a64c:	2320      	movmi	r3, #32
 800a64e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a652:	0713      	lsls	r3, r2, #28
 800a654:	bf44      	itt	mi
 800a656:	232b      	movmi	r3, #43	; 0x2b
 800a658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a65c:	f89a 3000 	ldrb.w	r3, [sl]
 800a660:	2b2a      	cmp	r3, #42	; 0x2a
 800a662:	d015      	beq.n	800a690 <_vfiprintf_r+0x13c>
 800a664:	9a07      	ldr	r2, [sp, #28]
 800a666:	4654      	mov	r4, sl
 800a668:	2000      	movs	r0, #0
 800a66a:	f04f 0c0a 	mov.w	ip, #10
 800a66e:	4621      	mov	r1, r4
 800a670:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a674:	3b30      	subs	r3, #48	; 0x30
 800a676:	2b09      	cmp	r3, #9
 800a678:	d94e      	bls.n	800a718 <_vfiprintf_r+0x1c4>
 800a67a:	b1b0      	cbz	r0, 800a6aa <_vfiprintf_r+0x156>
 800a67c:	9207      	str	r2, [sp, #28]
 800a67e:	e014      	b.n	800a6aa <_vfiprintf_r+0x156>
 800a680:	eba0 0308 	sub.w	r3, r0, r8
 800a684:	fa09 f303 	lsl.w	r3, r9, r3
 800a688:	4313      	orrs	r3, r2
 800a68a:	9304      	str	r3, [sp, #16]
 800a68c:	46a2      	mov	sl, r4
 800a68e:	e7d2      	b.n	800a636 <_vfiprintf_r+0xe2>
 800a690:	9b03      	ldr	r3, [sp, #12]
 800a692:	1d19      	adds	r1, r3, #4
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	9103      	str	r1, [sp, #12]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	bfbb      	ittet	lt
 800a69c:	425b      	neglt	r3, r3
 800a69e:	f042 0202 	orrlt.w	r2, r2, #2
 800a6a2:	9307      	strge	r3, [sp, #28]
 800a6a4:	9307      	strlt	r3, [sp, #28]
 800a6a6:	bfb8      	it	lt
 800a6a8:	9204      	strlt	r2, [sp, #16]
 800a6aa:	7823      	ldrb	r3, [r4, #0]
 800a6ac:	2b2e      	cmp	r3, #46	; 0x2e
 800a6ae:	d10c      	bne.n	800a6ca <_vfiprintf_r+0x176>
 800a6b0:	7863      	ldrb	r3, [r4, #1]
 800a6b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a6b4:	d135      	bne.n	800a722 <_vfiprintf_r+0x1ce>
 800a6b6:	9b03      	ldr	r3, [sp, #12]
 800a6b8:	1d1a      	adds	r2, r3, #4
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	9203      	str	r2, [sp, #12]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	bfb8      	it	lt
 800a6c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6c6:	3402      	adds	r4, #2
 800a6c8:	9305      	str	r3, [sp, #20]
 800a6ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a7b0 <_vfiprintf_r+0x25c>
 800a6ce:	7821      	ldrb	r1, [r4, #0]
 800a6d0:	2203      	movs	r2, #3
 800a6d2:	4650      	mov	r0, sl
 800a6d4:	f7f5 fdb4 	bl	8000240 <memchr>
 800a6d8:	b140      	cbz	r0, 800a6ec <_vfiprintf_r+0x198>
 800a6da:	2340      	movs	r3, #64	; 0x40
 800a6dc:	eba0 000a 	sub.w	r0, r0, sl
 800a6e0:	fa03 f000 	lsl.w	r0, r3, r0
 800a6e4:	9b04      	ldr	r3, [sp, #16]
 800a6e6:	4303      	orrs	r3, r0
 800a6e8:	3401      	adds	r4, #1
 800a6ea:	9304      	str	r3, [sp, #16]
 800a6ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6f0:	482c      	ldr	r0, [pc, #176]	; (800a7a4 <_vfiprintf_r+0x250>)
 800a6f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6f6:	2206      	movs	r2, #6
 800a6f8:	f7f5 fda2 	bl	8000240 <memchr>
 800a6fc:	2800      	cmp	r0, #0
 800a6fe:	d03f      	beq.n	800a780 <_vfiprintf_r+0x22c>
 800a700:	4b29      	ldr	r3, [pc, #164]	; (800a7a8 <_vfiprintf_r+0x254>)
 800a702:	bb1b      	cbnz	r3, 800a74c <_vfiprintf_r+0x1f8>
 800a704:	9b03      	ldr	r3, [sp, #12]
 800a706:	3307      	adds	r3, #7
 800a708:	f023 0307 	bic.w	r3, r3, #7
 800a70c:	3308      	adds	r3, #8
 800a70e:	9303      	str	r3, [sp, #12]
 800a710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a712:	443b      	add	r3, r7
 800a714:	9309      	str	r3, [sp, #36]	; 0x24
 800a716:	e767      	b.n	800a5e8 <_vfiprintf_r+0x94>
 800a718:	fb0c 3202 	mla	r2, ip, r2, r3
 800a71c:	460c      	mov	r4, r1
 800a71e:	2001      	movs	r0, #1
 800a720:	e7a5      	b.n	800a66e <_vfiprintf_r+0x11a>
 800a722:	2300      	movs	r3, #0
 800a724:	3401      	adds	r4, #1
 800a726:	9305      	str	r3, [sp, #20]
 800a728:	4619      	mov	r1, r3
 800a72a:	f04f 0c0a 	mov.w	ip, #10
 800a72e:	4620      	mov	r0, r4
 800a730:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a734:	3a30      	subs	r2, #48	; 0x30
 800a736:	2a09      	cmp	r2, #9
 800a738:	d903      	bls.n	800a742 <_vfiprintf_r+0x1ee>
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d0c5      	beq.n	800a6ca <_vfiprintf_r+0x176>
 800a73e:	9105      	str	r1, [sp, #20]
 800a740:	e7c3      	b.n	800a6ca <_vfiprintf_r+0x176>
 800a742:	fb0c 2101 	mla	r1, ip, r1, r2
 800a746:	4604      	mov	r4, r0
 800a748:	2301      	movs	r3, #1
 800a74a:	e7f0      	b.n	800a72e <_vfiprintf_r+0x1da>
 800a74c:	ab03      	add	r3, sp, #12
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	462a      	mov	r2, r5
 800a752:	4b16      	ldr	r3, [pc, #88]	; (800a7ac <_vfiprintf_r+0x258>)
 800a754:	a904      	add	r1, sp, #16
 800a756:	4630      	mov	r0, r6
 800a758:	f7fc f868 	bl	800682c <_printf_float>
 800a75c:	4607      	mov	r7, r0
 800a75e:	1c78      	adds	r0, r7, #1
 800a760:	d1d6      	bne.n	800a710 <_vfiprintf_r+0x1bc>
 800a762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a764:	07d9      	lsls	r1, r3, #31
 800a766:	d405      	bmi.n	800a774 <_vfiprintf_r+0x220>
 800a768:	89ab      	ldrh	r3, [r5, #12]
 800a76a:	059a      	lsls	r2, r3, #22
 800a76c:	d402      	bmi.n	800a774 <_vfiprintf_r+0x220>
 800a76e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a770:	f7ff f802 	bl	8009778 <__retarget_lock_release_recursive>
 800a774:	89ab      	ldrh	r3, [r5, #12]
 800a776:	065b      	lsls	r3, r3, #25
 800a778:	f53f af12 	bmi.w	800a5a0 <_vfiprintf_r+0x4c>
 800a77c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a77e:	e711      	b.n	800a5a4 <_vfiprintf_r+0x50>
 800a780:	ab03      	add	r3, sp, #12
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	462a      	mov	r2, r5
 800a786:	4b09      	ldr	r3, [pc, #36]	; (800a7ac <_vfiprintf_r+0x258>)
 800a788:	a904      	add	r1, sp, #16
 800a78a:	4630      	mov	r0, r6
 800a78c:	f7fc faf2 	bl	8006d74 <_printf_i>
 800a790:	e7e4      	b.n	800a75c <_vfiprintf_r+0x208>
 800a792:	bf00      	nop
 800a794:	0800b01c 	.word	0x0800b01c
 800a798:	0800b03c 	.word	0x0800b03c
 800a79c:	0800affc 	.word	0x0800affc
 800a7a0:	0800b234 	.word	0x0800b234
 800a7a4:	0800b23e 	.word	0x0800b23e
 800a7a8:	0800682d 	.word	0x0800682d
 800a7ac:	0800a52f 	.word	0x0800a52f
 800a7b0:	0800b23a 	.word	0x0800b23a
 800a7b4:	00000000 	.word	0x00000000

0800a7b8 <nan>:
 800a7b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a7c0 <nan+0x8>
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	00000000 	.word	0x00000000
 800a7c4:	7ff80000 	.word	0x7ff80000

0800a7c8 <__sread>:
 800a7c8:	b510      	push	{r4, lr}
 800a7ca:	460c      	mov	r4, r1
 800a7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7d0:	f000 f8ec 	bl	800a9ac <_read_r>
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	bfab      	itete	ge
 800a7d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7da:	89a3      	ldrhlt	r3, [r4, #12]
 800a7dc:	181b      	addge	r3, r3, r0
 800a7de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7e2:	bfac      	ite	ge
 800a7e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7e6:	81a3      	strhlt	r3, [r4, #12]
 800a7e8:	bd10      	pop	{r4, pc}

0800a7ea <__swrite>:
 800a7ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ee:	461f      	mov	r7, r3
 800a7f0:	898b      	ldrh	r3, [r1, #12]
 800a7f2:	05db      	lsls	r3, r3, #23
 800a7f4:	4605      	mov	r5, r0
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	4616      	mov	r6, r2
 800a7fa:	d505      	bpl.n	800a808 <__swrite+0x1e>
 800a7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a800:	2302      	movs	r3, #2
 800a802:	2200      	movs	r2, #0
 800a804:	f000 f890 	bl	800a928 <_lseek_r>
 800a808:	89a3      	ldrh	r3, [r4, #12]
 800a80a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a80e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a812:	81a3      	strh	r3, [r4, #12]
 800a814:	4632      	mov	r2, r6
 800a816:	463b      	mov	r3, r7
 800a818:	4628      	mov	r0, r5
 800a81a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a81e:	f000 b837 	b.w	800a890 <_write_r>

0800a822 <__sseek>:
 800a822:	b510      	push	{r4, lr}
 800a824:	460c      	mov	r4, r1
 800a826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a82a:	f000 f87d 	bl	800a928 <_lseek_r>
 800a82e:	1c43      	adds	r3, r0, #1
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	bf15      	itete	ne
 800a834:	6560      	strne	r0, [r4, #84]	; 0x54
 800a836:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a83a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a83e:	81a3      	strheq	r3, [r4, #12]
 800a840:	bf18      	it	ne
 800a842:	81a3      	strhne	r3, [r4, #12]
 800a844:	bd10      	pop	{r4, pc}

0800a846 <__sclose>:
 800a846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a84a:	f000 b83b 	b.w	800a8c4 <_close_r>

0800a84e <strncmp>:
 800a84e:	b510      	push	{r4, lr}
 800a850:	b17a      	cbz	r2, 800a872 <strncmp+0x24>
 800a852:	4603      	mov	r3, r0
 800a854:	3901      	subs	r1, #1
 800a856:	1884      	adds	r4, r0, r2
 800a858:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a85c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a860:	4290      	cmp	r0, r2
 800a862:	d101      	bne.n	800a868 <strncmp+0x1a>
 800a864:	42a3      	cmp	r3, r4
 800a866:	d101      	bne.n	800a86c <strncmp+0x1e>
 800a868:	1a80      	subs	r0, r0, r2
 800a86a:	bd10      	pop	{r4, pc}
 800a86c:	2800      	cmp	r0, #0
 800a86e:	d1f3      	bne.n	800a858 <strncmp+0xa>
 800a870:	e7fa      	b.n	800a868 <strncmp+0x1a>
 800a872:	4610      	mov	r0, r2
 800a874:	e7f9      	b.n	800a86a <strncmp+0x1c>

0800a876 <__ascii_wctomb>:
 800a876:	b149      	cbz	r1, 800a88c <__ascii_wctomb+0x16>
 800a878:	2aff      	cmp	r2, #255	; 0xff
 800a87a:	bf85      	ittet	hi
 800a87c:	238a      	movhi	r3, #138	; 0x8a
 800a87e:	6003      	strhi	r3, [r0, #0]
 800a880:	700a      	strbls	r2, [r1, #0]
 800a882:	f04f 30ff 	movhi.w	r0, #4294967295
 800a886:	bf98      	it	ls
 800a888:	2001      	movls	r0, #1
 800a88a:	4770      	bx	lr
 800a88c:	4608      	mov	r0, r1
 800a88e:	4770      	bx	lr

0800a890 <_write_r>:
 800a890:	b538      	push	{r3, r4, r5, lr}
 800a892:	4d07      	ldr	r5, [pc, #28]	; (800a8b0 <_write_r+0x20>)
 800a894:	4604      	mov	r4, r0
 800a896:	4608      	mov	r0, r1
 800a898:	4611      	mov	r1, r2
 800a89a:	2200      	movs	r2, #0
 800a89c:	602a      	str	r2, [r5, #0]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	f7f8 fd43 	bl	800332a <_write>
 800a8a4:	1c43      	adds	r3, r0, #1
 800a8a6:	d102      	bne.n	800a8ae <_write_r+0x1e>
 800a8a8:	682b      	ldr	r3, [r5, #0]
 800a8aa:	b103      	cbz	r3, 800a8ae <_write_r+0x1e>
 800a8ac:	6023      	str	r3, [r4, #0]
 800a8ae:	bd38      	pop	{r3, r4, r5, pc}
 800a8b0:	20000a14 	.word	0x20000a14

0800a8b4 <abort>:
 800a8b4:	b508      	push	{r3, lr}
 800a8b6:	2006      	movs	r0, #6
 800a8b8:	f000 f8b2 	bl	800aa20 <raise>
 800a8bc:	2001      	movs	r0, #1
 800a8be:	f7f8 fd0d 	bl	80032dc <_exit>
	...

0800a8c4 <_close_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4d06      	ldr	r5, [pc, #24]	; (800a8e0 <_close_r+0x1c>)
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	4608      	mov	r0, r1
 800a8ce:	602b      	str	r3, [r5, #0]
 800a8d0:	f7f8 fd47 	bl	8003362 <_close>
 800a8d4:	1c43      	adds	r3, r0, #1
 800a8d6:	d102      	bne.n	800a8de <_close_r+0x1a>
 800a8d8:	682b      	ldr	r3, [r5, #0]
 800a8da:	b103      	cbz	r3, 800a8de <_close_r+0x1a>
 800a8dc:	6023      	str	r3, [r4, #0]
 800a8de:	bd38      	pop	{r3, r4, r5, pc}
 800a8e0:	20000a14 	.word	0x20000a14

0800a8e4 <_fstat_r>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	4d07      	ldr	r5, [pc, #28]	; (800a904 <_fstat_r+0x20>)
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	4608      	mov	r0, r1
 800a8ee:	4611      	mov	r1, r2
 800a8f0:	602b      	str	r3, [r5, #0]
 800a8f2:	f7f8 fd42 	bl	800337a <_fstat>
 800a8f6:	1c43      	adds	r3, r0, #1
 800a8f8:	d102      	bne.n	800a900 <_fstat_r+0x1c>
 800a8fa:	682b      	ldr	r3, [r5, #0]
 800a8fc:	b103      	cbz	r3, 800a900 <_fstat_r+0x1c>
 800a8fe:	6023      	str	r3, [r4, #0]
 800a900:	bd38      	pop	{r3, r4, r5, pc}
 800a902:	bf00      	nop
 800a904:	20000a14 	.word	0x20000a14

0800a908 <_isatty_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	4d06      	ldr	r5, [pc, #24]	; (800a924 <_isatty_r+0x1c>)
 800a90c:	2300      	movs	r3, #0
 800a90e:	4604      	mov	r4, r0
 800a910:	4608      	mov	r0, r1
 800a912:	602b      	str	r3, [r5, #0]
 800a914:	f7f8 fd41 	bl	800339a <_isatty>
 800a918:	1c43      	adds	r3, r0, #1
 800a91a:	d102      	bne.n	800a922 <_isatty_r+0x1a>
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	b103      	cbz	r3, 800a922 <_isatty_r+0x1a>
 800a920:	6023      	str	r3, [r4, #0]
 800a922:	bd38      	pop	{r3, r4, r5, pc}
 800a924:	20000a14 	.word	0x20000a14

0800a928 <_lseek_r>:
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	4d07      	ldr	r5, [pc, #28]	; (800a948 <_lseek_r+0x20>)
 800a92c:	4604      	mov	r4, r0
 800a92e:	4608      	mov	r0, r1
 800a930:	4611      	mov	r1, r2
 800a932:	2200      	movs	r2, #0
 800a934:	602a      	str	r2, [r5, #0]
 800a936:	461a      	mov	r2, r3
 800a938:	f7f8 fd3a 	bl	80033b0 <_lseek>
 800a93c:	1c43      	adds	r3, r0, #1
 800a93e:	d102      	bne.n	800a946 <_lseek_r+0x1e>
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	b103      	cbz	r3, 800a946 <_lseek_r+0x1e>
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	bd38      	pop	{r3, r4, r5, pc}
 800a948:	20000a14 	.word	0x20000a14

0800a94c <_realloc_r>:
 800a94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a950:	4680      	mov	r8, r0
 800a952:	4614      	mov	r4, r2
 800a954:	460e      	mov	r6, r1
 800a956:	b921      	cbnz	r1, 800a962 <_realloc_r+0x16>
 800a958:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a95c:	4611      	mov	r1, r2
 800a95e:	f7fb be51 	b.w	8006604 <_malloc_r>
 800a962:	b92a      	cbnz	r2, 800a970 <_realloc_r+0x24>
 800a964:	f7fb fde2 	bl	800652c <_free_r>
 800a968:	4625      	mov	r5, r4
 800a96a:	4628      	mov	r0, r5
 800a96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a970:	f000 f872 	bl	800aa58 <_malloc_usable_size_r>
 800a974:	4284      	cmp	r4, r0
 800a976:	4607      	mov	r7, r0
 800a978:	d802      	bhi.n	800a980 <_realloc_r+0x34>
 800a97a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a97e:	d812      	bhi.n	800a9a6 <_realloc_r+0x5a>
 800a980:	4621      	mov	r1, r4
 800a982:	4640      	mov	r0, r8
 800a984:	f7fb fe3e 	bl	8006604 <_malloc_r>
 800a988:	4605      	mov	r5, r0
 800a98a:	2800      	cmp	r0, #0
 800a98c:	d0ed      	beq.n	800a96a <_realloc_r+0x1e>
 800a98e:	42bc      	cmp	r4, r7
 800a990:	4622      	mov	r2, r4
 800a992:	4631      	mov	r1, r6
 800a994:	bf28      	it	cs
 800a996:	463a      	movcs	r2, r7
 800a998:	f7fe ff66 	bl	8009868 <memcpy>
 800a99c:	4631      	mov	r1, r6
 800a99e:	4640      	mov	r0, r8
 800a9a0:	f7fb fdc4 	bl	800652c <_free_r>
 800a9a4:	e7e1      	b.n	800a96a <_realloc_r+0x1e>
 800a9a6:	4635      	mov	r5, r6
 800a9a8:	e7df      	b.n	800a96a <_realloc_r+0x1e>
	...

0800a9ac <_read_r>:
 800a9ac:	b538      	push	{r3, r4, r5, lr}
 800a9ae:	4d07      	ldr	r5, [pc, #28]	; (800a9cc <_read_r+0x20>)
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	4608      	mov	r0, r1
 800a9b4:	4611      	mov	r1, r2
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	602a      	str	r2, [r5, #0]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	f7f8 fc98 	bl	80032f0 <_read>
 800a9c0:	1c43      	adds	r3, r0, #1
 800a9c2:	d102      	bne.n	800a9ca <_read_r+0x1e>
 800a9c4:	682b      	ldr	r3, [r5, #0]
 800a9c6:	b103      	cbz	r3, 800a9ca <_read_r+0x1e>
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	bd38      	pop	{r3, r4, r5, pc}
 800a9cc:	20000a14 	.word	0x20000a14

0800a9d0 <_raise_r>:
 800a9d0:	291f      	cmp	r1, #31
 800a9d2:	b538      	push	{r3, r4, r5, lr}
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	460d      	mov	r5, r1
 800a9d8:	d904      	bls.n	800a9e4 <_raise_r+0x14>
 800a9da:	2316      	movs	r3, #22
 800a9dc:	6003      	str	r3, [r0, #0]
 800a9de:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e2:	bd38      	pop	{r3, r4, r5, pc}
 800a9e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9e6:	b112      	cbz	r2, 800a9ee <_raise_r+0x1e>
 800a9e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9ec:	b94b      	cbnz	r3, 800aa02 <_raise_r+0x32>
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f000 f830 	bl	800aa54 <_getpid_r>
 800a9f4:	462a      	mov	r2, r5
 800a9f6:	4601      	mov	r1, r0
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9fe:	f000 b817 	b.w	800aa30 <_kill_r>
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d00a      	beq.n	800aa1c <_raise_r+0x4c>
 800aa06:	1c59      	adds	r1, r3, #1
 800aa08:	d103      	bne.n	800aa12 <_raise_r+0x42>
 800aa0a:	2316      	movs	r3, #22
 800aa0c:	6003      	str	r3, [r0, #0]
 800aa0e:	2001      	movs	r0, #1
 800aa10:	e7e7      	b.n	800a9e2 <_raise_r+0x12>
 800aa12:	2400      	movs	r4, #0
 800aa14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa18:	4628      	mov	r0, r5
 800aa1a:	4798      	blx	r3
 800aa1c:	2000      	movs	r0, #0
 800aa1e:	e7e0      	b.n	800a9e2 <_raise_r+0x12>

0800aa20 <raise>:
 800aa20:	4b02      	ldr	r3, [pc, #8]	; (800aa2c <raise+0xc>)
 800aa22:	4601      	mov	r1, r0
 800aa24:	6818      	ldr	r0, [r3, #0]
 800aa26:	f7ff bfd3 	b.w	800a9d0 <_raise_r>
 800aa2a:	bf00      	nop
 800aa2c:	20000070 	.word	0x20000070

0800aa30 <_kill_r>:
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	4d07      	ldr	r5, [pc, #28]	; (800aa50 <_kill_r+0x20>)
 800aa34:	2300      	movs	r3, #0
 800aa36:	4604      	mov	r4, r0
 800aa38:	4608      	mov	r0, r1
 800aa3a:	4611      	mov	r1, r2
 800aa3c:	602b      	str	r3, [r5, #0]
 800aa3e:	f7f8 fc3d 	bl	80032bc <_kill>
 800aa42:	1c43      	adds	r3, r0, #1
 800aa44:	d102      	bne.n	800aa4c <_kill_r+0x1c>
 800aa46:	682b      	ldr	r3, [r5, #0]
 800aa48:	b103      	cbz	r3, 800aa4c <_kill_r+0x1c>
 800aa4a:	6023      	str	r3, [r4, #0]
 800aa4c:	bd38      	pop	{r3, r4, r5, pc}
 800aa4e:	bf00      	nop
 800aa50:	20000a14 	.word	0x20000a14

0800aa54 <_getpid_r>:
 800aa54:	f7f8 bc2a 	b.w	80032ac <_getpid>

0800aa58 <_malloc_usable_size_r>:
 800aa58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa5c:	1f18      	subs	r0, r3, #4
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	bfbc      	itt	lt
 800aa62:	580b      	ldrlt	r3, [r1, r0]
 800aa64:	18c0      	addlt	r0, r0, r3
 800aa66:	4770      	bx	lr

0800aa68 <sqrt>:
 800aa68:	b538      	push	{r3, r4, r5, lr}
 800aa6a:	ed2d 8b02 	vpush	{d8}
 800aa6e:	ec55 4b10 	vmov	r4, r5, d0
 800aa72:	f000 f825 	bl	800aac0 <__ieee754_sqrt>
 800aa76:	4622      	mov	r2, r4
 800aa78:	462b      	mov	r3, r5
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	4629      	mov	r1, r5
 800aa7e:	eeb0 8a40 	vmov.f32	s16, s0
 800aa82:	eef0 8a60 	vmov.f32	s17, s1
 800aa86:	f7f6 f881 	bl	8000b8c <__aeabi_dcmpun>
 800aa8a:	b990      	cbnz	r0, 800aab2 <sqrt+0x4a>
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	2300      	movs	r3, #0
 800aa90:	4620      	mov	r0, r4
 800aa92:	4629      	mov	r1, r5
 800aa94:	f7f6 f852 	bl	8000b3c <__aeabi_dcmplt>
 800aa98:	b158      	cbz	r0, 800aab2 <sqrt+0x4a>
 800aa9a:	f7fb fceb 	bl	8006474 <__errno>
 800aa9e:	2321      	movs	r3, #33	; 0x21
 800aaa0:	6003      	str	r3, [r0, #0]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	f7f5 feff 	bl	80008ac <__aeabi_ddiv>
 800aaae:	ec41 0b18 	vmov	d8, r0, r1
 800aab2:	eeb0 0a48 	vmov.f32	s0, s16
 800aab6:	eef0 0a68 	vmov.f32	s1, s17
 800aaba:	ecbd 8b02 	vpop	{d8}
 800aabe:	bd38      	pop	{r3, r4, r5, pc}

0800aac0 <__ieee754_sqrt>:
 800aac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac4:	ec55 4b10 	vmov	r4, r5, d0
 800aac8:	4e55      	ldr	r6, [pc, #340]	; (800ac20 <__ieee754_sqrt+0x160>)
 800aaca:	43ae      	bics	r6, r5
 800aacc:	ee10 0a10 	vmov	r0, s0
 800aad0:	ee10 3a10 	vmov	r3, s0
 800aad4:	462a      	mov	r2, r5
 800aad6:	4629      	mov	r1, r5
 800aad8:	d110      	bne.n	800aafc <__ieee754_sqrt+0x3c>
 800aada:	ee10 2a10 	vmov	r2, s0
 800aade:	462b      	mov	r3, r5
 800aae0:	f7f5 fdba 	bl	8000658 <__aeabi_dmul>
 800aae4:	4602      	mov	r2, r0
 800aae6:	460b      	mov	r3, r1
 800aae8:	4620      	mov	r0, r4
 800aaea:	4629      	mov	r1, r5
 800aaec:	f7f5 fbfe 	bl	80002ec <__adddf3>
 800aaf0:	4604      	mov	r4, r0
 800aaf2:	460d      	mov	r5, r1
 800aaf4:	ec45 4b10 	vmov	d0, r4, r5
 800aaf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aafc:	2d00      	cmp	r5, #0
 800aafe:	dc10      	bgt.n	800ab22 <__ieee754_sqrt+0x62>
 800ab00:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ab04:	4330      	orrs	r0, r6
 800ab06:	d0f5      	beq.n	800aaf4 <__ieee754_sqrt+0x34>
 800ab08:	b15d      	cbz	r5, 800ab22 <__ieee754_sqrt+0x62>
 800ab0a:	ee10 2a10 	vmov	r2, s0
 800ab0e:	462b      	mov	r3, r5
 800ab10:	ee10 0a10 	vmov	r0, s0
 800ab14:	f7f5 fbe8 	bl	80002e8 <__aeabi_dsub>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	f7f5 fec6 	bl	80008ac <__aeabi_ddiv>
 800ab20:	e7e6      	b.n	800aaf0 <__ieee754_sqrt+0x30>
 800ab22:	1512      	asrs	r2, r2, #20
 800ab24:	d074      	beq.n	800ac10 <__ieee754_sqrt+0x150>
 800ab26:	07d4      	lsls	r4, r2, #31
 800ab28:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ab2c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ab30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ab34:	bf5e      	ittt	pl
 800ab36:	0fda      	lsrpl	r2, r3, #31
 800ab38:	005b      	lslpl	r3, r3, #1
 800ab3a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ab3e:	2400      	movs	r4, #0
 800ab40:	0fda      	lsrs	r2, r3, #31
 800ab42:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ab46:	107f      	asrs	r7, r7, #1
 800ab48:	005b      	lsls	r3, r3, #1
 800ab4a:	2516      	movs	r5, #22
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ab52:	1886      	adds	r6, r0, r2
 800ab54:	428e      	cmp	r6, r1
 800ab56:	bfde      	ittt	le
 800ab58:	1b89      	suble	r1, r1, r6
 800ab5a:	18b0      	addle	r0, r6, r2
 800ab5c:	18a4      	addle	r4, r4, r2
 800ab5e:	0049      	lsls	r1, r1, #1
 800ab60:	3d01      	subs	r5, #1
 800ab62:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ab66:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ab6a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ab6e:	d1f0      	bne.n	800ab52 <__ieee754_sqrt+0x92>
 800ab70:	462a      	mov	r2, r5
 800ab72:	f04f 0e20 	mov.w	lr, #32
 800ab76:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ab7a:	4281      	cmp	r1, r0
 800ab7c:	eb06 0c05 	add.w	ip, r6, r5
 800ab80:	dc02      	bgt.n	800ab88 <__ieee754_sqrt+0xc8>
 800ab82:	d113      	bne.n	800abac <__ieee754_sqrt+0xec>
 800ab84:	459c      	cmp	ip, r3
 800ab86:	d811      	bhi.n	800abac <__ieee754_sqrt+0xec>
 800ab88:	f1bc 0f00 	cmp.w	ip, #0
 800ab8c:	eb0c 0506 	add.w	r5, ip, r6
 800ab90:	da43      	bge.n	800ac1a <__ieee754_sqrt+0x15a>
 800ab92:	2d00      	cmp	r5, #0
 800ab94:	db41      	blt.n	800ac1a <__ieee754_sqrt+0x15a>
 800ab96:	f100 0801 	add.w	r8, r0, #1
 800ab9a:	1a09      	subs	r1, r1, r0
 800ab9c:	459c      	cmp	ip, r3
 800ab9e:	bf88      	it	hi
 800aba0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800aba4:	eba3 030c 	sub.w	r3, r3, ip
 800aba8:	4432      	add	r2, r6
 800abaa:	4640      	mov	r0, r8
 800abac:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800abb0:	f1be 0e01 	subs.w	lr, lr, #1
 800abb4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800abb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800abbc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800abc0:	d1db      	bne.n	800ab7a <__ieee754_sqrt+0xba>
 800abc2:	430b      	orrs	r3, r1
 800abc4:	d006      	beq.n	800abd4 <__ieee754_sqrt+0x114>
 800abc6:	1c50      	adds	r0, r2, #1
 800abc8:	bf13      	iteet	ne
 800abca:	3201      	addne	r2, #1
 800abcc:	3401      	addeq	r4, #1
 800abce:	4672      	moveq	r2, lr
 800abd0:	f022 0201 	bicne.w	r2, r2, #1
 800abd4:	1063      	asrs	r3, r4, #1
 800abd6:	0852      	lsrs	r2, r2, #1
 800abd8:	07e1      	lsls	r1, r4, #31
 800abda:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800abde:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800abe2:	bf48      	it	mi
 800abe4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800abe8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800abec:	4614      	mov	r4, r2
 800abee:	e781      	b.n	800aaf4 <__ieee754_sqrt+0x34>
 800abf0:	0ad9      	lsrs	r1, r3, #11
 800abf2:	3815      	subs	r0, #21
 800abf4:	055b      	lsls	r3, r3, #21
 800abf6:	2900      	cmp	r1, #0
 800abf8:	d0fa      	beq.n	800abf0 <__ieee754_sqrt+0x130>
 800abfa:	02cd      	lsls	r5, r1, #11
 800abfc:	d50a      	bpl.n	800ac14 <__ieee754_sqrt+0x154>
 800abfe:	f1c2 0420 	rsb	r4, r2, #32
 800ac02:	fa23 f404 	lsr.w	r4, r3, r4
 800ac06:	1e55      	subs	r5, r2, #1
 800ac08:	4093      	lsls	r3, r2
 800ac0a:	4321      	orrs	r1, r4
 800ac0c:	1b42      	subs	r2, r0, r5
 800ac0e:	e78a      	b.n	800ab26 <__ieee754_sqrt+0x66>
 800ac10:	4610      	mov	r0, r2
 800ac12:	e7f0      	b.n	800abf6 <__ieee754_sqrt+0x136>
 800ac14:	0049      	lsls	r1, r1, #1
 800ac16:	3201      	adds	r2, #1
 800ac18:	e7ef      	b.n	800abfa <__ieee754_sqrt+0x13a>
 800ac1a:	4680      	mov	r8, r0
 800ac1c:	e7bd      	b.n	800ab9a <__ieee754_sqrt+0xda>
 800ac1e:	bf00      	nop
 800ac20:	7ff00000 	.word	0x7ff00000

0800ac24 <_init>:
 800ac24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac26:	bf00      	nop
 800ac28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac2a:	bc08      	pop	{r3}
 800ac2c:	469e      	mov	lr, r3
 800ac2e:	4770      	bx	lr

0800ac30 <_fini>:
 800ac30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac32:	bf00      	nop
 800ac34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac36:	bc08      	pop	{r3}
 800ac38:	469e      	mov	lr, r3
 800ac3a:	4770      	bx	lr
