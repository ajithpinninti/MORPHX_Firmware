
G_code_stepper_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a964  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800ab38  0800ab38  0001ab38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0c0  0800b0c0  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0c0  0800b0c0  0001b0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0c8  0800b0c8  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0c8  0800b0c8  0001b0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0cc  0800b0cc  0001b0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800b0d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000234  0800b304  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  0800b304  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f10  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c27  00000000  00000000  00034174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00036da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  00037ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000245c3  00000000  00000000  00038ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f3e  00000000  00000000  0005d4a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4ec4  00000000  00000000  000723e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001472a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d64  00000000  00000000  001472f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000234 	.word	0x20000234
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ab1c 	.word	0x0800ab1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000238 	.word	0x20000238
 800020c:	0800ab1c 	.word	0x0800ab1c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <Setup_Absolute_position>:
 */

#include "GCode_helper.h"


void Setup_Absolute_position(char *tokens[] ){
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

	if((*tokens[1]) == 'Z'){
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3304      	adds	r3, #4
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b5a      	cmp	r3, #90	; 0x5a
 800106a:	d140      	bne.n	80010ee <Setup_Absolute_position+0x96>
	// Z directional motor
//	char *p;
	float steps =strtod(tokens[1]+1,NULL);  // strtol(tokens[1]+1, &p, 10);  //number start from next position of string
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3304      	adds	r3, #4
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f006 fce4 	bl	8007a44 <strtod>
 800107c:	ec53 2b10 	vmov	r2, r3, d0
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fde0 	bl	8000c48 <__aeabi_d2f>
 8001088:	4603      	mov	r3, r0
 800108a:	617b      	str	r3, [r7, #20]

	/* Z motor Positioning */
	int32_t total_steps = (int32_t) (steps * steps_per_millimeters);
 800108c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001090:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80010f4 <Setup_Absolute_position+0x9c>
 8001094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109c:	ee17 3a90 	vmov	r3, s15
 80010a0:	613b      	str	r3, [r7, #16]
	moveTo(total_steps);
 80010a2:	6938      	ldr	r0, [r7, #16]
 80010a4:	f001 f8ca 	bl	800223c <moveTo>



	if(*tokens[2] == 'F'){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3308      	adds	r3, #8
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b46      	cmp	r3, #70	; 0x46
 80010b2:	d11b      	bne.n	80010ec <Setup_Absolute_position+0x94>
	/* F speed controller */
	float speed = strtod(tokens[2]+1,NULL);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3308      	adds	r3, #8
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f006 fcc0 	bl	8007a44 <strtod>
 80010c4:	ec53 2b10 	vmov	r2, r3, d0
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f7ff fdbc 	bl	8000c48 <__aeabi_d2f>
 80010d0:	4603      	mov	r3, r0
 80010d2:	60fb      	str	r3, [r7, #12]
	speed = speed * steps_per_millimeters;
 80010d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010d8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80010f4 <Setup_Absolute_position+0x9c>
 80010dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e0:	edc7 7a03 	vstr	s15, [r7, #12]
	/*Fan Speed controlling */
	setMaxSpeed(speed);
 80010e4:	ed97 0a03 	vldr	s0, [r7, #12]
 80010e8:	f001 fb50 	bl	800278c <setMaxSpeed>

	}
	return;
 80010ec:	bf00      	nop
	}


}
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	47435000 	.word	0x47435000

080010f8 <Setup_Relative_position>:


void Setup_Relative_position(char *tokens[] ){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

	if((*tokens[1]) == 'Z'){
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3304      	adds	r3, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b5a      	cmp	r3, #90	; 0x5a
 800110a:	d140      	bne.n	800118e <Setup_Relative_position+0x96>
	// Z directional motor
//	char *p;
	float steps =strtod(tokens[1]+1,NULL);  // strtol(tokens[1]+1, &p, 10);  //number start from next position of string
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3304      	adds	r3, #4
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f006 fc94 	bl	8007a44 <strtod>
 800111c:	ec53 2b10 	vmov	r2, r3, d0
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fd90 	bl	8000c48 <__aeabi_d2f>
 8001128:	4603      	mov	r3, r0
 800112a:	617b      	str	r3, [r7, #20]

	/* Z motor Positioning */
	int32_t total_steps = (int32_t) (steps * steps_per_millimeters);
 800112c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001130:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001198 <Setup_Relative_position+0xa0>
 8001134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800113c:	ee17 3a90 	vmov	r3, s15
 8001140:	613b      	str	r3, [r7, #16]
	move(total_steps);
 8001142:	6938      	ldr	r0, [r7, #16]
 8001144:	f001 f8a2 	bl	800228c <move>

	if(*tokens[2] == 'F'){
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3308      	adds	r3, #8
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b46      	cmp	r3, #70	; 0x46
 8001152:	d11c      	bne.n	800118e <Setup_Relative_position+0x96>
	/* F speed controller */
	float speed = strtod(tokens[2]+1,NULL);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3308      	adds	r3, #8
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f006 fc70 	bl	8007a44 <strtod>
 8001164:	ec53 2b10 	vmov	r2, r3, d0
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fd6c 	bl	8000c48 <__aeabi_d2f>
 8001170:	4603      	mov	r3, r0
 8001172:	60fb      	str	r3, [r7, #12]
	speed = speed * steps_per_millimeters;
 8001174:	edd7 7a03 	vldr	s15, [r7, #12]
 8001178:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001198 <Setup_Relative_position+0xa0>
 800117c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001180:	edc7 7a03 	vstr	s15, [r7, #12]

	/*Fan Speed controlling */
	setMaxSpeed(speed);
 8001184:	ed97 0a03 	vldr	s0, [r7, #12]
 8001188:	f001 fb00 	bl	800278c <setMaxSpeed>

	}
}
	return;
 800118c:	bf00      	nop
 800118e:	bf00      	nop
}
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	47435000 	.word	0x47435000

0800119c <Homing_motor>:

void Homing_motor(char *tokens[] ){
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	setMaxSpeed(2*home_speed); //MOVING IN ccw
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <Homing_motor+0x50>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b2:	eeb0 0a67 	vmov.f32	s0, s15
 80011b6:	f001 fae9 	bl	800278c <setMaxSpeed>
	setSpeed(-1*home_speed); //MOVING IN ccw
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <Homing_motor+0x50>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	425b      	negs	r3, r3
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c8:	eeb0 0a67 	vmov.f32	s0, s15
 80011cc:	f001 fbc4 	bl	8002958 <setSpeed>


	while(!HOMED){
 80011d0:	e001      	b.n	80011d6 <Homing_motor+0x3a>
	runSpeed();
 80011d2:	f001 f909 	bl	80023e8 <runSpeed>
	while(!HOMED){
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <Homing_motor+0x54>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f9      	beq.n	80011d2 <Homing_motor+0x36>
	}
	setCurrentPosition(0);
 80011de:	2000      	movs	r0, #0
 80011e0:	f001 f958 	bl	8002494 <setCurrentPosition>
	return;
 80011e4:	bf00      	nop
}
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2000004c 	.word	0x2000004c
 80011f0:	20000491 	.word	0x20000491

080011f4 <Homing_completion>:

void Homing_completion(void){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	//resetting position parameters
	setCurrentPosition(0);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f001 f94b 	bl	8002494 <setCurrentPosition>
	stop();
 80011fe:	f001 fcbd 	bl	8002b7c <stop>
	//Resetting the encoder value to zero
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8001202:	4b03      	ldr	r3, [pc, #12]	; (8001210 <Homing_completion+0x1c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2200      	movs	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
	return;
 800120a:	bf00      	nop
}
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000334 	.word	0x20000334

08001214 <Run_Motor>:

void Run_Motor(void){
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	runToPosition();
 8001218:	f001 fca4 	bl	8002b64 <runToPosition>
	return;
 800121c:	bf00      	nop
}
 800121e:	bd80      	pop	{r7, pc}

08001220 <dectoint>:
 * Convert binary values contaning arry to decimal values
 * Params:
 * y_1 =
 */
void dectoint(char *y_1, char *y_2)
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	*y_1 = ((arr1[0]*pow(2,7))+(arr1[1]*pow(2,6))+(arr1[2]*pow(2,5))+(arr1[3]*pow(2,4))+(arr1[4]*pow(2,3))+(arr1[5]*pow(2,2))+(arr1[6]*pow(2,1))+(arr1[7]*pow(2,0)));
 800122a:	4b9c      	ldr	r3, [pc, #624]	; (800149c <dectoint+0x27c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f9a8 	bl	8000584 <__aeabi_i2d>
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	4b99      	ldr	r3, [pc, #612]	; (80014a0 <dectoint+0x280>)
 800123a:	f7ff fa0d 	bl	8000658 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4614      	mov	r4, r2
 8001244:	461d      	mov	r5, r3
 8001246:	4b95      	ldr	r3, [pc, #596]	; (800149c <dectoint+0x27c>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f99a 	bl	8000584 <__aeabi_i2d>
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b93      	ldr	r3, [pc, #588]	; (80014a4 <dectoint+0x284>)
 8001256:	f7ff f9ff 	bl	8000658 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4620      	mov	r0, r4
 8001260:	4629      	mov	r1, r5
 8001262:	f7ff f843 	bl	80002ec <__adddf3>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4614      	mov	r4, r2
 800126c:	461d      	mov	r5, r3
 800126e:	4b8b      	ldr	r3, [pc, #556]	; (800149c <dectoint+0x27c>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f986 	bl	8000584 <__aeabi_i2d>
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	4b8a      	ldr	r3, [pc, #552]	; (80014a8 <dectoint+0x288>)
 800127e:	f7ff f9eb 	bl	8000658 <__aeabi_dmul>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4620      	mov	r0, r4
 8001288:	4629      	mov	r1, r5
 800128a:	f7ff f82f 	bl	80002ec <__adddf3>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4614      	mov	r4, r2
 8001294:	461d      	mov	r5, r3
 8001296:	4b81      	ldr	r3, [pc, #516]	; (800149c <dectoint+0x27c>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f972 	bl	8000584 <__aeabi_i2d>
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	4b81      	ldr	r3, [pc, #516]	; (80014ac <dectoint+0x28c>)
 80012a6:	f7ff f9d7 	bl	8000658 <__aeabi_dmul>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4620      	mov	r0, r4
 80012b0:	4629      	mov	r1, r5
 80012b2:	f7ff f81b 	bl	80002ec <__adddf3>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4614      	mov	r4, r2
 80012bc:	461d      	mov	r5, r3
 80012be:	4b77      	ldr	r3, [pc, #476]	; (800149c <dectoint+0x27c>)
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f95e 	bl	8000584 <__aeabi_i2d>
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	4b78      	ldr	r3, [pc, #480]	; (80014b0 <dectoint+0x290>)
 80012ce:	f7ff f9c3 	bl	8000658 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4620      	mov	r0, r4
 80012d8:	4629      	mov	r1, r5
 80012da:	f7ff f807 	bl	80002ec <__adddf3>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4614      	mov	r4, r2
 80012e4:	461d      	mov	r5, r3
 80012e6:	4b6d      	ldr	r3, [pc, #436]	; (800149c <dectoint+0x27c>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f94a 	bl	8000584 <__aeabi_i2d>
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b6f      	ldr	r3, [pc, #444]	; (80014b4 <dectoint+0x294>)
 80012f6:	f7ff f9af 	bl	8000658 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4620      	mov	r0, r4
 8001300:	4629      	mov	r1, r5
 8001302:	f7fe fff3 	bl	80002ec <__adddf3>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4614      	mov	r4, r2
 800130c:	461d      	mov	r5, r3
 800130e:	4b63      	ldr	r3, [pc, #396]	; (800149c <dectoint+0x27c>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f936 	bl	8000584 <__aeabi_i2d>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	f7fe ffe6 	bl	80002ec <__adddf3>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4620      	mov	r0, r4
 8001326:	4629      	mov	r1, r5
 8001328:	f7fe ffe0 	bl	80002ec <__adddf3>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4614      	mov	r4, r2
 8001332:	461d      	mov	r5, r3
 8001334:	4b59      	ldr	r3, [pc, #356]	; (800149c <dectoint+0x27c>)
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f923 	bl	8000584 <__aeabi_i2d>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4620      	mov	r0, r4
 8001344:	4629      	mov	r1, r5
 8001346:	f7fe ffd1 	bl	80002ec <__adddf3>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fc59 	bl	8000c08 <__aeabi_d2uiz>
 8001356:	4603      	mov	r3, r0
 8001358:	b2da      	uxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	701a      	strb	r2, [r3, #0]

	*y_2 = ((arr2[0]*pow(2,7))+(arr2[1]*pow(2,6))+(arr2[2]*pow(2,5))+(arr2[3]*pow(2,4))+(arr2[4]*pow(2,3))+(arr2[5]*pow(2,2))+(arr2[6]*pow(2,1))+(arr2[7]*pow(2,0)));
 800135e:	4b56      	ldr	r3, [pc, #344]	; (80014b8 <dectoint+0x298>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f90e 	bl	8000584 <__aeabi_i2d>
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	4b4c      	ldr	r3, [pc, #304]	; (80014a0 <dectoint+0x280>)
 800136e:	f7ff f973 	bl	8000658 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4614      	mov	r4, r2
 8001378:	461d      	mov	r5, r3
 800137a:	4b4f      	ldr	r3, [pc, #316]	; (80014b8 <dectoint+0x298>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f900 	bl	8000584 <__aeabi_i2d>
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	4b46      	ldr	r3, [pc, #280]	; (80014a4 <dectoint+0x284>)
 800138a:	f7ff f965 	bl	8000658 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4620      	mov	r0, r4
 8001394:	4629      	mov	r1, r5
 8001396:	f7fe ffa9 	bl	80002ec <__adddf3>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4614      	mov	r4, r2
 80013a0:	461d      	mov	r5, r3
 80013a2:	4b45      	ldr	r3, [pc, #276]	; (80014b8 <dectoint+0x298>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8ec 	bl	8000584 <__aeabi_i2d>
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b3d      	ldr	r3, [pc, #244]	; (80014a8 <dectoint+0x288>)
 80013b2:	f7ff f951 	bl	8000658 <__aeabi_dmul>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4620      	mov	r0, r4
 80013bc:	4629      	mov	r1, r5
 80013be:	f7fe ff95 	bl	80002ec <__adddf3>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4614      	mov	r4, r2
 80013c8:	461d      	mov	r5, r3
 80013ca:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <dectoint+0x298>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8d8 	bl	8000584 <__aeabi_i2d>
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	4b34      	ldr	r3, [pc, #208]	; (80014ac <dectoint+0x28c>)
 80013da:	f7ff f93d 	bl	8000658 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4620      	mov	r0, r4
 80013e4:	4629      	mov	r1, r5
 80013e6:	f7fe ff81 	bl	80002ec <__adddf3>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4614      	mov	r4, r2
 80013f0:	461d      	mov	r5, r3
 80013f2:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <dectoint+0x298>)
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f8c4 	bl	8000584 <__aeabi_i2d>
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <dectoint+0x290>)
 8001402:	f7ff f929 	bl	8000658 <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4620      	mov	r0, r4
 800140c:	4629      	mov	r1, r5
 800140e:	f7fe ff6d 	bl	80002ec <__adddf3>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4614      	mov	r4, r2
 8001418:	461d      	mov	r5, r3
 800141a:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <dectoint+0x298>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f8b0 	bl	8000584 <__aeabi_i2d>
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <dectoint+0x294>)
 800142a:	f7ff f915 	bl	8000658 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4620      	mov	r0, r4
 8001434:	4629      	mov	r1, r5
 8001436:	f7fe ff59 	bl	80002ec <__adddf3>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4614      	mov	r4, r2
 8001440:	461d      	mov	r5, r3
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <dectoint+0x298>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f89c 	bl	8000584 <__aeabi_i2d>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	f7fe ff4c 	bl	80002ec <__adddf3>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4620      	mov	r0, r4
 800145a:	4629      	mov	r1, r5
 800145c:	f7fe ff46 	bl	80002ec <__adddf3>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4614      	mov	r4, r2
 8001466:	461d      	mov	r5, r3
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <dectoint+0x298>)
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f889 	bl	8000584 <__aeabi_i2d>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4620      	mov	r0, r4
 8001478:	4629      	mov	r1, r5
 800147a:	f7fe ff37 	bl	80002ec <__adddf3>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fbbf 	bl	8000c08 <__aeabi_d2uiz>
 800148a:	4603      	mov	r3, r0
 800148c:	b2da      	uxtb	r2, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	701a      	strb	r2, [r3, #0]

}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bdb0      	pop	{r4, r5, r7, pc}
 800149a:	bf00      	nop
 800149c:	20000294 	.word	0x20000294
 80014a0:	40600000 	.word	0x40600000
 80014a4:	40500000 	.word	0x40500000
 80014a8:	40400000 	.word	0x40400000
 80014ac:	40300000 	.word	0x40300000
 80014b0:	40200000 	.word	0x40200000
 80014b4:	40100000 	.word	0x40100000
 80014b8:	200002b4 	.word	0x200002b4

080014bc <split>:
 * y1 = empty char which going to carry left most 8 bits equivalent decimal value after the function execution.
 * y2 = empty char which going to carry right most 8 bits equivalent decimal value after the function execution.
 */

void split(char *y1, char *y2)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
	int k=0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
	int l=0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
	for(int i = 0; i<16; i++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	e025      	b.n	8001520 <split+0x64>
	{
		if(i>=0 && i<=7)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db0e      	blt.n	80014f8 <split+0x3c>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b07      	cmp	r3, #7
 80014de:	dc0b      	bgt.n	80014f8 <split+0x3c>
		{

			arr1[k] = arr[i];
 80014e0:	4a15      	ldr	r2, [pc, #84]	; (8001538 <split+0x7c>)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014e8:	4914      	ldr	r1, [pc, #80]	; (800153c <split+0x80>)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			k++;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3301      	adds	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	e010      	b.n	800151a <split+0x5e>
		}

		else if(i>=8 && i <=15)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b07      	cmp	r3, #7
 80014fc:	dd0d      	ble.n	800151a <split+0x5e>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2b0f      	cmp	r3, #15
 8001502:	dc0a      	bgt.n	800151a <split+0x5e>
		{

			arr2[l] = arr[i];
 8001504:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <split+0x7c>)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800150c:	490c      	ldr	r1, [pc, #48]	; (8001540 <split+0x84>)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			l++;
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	3301      	adds	r3, #1
 8001518:	613b      	str	r3, [r7, #16]
	for(int i = 0; i<16; i++)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3301      	adds	r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b0f      	cmp	r3, #15
 8001524:	ddd6      	ble.n	80014d4 <split+0x18>
		}
	}
	dectoint(y1,y2);// stores the equivalent decimal of binary number in arr1 and arr2 into y1 and y2
 8001526:	6839      	ldr	r1, [r7, #0]
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fe79 	bl	8001220 <dectoint>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000254 	.word	0x20000254
 800153c:	20000294 	.word	0x20000294
 8001540:	200002b4 	.word	0x200002b4

08001544 <dectobin>:
 * y1 = stores the left most 8 bits in decimal form from 16bit binary number
 * y2 = stores the right most 8 bits in decimal form from 16bit binary number
 *
 */
void dectobin(int y, char *y1, char *y2)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b098      	sub	sp, #96	; 0x60
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	65fb      	str	r3, [r7, #92]	; 0x5c
	int j = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	65bb      	str	r3, [r7, #88]	; 0x58

	int binaryNum[16]={0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2240      	movs	r2, #64	; 0x40
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f004 ffb9 	bl	80064d8 <memset>
	while( y > 0)
 8001566:	e014      	b.n	8001592 <dectobin+0x4e>
	{
		binaryNum[i] = y % 2;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	bfb8      	it	lt
 8001572:	425b      	neglt	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	3360      	adds	r3, #96	; 0x60
 800157c:	443b      	add	r3, r7
 800157e:	f843 2c4c 	str.w	r2, [r3, #-76]
		y = y/2;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	0fda      	lsrs	r2, r3, #31
 8001586:	4413      	add	r3, r2
 8001588:	105b      	asrs	r3, r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
		i++;
 800158c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800158e:	3301      	adds	r3, #1
 8001590:	65fb      	str	r3, [r7, #92]	; 0x5c
	while( y > 0)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	dce7      	bgt.n	8001568 <dectobin+0x24>
	}

	int k=0;
 8001598:	2300      	movs	r3, #0
 800159a:	657b      	str	r3, [r7, #84]	; 0x54
	for(j= 15; j >= 0; j--)
 800159c:	230f      	movs	r3, #15
 800159e:	65bb      	str	r3, [r7, #88]	; 0x58
 80015a0:	e00f      	b.n	80015c2 <dectobin+0x7e>
	{
		arr[k] = binaryNum[j];
 80015a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	3360      	adds	r3, #96	; 0x60
 80015a8:	443b      	add	r3, r7
 80015aa:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 80015ae:	490a      	ldr	r1, [pc, #40]	; (80015d8 <dectobin+0x94>)
 80015b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		k++;
 80015b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b8:	3301      	adds	r3, #1
 80015ba:	657b      	str	r3, [r7, #84]	; 0x54
	for(j= 15; j >= 0; j--)
 80015bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015be:	3b01      	subs	r3, #1
 80015c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80015c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	daec      	bge.n	80015a2 <dectobin+0x5e>
	}
	split(y1,y2);
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	68b8      	ldr	r0, [r7, #8]
 80015cc:	f7ff ff76 	bl	80014bc <split>
}
 80015d0:	bf00      	nop
 80015d2:	3760      	adds	r7, #96	; 0x60
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000254 	.word	0x20000254

080015dc <send_function>:
 * channel = char which equal to binary between 00110000 to 00111111
 * y1 : 8 bit value that splits from left part of 16bit brightness value
 * y2 :  8 bit value that splits from right part of 16bit brightness value
 */
void send_function( char channel , char *y_1 , char *y_2)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(SPI_Selection_GPIO_Port , SPI_Selection_Pin, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f0:	4810      	ldr	r0, [pc, #64]	; (8001634 <send_function+0x58>)
 80015f2:	f002 f9a9 	bl	8003948 <HAL_GPIO_WritePin>
		x = channel;
 80015f6:	4a10      	ldr	r2, [pc, #64]	; (8001638 <send_function+0x5c>)
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	7013      	strb	r3, [r2, #0]

		HAL_SPI_Transmit(&hspi1,(uint8_t*) &x, sizeof(x), 100);
 80015fc:	2364      	movs	r3, #100	; 0x64
 80015fe:	2201      	movs	r2, #1
 8001600:	490d      	ldr	r1, [pc, #52]	; (8001638 <send_function+0x5c>)
 8001602:	480e      	ldr	r0, [pc, #56]	; (800163c <send_function+0x60>)
 8001604:	f003 f843 	bl	800468e <HAL_SPI_Transmit>

	    HAL_SPI_Transmit(&hspi1,(uint8_t*) y_1, sizeof(*y_1), 100);
 8001608:	2364      	movs	r3, #100	; 0x64
 800160a:	2201      	movs	r2, #1
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	480b      	ldr	r0, [pc, #44]	; (800163c <send_function+0x60>)
 8001610:	f003 f83d 	bl	800468e <HAL_SPI_Transmit>

	    HAL_SPI_Transmit(&hspi1,(uint8_t*) y_2, sizeof(*y_2), 100);
 8001614:	2364      	movs	r3, #100	; 0x64
 8001616:	2201      	movs	r2, #1
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4808      	ldr	r0, [pc, #32]	; (800163c <send_function+0x60>)
 800161c:	f003 f837 	bl	800468e <HAL_SPI_Transmit>


	    HAL_GPIO_WritePin(SPI_Selection_GPIO_Port , SPI_Selection_Pin, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001626:	4803      	ldr	r0, [pc, #12]	; (8001634 <send_function+0x58>)
 8001628:	f002 f98e 	bl	8003948 <HAL_GPIO_WritePin>
}
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40020000 	.word	0x40020000
 8001638:	2000000c 	.word	0x2000000c
 800163c:	200002dc 	.word	0x200002dc

08001640 <stop_function>:
 * Turn Off the LED channel that we provided as parameter
 * param:
 * channel = char which equal to binary between 00110000 to 00111111
 */
void stop_function( char channel)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]

		HAL_GPIO_WritePin(SPI_Selection_GPIO_Port , SPI_Selection_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001650:	4810      	ldr	r0, [pc, #64]	; (8001694 <stop_function+0x54>)
 8001652:	f002 f979 	bl	8003948 <HAL_GPIO_WritePin>
		x = channel;
 8001656:	4a10      	ldr	r2, [pc, #64]	; (8001698 <stop_function+0x58>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	7013      	strb	r3, [r2, #0]

		HAL_SPI_Transmit(&hspi1,(uint8_t*) &x, sizeof(x), 100);
 800165c:	2364      	movs	r3, #100	; 0x64
 800165e:	2201      	movs	r2, #1
 8001660:	490d      	ldr	r1, [pc, #52]	; (8001698 <stop_function+0x58>)
 8001662:	480e      	ldr	r0, [pc, #56]	; (800169c <stop_function+0x5c>)
 8001664:	f003 f813 	bl	800468e <HAL_SPI_Transmit>

	    HAL_SPI_Transmit(&hspi1,&stop_led, sizeof(stop_led), 100);
 8001668:	2364      	movs	r3, #100	; 0x64
 800166a:	2201      	movs	r2, #1
 800166c:	490c      	ldr	r1, [pc, #48]	; (80016a0 <stop_function+0x60>)
 800166e:	480b      	ldr	r0, [pc, #44]	; (800169c <stop_function+0x5c>)
 8001670:	f003 f80d 	bl	800468e <HAL_SPI_Transmit>

	    HAL_SPI_Transmit(&hspi1,&stop_led, sizeof(stop_led), 100);
 8001674:	2364      	movs	r3, #100	; 0x64
 8001676:	2201      	movs	r2, #1
 8001678:	4909      	ldr	r1, [pc, #36]	; (80016a0 <stop_function+0x60>)
 800167a:	4808      	ldr	r0, [pc, #32]	; (800169c <stop_function+0x5c>)
 800167c:	f003 f807 	bl	800468e <HAL_SPI_Transmit>

	    HAL_GPIO_WritePin(SPI_Selection_GPIO_Port , SPI_Selection_Pin, GPIO_PIN_SET);
 8001680:	2201      	movs	r2, #1
 8001682:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001686:	4803      	ldr	r0, [pc, #12]	; (8001694 <stop_function+0x54>)
 8001688:	f002 f95e 	bl	8003948 <HAL_GPIO_WritePin>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40020000 	.word	0x40020000
 8001698:	2000000c 	.word	0x2000000c
 800169c:	200002dc 	.word	0x200002dc
 80016a0:	200002da 	.word	0x200002da

080016a4 <UART_Command>:
 *      Author: Ajith Pinninti
 */

#include "UART_helper.h"

void UART_Command(char *tokens[]){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

		if(strcmp(tokens[0],"G90") == 0 ){
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4974      	ldr	r1, [pc, #464]	; (8001884 <UART_Command+0x1e0>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fdac 	bl	8000210 <strcmp>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d121      	bne.n	8001702 <UART_Command+0x5e>
		//Absolute positioning
		Setup_Absolute_position(tokens);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fcca 	bl	8001058 <Setup_Absolute_position>

		//Run the Motors
		Run_Motor();
 80016c4:	f7ff fda6 	bl	8001214 <Run_Motor>

		//Execute Command make zero and Reset the buffer
		Exec_command = 0;
 80016c8:	4b6f      	ldr	r3, [pc, #444]	; (8001888 <UART_Command+0x1e4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
		memset(RxBuffer,0,sizeof(RxBuffer));
 80016ce:	2232      	movs	r2, #50	; 0x32
 80016d0:	2100      	movs	r1, #0
 80016d2:	486e      	ldr	r0, [pc, #440]	; (800188c <UART_Command+0x1e8>)
 80016d4:	f004 ff00 	bl	80064d8 <memset>


		//sending the ready status
		memset(sending_data,0,sizeof(sending_data));
 80016d8:	2232      	movs	r2, #50	; 0x32
 80016da:	2100      	movs	r1, #0
 80016dc:	486c      	ldr	r0, [pc, #432]	; (8001890 <UART_Command+0x1ec>)
 80016de:	f004 fefb 	bl	80064d8 <memset>
		sprintf(sending_data,"G90Completed \n");
 80016e2:	496c      	ldr	r1, [pc, #432]	; (8001894 <UART_Command+0x1f0>)
 80016e4:	486a      	ldr	r0, [pc, #424]	; (8001890 <UART_Command+0x1ec>)
 80016e6:	f005 fb69 	bl	8006dbc <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 80016ea:	4869      	ldr	r0, [pc, #420]	; (8001890 <UART_Command+0x1ec>)
 80016ec:	f7fe fd9a 	bl	8000224 <strlen>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295
 80016f8:	4965      	ldr	r1, [pc, #404]	; (8001890 <UART_Command+0x1ec>)
 80016fa:	4867      	ldr	r0, [pc, #412]	; (8001898 <UART_Command+0x1f4>)
 80016fc:	f003 fe97 	bl	800542e <HAL_UART_Transmit>
			Exec_command = 0;
			memset(RxBuffer,0,sizeof(RxBuffer));
		}


}
 8001700:	e0bb      	b.n	800187a <UART_Command+0x1d6>
		else if(strcmp(tokens[0],"G91") == 0){
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4965      	ldr	r1, [pc, #404]	; (800189c <UART_Command+0x1f8>)
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fd81 	bl	8000210 <strcmp>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d121      	bne.n	8001758 <UART_Command+0xb4>
		Setup_Relative_position(tokens);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fcef 	bl	80010f8 <Setup_Relative_position>
		Run_Motor();
 800171a:	f7ff fd7b 	bl	8001214 <Run_Motor>
		Exec_command = 0;
 800171e:	4b5a      	ldr	r3, [pc, #360]	; (8001888 <UART_Command+0x1e4>)
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
		memset(RxBuffer,0,sizeof(RxBuffer));
 8001724:	2232      	movs	r2, #50	; 0x32
 8001726:	2100      	movs	r1, #0
 8001728:	4858      	ldr	r0, [pc, #352]	; (800188c <UART_Command+0x1e8>)
 800172a:	f004 fed5 	bl	80064d8 <memset>
		memset(sending_data,0,sizeof(sending_data));
 800172e:	2232      	movs	r2, #50	; 0x32
 8001730:	2100      	movs	r1, #0
 8001732:	4857      	ldr	r0, [pc, #348]	; (8001890 <UART_Command+0x1ec>)
 8001734:	f004 fed0 	bl	80064d8 <memset>
		sprintf(sending_data,"G91Completed \n");
 8001738:	4959      	ldr	r1, [pc, #356]	; (80018a0 <UART_Command+0x1fc>)
 800173a:	4855      	ldr	r0, [pc, #340]	; (8001890 <UART_Command+0x1ec>)
 800173c:	f005 fb3e 	bl	8006dbc <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 8001740:	4853      	ldr	r0, [pc, #332]	; (8001890 <UART_Command+0x1ec>)
 8001742:	f7fe fd6f 	bl	8000224 <strlen>
 8001746:	4603      	mov	r3, r0
 8001748:	b29a      	uxth	r2, r3
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	4950      	ldr	r1, [pc, #320]	; (8001890 <UART_Command+0x1ec>)
 8001750:	4851      	ldr	r0, [pc, #324]	; (8001898 <UART_Command+0x1f4>)
 8001752:	f003 fe6c 	bl	800542e <HAL_UART_Transmit>
}
 8001756:	e090      	b.n	800187a <UART_Command+0x1d6>
		else if(strcmp(tokens[0],"HOME") == 0){
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4951      	ldr	r1, [pc, #324]	; (80018a4 <UART_Command+0x200>)
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fd56 	bl	8000210 <strcmp>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d109      	bne.n	800177e <UART_Command+0xda>
		HAL_NVIC_EnableIRQ(Z_END_STOP_EXTI_IRQn);
 800176a:	2017      	movs	r0, #23
 800176c:	f001 fe9d 	bl	80034aa <HAL_NVIC_EnableIRQ>
		HOMED = false;
 8001770:	4b4d      	ldr	r3, [pc, #308]	; (80018a8 <UART_Command+0x204>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
		Homing_motor(tokens);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fd10 	bl	800119c <Homing_motor>
}
 800177c:	e07d      	b.n	800187a <UART_Command+0x1d6>
		else if(strcmp(tokens[0],"MOTPOS") == 0){
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	494a      	ldr	r1, [pc, #296]	; (80018ac <UART_Command+0x208>)
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fd43 	bl	8000210 <strcmp>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d12c      	bne.n	80017ea <UART_Command+0x146>
			memset(sending_data,0,sizeof(sending_data));
 8001790:	2232      	movs	r2, #50	; 0x32
 8001792:	2100      	movs	r1, #0
 8001794:	483e      	ldr	r0, [pc, #248]	; (8001890 <UART_Command+0x1ec>)
 8001796:	f004 fe9f 	bl	80064d8 <memset>
			sprintf(sending_data,"%0.2f\n",(float) currentPosition()/steps_per_millimeters );
 800179a:	f000 fe6f 	bl	800247c <currentPosition>
 800179e:	ee07 0a90 	vmov	s15, r0
 80017a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a6:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80018b0 <UART_Command+0x20c>
 80017aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017ae:	ee16 0a90 	vmov	r0, s13
 80017b2:	f7fe fef9 	bl	80005a8 <__aeabi_f2d>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	493e      	ldr	r1, [pc, #248]	; (80018b4 <UART_Command+0x210>)
 80017bc:	4834      	ldr	r0, [pc, #208]	; (8001890 <UART_Command+0x1ec>)
 80017be:	f005 fafd 	bl	8006dbc <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 80017c2:	4833      	ldr	r0, [pc, #204]	; (8001890 <UART_Command+0x1ec>)
 80017c4:	f7fe fd2e 	bl	8000224 <strlen>
 80017c8:	4603      	mov	r3, r0
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	492f      	ldr	r1, [pc, #188]	; (8001890 <UART_Command+0x1ec>)
 80017d2:	4831      	ldr	r0, [pc, #196]	; (8001898 <UART_Command+0x1f4>)
 80017d4:	f003 fe2b 	bl	800542e <HAL_UART_Transmit>
			Exec_command = 0;
 80017d8:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <UART_Command+0x1e4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
			memset(RxBuffer,0,sizeof(RxBuffer));
 80017de:	2232      	movs	r2, #50	; 0x32
 80017e0:	2100      	movs	r1, #0
 80017e2:	482a      	ldr	r0, [pc, #168]	; (800188c <UART_Command+0x1e8>)
 80017e4:	f004 fe78 	bl	80064d8 <memset>
}
 80017e8:	e047      	b.n	800187a <UART_Command+0x1d6>
		else if(strcmp(tokens[0],"ENCZERO") == 0){
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4932      	ldr	r1, [pc, #200]	; (80018b8 <UART_Command+0x214>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fd0d 	bl	8000210 <strcmp>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10c      	bne.n	8001816 <UART_Command+0x172>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80017fc:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <UART_Command+0x218>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2200      	movs	r2, #0
 8001802:	625a      	str	r2, [r3, #36]	; 0x24
			Exec_command = 0;
 8001804:	4b20      	ldr	r3, [pc, #128]	; (8001888 <UART_Command+0x1e4>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
			memset(RxBuffer,0,sizeof(RxBuffer));
 800180a:	2232      	movs	r2, #50	; 0x32
 800180c:	2100      	movs	r1, #0
 800180e:	481f      	ldr	r0, [pc, #124]	; (800188c <UART_Command+0x1e8>)
 8001810:	f004 fe62 	bl	80064d8 <memset>
}
 8001814:	e031      	b.n	800187a <UART_Command+0x1d6>
		else if(strcmp(tokens[0],"ENCVAL") == 0){
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4929      	ldr	r1, [pc, #164]	; (80018c0 <UART_Command+0x21c>)
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fcf7 	bl	8000210 <strcmp>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d120      	bne.n	800186a <UART_Command+0x1c6>
			memset(sending_data,0,sizeof(sending_data));
 8001828:	2232      	movs	r2, #50	; 0x32
 800182a:	2100      	movs	r1, #0
 800182c:	4818      	ldr	r0, [pc, #96]	; (8001890 <UART_Command+0x1ec>)
 800182e:	f004 fe53 	bl	80064d8 <memset>
			sprintf(sending_data,"%ld\n",__HAL_TIM_GET_COUNTER(&htim2) );
 8001832:	4b22      	ldr	r3, [pc, #136]	; (80018bc <UART_Command+0x218>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	461a      	mov	r2, r3
 800183a:	4922      	ldr	r1, [pc, #136]	; (80018c4 <UART_Command+0x220>)
 800183c:	4814      	ldr	r0, [pc, #80]	; (8001890 <UART_Command+0x1ec>)
 800183e:	f005 fabd 	bl	8006dbc <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 8001842:	4813      	ldr	r0, [pc, #76]	; (8001890 <UART_Command+0x1ec>)
 8001844:	f7fe fcee 	bl	8000224 <strlen>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	490f      	ldr	r1, [pc, #60]	; (8001890 <UART_Command+0x1ec>)
 8001852:	4811      	ldr	r0, [pc, #68]	; (8001898 <UART_Command+0x1f4>)
 8001854:	f003 fdeb 	bl	800542e <HAL_UART_Transmit>
			Exec_command = 0;
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <UART_Command+0x1e4>)
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
			memset(RxBuffer,0,sizeof(RxBuffer));
 800185e:	2232      	movs	r2, #50	; 0x32
 8001860:	2100      	movs	r1, #0
 8001862:	480a      	ldr	r0, [pc, #40]	; (800188c <UART_Command+0x1e8>)
 8001864:	f004 fe38 	bl	80064d8 <memset>
}
 8001868:	e007      	b.n	800187a <UART_Command+0x1d6>
			Exec_command = 0;
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <UART_Command+0x1e4>)
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
			memset(RxBuffer,0,sizeof(RxBuffer));
 8001870:	2232      	movs	r2, #50	; 0x32
 8001872:	2100      	movs	r1, #0
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <UART_Command+0x1e8>)
 8001876:	f004 fe2f 	bl	80064d8 <memset>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	0800ab38 	.word	0x0800ab38
 8001888:	20000483 	.word	0x20000483
 800188c:	20000450 	.word	0x20000450
 8001890:	20000010 	.word	0x20000010
 8001894:	0800ab3c 	.word	0x0800ab3c
 8001898:	2000040c 	.word	0x2000040c
 800189c:	0800ab4c 	.word	0x0800ab4c
 80018a0:	0800ab50 	.word	0x0800ab50
 80018a4:	0800ab60 	.word	0x0800ab60
 80018a8:	20000491 	.word	0x20000491
 80018ac:	0800ab68 	.word	0x0800ab68
 80018b0:	47435000 	.word	0x47435000
 80018b4:	0800ab70 	.word	0x0800ab70
 80018b8:	0800ab78 	.word	0x0800ab78
 80018bc:	20000334 	.word	0x20000334
 80018c0:	0800ab80 	.word	0x0800ab80
 80018c4:	0800ab88 	.word	0x0800ab88

080018c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80018ce:	f001 fc5f 	bl	8003190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d2:	f000 f8c3 	bl	8001a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d6:	f000 fa4d 	bl	8001d74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018da:	f000 fa21 	bl	8001d20 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80018de:	f000 f9b3 	bl	8001c48 <MX_TIM6_Init>
  MX_TIM7_Init();
 80018e2:	f000 f9e7 	bl	8001cb4 <MX_TIM7_Init>
  MX_SPI1_Init();
 80018e6:	f000 f925 	bl	8001b34 <MX_SPI1_Init>
  MX_TIM2_Init();
 80018ea:	f000 f959 	bl	8001ba0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /****************************** Setting up IRQ ***********************/
	HAL_NVIC_DisableIRQ(Z_END_STOP_EXTI_IRQn);
 80018ee:	2017      	movs	r0, #23
 80018f0:	f001 fde9 	bl	80034c6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(Z_reference_EXTI_IRQn);
 80018f4:	2006      	movs	r0, #6
 80018f6:	f001 fde6 	bl	80034c6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(P_limit_EXTI_IRQn);
 80018fa:	200a      	movs	r0, #10
 80018fc:	f001 fde3 	bl	80034c6 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(Q_limit_EXTI_IRQn);
 8001900:	2017      	movs	r0, #23
 8001902:	f001 fde0 	bl	80034c6 <HAL_NVIC_DisableIRQ>


/*********************** LED SPI Intialization *******************/

	//initializing LED values
	dectobin(ch1_br, &ch1_buff1, &ch1_buff2);
 8001906:	4b3d      	ldr	r3, [pc, #244]	; (80019fc <main+0x134>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a3d      	ldr	r2, [pc, #244]	; (8001a00 <main+0x138>)
 800190c:	493d      	ldr	r1, [pc, #244]	; (8001a04 <main+0x13c>)
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fe18 	bl	8001544 <dectobin>
	dectobin(ch2_br, &ch2_buff1, &ch2_buff2);
 8001914:	4b3c      	ldr	r3, [pc, #240]	; (8001a08 <main+0x140>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a3c      	ldr	r2, [pc, #240]	; (8001a0c <main+0x144>)
 800191a:	493d      	ldr	r1, [pc, #244]	; (8001a10 <main+0x148>)
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fe11 	bl	8001544 <dectobin>
	dectobin(ch3_br, &ch3_buff1, &ch3_buff2);
 8001922:	4b3c      	ldr	r3, [pc, #240]	; (8001a14 <main+0x14c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a3c      	ldr	r2, [pc, #240]	; (8001a18 <main+0x150>)
 8001928:	493c      	ldr	r1, [pc, #240]	; (8001a1c <main+0x154>)
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fe0a 	bl	8001544 <dectobin>
	//setting up channel select pin to HIGH
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001936:	483a      	ldr	r0, [pc, #232]	; (8001a20 <main+0x158>)
 8001938:	f002 f806 	bl	8003948 <HAL_GPIO_WritePin>



/************************** UART Initialisation *********************/
	// initiating interrupt for PC data receiving
	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 800193c:	2201      	movs	r2, #1
 800193e:	4939      	ldr	r1, [pc, #228]	; (8001a24 <main+0x15c>)
 8001940:	4839      	ldr	r0, [pc, #228]	; (8001a28 <main+0x160>)
 8001942:	f003 fe06 	bl	8005552 <HAL_UART_Receive_IT>



/************************** Encoder Intialization *******************/

	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL); //starting encoder
 8001946:	213c      	movs	r1, #60	; 0x3c
 8001948:	4838      	ldr	r0, [pc, #224]	; (8001a2c <main+0x164>)
 800194a:	f003 fa05 	bl	8004d58 <HAL_TIM_Encoder_Start>



/*************************** Timer Intializations ****************/

  HAL_TIM_Base_Start(&htim6); //to calculate pulse time
 800194e:	4838      	ldr	r0, [pc, #224]	; (8001a30 <main+0x168>)
 8001950:	f003 f8f4 	bl	8004b3c <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim7); // for microseconds delay
 8001954:	4837      	ldr	r0, [pc, #220]	; (8001a34 <main+0x16c>)
 8001956:	f003 f8f1 	bl	8004b3c <HAL_TIM_Base_Start>


/*********************** Z motor initialization *********************/


	stepper_setup(STEP_GPIO_Port, STEP_Pin, DIR_GPIO_Port, DIR_Pin );
 800195a:	2301      	movs	r3, #1
 800195c:	4a36      	ldr	r2, [pc, #216]	; (8001a38 <main+0x170>)
 800195e:	2102      	movs	r1, #2
 8001960:	4835      	ldr	r0, [pc, #212]	; (8001a38 <main+0x170>)
 8001962:	f000 fca5 	bl	80022b0 <stepper_setup>

	//sample movement
	Total_Steps = (int32_t) ( steps_per_millimeters * targetPos );
 8001966:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <main+0x174>)
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001a40 <main+0x178>
 8001970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001978:	ee17 2a90 	vmov	r2, s15
 800197c:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <main+0x17c>)
 800197e:	601a      	str	r2, [r3, #0]
	setMaxSpeed(10*steps_per_millimeters);
 8001980:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8001a48 <main+0x180>
 8001984:	f000 ff02 	bl	800278c <setMaxSpeed>
	setAcceleration(Acceleration);
 8001988:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <main+0x184>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	eeb0 0a67 	vmov.f32	s0, s15
 8001992:	f000 ff61 	bl	8002858 <setAcceleration>
	moveTo(Total_Steps);
 8001996:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <main+0x17c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f000 fc4e 	bl	800223c <moveTo>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(Exec_command){
 80019a0:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <main+0x188>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0fb      	beq.n	80019a0 <main+0xd8>
	//			char str[] = "G91 Z30 F300 \r";
		int MAX_TOKENS = 3;
 80019a8:	2303      	movs	r3, #3
 80019aa:	60fb      	str	r3, [r7, #12]
		char *token;
		char *tokens[3] = {0};
 80019ac:	463b      	mov	r3, r7
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
		int i = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]


		/* Split the string by the delimiter " " */
		token = strtok((char *)RxBuffer, " ");
 80019ba:	4926      	ldr	r1, [pc, #152]	; (8001a54 <main+0x18c>)
 80019bc:	4826      	ldr	r0, [pc, #152]	; (8001a58 <main+0x190>)
 80019be:	f006 f84d 	bl	8007a5c <strtok>
 80019c2:	6178      	str	r0, [r7, #20]

		while (token != NULL && i < MAX_TOKENS) {
 80019c4:	e00e      	b.n	80019e4 <main+0x11c>
			tokens[i] = token;
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	3318      	adds	r3, #24
 80019cc:	443b      	add	r3, r7
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	f843 2c18 	str.w	r2, [r3, #-24]
			i++;
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	3301      	adds	r3, #1
 80019d8:	613b      	str	r3, [r7, #16]
			token = strtok(NULL, " ");
 80019da:	491e      	ldr	r1, [pc, #120]	; (8001a54 <main+0x18c>)
 80019dc:	2000      	movs	r0, #0
 80019de:	f006 f83d 	bl	8007a5c <strtok>
 80019e2:	6178      	str	r0, [r7, #20]
		while (token != NULL && i < MAX_TOKENS) {
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <main+0x12a>
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	dbe9      	blt.n	80019c6 <main+0xfe>
		}

		//Excute the command
		UART_Command(tokens);
 80019f2:	463b      	mov	r3, r7
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fe55 	bl	80016a4 <UART_Command>
	if(Exec_command){
 80019fa:	e7d1      	b.n	80019a0 <main+0xd8>
 80019fc:	20000000 	.word	0x20000000
 8001a00:	200002d5 	.word	0x200002d5
 8001a04:	200002d4 	.word	0x200002d4
 8001a08:	20000004 	.word	0x20000004
 8001a0c:	200002d7 	.word	0x200002d7
 8001a10:	200002d6 	.word	0x200002d6
 8001a14:	20000008 	.word	0x20000008
 8001a18:	200002d9 	.word	0x200002d9
 8001a1c:	200002d8 	.word	0x200002d8
 8001a20:	40020000 	.word	0x40020000
 8001a24:	20000484 	.word	0x20000484
 8001a28:	2000040c 	.word	0x2000040c
 8001a2c:	20000334 	.word	0x20000334
 8001a30:	2000037c 	.word	0x2000037c
 8001a34:	200003c4 	.word	0x200003c4
 8001a38:	40020800 	.word	0x40020800
 8001a3c:	20000044 	.word	0x20000044
 8001a40:	47435000 	.word	0x47435000
 8001a44:	2000048c 	.word	0x2000048c
 8001a48:	48f42400 	.word	0x48f42400
 8001a4c:	20000050 	.word	0x20000050
 8001a50:	20000483 	.word	0x20000483
 8001a54:	0800ab90 	.word	0x0800ab90
 8001a58:	20000450 	.word	0x20000450

08001a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b094      	sub	sp, #80	; 0x50
 8001a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	2234      	movs	r2, #52	; 0x34
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f004 fd34 	bl	80064d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a70:	f107 0308 	add.w	r3, r7, #8
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a80:	2300      	movs	r3, #0
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <SystemClock_Config+0xd0>)
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	4a28      	ldr	r2, [pc, #160]	; (8001b2c <SystemClock_Config+0xd0>)
 8001a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a90:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <SystemClock_Config+0xd0>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <SystemClock_Config+0xd4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a22      	ldr	r2, [pc, #136]	; (8001b30 <SystemClock_Config+0xd4>)
 8001aa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <SystemClock_Config+0xd4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ab4:	603b      	str	r3, [r7, #0]
 8001ab6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001abc:	2301      	movs	r3, #1
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ac0:	2310      	movs	r3, #16
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001acc:	2308      	movs	r3, #8
 8001ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001ad0:	23a0      	movs	r3, #160	; 0xa0
 8001ad2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001adc:	2302      	movs	r3, #2
 8001ade:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f002 faab 	bl	8004040 <HAL_RCC_OscConfig>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001af0:	f000 fb84 	bl	80021fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af4:	230f      	movs	r3, #15
 8001af6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001af8:	2302      	movs	r3, #2
 8001afa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001b00:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b0c:	f107 0308 	add.w	r3, r7, #8
 8001b10:	2105      	movs	r1, #5
 8001b12:	4618      	mov	r0, r3
 8001b14:	f001 ff4a 	bl	80039ac <HAL_RCC_ClockConfig>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001b1e:	f000 fb6d 	bl	80021fc <Error_Handler>
  }
}
 8001b22:	bf00      	nop
 8001b24:	3750      	adds	r7, #80	; 0x50
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40007000 	.word	0x40007000

08001b34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b38:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <MX_SPI1_Init+0x64>)
 8001b3a:	4a18      	ldr	r2, [pc, #96]	; (8001b9c <MX_SPI1_Init+0x68>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b3e:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <MX_SPI1_Init+0x64>)
 8001b40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <MX_SPI1_Init+0x64>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <MX_SPI1_Init+0x64>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_SPI1_Init+0x64>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <MX_SPI1_Init+0x64>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MX_SPI1_Init+0x64>)
 8001b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_SPI1_Init+0x64>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <MX_SPI1_Init+0x64>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_SPI1_Init+0x64>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <MX_SPI1_Init+0x64>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_SPI1_Init+0x64>)
 8001b80:	220a      	movs	r2, #10
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b84:	4804      	ldr	r0, [pc, #16]	; (8001b98 <MX_SPI1_Init+0x64>)
 8001b86:	f002 fcf9 	bl	800457c <HAL_SPI_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b90:	f000 fb34 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200002dc 	.word	0x200002dc
 8001b9c:	40013000 	.word	0x40013000

08001ba0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	; 0x30
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	2224      	movs	r2, #36	; 0x24
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f004 fc92 	bl	80064d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bbc:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001bbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bca:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001be4:	2303      	movs	r3, #3
 8001be6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bec:	2301      	movs	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480d      	ldr	r0, [pc, #52]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001c10:	f002 fffc 	bl	8004c0c <HAL_TIM_Encoder_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c1a:	f000 faef 	bl	80021fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4806      	ldr	r0, [pc, #24]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001c2c:	f003 fb22 	bl	8005274 <HAL_TIMEx_MasterConfigSynchronization>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c36:	f000 fae1 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	3730      	adds	r7, #48	; 0x30
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000334 	.word	0x20000334

08001c48 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4e:	463b      	mov	r3, r7
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <MX_TIM6_Init+0x64>)
 8001c58:	4a15      	ldr	r2, [pc, #84]	; (8001cb0 <MX_TIM6_Init+0x68>)
 8001c5a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40-1;
 8001c5c:	4b13      	ldr	r3, [pc, #76]	; (8001cac <MX_TIM6_Init+0x64>)
 8001c5e:	2227      	movs	r2, #39	; 0x27
 8001c60:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <MX_TIM6_Init+0x64>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001c68:	4b10      	ldr	r3, [pc, #64]	; (8001cac <MX_TIM6_Init+0x64>)
 8001c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c6e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MX_TIM6_Init+0x64>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c76:	480d      	ldr	r0, [pc, #52]	; (8001cac <MX_TIM6_Init+0x64>)
 8001c78:	f002 ff10 	bl	8004a9c <HAL_TIM_Base_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001c82:	f000 fabb 	bl	80021fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c8e:	463b      	mov	r3, r7
 8001c90:	4619      	mov	r1, r3
 8001c92:	4806      	ldr	r0, [pc, #24]	; (8001cac <MX_TIM6_Init+0x64>)
 8001c94:	f003 faee 	bl	8005274 <HAL_TIMEx_MasterConfigSynchronization>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001c9e:	f000 faad 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000037c 	.word	0x2000037c
 8001cb0:	40001000 	.word	0x40001000

08001cb4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cba:	463b      	mov	r3, r7
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <MX_TIM7_Init+0x64>)
 8001cc4:	4a15      	ldr	r2, [pc, #84]	; (8001d1c <MX_TIM7_Init+0x68>)
 8001cc6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40-1;
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <MX_TIM7_Init+0x64>)
 8001cca:	2227      	movs	r2, #39	; 0x27
 8001ccc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <MX_TIM7_Init+0x64>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001cd4:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <MX_TIM7_Init+0x64>)
 8001cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cda:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <MX_TIM7_Init+0x64>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ce2:	480d      	ldr	r0, [pc, #52]	; (8001d18 <MX_TIM7_Init+0x64>)
 8001ce4:	f002 feda 	bl	8004a9c <HAL_TIM_Base_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001cee:	f000 fa85 	bl	80021fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <MX_TIM7_Init+0x64>)
 8001d00:	f003 fab8 	bl	8005274 <HAL_TIMEx_MasterConfigSynchronization>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001d0a:	f000 fa77 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200003c4 	.word	0x200003c4
 8001d1c:	40001400 	.word	0x40001400

08001d20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_USART2_UART_Init+0x4c>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <MX_USART2_UART_Init+0x50>)
 8001d28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <MX_USART2_UART_Init+0x4c>)
 8001d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_USART2_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_USART2_UART_Init+0x4c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <MX_USART2_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <MX_USART2_UART_Init+0x4c>)
 8001d46:	220c      	movs	r2, #12
 8001d48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <MX_USART2_UART_Init+0x4c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MX_USART2_UART_Init+0x4c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_USART2_UART_Init+0x4c>)
 8001d58:	f003 fb1c 	bl	8005394 <HAL_UART_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d62:	f000 fa4b 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2000040c 	.word	0x2000040c
 8001d70:	40004400 	.word	0x40004400

08001d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4b66      	ldr	r3, [pc, #408]	; (8001f28 <MX_GPIO_Init+0x1b4>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a65      	ldr	r2, [pc, #404]	; (8001f28 <MX_GPIO_Init+0x1b4>)
 8001d94:	f043 0304 	orr.w	r3, r3, #4
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <MX_GPIO_Init+0x1b4>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b5f      	ldr	r3, [pc, #380]	; (8001f28 <MX_GPIO_Init+0x1b4>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a5e      	ldr	r2, [pc, #376]	; (8001f28 <MX_GPIO_Init+0x1b4>)
 8001db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b5c      	ldr	r3, [pc, #368]	; (8001f28 <MX_GPIO_Init+0x1b4>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	4b58      	ldr	r3, [pc, #352]	; (8001f28 <MX_GPIO_Init+0x1b4>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a57      	ldr	r2, [pc, #348]	; (8001f28 <MX_GPIO_Init+0x1b4>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b55      	ldr	r3, [pc, #340]	; (8001f28 <MX_GPIO_Init+0x1b4>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	4b51      	ldr	r3, [pc, #324]	; (8001f28 <MX_GPIO_Init+0x1b4>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a50      	ldr	r2, [pc, #320]	; (8001f28 <MX_GPIO_Init+0x1b4>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b4e      	ldr	r3, [pc, #312]	; (8001f28 <MX_GPIO_Init+0x1b4>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_Pin|STEP_Pin, GPIO_PIN_RESET);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2103      	movs	r1, #3
 8001dfe:	484b      	ldr	r0, [pc, #300]	; (8001f2c <MX_GPIO_Init+0x1b8>)
 8001e00:	f001 fda2 	bl	8003948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(End_stop_GPIO_Port, End_stop_Pin, GPIO_PIN_SET);
 8001e04:	2201      	movs	r2, #1
 8001e06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e0a:	4849      	ldr	r0, [pc, #292]	; (8001f30 <MX_GPIO_Init+0x1bc>)
 8001e0c:	f001 fd9c 	bl	8003948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_Selection_GPIO_Port, SPI_Selection_Pin, GPIO_PIN_SET);
 8001e10:	2201      	movs	r2, #1
 8001e12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e16:	4847      	ldr	r0, [pc, #284]	; (8001f34 <MX_GPIO_Init+0x1c0>)
 8001e18:	f001 fd96 	bl	8003948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e22:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	483e      	ldr	r0, [pc, #248]	; (8001f2c <MX_GPIO_Init+0x1b8>)
 8001e34:	f001 fbf4 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Pin STEP_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|STEP_Pin;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4837      	ldr	r0, [pc, #220]	; (8001f2c <MX_GPIO_Init+0x1b8>)
 8001e50:	f001 fbe6 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z_reference_Pin P_limit_Pin Q_limit_Pin */
  GPIO_InitStruct.Pin = Z_reference_Pin|P_limit_Pin|Q_limit_Pin;
 8001e54:	2331      	movs	r3, #49	; 0x31
 8001e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e58:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4619      	mov	r1, r3
 8001e68:	4831      	ldr	r0, [pc, #196]	; (8001f30 <MX_GPIO_Init+0x1bc>)
 8001e6a:	f001 fbd9 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : End_stop_Pin */
  GPIO_InitStruct.Pin = End_stop_Pin;
 8001e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e74:	2301      	movs	r3, #1
 8001e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(End_stop_GPIO_Port, &GPIO_InitStruct);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4619      	mov	r1, r3
 8001e86:	482a      	ldr	r0, [pc, #168]	; (8001f30 <MX_GPIO_Init+0x1bc>)
 8001e88:	f001 fbca 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : Z_END_STOP_Pin */
  GPIO_InitStruct.Pin = Z_END_STOP_Pin;
 8001e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e92:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Z_END_STOP_GPIO_Port, &GPIO_InitStruct);
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4824      	ldr	r0, [pc, #144]	; (8001f34 <MX_GPIO_Init+0x1c0>)
 8001ea4:	f001 fbbc 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_Selection_Pin */
  GPIO_InitStruct.Pin = SPI_Selection_Pin;
 8001ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_Selection_GPIO_Port, &GPIO_InitStruct);
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	481c      	ldr	r0, [pc, #112]	; (8001f34 <MX_GPIO_Init+0x1c0>)
 8001ec2:	f001 fbad 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : Camera_input_Pin */
  GPIO_InitStruct.Pin = Camera_input_Pin;
 8001ec6:	2308      	movs	r3, #8
 8001ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Camera_input_GPIO_Port, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4815      	ldr	r0, [pc, #84]	; (8001f30 <MX_GPIO_Init+0x1bc>)
 8001edc:	f001 fba0 	bl	8003620 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2006      	movs	r0, #6
 8001ee6:	f001 fac4 	bl	8003472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001eea:	2006      	movs	r0, #6
 8001eec:	f001 fadd 	bl	80034aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	2009      	movs	r0, #9
 8001ef6:	f001 fabc 	bl	8003472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001efa:	2009      	movs	r0, #9
 8001efc:	f001 fad5 	bl	80034aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2100      	movs	r1, #0
 8001f04:	200a      	movs	r0, #10
 8001f06:	f001 fab4 	bl	8003472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001f0a:	200a      	movs	r0, #10
 8001f0c:	f001 facd 	bl	80034aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2100      	movs	r1, #0
 8001f14:	2017      	movs	r0, #23
 8001f16:	f001 faac 	bl	8003472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f1a:	2017      	movs	r0, #23
 8001f1c:	f001 fac5 	bl	80034aa <HAL_NVIC_EnableIRQ>

}
 8001f20:	bf00      	nop
 8001f22:	3728      	adds	r7, #40	; 0x28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020400 	.word	0x40020400
 8001f34:	40020000 	.word	0x40020000

08001f38 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == Z_END_STOP_Pin ){
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f48:	d152      	bne.n	8001ff0 <HAL_GPIO_EXTI_Callback+0xb8>
		 * Disable the interrupt for Z_END_STOP
		 *
		 */


		if(Home_Pass == 0){
 8001f4a:	4b6a      	ldr	r3, [pc, #424]	; (80020f4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d116      	bne.n	8001f80 <HAL_GPIO_EXTI_Callback+0x48>
			// first pass
			Home_Pass = 1;
 8001f52:	4b68      	ldr	r3, [pc, #416]	; (80020f4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]

			Homing_completion();
 8001f58:	f7ff f94c 	bl	80011f4 <Homing_completion>

			move((int32_t ) (steps_per_millimeters * 0.25));
 8001f5c:	f243 00d4 	movw	r0, #12500	; 0x30d4
 8001f60:	f000 f994 	bl	800228c <move>
			runToPosition();
 8001f64:	f000 fdfe 	bl	8002b64 <runToPosition>
			//setting speed again to intiate the HOMING
			//otherwise _stepintervel became zero
			setSpeed(-1*home_speed); //MOVING IN ccw
 8001f68:	4b63      	ldr	r3, [pc, #396]	; (80020f8 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	425b      	negs	r3, r3
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f76:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7a:	f000 fced 	bl	8002958 <setSpeed>
			return;
 8001f7e:	e0b6      	b.n	80020ee <HAL_GPIO_EXTI_Callback+0x1b6>
		}
		else if(Home_Pass == 1){
 8001f80:	4b5c      	ldr	r3, [pc, #368]	; (80020f4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d10d      	bne.n	8001fa4 <HAL_GPIO_EXTI_Callback+0x6c>

			HOMED = true;
 8001f88:	4b5c      	ldr	r3, [pc, #368]	; (80020fc <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
			Home_Pass = 0;
 8001f8e:	4b59      	ldr	r3, [pc, #356]	; (80020f4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]

			move((int32_t ) (steps_per_millimeters * 0.25));
 8001f94:	f243 00d4 	movw	r0, #12500	; 0x30d4
 8001f98:	f000 f978 	bl	800228c <move>
			runToPosition();
 8001f9c:	f000 fde2 	bl	8002b64 <runToPosition>
			Homing_completion();
 8001fa0:	f7ff f928 	bl	80011f4 <Homing_completion>

		}


		Exec_command = 0; //stop the motor
 8001fa4:	4b56      	ldr	r3, [pc, #344]	; (8002100 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
		memset(RxBuffer,0,sizeof(RxBuffer));
 8001faa:	2232      	movs	r2, #50	; 0x32
 8001fac:	2100      	movs	r1, #0
 8001fae:	4855      	ldr	r0, [pc, #340]	; (8002104 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8001fb0:	f004 fa92 	bl	80064d8 <memset>

		//homing configuration
		Homing_completion();
 8001fb4:	f7ff f91e 	bl	80011f4 <Homing_completion>
		//disabling the Interrupt for End stop

		//Set encoder counting to zero
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8001fb8:	4b53      	ldr	r3, [pc, #332]	; (8002108 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_NVIC_DisableIRQ(Z_END_STOP_EXTI_IRQn);
 8001fc0:	2017      	movs	r0, #23
 8001fc2:	f001 fa80 	bl	80034c6 <HAL_NVIC_DisableIRQ>

		//Sending completion
		memset(sending_data,0,sizeof(sending_data));
 8001fc6:	2232      	movs	r2, #50	; 0x32
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4850      	ldr	r0, [pc, #320]	; (800210c <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001fcc:	f004 fa84 	bl	80064d8 <memset>
		sprintf(sending_data,"Homed \n");
 8001fd0:	494f      	ldr	r1, [pc, #316]	; (8002110 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8001fd2:	484e      	ldr	r0, [pc, #312]	; (800210c <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001fd4:	f004 fef2 	bl	8006dbc <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 8001fd8:	484c      	ldr	r0, [pc, #304]	; (800210c <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001fda:	f7fe f923 	bl	8000224 <strlen>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	4949      	ldr	r1, [pc, #292]	; (800210c <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001fe8:	484a      	ldr	r0, [pc, #296]	; (8002114 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8001fea:	f003 fa20 	bl	800542e <HAL_UART_Transmit>

		return;
 8001fee:	e07e      	b.n	80020ee <HAL_GPIO_EXTI_Callback+0x1b6>

		}
	else if(GPIO_Pin == Camera_input_Pin){
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d150      	bne.n	8002098 <HAL_GPIO_EXTI_Callback+0x160>
		//Camera pulse detected

		//checking which operation have to do

		if(flag == 0){
 8001ff6:	4b48      	ldr	r3, [pc, #288]	; (8002118 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d118      	bne.n	8002030 <HAL_GPIO_EXTI_Callback+0xf8>
		// PC in homing mode so sending encoder data to PC
		// for every one camera click encoder will be send to PC through UART
		memset(sending_data,0,sizeof(sending_data));
 8001ffe:	2232      	movs	r2, #50	; 0x32
 8002000:	2100      	movs	r1, #0
 8002002:	4842      	ldr	r0, [pc, #264]	; (800210c <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002004:	f004 fa68 	bl	80064d8 <memset>
		sprintf(sending_data,"%ld\n",(int32_t)__HAL_TIM_GET_COUNTER(&htim2) );
 8002008:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <HAL_GPIO_EXTI_Callback+0x1d0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	461a      	mov	r2, r3
 8002010:	4942      	ldr	r1, [pc, #264]	; (800211c <HAL_GPIO_EXTI_Callback+0x1e4>)
 8002012:	483e      	ldr	r0, [pc, #248]	; (800210c <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002014:	f004 fed2 	bl	8006dbc <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 8002018:	483c      	ldr	r0, [pc, #240]	; (800210c <HAL_GPIO_EXTI_Callback+0x1d4>)
 800201a:	f7fe f903 	bl	8000224 <strlen>
 800201e:	4603      	mov	r3, r0
 8002020:	b29a      	uxth	r2, r3
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
 8002026:	4939      	ldr	r1, [pc, #228]	; (800210c <HAL_GPIO_EXTI_Callback+0x1d4>)
 8002028:	483a      	ldr	r0, [pc, #232]	; (8002114 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800202a:	f003 fa00 	bl	800542e <HAL_UART_Transmit>
 800202e:	e05e      	b.n	80020ee <HAL_GPIO_EXTI_Callback+0x1b6>
		}

		else if(flag == 1){
 8002030:	4b39      	ldr	r3, [pc, #228]	; (8002118 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d159      	bne.n	80020ec <HAL_GPIO_EXTI_Callback+0x1b4>
			//PC in data capturing mode so toggle the led
			 switch(count){
 8002038:	4b39      	ldr	r3, [pc, #228]	; (8002120 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d01f      	beq.n	8002080 <HAL_GPIO_EXTI_Callback+0x148>
 8002040:	2b02      	cmp	r3, #2
 8002042:	dc54      	bgt.n	80020ee <HAL_GPIO_EXTI_Callback+0x1b6>
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <HAL_GPIO_EXTI_Callback+0x116>
 8002048:	2b01      	cmp	r3, #1
 800204a:	d00a      	beq.n	8002062 <HAL_GPIO_EXTI_Callback+0x12a>
 800204c:	e04f      	b.n	80020ee <HAL_GPIO_EXTI_Callback+0x1b6>

			 case 0 :
				 // turning off all LEDs
				 stop_function(LED3);
 800204e:	2034      	movs	r0, #52	; 0x34
 8002050:	f7ff faf6 	bl	8001640 <stop_function>
				 // incrementing count to change the LED color in next time
				 count++;
 8002054:	4b32      	ldr	r3, [pc, #200]	; (8002120 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	3301      	adds	r3, #1
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b30      	ldr	r3, [pc, #192]	; (8002120 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800205e:	701a      	strb	r2, [r3, #0]
				 break;
 8002060:	e045      	b.n	80020ee <HAL_GPIO_EXTI_Callback+0x1b6>
			 case 1:
				 //turning on 2nd LED only
				 stop_function(LED1);
 8002062:	2031      	movs	r0, #49	; 0x31
 8002064:	f7ff faec 	bl	8001640 <stop_function>
				 send_function(LED2,&ch2_buff1,&ch2_buff2);
 8002068:	4a2e      	ldr	r2, [pc, #184]	; (8002124 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800206a:	492f      	ldr	r1, [pc, #188]	; (8002128 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800206c:	2032      	movs	r0, #50	; 0x32
 800206e:	f7ff fab5 	bl	80015dc <send_function>
				 count++;// incrementing count to change the LED color in next time
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4b29      	ldr	r3, [pc, #164]	; (8002120 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800207c:	701a      	strb	r2, [r3, #0]
				 break;
 800207e:	e036      	b.n	80020ee <HAL_GPIO_EXTI_Callback+0x1b6>
			 case 2:
				 //turning on 3rd LED only
				 stop_function(LED2); // turn off LED 2
 8002080:	2032      	movs	r0, #50	; 0x32
 8002082:	f7ff fadd 	bl	8001640 <stop_function>
				 send_function(LED3,&ch3_buff1,&ch3_buff2);// turn on LED 3
 8002086:	4a29      	ldr	r2, [pc, #164]	; (800212c <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002088:	4929      	ldr	r1, [pc, #164]	; (8002130 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800208a:	2034      	movs	r0, #52	; 0x34
 800208c:	f7ff faa6 	bl	80015dc <send_function>
				 count = 0;// set count to zero to Off the LED in next time
 8002090:	4b23      	ldr	r3, [pc, #140]	; (8002120 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
				 break;
 8002096:	e02a      	b.n	80020ee <HAL_GPIO_EXTI_Callback+0x1b6>

		}
	}


	else if( GPIO_Pin == Z_reference_Pin ){
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d113      	bne.n	80020c6 <HAL_GPIO_EXTI_Callback+0x18e>
	// Z_reference_detected.

		// pulse for end stop
		HAL_GPIO_WritePin(End_stop_GPIO_Port, End_stop_Pin, GPIO_PIN_RESET);
 800209e:	2200      	movs	r2, #0
 80020a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020a4:	4823      	ldr	r0, [pc, #140]	; (8002134 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80020a6:	f001 fc4f 	bl	8003948 <HAL_GPIO_WritePin>
		__delay_ms(100); // custom delay function
 80020aa:	2064      	movs	r0, #100	; 0x64
 80020ac:	f000 f886 	bl	80021bc <__delay_ms>
		HAL_GPIO_WritePin(End_stop_GPIO_Port, End_stop_Pin, GPIO_PIN_SET);
 80020b0:	2201      	movs	r2, #1
 80020b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020b6:	481f      	ldr	r0, [pc, #124]	; (8002134 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80020b8:	f001 fc46 	bl	8003948 <HAL_GPIO_WritePin>
		//homing completed

		//Set encoder counting to zero
		__HAL_TIM_SET_COUNTER(&htim2,0);
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2200      	movs	r2, #0
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24
 80020c4:	e013      	b.n	80020ee <HAL_GPIO_EXTI_Callback+0x1b6>
	}

	else if(GPIO_Pin == Q_limit_Pin){
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d110      	bne.n	80020ee <HAL_GPIO_EXTI_Callback+0x1b6>
	// Q_limit detected ( Lower Limit)
		//pulse for end stop
		HAL_GPIO_WritePin(End_stop_GPIO_Port, End_stop_Pin, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020d2:	4818      	ldr	r0, [pc, #96]	; (8002134 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80020d4:	f001 fc38 	bl	8003948 <HAL_GPIO_WritePin>
		__delay_ms(100);
 80020d8:	2064      	movs	r0, #100	; 0x64
 80020da:	f000 f86f 	bl	80021bc <__delay_ms>
		HAL_GPIO_WritePin(End_stop_GPIO_Port, End_stop_Pin, GPIO_PIN_SET);
 80020de:	2201      	movs	r2, #1
 80020e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020e4:	4813      	ldr	r0, [pc, #76]	; (8002134 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80020e6:	f001 fc2f 	bl	8003948 <HAL_GPIO_WritePin>
 80020ea:	e000      	b.n	80020ee <HAL_GPIO_EXTI_Callback+0x1b6>
		}
 80020ec:	bf00      	nop

	else if(GPIO_Pin == P_limit_Pin){
	// P_limit detected(Upper Limit)
	}

}
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000490 	.word	0x20000490
 80020f8:	2000004c 	.word	0x2000004c
 80020fc:	20000491 	.word	0x20000491
 8002100:	20000483 	.word	0x20000483
 8002104:	20000450 	.word	0x20000450
 8002108:	20000334 	.word	0x20000334
 800210c:	20000010 	.word	0x20000010
 8002110:	0800ab94 	.word	0x0800ab94
 8002114:	2000040c 	.word	0x2000040c
 8002118:	20000492 	.word	0x20000492
 800211c:	0800ab9c 	.word	0x0800ab9c
 8002120:	20000250 	.word	0x20000250
 8002124:	200002d7 	.word	0x200002d7
 8002128:	200002d6 	.word	0x200002d6
 800212c:	200002d9 	.word	0x200002d9
 8002130:	200002d8 	.word	0x200002d8
 8002134:	40020400 	.word	0x40020400

08002138 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

	if(huart == &huart2){
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a19      	ldr	r2, [pc, #100]	; (80021a8 <HAL_UART_RxCpltCallback+0x70>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d12b      	bne.n	80021a0 <HAL_UART_RxCpltCallback+0x68>
    /* Receive one byte in the receive data register */
//    uint8_t rxByte = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);

    /* Check if the received character is a /r or buffer is full */
    if (rxByte == '\r' || RxIndex == 50 - 1) // 50 is buffer length
 8002148:	4b18      	ldr	r3, [pc, #96]	; (80021ac <HAL_UART_RxCpltCallback+0x74>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b0d      	cmp	r3, #13
 800214e:	d003      	beq.n	8002158 <HAL_UART_RxCpltCallback+0x20>
 8002150:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <HAL_UART_RxCpltCallback+0x78>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b31      	cmp	r3, #49	; 0x31
 8002156:	d111      	bne.n	800217c <HAL_UART_RxCpltCallback+0x44>
    {
        /* Set flag to indicate command is complete */
        Exec_command = 1;
 8002158:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <HAL_UART_RxCpltCallback+0x7c>)
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]

        /* Add null character to terminate string */
        RxBuffer[RxIndex] = 0;
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <HAL_UART_RxCpltCallback+0x78>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <HAL_UART_RxCpltCallback+0x80>)
 8002166:	2100      	movs	r1, #0
 8002168:	5499      	strb	r1, [r3, r2]

        /* Resetting RxIndex to zero */
        RxIndex = 0;
 800216a:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <HAL_UART_RxCpltCallback+0x78>)
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]

        /* Restart the UART Interrupt */
		HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8002170:	2201      	movs	r2, #1
 8002172:	490e      	ldr	r1, [pc, #56]	; (80021ac <HAL_UART_RxCpltCallback+0x74>)
 8002174:	480c      	ldr	r0, [pc, #48]	; (80021a8 <HAL_UART_RxCpltCallback+0x70>)
 8002176:	f003 f9ec 	bl	8005552 <HAL_UART_Receive_IT>
        HAL_UART_Receive_IT(&huart2, &rxByte, 1);

    }

	}
}
 800217a:	e011      	b.n	80021a0 <HAL_UART_RxCpltCallback+0x68>
        RxBuffer[RxIndex] = rxByte;
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <HAL_UART_RxCpltCallback+0x78>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_UART_RxCpltCallback+0x74>)
 8002184:	7819      	ldrb	r1, [r3, #0]
 8002186:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <HAL_UART_RxCpltCallback+0x80>)
 8002188:	5499      	strb	r1, [r3, r2]
        RxIndex++;
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <HAL_UART_RxCpltCallback+0x78>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_UART_RxCpltCallback+0x78>)
 8002194:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8002196:	2201      	movs	r2, #1
 8002198:	4904      	ldr	r1, [pc, #16]	; (80021ac <HAL_UART_RxCpltCallback+0x74>)
 800219a:	4803      	ldr	r0, [pc, #12]	; (80021a8 <HAL_UART_RxCpltCallback+0x70>)
 800219c:	f003 f9d9 	bl	8005552 <HAL_UART_Receive_IT>
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	2000040c 	.word	0x2000040c
 80021ac:	20000484 	.word	0x20000484
 80021b0:	20000482 	.word	0x20000482
 80021b4:	20000483 	.word	0x20000483
 80021b8:	20000450 	.word	0x20000450

080021bc <__delay_ms>:


void __delay_ms(int32_t k){
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	int32_t i,j;
	for(i=0;i<k;i++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	e00d      	b.n	80021e6 <__delay_ms+0x2a>
		for(j=0;j<3000;j++){}
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	e002      	b.n	80021d6 <__delay_ms+0x1a>
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	3301      	adds	r3, #1
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80021dc:	4293      	cmp	r3, r2
 80021de:	ddf7      	ble.n	80021d0 <__delay_ms+0x14>
	for(i=0;i<k;i++)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3301      	adds	r3, #1
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	dbed      	blt.n	80021ca <__delay_ms+0xe>
}
 80021ee:	bf00      	nop
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002200:	b672      	cpsid	i
}
 8002202:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  //sending the ready status
	memset(sending_data,0,sizeof(sending_data));
 8002204:	2232      	movs	r2, #50	; 0x32
 8002206:	2100      	movs	r1, #0
 8002208:	4809      	ldr	r0, [pc, #36]	; (8002230 <Error_Handler+0x34>)
 800220a:	f004 f965 	bl	80064d8 <memset>
	sprintf(sending_data,"ERROR");
 800220e:	4909      	ldr	r1, [pc, #36]	; (8002234 <Error_Handler+0x38>)
 8002210:	4807      	ldr	r0, [pc, #28]	; (8002230 <Error_Handler+0x34>)
 8002212:	f004 fdd3 	bl	8006dbc <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 8002216:	4806      	ldr	r0, [pc, #24]	; (8002230 <Error_Handler+0x34>)
 8002218:	f7fe f804 	bl	8000224 <strlen>
 800221c:	4603      	mov	r3, r0
 800221e:	b29a      	uxth	r2, r3
 8002220:	f04f 33ff 	mov.w	r3, #4294967295
 8002224:	4902      	ldr	r1, [pc, #8]	; (8002230 <Error_Handler+0x34>)
 8002226:	4804      	ldr	r0, [pc, #16]	; (8002238 <Error_Handler+0x3c>)
 8002228:	f003 f901 	bl	800542e <HAL_UART_Transmit>
	memset(sending_data,0,sizeof(sending_data));
 800222c:	e7ea      	b.n	8002204 <Error_Handler+0x8>
 800222e:	bf00      	nop
 8002230:	20000010 	.word	0x20000010
 8002234:	0800aba4 	.word	0x0800aba4
 8002238:	2000040c 	.word	0x2000040c

0800223c <moveTo>:




void moveTo(int32_t absolute)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	absolute  = (absolute<min_pos) ? min_pos :( (absolute<max_pos) ? absolute : max_pos );
 8002244:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <moveTo+0x44>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	429a      	cmp	r2, r3
 800224c:	db06      	blt.n	800225c <moveTo+0x20>
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <moveTo+0x48>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4293      	cmp	r3, r2
 8002256:	bfa8      	it	ge
 8002258:	4613      	movge	r3, r2
 800225a:	e001      	b.n	8002260 <moveTo+0x24>
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <moveTo+0x44>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	607b      	str	r3, [r7, #4]
    if (_targetPos != absolute)
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <moveTo+0x4c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	d004      	beq.n	8002276 <moveTo+0x3a>
    {
	_targetPos = absolute;
 800226c:	4a06      	ldr	r2, [pc, #24]	; (8002288 <moveTo+0x4c>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6013      	str	r3, [r2, #0]
	computeNewSpeed();
 8002272:	f000 f935 	bl	80024e0 <computeNewSpeed>
	// compute new n?
    }
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000488 	.word	0x20000488
 8002284:	20000048 	.word	0x20000048
 8002288:	200004b0 	.word	0x200004b0

0800228c <move>:

void move(int32_t relative)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
    moveTo(_currentPos + relative);
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <move+0x20>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ffcd 	bl	800223c <moveTo>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200004ac 	.word	0x200004ac

080022b0 <stepper_setup>:

void stepper_setup(GPIO_TypeDef*_step_port,uint16_t _step_pin, GPIO_TypeDef*  _dir_port,uint16_t _dir_pin ){
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	461a      	mov	r2, r3
 80022bc:	460b      	mov	r3, r1
 80022be:	817b      	strh	r3, [r7, #10]
 80022c0:	4613      	mov	r3, r2
 80022c2:	813b      	strh	r3, [r7, #8]


	step_port = _step_port;
 80022c4:	4a33      	ldr	r2, [pc, #204]	; (8002394 <stepper_setup+0xe4>)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6013      	str	r3, [r2, #0]
	step_pin = _step_pin;
 80022ca:	4a33      	ldr	r2, [pc, #204]	; (8002398 <stepper_setup+0xe8>)
 80022cc:	897b      	ldrh	r3, [r7, #10]
 80022ce:	8013      	strh	r3, [r2, #0]
	dir_port = _dir_port;
 80022d0:	4a32      	ldr	r2, [pc, #200]	; (800239c <stepper_setup+0xec>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6013      	str	r3, [r2, #0]
	dir_pin = _dir_pin;
 80022d6:	4a32      	ldr	r2, [pc, #200]	; (80023a0 <stepper_setup+0xf0>)
 80022d8:	893b      	ldrh	r3, [r7, #8]
 80022da:	8013      	strh	r3, [r2, #0]


	_stepInterval = 0;
 80022dc:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <stepper_setup+0xf4>)
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
	_minPulseWidth = 1;
 80022e2:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <stepper_setup+0xf8>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
	_currentPos = 0;
 80022e8:	4b30      	ldr	r3, [pc, #192]	; (80023ac <stepper_setup+0xfc>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
	_targetPos = 0;
 80022ee:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <stepper_setup+0x100>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
	_speed = 0.0;
 80022f4:	4b2f      	ldr	r3, [pc, #188]	; (80023b4 <stepper_setup+0x104>)
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
	_maxSpeed = 30.0;
 80022fc:	4b2e      	ldr	r3, [pc, #184]	; (80023b8 <stepper_setup+0x108>)
 80022fe:	4a2f      	ldr	r2, [pc, #188]	; (80023bc <stepper_setup+0x10c>)
 8002300:	601a      	str	r2, [r3, #0]
	_acceleration = 0.0;
 8002302:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <stepper_setup+0x110>)
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
	_sqrt_twoa = 1.0;
 800230a:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <stepper_setup+0x114>)
 800230c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002310:	601a      	str	r2, [r3, #0]
	_stepInterval = 0;
 8002312:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <stepper_setup+0xf4>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
	_minPulseWidth = 1;
 8002318:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <stepper_setup+0xf8>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]
	_enablePin = 0xff;
 800231e:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <stepper_setup+0x118>)
 8002320:	22ff      	movs	r2, #255	; 0xff
 8002322:	701a      	strb	r2, [r3, #0]
	_lastStepTime = 0;
 8002324:	4b29      	ldr	r3, [pc, #164]	; (80023cc <stepper_setup+0x11c>)
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]




	// NEW
	_n = 0;
 800232a:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <stepper_setup+0x120>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
	_c0 = 0.0;
 8002330:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <stepper_setup+0x124>)
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
	_cn = 0.0;
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <stepper_setup+0x128>)
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
	_cmin = 1.0;
 8002340:	4b26      	ldr	r3, [pc, #152]	; (80023dc <stepper_setup+0x12c>)
 8002342:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002346:	601a      	str	r2, [r3, #0]
	_direction = DIRECTION_CCW;
 8002348:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <stepper_setup+0x130>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]

	int i;
	for (i = 0; i < 4; i++)
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	e007      	b.n	8002364 <stepper_setup+0xb4>
	_pinInverted[i] = 0;
 8002354:	4a23      	ldr	r2, [pc, #140]	; (80023e4 <stepper_setup+0x134>)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	4413      	add	r3, r2
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 4; i++)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3301      	adds	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b03      	cmp	r3, #3
 8002368:	ddf4      	ble.n	8002354 <stepper_setup+0xa4>


	for (i = 0; i < 4; i++)
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e007      	b.n	8002380 <stepper_setup+0xd0>
	_pinInverted[i] = 0;
 8002370:	4a1c      	ldr	r2, [pc, #112]	; (80023e4 <stepper_setup+0x134>)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	4413      	add	r3, r2
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 4; i++)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	3301      	adds	r3, #1
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2b03      	cmp	r3, #3
 8002384:	ddf4      	ble.n	8002370 <stepper_setup+0xc0>

}
 8002386:	bf00      	nop
 8002388:	bf00      	nop
 800238a:	371c      	adds	r7, #28
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	20000494 	.word	0x20000494
 8002398:	20000498 	.word	0x20000498
 800239c:	2000049c 	.word	0x2000049c
 80023a0:	200004a0 	.word	0x200004a0
 80023a4:	200004a4 	.word	0x200004a4
 80023a8:	200004c8 	.word	0x200004c8
 80023ac:	200004ac 	.word	0x200004ac
 80023b0:	200004b0 	.word	0x200004b0
 80023b4:	200004b4 	.word	0x200004b4
 80023b8:	200004b8 	.word	0x200004b8
 80023bc:	41f00000 	.word	0x41f00000
 80023c0:	200004bc 	.word	0x200004bc
 80023c4:	200004c0 	.word	0x200004c0
 80023c8:	200004cc 	.word	0x200004cc
 80023cc:	200004c4 	.word	0x200004c4
 80023d0:	200004d0 	.word	0x200004d0
 80023d4:	200004d4 	.word	0x200004d4
 80023d8:	200004d8 	.word	0x200004d8
 80023dc:	200004dc 	.word	0x200004dc
 80023e0:	200004a2 	.word	0x200004a2
 80023e4:	200004a8 	.word	0x200004a8

080023e8 <runSpeed>:


_Bool runSpeed()
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
    // Dont do anything unless we actually have a step interval
    if (!_stepInterval)
 80023ee:	4b17      	ldr	r3, [pc, #92]	; (800244c <runSpeed+0x64>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <runSpeed+0x12>
	return false;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e023      	b.n	8002442 <runSpeed+0x5a>

    uint32_t time =  __HAL_TIM_GET_COUNTER(&htim6);
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <runSpeed+0x68>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	607b      	str	r3, [r7, #4]
    if (time  >= _stepInterval)
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <runSpeed+0x64>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	429a      	cmp	r2, r3
 800240a:	d319      	bcc.n	8002440 <runSpeed+0x58>
    {
	if (_direction == DIRECTION_CW)
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <runSpeed+0x6c>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <runSpeed+0x38>
	{
	    // Clockwise
	    _currentPos += 1;
 8002414:	4b10      	ldr	r3, [pc, #64]	; (8002458 <runSpeed+0x70>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	3301      	adds	r3, #1
 800241a:	4a0f      	ldr	r2, [pc, #60]	; (8002458 <runSpeed+0x70>)
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	e004      	b.n	800242a <runSpeed+0x42>
	}
	else
	{
	    // Anticlockwise
	    _currentPos -= 1;
 8002420:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <runSpeed+0x70>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	3b01      	subs	r3, #1
 8002426:	4a0c      	ldr	r2, [pc, #48]	; (8002458 <runSpeed+0x70>)
 8002428:	6013      	str	r3, [r2, #0]
	}

	step(_currentPos);
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <runSpeed+0x70>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fb5c 	bl	8002aec <step>

	__HAL_TIM_SET_COUNTER(&htim6,0); //resetting the timer
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <runSpeed+0x68>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2200      	movs	r2, #0
 800243a:	625a      	str	r2, [r3, #36]	; 0x24
	//_lastStepTime = time; // Caution: does not account for costs in step()

	return true;
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <runSpeed+0x5a>
    }
    else
    {
	return false;
 8002440:	2300      	movs	r3, #0
    }
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200004a4 	.word	0x200004a4
 8002450:	2000037c 	.word	0x2000037c
 8002454:	200004a2 	.word	0x200004a2
 8002458:	200004ac 	.word	0x200004ac

0800245c <distanceToGo>:

int32_t distanceToGo()
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
    return _targetPos - _currentPos;
 8002460:	4b04      	ldr	r3, [pc, #16]	; (8002474 <distanceToGo+0x18>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <distanceToGo+0x1c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	1ad3      	subs	r3, r2, r3
}
 800246a:	4618      	mov	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	200004b0 	.word	0x200004b0
 8002478:	200004ac 	.word	0x200004ac

0800247c <currentPosition>:
{
    return _targetPos;
}

int32_t currentPosition()
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
    return _currentPos;
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <currentPosition+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	200004ac 	.word	0x200004ac

08002494 <setCurrentPosition>:

void setCurrentPosition(int32_t position)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
    _targetPos = _currentPos = position;
 800249c:	4a0b      	ldr	r2, [pc, #44]	; (80024cc <setCurrentPosition+0x38>)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <setCurrentPosition+0x38>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <setCurrentPosition+0x3c>)
 80024a8:	6013      	str	r3, [r2, #0]
    _n = 0;
 80024aa:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <setCurrentPosition+0x40>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
    _stepInterval = 0;
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <setCurrentPosition+0x44>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
    _speed = 0.0;
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <setCurrentPosition+0x48>)
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	200004ac 	.word	0x200004ac
 80024d0:	200004b0 	.word	0x200004b0
 80024d4:	200004d0 	.word	0x200004d0
 80024d8:	200004a4 	.word	0x200004a4
 80024dc:	200004b4 	.word	0x200004b4

080024e0 <computeNewSpeed>:

uint32_t computeNewSpeed()
{
 80024e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
    int32_t distanceTo = distanceToGo(); // +ve is clockwise from curent location
 80024e8:	f7ff ffb8 	bl	800245c <distanceToGo>
 80024ec:	6078      	str	r0, [r7, #4]

    int32_t stepsToStop = (int32_t)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
 80024ee:	4b8c      	ldr	r3, [pc, #560]	; (8002720 <computeNewSpeed+0x240>)
 80024f0:	ed93 7a00 	vldr	s14, [r3]
 80024f4:	4b8a      	ldr	r3, [pc, #552]	; (8002720 <computeNewSpeed+0x240>)
 80024f6:	edd3 7a00 	vldr	s15, [r3]
 80024fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fe:	ee17 0a90 	vmov	r0, s15
 8002502:	f7fe f851 	bl	80005a8 <__aeabi_f2d>
 8002506:	4604      	mov	r4, r0
 8002508:	460d      	mov	r5, r1
 800250a:	4b86      	ldr	r3, [pc, #536]	; (8002724 <computeNewSpeed+0x244>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f84a 	bl	80005a8 <__aeabi_f2d>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	f7fd fee8 	bl	80002ec <__adddf3>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4620      	mov	r0, r4
 8002522:	4629      	mov	r1, r5
 8002524:	f7fe f9c2 	bl	80008ac <__aeabi_ddiv>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	f7fe fb42 	bl	8000bb8 <__aeabi_d2iz>
 8002534:	4603      	mov	r3, r0
 8002536:	603b      	str	r3, [r7, #0]

    if (distanceTo == 0 && stepsToStop <= 1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10f      	bne.n	800255e <computeNewSpeed+0x7e>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b01      	cmp	r3, #1
 8002542:	dc0c      	bgt.n	800255e <computeNewSpeed+0x7e>
    {
	// We are at the target and its time to stop
	_stepInterval = 0;
 8002544:	4b78      	ldr	r3, [pc, #480]	; (8002728 <computeNewSpeed+0x248>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
	_speed = 0.0;
 800254a:	4b75      	ldr	r3, [pc, #468]	; (8002720 <computeNewSpeed+0x240>)
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
	_n = 0;
 8002552:	4b76      	ldr	r3, [pc, #472]	; (800272c <computeNewSpeed+0x24c>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
	return _stepInterval;
 8002558:	4b73      	ldr	r3, [pc, #460]	; (8002728 <computeNewSpeed+0x248>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	e0da      	b.n	8002714 <computeNewSpeed+0x234>
    }

    if (distanceTo > 0)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	dd25      	ble.n	80025b0 <computeNewSpeed+0xd0>
    {
	// We are anti clockwise from the target
	// Need to go clockwise from here, maybe decelerate now
	if (_n > 0)
 8002564:	4b71      	ldr	r3, [pc, #452]	; (800272c <computeNewSpeed+0x24c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	dd0f      	ble.n	800258c <computeNewSpeed+0xac>
	{
	    // Currently accelerating, need to decel now? Or maybe going the wrong way?
	    if ((stepsToStop >= distanceTo) || _direction == DIRECTION_CCW)
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	429a      	cmp	r2, r3
 8002572:	da06      	bge.n	8002582 <computeNewSpeed+0xa2>
 8002574:	4b6e      	ldr	r3, [pc, #440]	; (8002730 <computeNewSpeed+0x250>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	f083 0301 	eor.w	r3, r3, #1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d040      	beq.n	8002604 <computeNewSpeed+0x124>
		_n = -stepsToStop; // Start deceleration
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	425b      	negs	r3, r3
 8002586:	4a69      	ldr	r2, [pc, #420]	; (800272c <computeNewSpeed+0x24c>)
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e03b      	b.n	8002604 <computeNewSpeed+0x124>
	}
	else if (_n < 0)
 800258c:	4b67      	ldr	r3, [pc, #412]	; (800272c <computeNewSpeed+0x24c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	da37      	bge.n	8002604 <computeNewSpeed+0x124>
	{
	    // Currently decelerating, need to accel again?
	    if ((stepsToStop < distanceTo) && _direction == DIRECTION_CW)
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	429a      	cmp	r2, r3
 800259a:	da33      	bge.n	8002604 <computeNewSpeed+0x124>
 800259c:	4b64      	ldr	r3, [pc, #400]	; (8002730 <computeNewSpeed+0x250>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d02f      	beq.n	8002604 <computeNewSpeed+0x124>
		_n = -_n; // Start accceleration
 80025a4:	4b61      	ldr	r3, [pc, #388]	; (800272c <computeNewSpeed+0x24c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	425b      	negs	r3, r3
 80025aa:	4a60      	ldr	r2, [pc, #384]	; (800272c <computeNewSpeed+0x24c>)
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e029      	b.n	8002604 <computeNewSpeed+0x124>
	}
    }
    else if (distanceTo < 0)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	da26      	bge.n	8002604 <computeNewSpeed+0x124>
    {
	// We are clockwise from the target
	// Need to go anticlockwise from here, maybe decelerate
	if (_n > 0)
 80025b6:	4b5d      	ldr	r3, [pc, #372]	; (800272c <computeNewSpeed+0x24c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	dd0d      	ble.n	80025da <computeNewSpeed+0xfa>
	{
	    // Currently accelerating, need to decel now? Or maybe going the wrong way?
	    if ((stepsToStop >= -distanceTo) || _direction == DIRECTION_CW)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	425b      	negs	r3, r3
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	da03      	bge.n	80025d0 <computeNewSpeed+0xf0>
 80025c8:	4b59      	ldr	r3, [pc, #356]	; (8002730 <computeNewSpeed+0x250>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d019      	beq.n	8002604 <computeNewSpeed+0x124>
		_n = -stepsToStop; // Start deceleration
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	425b      	negs	r3, r3
 80025d4:	4a55      	ldr	r2, [pc, #340]	; (800272c <computeNewSpeed+0x24c>)
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	e014      	b.n	8002604 <computeNewSpeed+0x124>
	}
	else if (_n < 0)
 80025da:	4b54      	ldr	r3, [pc, #336]	; (800272c <computeNewSpeed+0x24c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	da10      	bge.n	8002604 <computeNewSpeed+0x124>
	{
	    // Currently decelerating, need to accel again?
	    if ((stepsToStop < -distanceTo) && _direction == DIRECTION_CCW)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	425b      	negs	r3, r3
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	da0b      	bge.n	8002604 <computeNewSpeed+0x124>
 80025ec:	4b50      	ldr	r3, [pc, #320]	; (8002730 <computeNewSpeed+0x250>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	f083 0301 	eor.w	r3, r3, #1
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d004      	beq.n	8002604 <computeNewSpeed+0x124>
		_n = -_n; // Start accceleration
 80025fa:	4b4c      	ldr	r3, [pc, #304]	; (800272c <computeNewSpeed+0x24c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	425b      	negs	r3, r3
 8002600:	4a4a      	ldr	r2, [pc, #296]	; (800272c <computeNewSpeed+0x24c>)
 8002602:	6013      	str	r3, [r2, #0]
	}
    }

    // Need to accelerate or decelerate
    if (_n == 0)
 8002604:	4b49      	ldr	r3, [pc, #292]	; (800272c <computeNewSpeed+0x24c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10c      	bne.n	8002626 <computeNewSpeed+0x146>
    {
	// First step from stopped
	_cn = _c0;
 800260c:	4b49      	ldr	r3, [pc, #292]	; (8002734 <computeNewSpeed+0x254>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a49      	ldr	r2, [pc, #292]	; (8002738 <computeNewSpeed+0x258>)
 8002612:	6013      	str	r3, [r2, #0]
	_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	bfcc      	ite	gt
 800261a:	2301      	movgt	r3, #1
 800261c:	2300      	movle	r3, #0
 800261e:	b2da      	uxtb	r2, r3
 8002620:	4b43      	ldr	r3, [pc, #268]	; (8002730 <computeNewSpeed+0x250>)
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e04d      	b.n	80026c2 <computeNewSpeed+0x1e2>
    }
    else
    {
	// Subsequent step. Works for accel (n is +_ve) and decel (n is -ve).
	_cn = _cn - ((2.0 * _cn) / ((4.0 * _n) + 1)); // Equation 13
 8002626:	4b44      	ldr	r3, [pc, #272]	; (8002738 <computeNewSpeed+0x258>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fd ffbc 	bl	80005a8 <__aeabi_f2d>
 8002630:	4604      	mov	r4, r0
 8002632:	460d      	mov	r5, r1
 8002634:	4b40      	ldr	r3, [pc, #256]	; (8002738 <computeNewSpeed+0x258>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7fd ffb5 	bl	80005a8 <__aeabi_f2d>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	f7fd fe53 	bl	80002ec <__adddf3>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4690      	mov	r8, r2
 800264c:	4699      	mov	r9, r3
 800264e:	4b37      	ldr	r3, [pc, #220]	; (800272c <computeNewSpeed+0x24c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fd ff96 	bl	8000584 <__aeabi_i2d>
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	4b37      	ldr	r3, [pc, #220]	; (800273c <computeNewSpeed+0x25c>)
 800265e:	f7fd fffb 	bl	8000658 <__aeabi_dmul>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4610      	mov	r0, r2
 8002668:	4619      	mov	r1, r3
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	4b34      	ldr	r3, [pc, #208]	; (8002740 <computeNewSpeed+0x260>)
 8002670:	f7fd fe3c 	bl	80002ec <__adddf3>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4640      	mov	r0, r8
 800267a:	4649      	mov	r1, r9
 800267c:	f7fe f916 	bl	80008ac <__aeabi_ddiv>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4620      	mov	r0, r4
 8002686:	4629      	mov	r1, r5
 8002688:	f7fd fe2e 	bl	80002e8 <__aeabi_dsub>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	f7fe fad8 	bl	8000c48 <__aeabi_d2f>
 8002698:	4603      	mov	r3, r0
 800269a:	4a27      	ldr	r2, [pc, #156]	; (8002738 <computeNewSpeed+0x258>)
 800269c:	6013      	str	r3, [r2, #0]
	_cn = _cn >_cmin ? _cn:_cmin; // max(_cn,_cmin)
 800269e:	4b26      	ldr	r3, [pc, #152]	; (8002738 <computeNewSpeed+0x258>)
 80026a0:	ed93 7a00 	vldr	s14, [r3]
 80026a4:	4b27      	ldr	r3, [pc, #156]	; (8002744 <computeNewSpeed+0x264>)
 80026a6:	edd3 7a00 	vldr	s15, [r3]
 80026aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b2:	dd02      	ble.n	80026ba <computeNewSpeed+0x1da>
 80026b4:	4b20      	ldr	r3, [pc, #128]	; (8002738 <computeNewSpeed+0x258>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	e001      	b.n	80026be <computeNewSpeed+0x1de>
 80026ba:	4b22      	ldr	r3, [pc, #136]	; (8002744 <computeNewSpeed+0x264>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <computeNewSpeed+0x258>)
 80026c0:	6013      	str	r3, [r2, #0]
    }
    _n++;
 80026c2:	4b1a      	ldr	r3, [pc, #104]	; (800272c <computeNewSpeed+0x24c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	3301      	adds	r3, #1
 80026c8:	4a18      	ldr	r2, [pc, #96]	; (800272c <computeNewSpeed+0x24c>)
 80026ca:	6013      	str	r3, [r2, #0]
    _stepInterval = _cn;
 80026cc:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <computeNewSpeed+0x258>)
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026d6:	ee17 2a90 	vmov	r2, s15
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <computeNewSpeed+0x248>)
 80026dc:	601a      	str	r2, [r3, #0]
    _speed = 1000000.0 / _cn;
 80026de:	4b16      	ldr	r3, [pc, #88]	; (8002738 <computeNewSpeed+0x258>)
 80026e0:	ed93 7a00 	vldr	s14, [r3]
 80026e4:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002748 <computeNewSpeed+0x268>
 80026e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <computeNewSpeed+0x240>)
 80026ee:	edc3 7a00 	vstr	s15, [r3]
    if (_direction == DIRECTION_CCW)
 80026f2:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <computeNewSpeed+0x250>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	f083 0301 	eor.w	r3, r3, #1
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <computeNewSpeed+0x230>
	_speed = -_speed;
 8002700:	4b07      	ldr	r3, [pc, #28]	; (8002720 <computeNewSpeed+0x240>)
 8002702:	edd3 7a00 	vldr	s15, [r3]
 8002706:	eef1 7a67 	vneg.f32	s15, s15
 800270a:	4b05      	ldr	r3, [pc, #20]	; (8002720 <computeNewSpeed+0x240>)
 800270c:	edc3 7a00 	vstr	s15, [r3]
    Serial.println(_stepInterval);
    Serial.println(distanceTo);
    Serial.println(stepsToStop);
    Serial.println("-----");
#endif
    return _stepInterval;
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <computeNewSpeed+0x248>)
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800271e:	bf00      	nop
 8002720:	200004b4 	.word	0x200004b4
 8002724:	200004bc 	.word	0x200004bc
 8002728:	200004a4 	.word	0x200004a4
 800272c:	200004d0 	.word	0x200004d0
 8002730:	200004a2 	.word	0x200004a2
 8002734:	200004d4 	.word	0x200004d4
 8002738:	200004d8 	.word	0x200004d8
 800273c:	40100000 	.word	0x40100000
 8002740:	3ff00000 	.word	0x3ff00000
 8002744:	200004dc 	.word	0x200004dc
 8002748:	49742400 	.word	0x49742400

0800274c <run>:
// Run the motor to implement speed and acceleration in order to proceed to the target position
// You must call this at least once per step, preferably in your main loop
// If the motor is in the desired position, the cost is very small
// returns true if the motor is still running to the target position.
_Bool run()
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
    if (runSpeed())
 8002750:	f7ff fe4a 	bl	80023e8 <runSpeed>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <run+0x12>
	computeNewSpeed();
 800275a:	f7ff fec1 	bl	80024e0 <computeNewSpeed>
    return _speed != 0.0 || distanceToGo() != 0;
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <run+0x3c>)
 8002760:	edd3 7a00 	vldr	s15, [r3]
 8002764:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276c:	d104      	bne.n	8002778 <run+0x2c>
 800276e:	f7ff fe75 	bl	800245c <distanceToGo>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <run+0x30>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <run+0x32>
 800277c:	2300      	movs	r3, #0
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	b2db      	uxtb	r3, r3
}
 8002784:	4618      	mov	r0, r3
 8002786:	bd80      	pop	{r7, pc}
 8002788:	200004b4 	.word	0x200004b4

0800278c <setMaxSpeed>:


void setMaxSpeed(float speed)
{
 800278c:	b5b0      	push	{r4, r5, r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	ed87 0a01 	vstr	s0, [r7, #4]
    if (speed < 0.0)
 8002796:	edd7 7a01 	vldr	s15, [r7, #4]
 800279a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800279e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a2:	d505      	bpl.n	80027b0 <setMaxSpeed+0x24>
       speed = -speed;
 80027a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80027a8:	eef1 7a67 	vneg.f32	s15, s15
 80027ac:	edc7 7a01 	vstr	s15, [r7, #4]
    if (_maxSpeed != speed)
 80027b0:	4b22      	ldr	r3, [pc, #136]	; (800283c <setMaxSpeed+0xb0>)
 80027b2:	edd3 7a00 	vldr	s15, [r3]
 80027b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80027ba:	eeb4 7a67 	vcmp.f32	s14, s15
 80027be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c2:	d037      	beq.n	8002834 <setMaxSpeed+0xa8>
    {
	_maxSpeed = speed;
 80027c4:	4a1d      	ldr	r2, [pc, #116]	; (800283c <setMaxSpeed+0xb0>)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6013      	str	r3, [r2, #0]
	_cmin = 1000000.0 / speed;
 80027ca:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002840 <setMaxSpeed+0xb4>
 80027ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80027d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027d6:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <setMaxSpeed+0xb8>)
 80027d8:	edc3 7a00 	vstr	s15, [r3]
	// Recompute _n from current speed and adjust speed if accelerating or cruising
	if (_n > 0)
 80027dc:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <setMaxSpeed+0xbc>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	dd27      	ble.n	8002834 <setMaxSpeed+0xa8>
	{
	    _n = (int32_t)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <setMaxSpeed+0xc0>)
 80027e6:	ed93 7a00 	vldr	s14, [r3]
 80027ea:	4b18      	ldr	r3, [pc, #96]	; (800284c <setMaxSpeed+0xc0>)
 80027ec:	edd3 7a00 	vldr	s15, [r3]
 80027f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f4:	ee17 0a90 	vmov	r0, s15
 80027f8:	f7fd fed6 	bl	80005a8 <__aeabi_f2d>
 80027fc:	4604      	mov	r4, r0
 80027fe:	460d      	mov	r5, r1
 8002800:	4b13      	ldr	r3, [pc, #76]	; (8002850 <setMaxSpeed+0xc4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7fd fecf 	bl	80005a8 <__aeabi_f2d>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	f7fd fd6d 	bl	80002ec <__adddf3>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4620      	mov	r0, r4
 8002818:	4629      	mov	r1, r5
 800281a:	f7fe f847 	bl	80008ac <__aeabi_ddiv>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4610      	mov	r0, r2
 8002824:	4619      	mov	r1, r3
 8002826:	f7fe f9c7 	bl	8000bb8 <__aeabi_d2iz>
 800282a:	4603      	mov	r3, r0
 800282c:	4a06      	ldr	r2, [pc, #24]	; (8002848 <setMaxSpeed+0xbc>)
 800282e:	6013      	str	r3, [r2, #0]
	    computeNewSpeed();
 8002830:	f7ff fe56 	bl	80024e0 <computeNewSpeed>
	}
    }
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bdb0      	pop	{r4, r5, r7, pc}
 800283c:	200004b8 	.word	0x200004b8
 8002840:	49742400 	.word	0x49742400
 8002844:	200004dc 	.word	0x200004dc
 8002848:	200004d0 	.word	0x200004d0
 800284c:	200004b4 	.word	0x200004b4
 8002850:	200004bc 	.word	0x200004bc
 8002854:	00000000 	.word	0x00000000

08002858 <setAcceleration>:
{
    return _maxSpeed;
}

void setAcceleration(float acceleration)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (acceleration == 0.0)
 8002862:	edd7 7a01 	vldr	s15, [r7, #4]
 8002866:	eef5 7a40 	vcmp.f32	s15, #0.0
 800286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286e:	d05f      	beq.n	8002930 <setAcceleration+0xd8>
	return;
    if (acceleration < 0.0)
 8002870:	edd7 7a01 	vldr	s15, [r7, #4]
 8002874:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287c:	d505      	bpl.n	800288a <setAcceleration+0x32>
      acceleration = -acceleration;
 800287e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002882:	eef1 7a67 	vneg.f32	s15, s15
 8002886:	edc7 7a01 	vstr	s15, [r7, #4]
    if (_acceleration != acceleration)
 800288a:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <setAcceleration+0xf0>)
 800288c:	edd3 7a00 	vldr	s15, [r3]
 8002890:	ed97 7a01 	vldr	s14, [r7, #4]
 8002894:	eeb4 7a67 	vcmp.f32	s14, s15
 8002898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289c:	d049      	beq.n	8002932 <setAcceleration+0xda>
    {
	// Recompute _n per Equation 17
	_n = _n * (_acceleration / acceleration);
 800289e:	4b2b      	ldr	r3, [pc, #172]	; (800294c <setAcceleration+0xf4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	ee07 3a90 	vmov	s15, r3
 80028a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028aa:	4b27      	ldr	r3, [pc, #156]	; (8002948 <setAcceleration+0xf0>)
 80028ac:	ed93 6a00 	vldr	s12, [r3]
 80028b0:	edd7 6a01 	vldr	s13, [r7, #4]
 80028b4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80028b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028c0:	ee17 2a90 	vmov	r2, s15
 80028c4:	4b21      	ldr	r3, [pc, #132]	; (800294c <setAcceleration+0xf4>)
 80028c6:	601a      	str	r2, [r3, #0]
	// New c0 per Equation 7, with correction per Equation 15
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7fd fe6d 	bl	80005a8 <__aeabi_f2d>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	f04f 0000 	mov.w	r0, #0
 80028d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80028da:	f7fd ffe7 	bl	80008ac <__aeabi_ddiv>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	ec43 2b17 	vmov	d7, r2, r3
 80028e6:	eeb0 0a47 	vmov.f32	s0, s14
 80028ea:	eef0 0a67 	vmov.f32	s1, s15
 80028ee:	f008 f837 	bl	800a960 <sqrt>
 80028f2:	ec51 0b10 	vmov	r0, r1, d0
 80028f6:	a310      	add	r3, pc, #64	; (adr r3, 8002938 <setAcceleration+0xe0>)
 80028f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fc:	f7fd feac 	bl	8000658 <__aeabi_dmul>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	a30d      	add	r3, pc, #52	; (adr r3, 8002940 <setAcceleration+0xe8>)
 800290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290e:	f7fd fea3 	bl	8000658 <__aeabi_dmul>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4610      	mov	r0, r2
 8002918:	4619      	mov	r1, r3
 800291a:	f7fe f995 	bl	8000c48 <__aeabi_d2f>
 800291e:	4603      	mov	r3, r0
 8002920:	4a0b      	ldr	r2, [pc, #44]	; (8002950 <setAcceleration+0xf8>)
 8002922:	6013      	str	r3, [r2, #0]
	_acceleration = acceleration;
 8002924:	4a08      	ldr	r2, [pc, #32]	; (8002948 <setAcceleration+0xf0>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6013      	str	r3, [r2, #0]
	computeNewSpeed();
 800292a:	f7ff fdd9 	bl	80024e0 <computeNewSpeed>
 800292e:	e000      	b.n	8002932 <setAcceleration+0xda>
	return;
 8002930:	bf00      	nop
    }
}
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	c083126f 	.word	0xc083126f
 800293c:	3fe5a1ca 	.word	0x3fe5a1ca
 8002940:	00000000 	.word	0x00000000
 8002944:	412e8480 	.word	0x412e8480
 8002948:	200004bc 	.word	0x200004bc
 800294c:	200004d0 	.word	0x200004d0
 8002950:	200004d4 	.word	0x200004d4
 8002954:	00000000 	.word	0x00000000

08002958 <setSpeed>:
{
    return _acceleration;
}

void setSpeed(float speed)
{
 8002958:	b5b0      	push	{r4, r5, r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (speed == _speed)
 8002962:	4b33      	ldr	r3, [pc, #204]	; (8002a30 <setSpeed+0xd8>)
 8002964:	edd3 7a00 	vldr	s15, [r3]
 8002968:	ed97 7a01 	vldr	s14, [r7, #4]
 800296c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002974:	d054      	beq.n	8002a20 <setSpeed+0xc8>
        return;
    speed = (speed) > (-_maxSpeed) ? ( (speed < _maxSpeed)?(speed):(_maxSpeed) ) : (-_maxSpeed) ; //constrain(speed, -_maxSpeed, _maxSpeed);
 8002976:	4b2f      	ldr	r3, [pc, #188]	; (8002a34 <setSpeed+0xdc>)
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	eef1 7a67 	vneg.f32	s15, s15
 8002980:	ed97 7a01 	vldr	s14, [r7, #4]
 8002984:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298c:	dd10      	ble.n	80029b0 <setSpeed+0x58>
 800298e:	4b29      	ldr	r3, [pc, #164]	; (8002a34 <setSpeed+0xdc>)
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	ed97 7a01 	vldr	s14, [r7, #4]
 8002998:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800299c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a0:	d502      	bpl.n	80029a8 <setSpeed+0x50>
 80029a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80029a6:	e008      	b.n	80029ba <setSpeed+0x62>
 80029a8:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <setSpeed+0xdc>)
 80029aa:	edd3 7a00 	vldr	s15, [r3]
 80029ae:	e004      	b.n	80029ba <setSpeed+0x62>
 80029b0:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <setSpeed+0xdc>)
 80029b2:	edd3 7a00 	vldr	s15, [r3]
 80029b6:	eef1 7a67 	vneg.f32	s15, s15
 80029ba:	edc7 7a01 	vstr	s15, [r7, #4]

    if (speed == 0.0)
 80029be:	edd7 7a01 	vldr	s15, [r7, #4]
 80029c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ca:	d103      	bne.n	80029d4 <setSpeed+0x7c>
	_stepInterval = 0;
 80029cc:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <setSpeed+0xe0>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	e021      	b.n	8002a18 <setSpeed+0xc0>
    else
    {
	_stepInterval = fabs(1000000.0 / speed);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7fd fde7 	bl	80005a8 <__aeabi_f2d>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	a112      	add	r1, pc, #72	; (adr r1, 8002a28 <setSpeed+0xd0>)
 80029e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029e4:	f7fd ff62 	bl	80008ac <__aeabi_ddiv>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4614      	mov	r4, r2
 80029ee:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80029f2:	4620      	mov	r0, r4
 80029f4:	4629      	mov	r1, r5
 80029f6:	f7fe f907 	bl	8000c08 <__aeabi_d2uiz>
 80029fa:	4603      	mov	r3, r0
 80029fc:	4a0e      	ldr	r2, [pc, #56]	; (8002a38 <setSpeed+0xe0>)
 80029fe:	6013      	str	r3, [r2, #0]
	_direction = (speed > 0.0) ? DIRECTION_CW : DIRECTION_CCW;
 8002a00:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0c:	bfcc      	ite	gt
 8002a0e:	2301      	movgt	r3, #1
 8002a10:	2300      	movle	r3, #0
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <setSpeed+0xe4>)
 8002a16:	701a      	strb	r2, [r3, #0]
    }
    _speed = speed;
 8002a18:	4a05      	ldr	r2, [pc, #20]	; (8002a30 <setSpeed+0xd8>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	e000      	b.n	8002a22 <setSpeed+0xca>
        return;
 8002a20:	bf00      	nop
    //added
//    computeNewSpeed();
}
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bdb0      	pop	{r4, r5, r7, pc}
 8002a28:	00000000 	.word	0x00000000
 8002a2c:	412e8480 	.word	0x412e8480
 8002a30:	200004b4 	.word	0x200004b4
 8002a34:	200004b8 	.word	0x200004b8
 8002a38:	200004a4 	.word	0x200004a4
 8002a3c:	200004a2 	.word	0x200004a2

08002a40 <setOutputPins>:

void setOutputPins(uint8_t mask)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
    uint8_t numpins = 2;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	73bb      	strb	r3, [r7, #14]

    uint8_t i;
    for (i = 0; i < numpins; i++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	e038      	b.n	8002ac6 <setOutputPins+0x86>
    	if(i==1){ //step pin
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d119      	bne.n	8002a8e <setOutputPins+0x4e>
    		HAL_GPIO_WritePin( step_port, step_pin, (mask & (1 << i)) ? ( 1  ^ _pinInverted[i]) : (0 ^ _pinInverted[i]) );
 8002a5a:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <setOutputPins+0x98>)
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	4b1f      	ldr	r3, [pc, #124]	; (8002adc <setOutputPins+0x9c>)
 8002a60:	8819      	ldrh	r1, [r3, #0]
 8002a62:	79fa      	ldrb	r2, [r7, #7]
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	fa42 f303 	asr.w	r3, r2, r3
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d006      	beq.n	8002a80 <setOutputPins+0x40>
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	4a1a      	ldr	r2, [pc, #104]	; (8002ae0 <setOutputPins+0xa0>)
 8002a76:	5cd3      	ldrb	r3, [r2, r3]
 8002a78:	f083 0301 	eor.w	r3, r3, #1
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	e002      	b.n	8002a86 <setOutputPins+0x46>
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	4a17      	ldr	r2, [pc, #92]	; (8002ae0 <setOutputPins+0xa0>)
 8002a84:	5cd3      	ldrb	r3, [r2, r3]
 8002a86:	461a      	mov	r2, r3
 8002a88:	f000 ff5e 	bl	8003948 <HAL_GPIO_WritePin>
 8002a8c:	e018      	b.n	8002ac0 <setOutputPins+0x80>
    	}
    	else{
    		HAL_GPIO_WritePin( dir_port, dir_pin, (mask & (1 << i)) ? ( 1  ^ _pinInverted[i]) : (0 ^ _pinInverted[i]) );
 8002a8e:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <setOutputPins+0xa4>)
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <setOutputPins+0xa8>)
 8002a94:	8819      	ldrh	r1, [r3, #0]
 8002a96:	79fa      	ldrb	r2, [r7, #7]
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
 8002a9a:	fa42 f303 	asr.w	r3, r2, r3
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d006      	beq.n	8002ab4 <setOutputPins+0x74>
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	4a0d      	ldr	r2, [pc, #52]	; (8002ae0 <setOutputPins+0xa0>)
 8002aaa:	5cd3      	ldrb	r3, [r2, r3]
 8002aac:	f083 0301 	eor.w	r3, r3, #1
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	e002      	b.n	8002aba <setOutputPins+0x7a>
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <setOutputPins+0xa0>)
 8002ab8:	5cd3      	ldrb	r3, [r2, r3]
 8002aba:	461a      	mov	r2, r3
 8002abc:	f000 ff44 	bl	8003948 <HAL_GPIO_WritePin>
    for (i = 0; i < numpins; i++)
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	7bbb      	ldrb	r3, [r7, #14]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d3c2      	bcc.n	8002a54 <setOutputPins+0x14>
    	}
}
 8002ace:	bf00      	nop
 8002ad0:	bf00      	nop
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000494 	.word	0x20000494
 8002adc:	20000498 	.word	0x20000498
 8002ae0:	200004a8 	.word	0x200004a8
 8002ae4:	2000049c 	.word	0x2000049c
 8002ae8:	200004a0 	.word	0x200004a0

08002aec <step>:
float speed()
{
    return _speed;
}

void step(uint32_t step){
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

	//making step with driver
	step1(step);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f805 	bl	8002b04 <step1>

}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <step1>:

// 1 pin step function (ie for stepper drivers)
// This is passed the current step number (0 to 7)
// Subclasses can override
void step1(uint32_t step)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	(void)(step); // Unused

	// _pin[0] is step, _pin[1] is direction
	setOutputPins(_direction ? 0b10 : 0b00); // Set direction first else get rogue pulses
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <step1+0x58>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <step1+0x14>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e000      	b.n	8002b1a <step1+0x16>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff ff90 	bl	8002a40 <setOutputPins>
	setOutputPins(_direction ? 0b11 : 0b01); // step HIGH
 8002b20:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <step1+0x58>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <step1+0x28>
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e000      	b.n	8002b2e <step1+0x2a>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff ff86 	bl	8002a40 <setOutputPins>
	// Caution 200ns setup time
	// Delay the minimum allowed pulse width

	delay_us(_minPulseWidth);
 8002b34:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <step1+0x5c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f868 	bl	8002c10 <delay_us>
	setOutputPins(_direction ? 0b10 : 0b00); // step LOW
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <step1+0x58>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <step1+0x48>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e000      	b.n	8002b4e <step1+0x4a>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff ff76 	bl	8002a40 <setOutputPins>
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	200004a2 	.word	0x200004a2
 8002b60:	200004c8 	.word	0x200004c8

08002b64 <runToPosition>:
    _pinInverted[1] = directionInvert;
    _enableInverted = enableInvert;
}

void runToPosition()
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
    while (run());
 8002b68:	bf00      	nop
 8002b6a:	f7ff fdef 	bl	800274c <run>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1fa      	bne.n	8002b6a <runToPosition+0x6>
//	YIELD; // Let system housekeeping occur
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <stop>:
    moveTo(position);
    runToPosition();
}

void stop()
{
 8002b7c:	b5b0      	push	{r4, r5, r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
    if (_speed != 0.0)
 8002b82:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <stop+0x8c>)
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b90:	d036      	beq.n	8002c00 <stop+0x84>
    {
	int32_t stepsToStop = (int32_t)((_speed * _speed) / (2.0 * _acceleration)) + 1; // Equation 16 (+integer rounding)
 8002b92:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <stop+0x8c>)
 8002b94:	ed93 7a00 	vldr	s14, [r3]
 8002b98:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <stop+0x8c>)
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba2:	ee17 0a90 	vmov	r0, s15
 8002ba6:	f7fd fcff 	bl	80005a8 <__aeabi_f2d>
 8002baa:	4604      	mov	r4, r0
 8002bac:	460d      	mov	r5, r1
 8002bae:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <stop+0x90>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd fcf8 	bl	80005a8 <__aeabi_f2d>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	f7fd fb96 	bl	80002ec <__adddf3>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	f7fd fe70 	bl	80008ac <__aeabi_ddiv>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	f7fd fff0 	bl	8000bb8 <__aeabi_d2iz>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	3301      	adds	r3, #1
 8002bdc:	607b      	str	r3, [r7, #4]
	if (_speed > 0)
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <stop+0x8c>)
 8002be0:	edd3 7a00 	vldr	s15, [r3]
 8002be4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bec:	dd03      	ble.n	8002bf6 <stop+0x7a>
	    move(stepsToStop);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff fb4c 	bl	800228c <move>
	else
	    move(-stepsToStop);
    }
}
 8002bf4:	e004      	b.n	8002c00 <stop+0x84>
	    move(-stepsToStop);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	425b      	negs	r3, r3
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fb46 	bl	800228c <move>
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bdb0      	pop	{r4, r5, r7, pc}
 8002c08:	200004b4 	.word	0x200004b4
 8002c0c:	200004bc 	.word	0x200004bc

08002c10 <delay_us>:
}



/*********** Helper Functions ************/
void delay_us (uint16_t us){
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	80fb      	strh	r3, [r7, #6]
//{	__HAL_TIM_DISABLE
//	HAL_TIM_Base_Stop(&htim7);
	__HAL_TIM_SET_COUNTER(&htim7,0x0000);  // set the counter value a 0
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <delay_us+0x30>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24
#if debug
	counter = __HAL_TIM_GET_COUNTER(&htim7);
#endif
//	HAL_TIM_Base_Start(&htim7);

	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 8002c22:	bf00      	nop
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <delay_us+0x30>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d3f9      	bcc.n	8002c24 <delay_us+0x14>
#if debug
	counter = __HAL_TIM_GET_COUNTER(&htim7);
#endif
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	200003c4 	.word	0x200003c4

08002c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <HAL_MspInit+0x4c>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	4a0f      	ldr	r2, [pc, #60]	; (8002c90 <HAL_MspInit+0x4c>)
 8002c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c58:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <HAL_MspInit+0x4c>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	603b      	str	r3, [r7, #0]
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <HAL_MspInit+0x4c>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	4a08      	ldr	r2, [pc, #32]	; (8002c90 <HAL_MspInit+0x4c>)
 8002c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c74:	6413      	str	r3, [r2, #64]	; 0x40
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_MspInit+0x4c>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800

08002c94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08a      	sub	sp, #40	; 0x28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9c:	f107 0314 	add.w	r3, r7, #20
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a19      	ldr	r2, [pc, #100]	; (8002d18 <HAL_SPI_MspInit+0x84>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d12b      	bne.n	8002d0e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	4b18      	ldr	r3, [pc, #96]	; (8002d1c <HAL_SPI_MspInit+0x88>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	4a17      	ldr	r2, [pc, #92]	; (8002d1c <HAL_SPI_MspInit+0x88>)
 8002cc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc6:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <HAL_SPI_MspInit+0x88>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <HAL_SPI_MspInit+0x88>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4a10      	ldr	r2, [pc, #64]	; (8002d1c <HAL_SPI_MspInit+0x88>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b0e      	ldr	r3, [pc, #56]	; (8002d1c <HAL_SPI_MspInit+0x88>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_Clk_Pin|SPI_MOSI_Pin;
 8002cee:	23a0      	movs	r3, #160	; 0xa0
 8002cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cfe:	2305      	movs	r3, #5
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d02:	f107 0314 	add.w	r3, r7, #20
 8002d06:	4619      	mov	r1, r3
 8002d08:	4805      	ldr	r0, [pc, #20]	; (8002d20 <HAL_SPI_MspInit+0x8c>)
 8002d0a:	f000 fc89 	bl	8003620 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d0e:	bf00      	nop
 8002d10:	3728      	adds	r7, #40	; 0x28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40013000 	.word	0x40013000
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40020000 	.word	0x40020000

08002d24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	; 0x28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2c:	f107 0314 	add.w	r3, r7, #20
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d44:	d133      	bne.n	8002dae <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	4a1a      	ldr	r2, [pc, #104]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6413      	str	r3, [r2, #64]	; 0x40
 8002d56:	4b18      	ldr	r3, [pc, #96]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	4a13      	ldr	r2, [pc, #76]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6313      	str	r3, [r2, #48]	; 0x30
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A_signal_Pin|B_signal_Pin;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d82:	2302      	movs	r3, #2
 8002d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d92:	f107 0314 	add.w	r3, r7, #20
 8002d96:	4619      	mov	r1, r3
 8002d98:	4808      	ldr	r0, [pc, #32]	; (8002dbc <HAL_TIM_Encoder_MspInit+0x98>)
 8002d9a:	f000 fc41 	bl	8003620 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2100      	movs	r1, #0
 8002da2:	201c      	movs	r0, #28
 8002da4:	f000 fb65 	bl	8003472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002da8:	201c      	movs	r0, #28
 8002daa:	f000 fb7e 	bl	80034aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002dae:	bf00      	nop
 8002db0:	3728      	adds	r7, #40	; 0x28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40020000 	.word	0x40020000

08002dc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a15      	ldr	r2, [pc, #84]	; (8002e24 <HAL_TIM_Base_MspInit+0x64>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d10e      	bne.n	8002df0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <HAL_TIM_Base_MspInit+0x68>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	4a13      	ldr	r2, [pc, #76]	; (8002e28 <HAL_TIM_Base_MspInit+0x68>)
 8002ddc:	f043 0310 	orr.w	r3, r3, #16
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <HAL_TIM_Base_MspInit+0x68>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002dee:	e012      	b.n	8002e16 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM7)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a0d      	ldr	r2, [pc, #52]	; (8002e2c <HAL_TIM_Base_MspInit+0x6c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d10d      	bne.n	8002e16 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <HAL_TIM_Base_MspInit+0x68>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	4a09      	ldr	r2, [pc, #36]	; (8002e28 <HAL_TIM_Base_MspInit+0x68>)
 8002e04:	f043 0320 	orr.w	r3, r3, #32
 8002e08:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0a:	4b07      	ldr	r3, [pc, #28]	; (8002e28 <HAL_TIM_Base_MspInit+0x68>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40001000 	.word	0x40001000
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40001400 	.word	0x40001400

08002e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1d      	ldr	r2, [pc, #116]	; (8002ec4 <HAL_UART_MspInit+0x94>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d133      	bne.n	8002eba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <HAL_UART_MspInit+0x98>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	4a1b      	ldr	r2, [pc, #108]	; (8002ec8 <HAL_UART_MspInit+0x98>)
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e60:	6413      	str	r3, [r2, #64]	; 0x40
 8002e62:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <HAL_UART_MspInit+0x98>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <HAL_UART_MspInit+0x98>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a14      	ldr	r2, [pc, #80]	; (8002ec8 <HAL_UART_MspInit+0x98>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_UART_MspInit+0x98>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e8a:	230c      	movs	r3, #12
 8002e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e96:	2303      	movs	r3, #3
 8002e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e9a:	2307      	movs	r3, #7
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9e:	f107 0314 	add.w	r3, r7, #20
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4809      	ldr	r0, [pc, #36]	; (8002ecc <HAL_UART_MspInit+0x9c>)
 8002ea6:	f000 fbbb 	bl	8003620 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2100      	movs	r1, #0
 8002eae:	2026      	movs	r0, #38	; 0x26
 8002eb0:	f000 fadf 	bl	8003472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002eb4:	2026      	movs	r0, #38	; 0x26
 8002eb6:	f000 faf8 	bl	80034aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002eba:	bf00      	nop
 8002ebc:	3728      	adds	r7, #40	; 0x28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40004400 	.word	0x40004400
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40020000 	.word	0x40020000

08002ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ed4:	e7fe      	b.n	8002ed4 <NMI_Handler+0x4>

08002ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eda:	e7fe      	b.n	8002eda <HardFault_Handler+0x4>

08002edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ee0:	e7fe      	b.n	8002ee0 <MemManage_Handler+0x4>

08002ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ee6:	e7fe      	b.n	8002ee6 <BusFault_Handler+0x4>

08002ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eec:	e7fe      	b.n	8002eec <UsageFault_Handler+0x4>

08002eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f1c:	f000 f98a 	bl	8003234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Z_reference_Pin);
 8002f28:	2001      	movs	r0, #1
 8002f2a:	f000 fd27 	bl	800397c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Camera_input_Pin);
 8002f36:	2008      	movs	r0, #8
 8002f38:	f000 fd20 	bl	800397c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002f3c:	bf00      	nop
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(P_limit_Pin);
 8002f44:	2010      	movs	r0, #16
 8002f46:	f000 fd19 	bl	800397c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Q_limit_Pin);
 8002f52:	2020      	movs	r0, #32
 8002f54:	f000 fd12 	bl	800397c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Z_END_STOP_Pin);
 8002f58:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002f5c:	f000 fd0e 	bl	800397c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f60:	bf00      	nop
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f68:	4802      	ldr	r0, [pc, #8]	; (8002f74 <TIM2_IRQHandler+0x10>)
 8002f6a:	f001 ff83 	bl	8004e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000334 	.word	0x20000334

08002f78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f7c:	4802      	ldr	r0, [pc, #8]	; (8002f88 <USART2_IRQHandler+0x10>)
 8002f7e:	f002 fb19 	bl	80055b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	2000040c 	.word	0x2000040c

08002f8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
	return 1;
 8002f90:	2301      	movs	r3, #1
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <_kill>:

int _kill(int pid, int sig)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002fa6:	f003 fa6d 	bl	8006484 <__errno>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2216      	movs	r2, #22
 8002fae:	601a      	str	r2, [r3, #0]
	return -1;
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <_exit>:

void _exit (int status)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff ffe7 	bl	8002f9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002fce:	e7fe      	b.n	8002fce <_exit+0x12>

08002fd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	e00a      	b.n	8002ff8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002fe2:	f3af 8000 	nop.w
 8002fe6:	4601      	mov	r1, r0
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	60ba      	str	r2, [r7, #8]
 8002fee:	b2ca      	uxtb	r2, r1
 8002ff0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	dbf0      	blt.n	8002fe2 <_read+0x12>
	}

return len;
 8003000:	687b      	ldr	r3, [r7, #4]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b086      	sub	sp, #24
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	e009      	b.n	8003030 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	60ba      	str	r2, [r7, #8]
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	3301      	adds	r3, #1
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	429a      	cmp	r2, r3
 8003036:	dbf1      	blt.n	800301c <_write+0x12>
	}
	return len;
 8003038:	687b      	ldr	r3, [r7, #4]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <_close>:

int _close(int file)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
	return -1;
 800304a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800306a:	605a      	str	r2, [r3, #4]
	return 0;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <_isatty>:

int _isatty(int file)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
	return 1;
 8003082:	2301      	movs	r3, #1
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
	return 0;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030b4:	4a14      	ldr	r2, [pc, #80]	; (8003108 <_sbrk+0x5c>)
 80030b6:	4b15      	ldr	r3, [pc, #84]	; (800310c <_sbrk+0x60>)
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030c0:	4b13      	ldr	r3, [pc, #76]	; (8003110 <_sbrk+0x64>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d102      	bne.n	80030ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <_sbrk+0x64>)
 80030ca:	4a12      	ldr	r2, [pc, #72]	; (8003114 <_sbrk+0x68>)
 80030cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ce:	4b10      	ldr	r3, [pc, #64]	; (8003110 <_sbrk+0x64>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d207      	bcs.n	80030ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030dc:	f003 f9d2 	bl	8006484 <__errno>
 80030e0:	4603      	mov	r3, r0
 80030e2:	220c      	movs	r2, #12
 80030e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030e6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ea:	e009      	b.n	8003100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030ec:	4b08      	ldr	r3, [pc, #32]	; (8003110 <_sbrk+0x64>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030f2:	4b07      	ldr	r3, [pc, #28]	; (8003110 <_sbrk+0x64>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	4a05      	ldr	r2, [pc, #20]	; (8003110 <_sbrk+0x64>)
 80030fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030fe:	68fb      	ldr	r3, [r7, #12]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20020000 	.word	0x20020000
 800310c:	00000400 	.word	0x00000400
 8003110:	200004e0 	.word	0x200004e0
 8003114:	200004f8 	.word	0x200004f8

08003118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <SystemInit+0x20>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003122:	4a05      	ldr	r2, [pc, #20]	; (8003138 <SystemInit+0x20>)
 8003124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800313c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003174 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003140:	480d      	ldr	r0, [pc, #52]	; (8003178 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003142:	490e      	ldr	r1, [pc, #56]	; (800317c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003144:	4a0e      	ldr	r2, [pc, #56]	; (8003180 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003148:	e002      	b.n	8003150 <LoopCopyDataInit>

0800314a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800314a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800314c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800314e:	3304      	adds	r3, #4

08003150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003154:	d3f9      	bcc.n	800314a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003156:	4a0b      	ldr	r2, [pc, #44]	; (8003184 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003158:	4c0b      	ldr	r4, [pc, #44]	; (8003188 <LoopFillZerobss+0x26>)
  movs r3, #0
 800315a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800315c:	e001      	b.n	8003162 <LoopFillZerobss>

0800315e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800315e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003160:	3204      	adds	r2, #4

08003162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003164:	d3fb      	bcc.n	800315e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003166:	f7ff ffd7 	bl	8003118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800316a:	f003 f991 	bl	8006490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800316e:	f7fe fbab 	bl	80018c8 <main>
  bx  lr    
 8003172:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003174:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800317c:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8003180:	0800b0d0 	.word	0x0800b0d0
  ldr r2, =_sbss
 8003184:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8003188:	200004f8 	.word	0x200004f8

0800318c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800318c:	e7fe      	b.n	800318c <ADC_IRQHandler>
	...

08003190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003194:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <HAL_Init+0x40>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0d      	ldr	r2, [pc, #52]	; (80031d0 <HAL_Init+0x40>)
 800319a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800319e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_Init+0x40>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <HAL_Init+0x40>)
 80031a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <HAL_Init+0x40>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a07      	ldr	r2, [pc, #28]	; (80031d0 <HAL_Init+0x40>)
 80031b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031b8:	2003      	movs	r0, #3
 80031ba:	f000 f94f 	bl	800345c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031be:	2000      	movs	r0, #0
 80031c0:	f000 f808 	bl	80031d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031c4:	f7ff fd3e 	bl	8002c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023c00 	.word	0x40023c00

080031d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031dc:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_InitTick+0x54>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_InitTick+0x58>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	4619      	mov	r1, r3
 80031e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80031ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f975 	bl	80034e2 <HAL_SYSTICK_Config>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e00e      	b.n	8003220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b0f      	cmp	r3, #15
 8003206:	d80a      	bhi.n	800321e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003208:	2200      	movs	r2, #0
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	f04f 30ff 	mov.w	r0, #4294967295
 8003210:	f000 f92f 	bl	8003472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003214:	4a06      	ldr	r2, [pc, #24]	; (8003230 <HAL_InitTick+0x5c>)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	e000      	b.n	8003220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20000054 	.word	0x20000054
 800322c:	2000005c 	.word	0x2000005c
 8003230:	20000058 	.word	0x20000058

08003234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_IncTick+0x20>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_IncTick+0x24>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4413      	add	r3, r2
 8003244:	4a04      	ldr	r2, [pc, #16]	; (8003258 <HAL_IncTick+0x24>)
 8003246:	6013      	str	r3, [r2, #0]
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	2000005c 	.word	0x2000005c
 8003258:	200004e4 	.word	0x200004e4

0800325c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return uwTick;
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <HAL_GetTick+0x14>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	200004e4 	.word	0x200004e4

08003274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003290:	4013      	ands	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800329c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032a6:	4a04      	ldr	r2, [pc, #16]	; (80032b8 <__NVIC_SetPriorityGrouping+0x44>)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	60d3      	str	r3, [r2, #12]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032c0:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <__NVIC_GetPriorityGrouping+0x18>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	0a1b      	lsrs	r3, r3, #8
 80032c6:	f003 0307 	and.w	r3, r3, #7
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	db0b      	blt.n	8003302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	f003 021f 	and.w	r2, r3, #31
 80032f0:	4907      	ldr	r1, [pc, #28]	; (8003310 <__NVIC_EnableIRQ+0x38>)
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	2001      	movs	r0, #1
 80032fa:	fa00 f202 	lsl.w	r2, r0, r2
 80032fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	e000e100 	.word	0xe000e100

08003314 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	2b00      	cmp	r3, #0
 8003324:	db12      	blt.n	800334c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	f003 021f 	and.w	r2, r3, #31
 800332c:	490a      	ldr	r1, [pc, #40]	; (8003358 <__NVIC_DisableIRQ+0x44>)
 800332e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	2001      	movs	r0, #1
 8003336:	fa00 f202 	lsl.w	r2, r0, r2
 800333a:	3320      	adds	r3, #32
 800333c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003340:	f3bf 8f4f 	dsb	sy
}
 8003344:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003346:	f3bf 8f6f 	isb	sy
}
 800334a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	e000e100 	.word	0xe000e100

0800335c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	6039      	str	r1, [r7, #0]
 8003366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336c:	2b00      	cmp	r3, #0
 800336e:	db0a      	blt.n	8003386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	b2da      	uxtb	r2, r3
 8003374:	490c      	ldr	r1, [pc, #48]	; (80033a8 <__NVIC_SetPriority+0x4c>)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	0112      	lsls	r2, r2, #4
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	440b      	add	r3, r1
 8003380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003384:	e00a      	b.n	800339c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4908      	ldr	r1, [pc, #32]	; (80033ac <__NVIC_SetPriority+0x50>)
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	3b04      	subs	r3, #4
 8003394:	0112      	lsls	r2, r2, #4
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	440b      	add	r3, r1
 800339a:	761a      	strb	r2, [r3, #24]
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000e100 	.word	0xe000e100
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b089      	sub	sp, #36	; 0x24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f1c3 0307 	rsb	r3, r3, #7
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	bf28      	it	cs
 80033ce:	2304      	movcs	r3, #4
 80033d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3304      	adds	r3, #4
 80033d6:	2b06      	cmp	r3, #6
 80033d8:	d902      	bls.n	80033e0 <NVIC_EncodePriority+0x30>
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3b03      	subs	r3, #3
 80033de:	e000      	b.n	80033e2 <NVIC_EncodePriority+0x32>
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e4:	f04f 32ff 	mov.w	r2, #4294967295
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43da      	mvns	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	401a      	ands	r2, r3
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f8:	f04f 31ff 	mov.w	r1, #4294967295
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003402:	43d9      	mvns	r1, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003408:	4313      	orrs	r3, r2
         );
}
 800340a:	4618      	mov	r0, r3
 800340c:	3724      	adds	r7, #36	; 0x24
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
	...

08003418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3b01      	subs	r3, #1
 8003424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003428:	d301      	bcc.n	800342e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800342a:	2301      	movs	r3, #1
 800342c:	e00f      	b.n	800344e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800342e:	4a0a      	ldr	r2, [pc, #40]	; (8003458 <SysTick_Config+0x40>)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3b01      	subs	r3, #1
 8003434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003436:	210f      	movs	r1, #15
 8003438:	f04f 30ff 	mov.w	r0, #4294967295
 800343c:	f7ff ff8e 	bl	800335c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <SysTick_Config+0x40>)
 8003442:	2200      	movs	r2, #0
 8003444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003446:	4b04      	ldr	r3, [pc, #16]	; (8003458 <SysTick_Config+0x40>)
 8003448:	2207      	movs	r2, #7
 800344a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	e000e010 	.word	0xe000e010

0800345c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff ff05 	bl	8003274 <__NVIC_SetPriorityGrouping>
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003472:	b580      	push	{r7, lr}
 8003474:	b086      	sub	sp, #24
 8003476:	af00      	add	r7, sp, #0
 8003478:	4603      	mov	r3, r0
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
 800347e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003484:	f7ff ff1a 	bl	80032bc <__NVIC_GetPriorityGrouping>
 8003488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	6978      	ldr	r0, [r7, #20]
 8003490:	f7ff ff8e 	bl	80033b0 <NVIC_EncodePriority>
 8003494:	4602      	mov	r2, r0
 8003496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349a:	4611      	mov	r1, r2
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff ff5d 	bl	800335c <__NVIC_SetPriority>
}
 80034a2:	bf00      	nop
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	4603      	mov	r3, r0
 80034b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff ff0d 	bl	80032d8 <__NVIC_EnableIRQ>
}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	4603      	mov	r3, r0
 80034ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80034d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff1d 	bl	8003314 <__NVIC_DisableIRQ>
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff ff94 	bl	8003418 <SysTick_Config>
 80034f0:	4603      	mov	r3, r0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003506:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003508:	f7ff fea8 	bl	800325c <HAL_GetTick>
 800350c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d008      	beq.n	800352c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2280      	movs	r2, #128	; 0x80
 800351e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e052      	b.n	80035d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0216 	bic.w	r2, r2, #22
 800353a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800354a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	2b00      	cmp	r3, #0
 8003552:	d103      	bne.n	800355c <HAL_DMA_Abort+0x62>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003558:	2b00      	cmp	r3, #0
 800355a:	d007      	beq.n	800356c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0208 	bic.w	r2, r2, #8
 800356a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800357c:	e013      	b.n	80035a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800357e:	f7ff fe6d 	bl	800325c <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b05      	cmp	r3, #5
 800358a:	d90c      	bls.n	80035a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2203      	movs	r2, #3
 8003596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e015      	b.n	80035d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e4      	bne.n	800357e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b8:	223f      	movs	r2, #63	; 0x3f
 80035ba:	409a      	lsls	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d004      	beq.n	80035f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2280      	movs	r2, #128	; 0x80
 80035f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e00c      	b.n	8003612 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2205      	movs	r2, #5
 80035fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003620:	b480      	push	{r7}
 8003622:	b089      	sub	sp, #36	; 0x24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	e165      	b.n	8003908 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800363c:	2201      	movs	r2, #1
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4013      	ands	r3, r2
 800364e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	429a      	cmp	r2, r3
 8003656:	f040 8154 	bne.w	8003902 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b01      	cmp	r3, #1
 8003664:	d005      	beq.n	8003672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800366e:	2b02      	cmp	r3, #2
 8003670:	d130      	bne.n	80036d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	2203      	movs	r2, #3
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4013      	ands	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036a8:	2201      	movs	r2, #1
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	f003 0201 	and.w	r2, r3, #1
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d017      	beq.n	8003710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	2203      	movs	r2, #3
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d123      	bne.n	8003764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	08da      	lsrs	r2, r3, #3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3208      	adds	r2, #8
 8003724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	220f      	movs	r2, #15
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	08da      	lsrs	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3208      	adds	r2, #8
 800375e:	69b9      	ldr	r1, [r7, #24]
 8003760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	2203      	movs	r2, #3
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0203 	and.w	r2, r3, #3
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80ae 	beq.w	8003902 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	4b5d      	ldr	r3, [pc, #372]	; (8003920 <HAL_GPIO_Init+0x300>)
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	4a5c      	ldr	r2, [pc, #368]	; (8003920 <HAL_GPIO_Init+0x300>)
 80037b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037b4:	6453      	str	r3, [r2, #68]	; 0x44
 80037b6:	4b5a      	ldr	r3, [pc, #360]	; (8003920 <HAL_GPIO_Init+0x300>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037c2:	4a58      	ldr	r2, [pc, #352]	; (8003924 <HAL_GPIO_Init+0x304>)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	3302      	adds	r3, #2
 80037ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	220f      	movs	r2, #15
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4013      	ands	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a4f      	ldr	r2, [pc, #316]	; (8003928 <HAL_GPIO_Init+0x308>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d025      	beq.n	800383a <HAL_GPIO_Init+0x21a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a4e      	ldr	r2, [pc, #312]	; (800392c <HAL_GPIO_Init+0x30c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d01f      	beq.n	8003836 <HAL_GPIO_Init+0x216>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a4d      	ldr	r2, [pc, #308]	; (8003930 <HAL_GPIO_Init+0x310>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d019      	beq.n	8003832 <HAL_GPIO_Init+0x212>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a4c      	ldr	r2, [pc, #304]	; (8003934 <HAL_GPIO_Init+0x314>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d013      	beq.n	800382e <HAL_GPIO_Init+0x20e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a4b      	ldr	r2, [pc, #300]	; (8003938 <HAL_GPIO_Init+0x318>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00d      	beq.n	800382a <HAL_GPIO_Init+0x20a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a4a      	ldr	r2, [pc, #296]	; (800393c <HAL_GPIO_Init+0x31c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d007      	beq.n	8003826 <HAL_GPIO_Init+0x206>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a49      	ldr	r2, [pc, #292]	; (8003940 <HAL_GPIO_Init+0x320>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <HAL_GPIO_Init+0x202>
 800381e:	2306      	movs	r3, #6
 8003820:	e00c      	b.n	800383c <HAL_GPIO_Init+0x21c>
 8003822:	2307      	movs	r3, #7
 8003824:	e00a      	b.n	800383c <HAL_GPIO_Init+0x21c>
 8003826:	2305      	movs	r3, #5
 8003828:	e008      	b.n	800383c <HAL_GPIO_Init+0x21c>
 800382a:	2304      	movs	r3, #4
 800382c:	e006      	b.n	800383c <HAL_GPIO_Init+0x21c>
 800382e:	2303      	movs	r3, #3
 8003830:	e004      	b.n	800383c <HAL_GPIO_Init+0x21c>
 8003832:	2302      	movs	r3, #2
 8003834:	e002      	b.n	800383c <HAL_GPIO_Init+0x21c>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_GPIO_Init+0x21c>
 800383a:	2300      	movs	r3, #0
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	f002 0203 	and.w	r2, r2, #3
 8003842:	0092      	lsls	r2, r2, #2
 8003844:	4093      	lsls	r3, r2
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4313      	orrs	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800384c:	4935      	ldr	r1, [pc, #212]	; (8003924 <HAL_GPIO_Init+0x304>)
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	089b      	lsrs	r3, r3, #2
 8003852:	3302      	adds	r3, #2
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800385a:	4b3a      	ldr	r3, [pc, #232]	; (8003944 <HAL_GPIO_Init+0x324>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	43db      	mvns	r3, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4013      	ands	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800387e:	4a31      	ldr	r2, [pc, #196]	; (8003944 <HAL_GPIO_Init+0x324>)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003884:	4b2f      	ldr	r3, [pc, #188]	; (8003944 <HAL_GPIO_Init+0x324>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	43db      	mvns	r3, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038a8:	4a26      	ldr	r2, [pc, #152]	; (8003944 <HAL_GPIO_Init+0x324>)
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038ae:	4b25      	ldr	r3, [pc, #148]	; (8003944 <HAL_GPIO_Init+0x324>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	43db      	mvns	r3, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4013      	ands	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038d2:	4a1c      	ldr	r2, [pc, #112]	; (8003944 <HAL_GPIO_Init+0x324>)
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038d8:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <HAL_GPIO_Init+0x324>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	43db      	mvns	r3, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4013      	ands	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038fc:	4a11      	ldr	r2, [pc, #68]	; (8003944 <HAL_GPIO_Init+0x324>)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3301      	adds	r3, #1
 8003906:	61fb      	str	r3, [r7, #28]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	2b0f      	cmp	r3, #15
 800390c:	f67f ae96 	bls.w	800363c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003910:	bf00      	nop
 8003912:	bf00      	nop
 8003914:	3724      	adds	r7, #36	; 0x24
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800
 8003924:	40013800 	.word	0x40013800
 8003928:	40020000 	.word	0x40020000
 800392c:	40020400 	.word	0x40020400
 8003930:	40020800 	.word	0x40020800
 8003934:	40020c00 	.word	0x40020c00
 8003938:	40021000 	.word	0x40021000
 800393c:	40021400 	.word	0x40021400
 8003940:	40021800 	.word	0x40021800
 8003944:	40013c00 	.word	0x40013c00

08003948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	807b      	strh	r3, [r7, #2]
 8003954:	4613      	mov	r3, r2
 8003956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003958:	787b      	ldrb	r3, [r7, #1]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800395e:	887a      	ldrh	r2, [r7, #2]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003964:	e003      	b.n	800396e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003966:	887b      	ldrh	r3, [r7, #2]
 8003968:	041a      	lsls	r2, r3, #16
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	619a      	str	r2, [r3, #24]
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
	...

0800397c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	4013      	ands	r3, r2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d006      	beq.n	80039a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003992:	4a05      	ldr	r2, [pc, #20]	; (80039a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003994:	88fb      	ldrh	r3, [r7, #6]
 8003996:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003998:	88fb      	ldrh	r3, [r7, #6]
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe facc 	bl	8001f38 <HAL_GPIO_EXTI_Callback>
  }
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40013c00 	.word	0x40013c00

080039ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0cc      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039c0:	4b68      	ldr	r3, [pc, #416]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d90c      	bls.n	80039e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ce:	4b65      	ldr	r3, [pc, #404]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d6:	4b63      	ldr	r3, [pc, #396]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d001      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0b8      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d020      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a00:	4b59      	ldr	r3, [pc, #356]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4a58      	ldr	r2, [pc, #352]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a18:	4b53      	ldr	r3, [pc, #332]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	4a52      	ldr	r2, [pc, #328]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a24:	4b50      	ldr	r3, [pc, #320]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	494d      	ldr	r1, [pc, #308]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d044      	beq.n	8003acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d107      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4a:	4b47      	ldr	r3, [pc, #284]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d119      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e07f      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d003      	beq.n	8003a6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6a:	4b3f      	ldr	r3, [pc, #252]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e06f      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7a:	4b3b      	ldr	r3, [pc, #236]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e067      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a8a:	4b37      	ldr	r3, [pc, #220]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f023 0203 	bic.w	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4934      	ldr	r1, [pc, #208]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a9c:	f7ff fbde 	bl	800325c <HAL_GetTick>
 8003aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa4:	f7ff fbda 	bl	800325c <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e04f      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aba:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 020c 	and.w	r2, r3, #12
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d1eb      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003acc:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d20c      	bcs.n	8003af4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ada:	4b22      	ldr	r3, [pc, #136]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae2:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d001      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e032      	b.n	8003b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b00:	4b19      	ldr	r3, [pc, #100]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4916      	ldr	r1, [pc, #88]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d009      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b1e:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	490e      	ldr	r1, [pc, #56]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b32:	f000 f855 	bl	8003be0 <HAL_RCC_GetSysClockFreq>
 8003b36:	4602      	mov	r2, r0
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	490a      	ldr	r1, [pc, #40]	; (8003b6c <HAL_RCC_ClockConfig+0x1c0>)
 8003b44:	5ccb      	ldrb	r3, [r1, r3]
 8003b46:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4a:	4a09      	ldr	r2, [pc, #36]	; (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <HAL_RCC_ClockConfig+0x1c8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff fb3e 	bl	80031d4 <HAL_InitTick>

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40023c00 	.word	0x40023c00
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	0800abac 	.word	0x0800abac
 8003b70:	20000054 	.word	0x20000054
 8003b74:	20000058 	.word	0x20000058

08003b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b7c:	4b03      	ldr	r3, [pc, #12]	; (8003b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	20000054 	.word	0x20000054

08003b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b94:	f7ff fff0 	bl	8003b78 <HAL_RCC_GetHCLKFreq>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	0a9b      	lsrs	r3, r3, #10
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	4903      	ldr	r1, [pc, #12]	; (8003bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ba6:	5ccb      	ldrb	r3, [r1, r3]
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	0800abbc 	.word	0x0800abbc

08003bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bbc:	f7ff ffdc 	bl	8003b78 <HAL_RCC_GetHCLKFreq>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	0b5b      	lsrs	r3, r3, #13
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	4903      	ldr	r1, [pc, #12]	; (8003bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bce:	5ccb      	ldrb	r3, [r1, r3]
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	0800abbc 	.word	0x0800abbc

08003be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003be4:	b0ae      	sub	sp, #184	; 0xb8
 8003be6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c06:	4bcb      	ldr	r3, [pc, #812]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b0c      	cmp	r3, #12
 8003c10:	f200 8206 	bhi.w	8004020 <HAL_RCC_GetSysClockFreq+0x440>
 8003c14:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1a:	bf00      	nop
 8003c1c:	08003c51 	.word	0x08003c51
 8003c20:	08004021 	.word	0x08004021
 8003c24:	08004021 	.word	0x08004021
 8003c28:	08004021 	.word	0x08004021
 8003c2c:	08003c59 	.word	0x08003c59
 8003c30:	08004021 	.word	0x08004021
 8003c34:	08004021 	.word	0x08004021
 8003c38:	08004021 	.word	0x08004021
 8003c3c:	08003c61 	.word	0x08003c61
 8003c40:	08004021 	.word	0x08004021
 8003c44:	08004021 	.word	0x08004021
 8003c48:	08004021 	.word	0x08004021
 8003c4c:	08003e51 	.word	0x08003e51
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c50:	4bb9      	ldr	r3, [pc, #740]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003c56:	e1e7      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c58:	4bb8      	ldr	r3, [pc, #736]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c5e:	e1e3      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c60:	4bb4      	ldr	r3, [pc, #720]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c6c:	4bb1      	ldr	r3, [pc, #708]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d071      	beq.n	8003d5c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c78:	4bae      	ldr	r3, [pc, #696]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	099b      	lsrs	r3, r3, #6
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c84:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c94:	2300      	movs	r3, #0
 8003c96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	462b      	mov	r3, r5
 8003ca2:	f04f 0000 	mov.w	r0, #0
 8003ca6:	f04f 0100 	mov.w	r1, #0
 8003caa:	0159      	lsls	r1, r3, #5
 8003cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cb0:	0150      	lsls	r0, r2, #5
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	1a51      	subs	r1, r2, r1
 8003cba:	6439      	str	r1, [r7, #64]	; 0x40
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003cd0:	4649      	mov	r1, r9
 8003cd2:	018b      	lsls	r3, r1, #6
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cda:	4641      	mov	r1, r8
 8003cdc:	018a      	lsls	r2, r1, #6
 8003cde:	4641      	mov	r1, r8
 8003ce0:	1a51      	subs	r1, r2, r1
 8003ce2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ce4:	4649      	mov	r1, r9
 8003ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8003cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003cf8:	4649      	mov	r1, r9
 8003cfa:	00cb      	lsls	r3, r1, #3
 8003cfc:	4641      	mov	r1, r8
 8003cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d02:	4641      	mov	r1, r8
 8003d04:	00ca      	lsls	r2, r1, #3
 8003d06:	4610      	mov	r0, r2
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4622      	mov	r2, r4
 8003d0e:	189b      	adds	r3, r3, r2
 8003d10:	633b      	str	r3, [r7, #48]	; 0x30
 8003d12:	462b      	mov	r3, r5
 8003d14:	460a      	mov	r2, r1
 8003d16:	eb42 0303 	adc.w	r3, r2, r3
 8003d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d28:	4629      	mov	r1, r5
 8003d2a:	024b      	lsls	r3, r1, #9
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d32:	4621      	mov	r1, r4
 8003d34:	024a      	lsls	r2, r1, #9
 8003d36:	4610      	mov	r0, r2
 8003d38:	4619      	mov	r1, r3
 8003d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d48:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003d4c:	f7fc ffcc 	bl	8000ce8 <__aeabi_uldivmod>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4613      	mov	r3, r2
 8003d56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d5a:	e067      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d5c:	4b75      	ldr	r3, [pc, #468]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	099b      	lsrs	r3, r3, #6
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d68:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003d6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d74:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d76:	2300      	movs	r3, #0
 8003d78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d7a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003d7e:	4622      	mov	r2, r4
 8003d80:	462b      	mov	r3, r5
 8003d82:	f04f 0000 	mov.w	r0, #0
 8003d86:	f04f 0100 	mov.w	r1, #0
 8003d8a:	0159      	lsls	r1, r3, #5
 8003d8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d90:	0150      	lsls	r0, r2, #5
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4621      	mov	r1, r4
 8003d98:	1a51      	subs	r1, r2, r1
 8003d9a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003db0:	4649      	mov	r1, r9
 8003db2:	018b      	lsls	r3, r1, #6
 8003db4:	4641      	mov	r1, r8
 8003db6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dba:	4641      	mov	r1, r8
 8003dbc:	018a      	lsls	r2, r1, #6
 8003dbe:	4641      	mov	r1, r8
 8003dc0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dc4:	4649      	mov	r1, r9
 8003dc6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dd6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dde:	4692      	mov	sl, r2
 8003de0:	469b      	mov	fp, r3
 8003de2:	4623      	mov	r3, r4
 8003de4:	eb1a 0303 	adds.w	r3, sl, r3
 8003de8:	623b      	str	r3, [r7, #32]
 8003dea:	462b      	mov	r3, r5
 8003dec:	eb4b 0303 	adc.w	r3, fp, r3
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003dfe:	4629      	mov	r1, r5
 8003e00:	028b      	lsls	r3, r1, #10
 8003e02:	4621      	mov	r1, r4
 8003e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e08:	4621      	mov	r1, r4
 8003e0a:	028a      	lsls	r2, r1, #10
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	4619      	mov	r1, r3
 8003e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e14:	2200      	movs	r2, #0
 8003e16:	673b      	str	r3, [r7, #112]	; 0x70
 8003e18:	677a      	str	r2, [r7, #116]	; 0x74
 8003e1a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003e1e:	f7fc ff63 	bl	8000ce8 <__aeabi_uldivmod>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4613      	mov	r3, r2
 8003e28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e2c:	4b41      	ldr	r3, [pc, #260]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	0c1b      	lsrs	r3, r3, #16
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	3301      	adds	r3, #1
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003e3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e4e:	e0eb      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e50:	4b38      	ldr	r3, [pc, #224]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e5c:	4b35      	ldr	r3, [pc, #212]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d06b      	beq.n	8003f40 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e68:	4b32      	ldr	r3, [pc, #200]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	099b      	lsrs	r3, r3, #6
 8003e6e:	2200      	movs	r2, #0
 8003e70:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	667b      	str	r3, [r7, #100]	; 0x64
 8003e80:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003e84:	4622      	mov	r2, r4
 8003e86:	462b      	mov	r3, r5
 8003e88:	f04f 0000 	mov.w	r0, #0
 8003e8c:	f04f 0100 	mov.w	r1, #0
 8003e90:	0159      	lsls	r1, r3, #5
 8003e92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e96:	0150      	lsls	r0, r2, #5
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	1a51      	subs	r1, r2, r1
 8003ea0:	61b9      	str	r1, [r7, #24]
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	eb63 0301 	sbc.w	r3, r3, r1
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003eb6:	4659      	mov	r1, fp
 8003eb8:	018b      	lsls	r3, r1, #6
 8003eba:	4651      	mov	r1, sl
 8003ebc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ec0:	4651      	mov	r1, sl
 8003ec2:	018a      	lsls	r2, r1, #6
 8003ec4:	4651      	mov	r1, sl
 8003ec6:	ebb2 0801 	subs.w	r8, r2, r1
 8003eca:	4659      	mov	r1, fp
 8003ecc:	eb63 0901 	sbc.w	r9, r3, r1
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003edc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ee0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ee4:	4690      	mov	r8, r2
 8003ee6:	4699      	mov	r9, r3
 8003ee8:	4623      	mov	r3, r4
 8003eea:	eb18 0303 	adds.w	r3, r8, r3
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	462b      	mov	r3, r5
 8003ef2:	eb49 0303 	adc.w	r3, r9, r3
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f04:	4629      	mov	r1, r5
 8003f06:	024b      	lsls	r3, r1, #9
 8003f08:	4621      	mov	r1, r4
 8003f0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f0e:	4621      	mov	r1, r4
 8003f10:	024a      	lsls	r2, r1, #9
 8003f12:	4610      	mov	r0, r2
 8003f14:	4619      	mov	r1, r3
 8003f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f1e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f24:	f7fc fee0 	bl	8000ce8 <__aeabi_uldivmod>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f32:	e065      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x420>
 8003f34:	40023800 	.word	0x40023800
 8003f38:	00f42400 	.word	0x00f42400
 8003f3c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f40:	4b3d      	ldr	r3, [pc, #244]	; (8004038 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	099b      	lsrs	r3, r3, #6
 8003f46:	2200      	movs	r2, #0
 8003f48:	4618      	mov	r0, r3
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f50:	653b      	str	r3, [r7, #80]	; 0x50
 8003f52:	2300      	movs	r3, #0
 8003f54:	657b      	str	r3, [r7, #84]	; 0x54
 8003f56:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003f5a:	4642      	mov	r2, r8
 8003f5c:	464b      	mov	r3, r9
 8003f5e:	f04f 0000 	mov.w	r0, #0
 8003f62:	f04f 0100 	mov.w	r1, #0
 8003f66:	0159      	lsls	r1, r3, #5
 8003f68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f6c:	0150      	lsls	r0, r2, #5
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4641      	mov	r1, r8
 8003f74:	1a51      	subs	r1, r2, r1
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	4649      	mov	r1, r9
 8003f7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003f8c:	4659      	mov	r1, fp
 8003f8e:	018b      	lsls	r3, r1, #6
 8003f90:	4651      	mov	r1, sl
 8003f92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f96:	4651      	mov	r1, sl
 8003f98:	018a      	lsls	r2, r1, #6
 8003f9a:	4651      	mov	r1, sl
 8003f9c:	1a54      	subs	r4, r2, r1
 8003f9e:	4659      	mov	r1, fp
 8003fa0:	eb63 0501 	sbc.w	r5, r3, r1
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	00eb      	lsls	r3, r5, #3
 8003fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fb2:	00e2      	lsls	r2, r4, #3
 8003fb4:	4614      	mov	r4, r2
 8003fb6:	461d      	mov	r5, r3
 8003fb8:	4643      	mov	r3, r8
 8003fba:	18e3      	adds	r3, r4, r3
 8003fbc:	603b      	str	r3, [r7, #0]
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	eb45 0303 	adc.w	r3, r5, r3
 8003fc4:	607b      	str	r3, [r7, #4]
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	028b      	lsls	r3, r1, #10
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fdc:	4621      	mov	r1, r4
 8003fde:	028a      	lsls	r2, r1, #10
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fe8:	2200      	movs	r2, #0
 8003fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fec:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003fee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ff2:	f7fc fe79 	bl	8000ce8 <__aeabi_uldivmod>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004000:	4b0d      	ldr	r3, [pc, #52]	; (8004038 <HAL_RCC_GetSysClockFreq+0x458>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	0f1b      	lsrs	r3, r3, #28
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800400e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004012:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004016:	fbb2 f3f3 	udiv	r3, r2, r3
 800401a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800401e:	e003      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004026:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004028:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800402c:	4618      	mov	r0, r3
 800402e:	37b8      	adds	r7, #184	; 0xb8
 8004030:	46bd      	mov	sp, r7
 8004032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004036:	bf00      	nop
 8004038:	40023800 	.word	0x40023800
 800403c:	00f42400 	.word	0x00f42400

08004040 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e28d      	b.n	800456e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 8083 	beq.w	8004166 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004060:	4b94      	ldr	r3, [pc, #592]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 030c 	and.w	r3, r3, #12
 8004068:	2b04      	cmp	r3, #4
 800406a:	d019      	beq.n	80040a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800406c:	4b91      	ldr	r3, [pc, #580]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004074:	2b08      	cmp	r3, #8
 8004076:	d106      	bne.n	8004086 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004078:	4b8e      	ldr	r3, [pc, #568]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004084:	d00c      	beq.n	80040a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004086:	4b8b      	ldr	r3, [pc, #556]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800408e:	2b0c      	cmp	r3, #12
 8004090:	d112      	bne.n	80040b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004092:	4b88      	ldr	r3, [pc, #544]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800409e:	d10b      	bne.n	80040b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a0:	4b84      	ldr	r3, [pc, #528]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d05b      	beq.n	8004164 <HAL_RCC_OscConfig+0x124>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d157      	bne.n	8004164 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e25a      	b.n	800456e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c0:	d106      	bne.n	80040d0 <HAL_RCC_OscConfig+0x90>
 80040c2:	4b7c      	ldr	r3, [pc, #496]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a7b      	ldr	r2, [pc, #492]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 80040c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	e01d      	b.n	800410c <HAL_RCC_OscConfig+0xcc>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCC_OscConfig+0xb4>
 80040da:	4b76      	ldr	r3, [pc, #472]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a75      	ldr	r2, [pc, #468]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 80040e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	4b73      	ldr	r3, [pc, #460]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a72      	ldr	r2, [pc, #456]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 80040ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e00b      	b.n	800410c <HAL_RCC_OscConfig+0xcc>
 80040f4:	4b6f      	ldr	r3, [pc, #444]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a6e      	ldr	r2, [pc, #440]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 80040fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	4b6c      	ldr	r3, [pc, #432]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a6b      	ldr	r2, [pc, #428]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 8004106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800410a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d013      	beq.n	800413c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7ff f8a2 	bl	800325c <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800411c:	f7ff f89e 	bl	800325c <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b64      	cmp	r3, #100	; 0x64
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e21f      	b.n	800456e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412e:	4b61      	ldr	r3, [pc, #388]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0xdc>
 800413a:	e014      	b.n	8004166 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7ff f88e 	bl	800325c <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004144:	f7ff f88a 	bl	800325c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b64      	cmp	r3, #100	; 0x64
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e20b      	b.n	800456e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004156:	4b57      	ldr	r3, [pc, #348]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x104>
 8004162:	e000      	b.n	8004166 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d06f      	beq.n	8004252 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004172:	4b50      	ldr	r3, [pc, #320]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
 800417a:	2b00      	cmp	r3, #0
 800417c:	d017      	beq.n	80041ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800417e:	4b4d      	ldr	r3, [pc, #308]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004186:	2b08      	cmp	r3, #8
 8004188:	d105      	bne.n	8004196 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800418a:	4b4a      	ldr	r3, [pc, #296]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00b      	beq.n	80041ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004196:	4b47      	ldr	r3, [pc, #284]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800419e:	2b0c      	cmp	r3, #12
 80041a0:	d11c      	bne.n	80041dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041a2:	4b44      	ldr	r3, [pc, #272]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d116      	bne.n	80041dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ae:	4b41      	ldr	r3, [pc, #260]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d005      	beq.n	80041c6 <HAL_RCC_OscConfig+0x186>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d001      	beq.n	80041c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e1d3      	b.n	800456e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c6:	4b3b      	ldr	r3, [pc, #236]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4937      	ldr	r1, [pc, #220]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041da:	e03a      	b.n	8004252 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d020      	beq.n	8004226 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041e4:	4b34      	ldr	r3, [pc, #208]	; (80042b8 <HAL_RCC_OscConfig+0x278>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ea:	f7ff f837 	bl	800325c <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041f2:	f7ff f833 	bl	800325c <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e1b4      	b.n	800456e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004204:	4b2b      	ldr	r3, [pc, #172]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0f0      	beq.n	80041f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004210:	4b28      	ldr	r3, [pc, #160]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	4925      	ldr	r1, [pc, #148]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 8004220:	4313      	orrs	r3, r2
 8004222:	600b      	str	r3, [r1, #0]
 8004224:	e015      	b.n	8004252 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004226:	4b24      	ldr	r3, [pc, #144]	; (80042b8 <HAL_RCC_OscConfig+0x278>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7ff f816 	bl	800325c <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004234:	f7ff f812 	bl	800325c <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e193      	b.n	800456e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004246:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d036      	beq.n	80042cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d016      	beq.n	8004294 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004266:	4b15      	ldr	r3, [pc, #84]	; (80042bc <HAL_RCC_OscConfig+0x27c>)
 8004268:	2201      	movs	r2, #1
 800426a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426c:	f7fe fff6 	bl	800325c <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004274:	f7fe fff2 	bl	800325c <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e173      	b.n	800456e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 8004288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0x234>
 8004292:	e01b      	b.n	80042cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004294:	4b09      	ldr	r3, [pc, #36]	; (80042bc <HAL_RCC_OscConfig+0x27c>)
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429a:	f7fe ffdf 	bl	800325c <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a0:	e00e      	b.n	80042c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a2:	f7fe ffdb 	bl	800325c <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d907      	bls.n	80042c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e15c      	b.n	800456e <HAL_RCC_OscConfig+0x52e>
 80042b4:	40023800 	.word	0x40023800
 80042b8:	42470000 	.word	0x42470000
 80042bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c0:	4b8a      	ldr	r3, [pc, #552]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 80042c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1ea      	bne.n	80042a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 8097 	beq.w	8004408 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042da:	2300      	movs	r3, #0
 80042dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042de:	4b83      	ldr	r3, [pc, #524]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10f      	bne.n	800430a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	4b7f      	ldr	r3, [pc, #508]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	4a7e      	ldr	r2, [pc, #504]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 80042f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f8:	6413      	str	r3, [r2, #64]	; 0x40
 80042fa:	4b7c      	ldr	r3, [pc, #496]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004306:	2301      	movs	r3, #1
 8004308:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430a:	4b79      	ldr	r3, [pc, #484]	; (80044f0 <HAL_RCC_OscConfig+0x4b0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d118      	bne.n	8004348 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004316:	4b76      	ldr	r3, [pc, #472]	; (80044f0 <HAL_RCC_OscConfig+0x4b0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a75      	ldr	r2, [pc, #468]	; (80044f0 <HAL_RCC_OscConfig+0x4b0>)
 800431c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004322:	f7fe ff9b 	bl	800325c <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800432a:	f7fe ff97 	bl	800325c <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e118      	b.n	800456e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433c:	4b6c      	ldr	r3, [pc, #432]	; (80044f0 <HAL_RCC_OscConfig+0x4b0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f0      	beq.n	800432a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d106      	bne.n	800435e <HAL_RCC_OscConfig+0x31e>
 8004350:	4b66      	ldr	r3, [pc, #408]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	4a65      	ldr	r2, [pc, #404]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 8004356:	f043 0301 	orr.w	r3, r3, #1
 800435a:	6713      	str	r3, [r2, #112]	; 0x70
 800435c:	e01c      	b.n	8004398 <HAL_RCC_OscConfig+0x358>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	2b05      	cmp	r3, #5
 8004364:	d10c      	bne.n	8004380 <HAL_RCC_OscConfig+0x340>
 8004366:	4b61      	ldr	r3, [pc, #388]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 8004368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436a:	4a60      	ldr	r2, [pc, #384]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 800436c:	f043 0304 	orr.w	r3, r3, #4
 8004370:	6713      	str	r3, [r2, #112]	; 0x70
 8004372:	4b5e      	ldr	r3, [pc, #376]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 8004374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004376:	4a5d      	ldr	r2, [pc, #372]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	6713      	str	r3, [r2, #112]	; 0x70
 800437e:	e00b      	b.n	8004398 <HAL_RCC_OscConfig+0x358>
 8004380:	4b5a      	ldr	r3, [pc, #360]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004384:	4a59      	ldr	r2, [pc, #356]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 8004386:	f023 0301 	bic.w	r3, r3, #1
 800438a:	6713      	str	r3, [r2, #112]	; 0x70
 800438c:	4b57      	ldr	r3, [pc, #348]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 800438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004390:	4a56      	ldr	r2, [pc, #344]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 8004392:	f023 0304 	bic.w	r3, r3, #4
 8004396:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d015      	beq.n	80043cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a0:	f7fe ff5c 	bl	800325c <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a6:	e00a      	b.n	80043be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a8:	f7fe ff58 	bl	800325c <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e0d7      	b.n	800456e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043be:	4b4b      	ldr	r3, [pc, #300]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0ee      	beq.n	80043a8 <HAL_RCC_OscConfig+0x368>
 80043ca:	e014      	b.n	80043f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043cc:	f7fe ff46 	bl	800325c <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043d2:	e00a      	b.n	80043ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d4:	f7fe ff42 	bl	800325c <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e0c1      	b.n	800456e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ea:	4b40      	ldr	r3, [pc, #256]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1ee      	bne.n	80043d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043f6:	7dfb      	ldrb	r3, [r7, #23]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d105      	bne.n	8004408 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043fc:	4b3b      	ldr	r3, [pc, #236]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	4a3a      	ldr	r2, [pc, #232]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 8004402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004406:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 80ad 	beq.w	800456c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004412:	4b36      	ldr	r3, [pc, #216]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b08      	cmp	r3, #8
 800441c:	d060      	beq.n	80044e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d145      	bne.n	80044b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004426:	4b33      	ldr	r3, [pc, #204]	; (80044f4 <HAL_RCC_OscConfig+0x4b4>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7fe ff16 	bl	800325c <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004434:	f7fe ff12 	bl	800325c <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e093      	b.n	800456e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004446:	4b29      	ldr	r3, [pc, #164]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69da      	ldr	r2, [r3, #28]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	019b      	lsls	r3, r3, #6
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	085b      	lsrs	r3, r3, #1
 800446a:	3b01      	subs	r3, #1
 800446c:	041b      	lsls	r3, r3, #16
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	061b      	lsls	r3, r3, #24
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	071b      	lsls	r3, r3, #28
 800447e:	491b      	ldr	r1, [pc, #108]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 8004480:	4313      	orrs	r3, r2
 8004482:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004484:	4b1b      	ldr	r3, [pc, #108]	; (80044f4 <HAL_RCC_OscConfig+0x4b4>)
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448a:	f7fe fee7 	bl	800325c <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004492:	f7fe fee3 	bl	800325c <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e064      	b.n	800456e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a4:	4b11      	ldr	r3, [pc, #68]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0f0      	beq.n	8004492 <HAL_RCC_OscConfig+0x452>
 80044b0:	e05c      	b.n	800456c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b2:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <HAL_RCC_OscConfig+0x4b4>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b8:	f7fe fed0 	bl	800325c <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c0:	f7fe fecc 	bl	800325c <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e04d      	b.n	800456e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d2:	4b06      	ldr	r3, [pc, #24]	; (80044ec <HAL_RCC_OscConfig+0x4ac>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f0      	bne.n	80044c0 <HAL_RCC_OscConfig+0x480>
 80044de:	e045      	b.n	800456c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d107      	bne.n	80044f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e040      	b.n	800456e <HAL_RCC_OscConfig+0x52e>
 80044ec:	40023800 	.word	0x40023800
 80044f0:	40007000 	.word	0x40007000
 80044f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044f8:	4b1f      	ldr	r3, [pc, #124]	; (8004578 <HAL_RCC_OscConfig+0x538>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d030      	beq.n	8004568 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d129      	bne.n	8004568 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451e:	429a      	cmp	r2, r3
 8004520:	d122      	bne.n	8004568 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004528:	4013      	ands	r3, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800452e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004530:	4293      	cmp	r3, r2
 8004532:	d119      	bne.n	8004568 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453e:	085b      	lsrs	r3, r3, #1
 8004540:	3b01      	subs	r3, #1
 8004542:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004544:	429a      	cmp	r2, r3
 8004546:	d10f      	bne.n	8004568 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004554:	429a      	cmp	r2, r3
 8004556:	d107      	bne.n	8004568 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d001      	beq.n	800456c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e000      	b.n	800456e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40023800 	.word	0x40023800

0800457c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e07b      	b.n	8004686 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	2b00      	cmp	r3, #0
 8004594:	d108      	bne.n	80045a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800459e:	d009      	beq.n	80045b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	61da      	str	r2, [r3, #28]
 80045a6:	e005      	b.n	80045b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d106      	bne.n	80045d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fe fb60 	bl	8002c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004638:	ea42 0103 	orr.w	r1, r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	0c1b      	lsrs	r3, r3, #16
 8004652:	f003 0104 	and.w	r1, r3, #4
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	f003 0210 	and.w	r2, r3, #16
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004674:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b088      	sub	sp, #32
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	603b      	str	r3, [r7, #0]
 800469a:	4613      	mov	r3, r2
 800469c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_SPI_Transmit+0x22>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e126      	b.n	80048fe <HAL_SPI_Transmit+0x270>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046b8:	f7fe fdd0 	bl	800325c <HAL_GetTick>
 80046bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80046be:	88fb      	ldrh	r3, [r7, #6]
 80046c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d002      	beq.n	80046d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80046ce:	2302      	movs	r3, #2
 80046d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046d2:	e10b      	b.n	80048ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <HAL_SPI_Transmit+0x52>
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d102      	bne.n	80046e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046e4:	e102      	b.n	80048ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2203      	movs	r2, #3
 80046ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	88fa      	ldrh	r2, [r7, #6]
 80046fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	88fa      	ldrh	r2, [r7, #6]
 8004704:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800472c:	d10f      	bne.n	800474e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800473c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800474c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d007      	beq.n	800476c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800476a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004774:	d14b      	bne.n	800480e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_SPI_Transmit+0xf6>
 800477e:	8afb      	ldrh	r3, [r7, #22]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d13e      	bne.n	8004802 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	881a      	ldrh	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	1c9a      	adds	r2, r3, #2
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047a8:	e02b      	b.n	8004802 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d112      	bne.n	80047de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047bc:	881a      	ldrh	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	1c9a      	adds	r2, r3, #2
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	86da      	strh	r2, [r3, #54]	; 0x36
 80047dc:	e011      	b.n	8004802 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047de:	f7fe fd3d 	bl	800325c <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d803      	bhi.n	80047f6 <HAL_SPI_Transmit+0x168>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f4:	d102      	bne.n	80047fc <HAL_SPI_Transmit+0x16e>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d102      	bne.n	8004802 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004800:	e074      	b.n	80048ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1ce      	bne.n	80047aa <HAL_SPI_Transmit+0x11c>
 800480c:	e04c      	b.n	80048a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_SPI_Transmit+0x18e>
 8004816:	8afb      	ldrh	r3, [r7, #22]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d140      	bne.n	800489e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	330c      	adds	r3, #12
 8004826:	7812      	ldrb	r2, [r2, #0]
 8004828:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004838:	b29b      	uxth	r3, r3
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004842:	e02c      	b.n	800489e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b02      	cmp	r3, #2
 8004850:	d113      	bne.n	800487a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	7812      	ldrb	r2, [r2, #0]
 800485e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800486e:	b29b      	uxth	r3, r3
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	86da      	strh	r2, [r3, #54]	; 0x36
 8004878:	e011      	b.n	800489e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800487a:	f7fe fcef 	bl	800325c <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d803      	bhi.n	8004892 <HAL_SPI_Transmit+0x204>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004890:	d102      	bne.n	8004898 <HAL_SPI_Transmit+0x20a>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d102      	bne.n	800489e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800489c:	e026      	b.n	80048ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1cd      	bne.n	8004844 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	6839      	ldr	r1, [r7, #0]
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 f8b3 	bl	8004a18 <SPI_EndRxTxTransaction>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10a      	bne.n	80048dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048c6:	2300      	movs	r3, #0
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	e000      	b.n	80048ec <HAL_SPI_Transmit+0x25e>
  }

error:
 80048ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3720      	adds	r7, #32
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	4613      	mov	r3, r2
 8004916:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004918:	f7fe fca0 	bl	800325c <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	4413      	add	r3, r2
 8004926:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004928:	f7fe fc98 	bl	800325c <HAL_GetTick>
 800492c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800492e:	4b39      	ldr	r3, [pc, #228]	; (8004a14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	015b      	lsls	r3, r3, #5
 8004934:	0d1b      	lsrs	r3, r3, #20
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	fb02 f303 	mul.w	r3, r2, r3
 800493c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800493e:	e054      	b.n	80049ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004946:	d050      	beq.n	80049ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004948:	f7fe fc88 	bl	800325c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	429a      	cmp	r2, r3
 8004956:	d902      	bls.n	800495e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d13d      	bne.n	80049da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800496c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004976:	d111      	bne.n	800499c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004980:	d004      	beq.n	800498c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800498a:	d107      	bne.n	800499c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800499a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a4:	d10f      	bne.n	80049c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e017      	b.n	8004a0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4013      	ands	r3, r2
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	bf0c      	ite	eq
 80049fa:	2301      	moveq	r3, #1
 80049fc:	2300      	movne	r3, #0
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	461a      	mov	r2, r3
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d19b      	bne.n	8004940 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3720      	adds	r7, #32
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000054 	.word	0x20000054

08004a18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a24:	4b1b      	ldr	r3, [pc, #108]	; (8004a94 <SPI_EndRxTxTransaction+0x7c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a1b      	ldr	r2, [pc, #108]	; (8004a98 <SPI_EndRxTxTransaction+0x80>)
 8004a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2e:	0d5b      	lsrs	r3, r3, #21
 8004a30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a34:	fb02 f303 	mul.w	r3, r2, r3
 8004a38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a42:	d112      	bne.n	8004a6a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	2180      	movs	r1, #128	; 0x80
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f7ff ff5a 	bl	8004908 <SPI_WaitFlagStateUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d016      	beq.n	8004a88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5e:	f043 0220 	orr.w	r2, r3, #32
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e00f      	b.n	8004a8a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a80:	2b80      	cmp	r3, #128	; 0x80
 8004a82:	d0f2      	beq.n	8004a6a <SPI_EndRxTxTransaction+0x52>
 8004a84:	e000      	b.n	8004a88 <SPI_EndRxTxTransaction+0x70>
        break;
 8004a86:	bf00      	nop
  }

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000054 	.word	0x20000054
 8004a98:	165e9f81 	.word	0x165e9f81

08004a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e041      	b.n	8004b32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fe f97c 	bl	8002dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	f000 fb04 	bl	80050e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d001      	beq.n	8004b54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e046      	b.n	8004be2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a23      	ldr	r2, [pc, #140]	; (8004bf0 <HAL_TIM_Base_Start+0xb4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d022      	beq.n	8004bac <HAL_TIM_Base_Start+0x70>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b6e:	d01d      	beq.n	8004bac <HAL_TIM_Base_Start+0x70>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1f      	ldr	r2, [pc, #124]	; (8004bf4 <HAL_TIM_Base_Start+0xb8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d018      	beq.n	8004bac <HAL_TIM_Base_Start+0x70>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1e      	ldr	r2, [pc, #120]	; (8004bf8 <HAL_TIM_Base_Start+0xbc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d013      	beq.n	8004bac <HAL_TIM_Base_Start+0x70>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1c      	ldr	r2, [pc, #112]	; (8004bfc <HAL_TIM_Base_Start+0xc0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00e      	beq.n	8004bac <HAL_TIM_Base_Start+0x70>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1b      	ldr	r2, [pc, #108]	; (8004c00 <HAL_TIM_Base_Start+0xc4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d009      	beq.n	8004bac <HAL_TIM_Base_Start+0x70>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a19      	ldr	r2, [pc, #100]	; (8004c04 <HAL_TIM_Base_Start+0xc8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d004      	beq.n	8004bac <HAL_TIM_Base_Start+0x70>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a18      	ldr	r2, [pc, #96]	; (8004c08 <HAL_TIM_Base_Start+0xcc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d111      	bne.n	8004bd0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b06      	cmp	r3, #6
 8004bbc:	d010      	beq.n	8004be0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0201 	orr.w	r2, r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bce:	e007      	b.n	8004be0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40010000 	.word	0x40010000
 8004bf4:	40000400 	.word	0x40000400
 8004bf8:	40000800 	.word	0x40000800
 8004bfc:	40000c00 	.word	0x40000c00
 8004c00:	40010400 	.word	0x40010400
 8004c04:	40014000 	.word	0x40014000
 8004c08:	40001800 	.word	0x40001800

08004c0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e097      	b.n	8004d50 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d106      	bne.n	8004c3a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7fe f875 	bl	8002d24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c50:	f023 0307 	bic.w	r3, r3, #7
 8004c54:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4610      	mov	r0, r2
 8004c62:	f000 fa41 	bl	80050e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c8e:	f023 0303 	bic.w	r3, r3, #3
 8004c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	021b      	lsls	r3, r3, #8
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004cac:	f023 030c 	bic.w	r3, r3, #12
 8004cb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	011a      	lsls	r2, r3, #4
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	031b      	lsls	r3, r3, #12
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004cea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004cf2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d110      	bne.n	8004daa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d102      	bne.n	8004d94 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d8e:	7b7b      	ldrb	r3, [r7, #13]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d001      	beq.n	8004d98 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e069      	b.n	8004e6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004da8:	e031      	b.n	8004e0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d110      	bne.n	8004dd2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004db0:	7bbb      	ldrb	r3, [r7, #14]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d102      	bne.n	8004dbc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004db6:	7b3b      	ldrb	r3, [r7, #12]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d001      	beq.n	8004dc0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e055      	b.n	8004e6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dd0:	e01d      	b.n	8004e0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d108      	bne.n	8004dea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dd8:	7bbb      	ldrb	r3, [r7, #14]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d105      	bne.n	8004dea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dde:	7b7b      	ldrb	r3, [r7, #13]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d102      	bne.n	8004dea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004de4:	7b3b      	ldrb	r3, [r7, #12]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d001      	beq.n	8004dee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e03e      	b.n	8004e6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2202      	movs	r2, #2
 8004df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2202      	movs	r2, #2
 8004dfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2202      	movs	r2, #2
 8004e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <HAL_TIM_Encoder_Start+0xc4>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d008      	beq.n	8004e2c <HAL_TIM_Encoder_Start+0xd4>
 8004e1a:	e00f      	b.n	8004e3c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2201      	movs	r2, #1
 8004e22:	2100      	movs	r1, #0
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 f9ff 	bl	8005228 <TIM_CCxChannelCmd>
      break;
 8004e2a:	e016      	b.n	8004e5a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2201      	movs	r2, #1
 8004e32:	2104      	movs	r1, #4
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 f9f7 	bl	8005228 <TIM_CCxChannelCmd>
      break;
 8004e3a:	e00e      	b.n	8004e5a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2201      	movs	r2, #1
 8004e42:	2100      	movs	r1, #0
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 f9ef 	bl	8005228 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	2104      	movs	r1, #4
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 f9e8 	bl	8005228 <TIM_CCxChannelCmd>
      break;
 8004e58:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0201 	orr.w	r2, r2, #1
 8004e68:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d122      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d11b      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0202 	mvn.w	r2, #2
 8004ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f8f8 	bl	80050ac <HAL_TIM_IC_CaptureCallback>
 8004ebc:	e005      	b.n	8004eca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f8ea 	bl	8005098 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f8fb 	bl	80050c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d122      	bne.n	8004f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d11b      	bne.n	8004f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0204 	mvn.w	r2, #4
 8004ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f8ce 	bl	80050ac <HAL_TIM_IC_CaptureCallback>
 8004f10:	e005      	b.n	8004f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f8c0 	bl	8005098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f8d1 	bl	80050c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d122      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d11b      	bne.n	8004f78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0208 	mvn.w	r2, #8
 8004f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2204      	movs	r2, #4
 8004f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f8a4 	bl	80050ac <HAL_TIM_IC_CaptureCallback>
 8004f64:	e005      	b.n	8004f72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f896 	bl	8005098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f8a7 	bl	80050c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	2b10      	cmp	r3, #16
 8004f84:	d122      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	2b10      	cmp	r3, #16
 8004f92:	d11b      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0210 	mvn.w	r2, #16
 8004f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2208      	movs	r2, #8
 8004fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f87a 	bl	80050ac <HAL_TIM_IC_CaptureCallback>
 8004fb8:	e005      	b.n	8004fc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f86c 	bl	8005098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f87d 	bl	80050c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d10e      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d107      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0201 	mvn.w	r2, #1
 8004ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f846 	bl	8005084 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005002:	2b80      	cmp	r3, #128	; 0x80
 8005004:	d10e      	bne.n	8005024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005010:	2b80      	cmp	r3, #128	; 0x80
 8005012:	d107      	bne.n	8005024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800501c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f9ae 	bl	8005380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502e:	2b40      	cmp	r3, #64	; 0x40
 8005030:	d10e      	bne.n	8005050 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503c:	2b40      	cmp	r3, #64	; 0x40
 800503e:	d107      	bne.n	8005050 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f842 	bl	80050d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b20      	cmp	r3, #32
 800505c:	d10e      	bne.n	800507c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b20      	cmp	r3, #32
 800506a:	d107      	bne.n	800507c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0220 	mvn.w	r2, #32
 8005074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f978 	bl	800536c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800507c:	bf00      	nop
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a40      	ldr	r2, [pc, #256]	; (80051fc <TIM_Base_SetConfig+0x114>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d013      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005106:	d00f      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a3d      	ldr	r2, [pc, #244]	; (8005200 <TIM_Base_SetConfig+0x118>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00b      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a3c      	ldr	r2, [pc, #240]	; (8005204 <TIM_Base_SetConfig+0x11c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d007      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a3b      	ldr	r2, [pc, #236]	; (8005208 <TIM_Base_SetConfig+0x120>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d003      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a3a      	ldr	r2, [pc, #232]	; (800520c <TIM_Base_SetConfig+0x124>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d108      	bne.n	800513a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a2f      	ldr	r2, [pc, #188]	; (80051fc <TIM_Base_SetConfig+0x114>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d02b      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005148:	d027      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a2c      	ldr	r2, [pc, #176]	; (8005200 <TIM_Base_SetConfig+0x118>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d023      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a2b      	ldr	r2, [pc, #172]	; (8005204 <TIM_Base_SetConfig+0x11c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d01f      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a2a      	ldr	r2, [pc, #168]	; (8005208 <TIM_Base_SetConfig+0x120>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d01b      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a29      	ldr	r2, [pc, #164]	; (800520c <TIM_Base_SetConfig+0x124>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d017      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a28      	ldr	r2, [pc, #160]	; (8005210 <TIM_Base_SetConfig+0x128>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d013      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a27      	ldr	r2, [pc, #156]	; (8005214 <TIM_Base_SetConfig+0x12c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00f      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a26      	ldr	r2, [pc, #152]	; (8005218 <TIM_Base_SetConfig+0x130>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00b      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a25      	ldr	r2, [pc, #148]	; (800521c <TIM_Base_SetConfig+0x134>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d007      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a24      	ldr	r2, [pc, #144]	; (8005220 <TIM_Base_SetConfig+0x138>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d003      	beq.n	800519a <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a23      	ldr	r2, [pc, #140]	; (8005224 <TIM_Base_SetConfig+0x13c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d108      	bne.n	80051ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <TIM_Base_SetConfig+0x114>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d003      	beq.n	80051e0 <TIM_Base_SetConfig+0xf8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a0c      	ldr	r2, [pc, #48]	; (800520c <TIM_Base_SetConfig+0x124>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d103      	bne.n	80051e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	615a      	str	r2, [r3, #20]
}
 80051ee:	bf00      	nop
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40010000 	.word	0x40010000
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800
 8005208:	40000c00 	.word	0x40000c00
 800520c:	40010400 	.word	0x40010400
 8005210:	40014000 	.word	0x40014000
 8005214:	40014400 	.word	0x40014400
 8005218:	40014800 	.word	0x40014800
 800521c:	40001800 	.word	0x40001800
 8005220:	40001c00 	.word	0x40001c00
 8005224:	40002000 	.word	0x40002000

08005228 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 031f 	and.w	r3, r3, #31
 800523a:	2201      	movs	r2, #1
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a1a      	ldr	r2, [r3, #32]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	43db      	mvns	r3, r3
 800524a:	401a      	ands	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a1a      	ldr	r2, [r3, #32]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f003 031f 	and.w	r3, r3, #31
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	fa01 f303 	lsl.w	r3, r1, r3
 8005260:	431a      	orrs	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	621a      	str	r2, [r3, #32]
}
 8005266:	bf00      	nop
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
	...

08005274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005288:	2302      	movs	r3, #2
 800528a:	e05a      	b.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a21      	ldr	r2, [pc, #132]	; (8005350 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d022      	beq.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d8:	d01d      	beq.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1d      	ldr	r2, [pc, #116]	; (8005354 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d018      	beq.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1b      	ldr	r2, [pc, #108]	; (8005358 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d013      	beq.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1a      	ldr	r2, [pc, #104]	; (800535c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00e      	beq.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a18      	ldr	r2, [pc, #96]	; (8005360 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d009      	beq.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a17      	ldr	r2, [pc, #92]	; (8005364 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d004      	beq.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a15      	ldr	r2, [pc, #84]	; (8005368 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d10c      	bne.n	8005330 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800531c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	4313      	orrs	r3, r2
 8005326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40010000 	.word	0x40010000
 8005354:	40000400 	.word	0x40000400
 8005358:	40000800 	.word	0x40000800
 800535c:	40000c00 	.word	0x40000c00
 8005360:	40010400 	.word	0x40010400
 8005364:	40014000 	.word	0x40014000
 8005368:	40001800 	.word	0x40001800

0800536c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e03f      	b.n	8005426 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fd fd38 	bl	8002e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2224      	movs	r2, #36	; 0x24
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fddf 	bl	8005f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695a      	ldr	r2, [r3, #20]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800540c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2220      	movs	r2, #32
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b08a      	sub	sp, #40	; 0x28
 8005432:	af02      	add	r7, sp, #8
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	603b      	str	r3, [r7, #0]
 800543a:	4613      	mov	r3, r2
 800543c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b20      	cmp	r3, #32
 800544c:	d17c      	bne.n	8005548 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <HAL_UART_Transmit+0x2c>
 8005454:	88fb      	ldrh	r3, [r7, #6]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e075      	b.n	800554a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_UART_Transmit+0x3e>
 8005468:	2302      	movs	r3, #2
 800546a:	e06e      	b.n	800554a <HAL_UART_Transmit+0x11c>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2221      	movs	r2, #33	; 0x21
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005482:	f7fd feeb 	bl	800325c <HAL_GetTick>
 8005486:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	88fa      	ldrh	r2, [r7, #6]
 800548c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	88fa      	ldrh	r2, [r7, #6]
 8005492:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549c:	d108      	bne.n	80054b0 <HAL_UART_Transmit+0x82>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d104      	bne.n	80054b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	61bb      	str	r3, [r7, #24]
 80054ae:	e003      	b.n	80054b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054b4:	2300      	movs	r3, #0
 80054b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80054c0:	e02a      	b.n	8005518 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2200      	movs	r2, #0
 80054ca:	2180      	movs	r1, #128	; 0x80
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 fb1f 	bl	8005b10 <UART_WaitOnFlagUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e036      	b.n	800554a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10b      	bne.n	80054fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	3302      	adds	r3, #2
 80054f6:	61bb      	str	r3, [r7, #24]
 80054f8:	e007      	b.n	800550a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	781a      	ldrb	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	3301      	adds	r3, #1
 8005508:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800551c:	b29b      	uxth	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1cf      	bne.n	80054c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2200      	movs	r2, #0
 800552a:	2140      	movs	r1, #64	; 0x40
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 faef 	bl	8005b10 <UART_WaitOnFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e006      	b.n	800554a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	e000      	b.n	800554a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005548:	2302      	movs	r3, #2
  }
}
 800554a:	4618      	mov	r0, r3
 800554c:	3720      	adds	r7, #32
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	4613      	mov	r3, r2
 800555e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b20      	cmp	r3, #32
 800556a:	d11d      	bne.n	80055a8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <HAL_UART_Receive_IT+0x26>
 8005572:	88fb      	ldrh	r3, [r7, #6]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e016      	b.n	80055aa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005582:	2b01      	cmp	r3, #1
 8005584:	d101      	bne.n	800558a <HAL_UART_Receive_IT+0x38>
 8005586:	2302      	movs	r3, #2
 8005588:	e00f      	b.n	80055aa <HAL_UART_Receive_IT+0x58>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005598:	88fb      	ldrh	r3, [r7, #6]
 800559a:	461a      	mov	r2, r3
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 fb24 	bl	8005bec <UART_Start_Receive_IT>
 80055a4:	4603      	mov	r3, r0
 80055a6:	e000      	b.n	80055aa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80055a8:	2302      	movs	r3, #2
  }
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b0ba      	sub	sp, #232	; 0xe8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80055da:	2300      	movs	r3, #0
 80055dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80055f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10f      	bne.n	800561a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055fe:	f003 0320 	and.w	r3, r3, #32
 8005602:	2b00      	cmp	r3, #0
 8005604:	d009      	beq.n	800561a <HAL_UART_IRQHandler+0x66>
 8005606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fc07 	bl	8005e26 <UART_Receive_IT>
      return;
 8005618:	e256      	b.n	8005ac8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800561a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 80de 	beq.w	80057e0 <HAL_UART_IRQHandler+0x22c>
 8005624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d106      	bne.n	800563e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005634:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80d1 	beq.w	80057e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800563e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00b      	beq.n	8005662 <HAL_UART_IRQHandler+0xae>
 800564a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800564e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005652:	2b00      	cmp	r3, #0
 8005654:	d005      	beq.n	8005662 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	f043 0201 	orr.w	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00b      	beq.n	8005686 <HAL_UART_IRQHandler+0xd2>
 800566e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	f043 0202 	orr.w	r2, r3, #2
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00b      	beq.n	80056aa <HAL_UART_IRQHandler+0xf6>
 8005692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f043 0204 	orr.w	r2, r3, #4
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d011      	beq.n	80056da <HAL_UART_IRQHandler+0x126>
 80056b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ba:	f003 0320 	and.w	r3, r3, #32
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d105      	bne.n	80056ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d005      	beq.n	80056da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	f043 0208 	orr.w	r2, r3, #8
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 81ed 	beq.w	8005abe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e8:	f003 0320 	and.w	r3, r3, #32
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d008      	beq.n	8005702 <HAL_UART_IRQHandler+0x14e>
 80056f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056f4:	f003 0320 	and.w	r3, r3, #32
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fb92 	bl	8005e26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570c:	2b40      	cmp	r3, #64	; 0x40
 800570e:	bf0c      	ite	eq
 8005710:	2301      	moveq	r3, #1
 8005712:	2300      	movne	r3, #0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d103      	bne.n	800572e <HAL_UART_IRQHandler+0x17a>
 8005726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800572a:	2b00      	cmp	r3, #0
 800572c:	d04f      	beq.n	80057ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fa9a 	bl	8005c68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573e:	2b40      	cmp	r3, #64	; 0x40
 8005740:	d141      	bne.n	80057c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3314      	adds	r3, #20
 8005748:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005750:	e853 3f00 	ldrex	r3, [r3]
 8005754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800575c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3314      	adds	r3, #20
 800576a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800576e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800577a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800577e:	e841 2300 	strex	r3, r2, [r1]
 8005782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005786:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1d9      	bne.n	8005742 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	2b00      	cmp	r3, #0
 8005794:	d013      	beq.n	80057be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579a:	4a7d      	ldr	r2, [pc, #500]	; (8005990 <HAL_UART_IRQHandler+0x3dc>)
 800579c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fd ff19 	bl	80035da <HAL_DMA_Abort_IT>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d016      	beq.n	80057dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057b8:	4610      	mov	r0, r2
 80057ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057bc:	e00e      	b.n	80057dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f990 	bl	8005ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c4:	e00a      	b.n	80057dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f98c 	bl	8005ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057cc:	e006      	b.n	80057dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f988 	bl	8005ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80057da:	e170      	b.n	8005abe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057dc:	bf00      	nop
    return;
 80057de:	e16e      	b.n	8005abe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	f040 814a 	bne.w	8005a7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80057ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ee:	f003 0310 	and.w	r3, r3, #16
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 8143 	beq.w	8005a7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80057f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fc:	f003 0310 	and.w	r3, r3, #16
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 813c 	beq.w	8005a7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005806:	2300      	movs	r3, #0
 8005808:	60bb      	str	r3, [r7, #8]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	60bb      	str	r3, [r7, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	60bb      	str	r3, [r7, #8]
 800581a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005826:	2b40      	cmp	r3, #64	; 0x40
 8005828:	f040 80b4 	bne.w	8005994 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005838:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 8140 	beq.w	8005ac2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800584a:	429a      	cmp	r2, r3
 800584c:	f080 8139 	bcs.w	8005ac2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005856:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005862:	f000 8088 	beq.w	8005976 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	330c      	adds	r3, #12
 800586c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800587c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005884:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	330c      	adds	r3, #12
 800588e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005892:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005896:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800589e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1d9      	bne.n	8005866 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3314      	adds	r3, #20
 80058b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058c4:	f023 0301 	bic.w	r3, r3, #1
 80058c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3314      	adds	r3, #20
 80058d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80058e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e1      	bne.n	80058b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3314      	adds	r3, #20
 80058f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005904:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3314      	adds	r3, #20
 800590e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005912:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005914:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005918:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e3      	bne.n	80058ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2220      	movs	r2, #32
 800592a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	330c      	adds	r3, #12
 800593a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800593e:	e853 3f00 	ldrex	r3, [r3]
 8005942:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005946:	f023 0310 	bic.w	r3, r3, #16
 800594a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	330c      	adds	r3, #12
 8005954:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005958:	65ba      	str	r2, [r7, #88]	; 0x58
 800595a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800595e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005960:	e841 2300 	strex	r3, r2, [r1]
 8005964:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e3      	bne.n	8005934 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	4618      	mov	r0, r3
 8005972:	f7fd fdc2 	bl	80034fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800597e:	b29b      	uxth	r3, r3
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	b29b      	uxth	r3, r3
 8005984:	4619      	mov	r1, r3
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f8b6 	bl	8005af8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800598c:	e099      	b.n	8005ac2 <HAL_UART_IRQHandler+0x50e>
 800598e:	bf00      	nop
 8005990:	08005d2f 	.word	0x08005d2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800599c:	b29b      	uxth	r3, r3
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 808b 	beq.w	8005ac6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80059b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8086 	beq.w	8005ac6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	330c      	adds	r3, #12
 80059c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	330c      	adds	r3, #12
 80059da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80059de:	647a      	str	r2, [r7, #68]	; 0x44
 80059e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059e6:	e841 2300 	strex	r3, r2, [r1]
 80059ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1e3      	bne.n	80059ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3314      	adds	r3, #20
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	623b      	str	r3, [r7, #32]
   return(result);
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3314      	adds	r3, #20
 8005a12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a16:	633a      	str	r2, [r7, #48]	; 0x30
 8005a18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e3      	bne.n	80059f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	330c      	adds	r3, #12
 8005a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0310 	bic.w	r3, r3, #16
 8005a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	330c      	adds	r3, #12
 8005a58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005a5c:	61fa      	str	r2, [r7, #28]
 8005a5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	69b9      	ldr	r1, [r7, #24]
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	617b      	str	r3, [r7, #20]
   return(result);
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e3      	bne.n	8005a38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f83e 	bl	8005af8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a7c:	e023      	b.n	8005ac6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <HAL_UART_IRQHandler+0x4ea>
 8005a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f95d 	bl	8005d56 <UART_Transmit_IT>
    return;
 8005a9c:	e014      	b.n	8005ac8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00e      	beq.n	8005ac8 <HAL_UART_IRQHandler+0x514>
 8005aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d008      	beq.n	8005ac8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f99d 	bl	8005df6 <UART_EndTransmit_IT>
    return;
 8005abc:	e004      	b.n	8005ac8 <HAL_UART_IRQHandler+0x514>
    return;
 8005abe:	bf00      	nop
 8005ac0:	e002      	b.n	8005ac8 <HAL_UART_IRQHandler+0x514>
      return;
 8005ac2:	bf00      	nop
 8005ac4:	e000      	b.n	8005ac8 <HAL_UART_IRQHandler+0x514>
      return;
 8005ac6:	bf00      	nop
  }
}
 8005ac8:	37e8      	adds	r7, #232	; 0xe8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop

08005ad0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	460b      	mov	r3, r1
 8005b02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b090      	sub	sp, #64	; 0x40
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	603b      	str	r3, [r7, #0]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b20:	e050      	b.n	8005bc4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b28:	d04c      	beq.n	8005bc4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b30:	f7fd fb94 	bl	800325c <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d241      	bcs.n	8005bc4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	330c      	adds	r3, #12
 8005b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	e853 3f00 	ldrex	r3, [r3]
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	330c      	adds	r3, #12
 8005b5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b60:	637a      	str	r2, [r7, #52]	; 0x34
 8005b62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e5      	bne.n	8005b40 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3314      	adds	r3, #20
 8005b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	e853 3f00 	ldrex	r3, [r3]
 8005b82:	613b      	str	r3, [r7, #16]
   return(result);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f023 0301 	bic.w	r3, r3, #1
 8005b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3314      	adds	r3, #20
 8005b92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b94:	623a      	str	r2, [r7, #32]
 8005b96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	69f9      	ldr	r1, [r7, #28]
 8005b9a:	6a3a      	ldr	r2, [r7, #32]
 8005b9c:	e841 2300 	strex	r3, r2, [r1]
 8005ba0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1e5      	bne.n	8005b74 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e00f      	b.n	8005be4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	bf0c      	ite	eq
 8005bd4:	2301      	moveq	r3, #1
 8005bd6:	2300      	movne	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d09f      	beq.n	8005b22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3740      	adds	r7, #64	; 0x40
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	88fa      	ldrh	r2, [r7, #6]
 8005c04:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	88fa      	ldrh	r2, [r7, #6]
 8005c0a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2222      	movs	r2, #34	; 0x22
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d007      	beq.n	8005c3a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c38:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	695a      	ldr	r2, [r3, #20]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0201 	orr.w	r2, r2, #1
 8005c48:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f042 0220 	orr.w	r2, r2, #32
 8005c58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b095      	sub	sp, #84	; 0x54
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	330c      	adds	r3, #12
 8005c76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7a:	e853 3f00 	ldrex	r3, [r3]
 8005c7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	330c      	adds	r3, #12
 8005c8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c90:	643a      	str	r2, [r7, #64]	; 0x40
 8005c92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c98:	e841 2300 	strex	r3, r2, [r1]
 8005c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e5      	bne.n	8005c70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3314      	adds	r3, #20
 8005caa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	f023 0301 	bic.w	r3, r3, #1
 8005cba:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3314      	adds	r3, #20
 8005cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ccc:	e841 2300 	strex	r3, r2, [r1]
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e5      	bne.n	8005ca4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d119      	bne.n	8005d14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	330c      	adds	r3, #12
 8005ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	e853 3f00 	ldrex	r3, [r3]
 8005cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f023 0310 	bic.w	r3, r3, #16
 8005cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	330c      	adds	r3, #12
 8005cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d00:	61ba      	str	r2, [r7, #24]
 8005d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d04:	6979      	ldr	r1, [r7, #20]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	e841 2300 	strex	r3, r2, [r1]
 8005d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e5      	bne.n	8005ce0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d22:	bf00      	nop
 8005d24:	3754      	adds	r7, #84	; 0x54
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b084      	sub	sp, #16
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f7ff fecb 	bl	8005ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d4e:	bf00      	nop
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b085      	sub	sp, #20
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b21      	cmp	r3, #33	; 0x21
 8005d68:	d13e      	bne.n	8005de8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d72:	d114      	bne.n	8005d9e <UART_Transmit_IT+0x48>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d110      	bne.n	8005d9e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	461a      	mov	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	1c9a      	adds	r2, r3, #2
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	621a      	str	r2, [r3, #32]
 8005d9c:	e008      	b.n	8005db0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	1c59      	adds	r1, r3, #1
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6211      	str	r1, [r2, #32]
 8005da8:	781a      	ldrb	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10f      	bne.n	8005de4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005de2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	e000      	b.n	8005dea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005de8:	2302      	movs	r3, #2
  }
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b082      	sub	sp, #8
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7ff fe5a 	bl	8005ad0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b08c      	sub	sp, #48	; 0x30
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b22      	cmp	r3, #34	; 0x22
 8005e38:	f040 80ab 	bne.w	8005f92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e44:	d117      	bne.n	8005e76 <UART_Receive_IT+0x50>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d113      	bne.n	8005e76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6e:	1c9a      	adds	r2, r3, #2
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	629a      	str	r2, [r3, #40]	; 0x28
 8005e74:	e026      	b.n	8005ec4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e88:	d007      	beq.n	8005e9a <UART_Receive_IT+0x74>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10a      	bne.n	8005ea8 <UART_Receive_IT+0x82>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	e008      	b.n	8005eba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d15a      	bne.n	8005f8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0220 	bic.w	r2, r2, #32
 8005ee6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ef6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695a      	ldr	r2, [r3, #20]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0201 	bic.w	r2, r2, #1
 8005f06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d135      	bne.n	8005f84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	330c      	adds	r3, #12
 8005f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f023 0310 	bic.w	r3, r3, #16
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	330c      	adds	r3, #12
 8005f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3e:	623a      	str	r2, [r7, #32]
 8005f40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	69f9      	ldr	r1, [r7, #28]
 8005f44:	6a3a      	ldr	r2, [r7, #32]
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e5      	bne.n	8005f1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	2b10      	cmp	r3, #16
 8005f5e:	d10a      	bne.n	8005f76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff fdbb 	bl	8005af8 <HAL_UARTEx_RxEventCallback>
 8005f82:	e002      	b.n	8005f8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7fc f8d7 	bl	8002138 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e002      	b.n	8005f94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	e000      	b.n	8005f94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005f92:	2302      	movs	r3, #2
  }
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3730      	adds	r7, #48	; 0x30
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fa0:	b0c0      	sub	sp, #256	; 0x100
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb8:	68d9      	ldr	r1, [r3, #12]
 8005fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	ea40 0301 	orr.w	r3, r0, r1
 8005fc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ff4:	f021 010c 	bic.w	r1, r1, #12
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006002:	430b      	orrs	r3, r1
 8006004:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006016:	6999      	ldr	r1, [r3, #24]
 8006018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	ea40 0301 	orr.w	r3, r0, r1
 8006022:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	4b8f      	ldr	r3, [pc, #572]	; (8006268 <UART_SetConfig+0x2cc>)
 800602c:	429a      	cmp	r2, r3
 800602e:	d005      	beq.n	800603c <UART_SetConfig+0xa0>
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	4b8d      	ldr	r3, [pc, #564]	; (800626c <UART_SetConfig+0x2d0>)
 8006038:	429a      	cmp	r2, r3
 800603a:	d104      	bne.n	8006046 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800603c:	f7fd fdbc 	bl	8003bb8 <HAL_RCC_GetPCLK2Freq>
 8006040:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006044:	e003      	b.n	800604e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006046:	f7fd fda3 	bl	8003b90 <HAL_RCC_GetPCLK1Freq>
 800604a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800604e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006058:	f040 810c 	bne.w	8006274 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800605c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006060:	2200      	movs	r2, #0
 8006062:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006066:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800606a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800606e:	4622      	mov	r2, r4
 8006070:	462b      	mov	r3, r5
 8006072:	1891      	adds	r1, r2, r2
 8006074:	65b9      	str	r1, [r7, #88]	; 0x58
 8006076:	415b      	adcs	r3, r3
 8006078:	65fb      	str	r3, [r7, #92]	; 0x5c
 800607a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800607e:	4621      	mov	r1, r4
 8006080:	eb12 0801 	adds.w	r8, r2, r1
 8006084:	4629      	mov	r1, r5
 8006086:	eb43 0901 	adc.w	r9, r3, r1
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	f04f 0300 	mov.w	r3, #0
 8006092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800609a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800609e:	4690      	mov	r8, r2
 80060a0:	4699      	mov	r9, r3
 80060a2:	4623      	mov	r3, r4
 80060a4:	eb18 0303 	adds.w	r3, r8, r3
 80060a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060ac:	462b      	mov	r3, r5
 80060ae:	eb49 0303 	adc.w	r3, r9, r3
 80060b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060ca:	460b      	mov	r3, r1
 80060cc:	18db      	adds	r3, r3, r3
 80060ce:	653b      	str	r3, [r7, #80]	; 0x50
 80060d0:	4613      	mov	r3, r2
 80060d2:	eb42 0303 	adc.w	r3, r2, r3
 80060d6:	657b      	str	r3, [r7, #84]	; 0x54
 80060d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060e0:	f7fa fe02 	bl	8000ce8 <__aeabi_uldivmod>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4b61      	ldr	r3, [pc, #388]	; (8006270 <UART_SetConfig+0x2d4>)
 80060ea:	fba3 2302 	umull	r2, r3, r3, r2
 80060ee:	095b      	lsrs	r3, r3, #5
 80060f0:	011c      	lsls	r4, r3, #4
 80060f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006100:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006104:	4642      	mov	r2, r8
 8006106:	464b      	mov	r3, r9
 8006108:	1891      	adds	r1, r2, r2
 800610a:	64b9      	str	r1, [r7, #72]	; 0x48
 800610c:	415b      	adcs	r3, r3
 800610e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006110:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006114:	4641      	mov	r1, r8
 8006116:	eb12 0a01 	adds.w	sl, r2, r1
 800611a:	4649      	mov	r1, r9
 800611c:	eb43 0b01 	adc.w	fp, r3, r1
 8006120:	f04f 0200 	mov.w	r2, #0
 8006124:	f04f 0300 	mov.w	r3, #0
 8006128:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800612c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006134:	4692      	mov	sl, r2
 8006136:	469b      	mov	fp, r3
 8006138:	4643      	mov	r3, r8
 800613a:	eb1a 0303 	adds.w	r3, sl, r3
 800613e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006142:	464b      	mov	r3, r9
 8006144:	eb4b 0303 	adc.w	r3, fp, r3
 8006148:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800614c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006158:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800615c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006160:	460b      	mov	r3, r1
 8006162:	18db      	adds	r3, r3, r3
 8006164:	643b      	str	r3, [r7, #64]	; 0x40
 8006166:	4613      	mov	r3, r2
 8006168:	eb42 0303 	adc.w	r3, r2, r3
 800616c:	647b      	str	r3, [r7, #68]	; 0x44
 800616e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006172:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006176:	f7fa fdb7 	bl	8000ce8 <__aeabi_uldivmod>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	4611      	mov	r1, r2
 8006180:	4b3b      	ldr	r3, [pc, #236]	; (8006270 <UART_SetConfig+0x2d4>)
 8006182:	fba3 2301 	umull	r2, r3, r3, r1
 8006186:	095b      	lsrs	r3, r3, #5
 8006188:	2264      	movs	r2, #100	; 0x64
 800618a:	fb02 f303 	mul.w	r3, r2, r3
 800618e:	1acb      	subs	r3, r1, r3
 8006190:	00db      	lsls	r3, r3, #3
 8006192:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006196:	4b36      	ldr	r3, [pc, #216]	; (8006270 <UART_SetConfig+0x2d4>)
 8006198:	fba3 2302 	umull	r2, r3, r3, r2
 800619c:	095b      	lsrs	r3, r3, #5
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061a4:	441c      	add	r4, r3
 80061a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061b8:	4642      	mov	r2, r8
 80061ba:	464b      	mov	r3, r9
 80061bc:	1891      	adds	r1, r2, r2
 80061be:	63b9      	str	r1, [r7, #56]	; 0x38
 80061c0:	415b      	adcs	r3, r3
 80061c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061c8:	4641      	mov	r1, r8
 80061ca:	1851      	adds	r1, r2, r1
 80061cc:	6339      	str	r1, [r7, #48]	; 0x30
 80061ce:	4649      	mov	r1, r9
 80061d0:	414b      	adcs	r3, r1
 80061d2:	637b      	str	r3, [r7, #52]	; 0x34
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061e0:	4659      	mov	r1, fp
 80061e2:	00cb      	lsls	r3, r1, #3
 80061e4:	4651      	mov	r1, sl
 80061e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ea:	4651      	mov	r1, sl
 80061ec:	00ca      	lsls	r2, r1, #3
 80061ee:	4610      	mov	r0, r2
 80061f0:	4619      	mov	r1, r3
 80061f2:	4603      	mov	r3, r0
 80061f4:	4642      	mov	r2, r8
 80061f6:	189b      	adds	r3, r3, r2
 80061f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061fc:	464b      	mov	r3, r9
 80061fe:	460a      	mov	r2, r1
 8006200:	eb42 0303 	adc.w	r3, r2, r3
 8006204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006214:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006218:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800621c:	460b      	mov	r3, r1
 800621e:	18db      	adds	r3, r3, r3
 8006220:	62bb      	str	r3, [r7, #40]	; 0x28
 8006222:	4613      	mov	r3, r2
 8006224:	eb42 0303 	adc.w	r3, r2, r3
 8006228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800622a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800622e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006232:	f7fa fd59 	bl	8000ce8 <__aeabi_uldivmod>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	4b0d      	ldr	r3, [pc, #52]	; (8006270 <UART_SetConfig+0x2d4>)
 800623c:	fba3 1302 	umull	r1, r3, r3, r2
 8006240:	095b      	lsrs	r3, r3, #5
 8006242:	2164      	movs	r1, #100	; 0x64
 8006244:	fb01 f303 	mul.w	r3, r1, r3
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	3332      	adds	r3, #50	; 0x32
 800624e:	4a08      	ldr	r2, [pc, #32]	; (8006270 <UART_SetConfig+0x2d4>)
 8006250:	fba2 2303 	umull	r2, r3, r2, r3
 8006254:	095b      	lsrs	r3, r3, #5
 8006256:	f003 0207 	and.w	r2, r3, #7
 800625a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4422      	add	r2, r4
 8006262:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006264:	e105      	b.n	8006472 <UART_SetConfig+0x4d6>
 8006266:	bf00      	nop
 8006268:	40011000 	.word	0x40011000
 800626c:	40011400 	.word	0x40011400
 8006270:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006278:	2200      	movs	r2, #0
 800627a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800627e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006282:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006286:	4642      	mov	r2, r8
 8006288:	464b      	mov	r3, r9
 800628a:	1891      	adds	r1, r2, r2
 800628c:	6239      	str	r1, [r7, #32]
 800628e:	415b      	adcs	r3, r3
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
 8006292:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006296:	4641      	mov	r1, r8
 8006298:	1854      	adds	r4, r2, r1
 800629a:	4649      	mov	r1, r9
 800629c:	eb43 0501 	adc.w	r5, r3, r1
 80062a0:	f04f 0200 	mov.w	r2, #0
 80062a4:	f04f 0300 	mov.w	r3, #0
 80062a8:	00eb      	lsls	r3, r5, #3
 80062aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062ae:	00e2      	lsls	r2, r4, #3
 80062b0:	4614      	mov	r4, r2
 80062b2:	461d      	mov	r5, r3
 80062b4:	4643      	mov	r3, r8
 80062b6:	18e3      	adds	r3, r4, r3
 80062b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062bc:	464b      	mov	r3, r9
 80062be:	eb45 0303 	adc.w	r3, r5, r3
 80062c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062d6:	f04f 0200 	mov.w	r2, #0
 80062da:	f04f 0300 	mov.w	r3, #0
 80062de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062e2:	4629      	mov	r1, r5
 80062e4:	008b      	lsls	r3, r1, #2
 80062e6:	4621      	mov	r1, r4
 80062e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062ec:	4621      	mov	r1, r4
 80062ee:	008a      	lsls	r2, r1, #2
 80062f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062f4:	f7fa fcf8 	bl	8000ce8 <__aeabi_uldivmod>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4b60      	ldr	r3, [pc, #384]	; (8006480 <UART_SetConfig+0x4e4>)
 80062fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006302:	095b      	lsrs	r3, r3, #5
 8006304:	011c      	lsls	r4, r3, #4
 8006306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800630a:	2200      	movs	r2, #0
 800630c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006310:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006314:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006318:	4642      	mov	r2, r8
 800631a:	464b      	mov	r3, r9
 800631c:	1891      	adds	r1, r2, r2
 800631e:	61b9      	str	r1, [r7, #24]
 8006320:	415b      	adcs	r3, r3
 8006322:	61fb      	str	r3, [r7, #28]
 8006324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006328:	4641      	mov	r1, r8
 800632a:	1851      	adds	r1, r2, r1
 800632c:	6139      	str	r1, [r7, #16]
 800632e:	4649      	mov	r1, r9
 8006330:	414b      	adcs	r3, r1
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	f04f 0200 	mov.w	r2, #0
 8006338:	f04f 0300 	mov.w	r3, #0
 800633c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006340:	4659      	mov	r1, fp
 8006342:	00cb      	lsls	r3, r1, #3
 8006344:	4651      	mov	r1, sl
 8006346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800634a:	4651      	mov	r1, sl
 800634c:	00ca      	lsls	r2, r1, #3
 800634e:	4610      	mov	r0, r2
 8006350:	4619      	mov	r1, r3
 8006352:	4603      	mov	r3, r0
 8006354:	4642      	mov	r2, r8
 8006356:	189b      	adds	r3, r3, r2
 8006358:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800635c:	464b      	mov	r3, r9
 800635e:	460a      	mov	r2, r1
 8006360:	eb42 0303 	adc.w	r3, r2, r3
 8006364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	67bb      	str	r3, [r7, #120]	; 0x78
 8006372:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006374:	f04f 0200 	mov.w	r2, #0
 8006378:	f04f 0300 	mov.w	r3, #0
 800637c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006380:	4649      	mov	r1, r9
 8006382:	008b      	lsls	r3, r1, #2
 8006384:	4641      	mov	r1, r8
 8006386:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800638a:	4641      	mov	r1, r8
 800638c:	008a      	lsls	r2, r1, #2
 800638e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006392:	f7fa fca9 	bl	8000ce8 <__aeabi_uldivmod>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	4b39      	ldr	r3, [pc, #228]	; (8006480 <UART_SetConfig+0x4e4>)
 800639c:	fba3 1302 	umull	r1, r3, r3, r2
 80063a0:	095b      	lsrs	r3, r3, #5
 80063a2:	2164      	movs	r1, #100	; 0x64
 80063a4:	fb01 f303 	mul.w	r3, r1, r3
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	3332      	adds	r3, #50	; 0x32
 80063ae:	4a34      	ldr	r2, [pc, #208]	; (8006480 <UART_SetConfig+0x4e4>)
 80063b0:	fba2 2303 	umull	r2, r3, r2, r3
 80063b4:	095b      	lsrs	r3, r3, #5
 80063b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063ba:	441c      	add	r4, r3
 80063bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063c0:	2200      	movs	r2, #0
 80063c2:	673b      	str	r3, [r7, #112]	; 0x70
 80063c4:	677a      	str	r2, [r7, #116]	; 0x74
 80063c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063ca:	4642      	mov	r2, r8
 80063cc:	464b      	mov	r3, r9
 80063ce:	1891      	adds	r1, r2, r2
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	415b      	adcs	r3, r3
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063da:	4641      	mov	r1, r8
 80063dc:	1851      	adds	r1, r2, r1
 80063de:	6039      	str	r1, [r7, #0]
 80063e0:	4649      	mov	r1, r9
 80063e2:	414b      	adcs	r3, r1
 80063e4:	607b      	str	r3, [r7, #4]
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	f04f 0300 	mov.w	r3, #0
 80063ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063f2:	4659      	mov	r1, fp
 80063f4:	00cb      	lsls	r3, r1, #3
 80063f6:	4651      	mov	r1, sl
 80063f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063fc:	4651      	mov	r1, sl
 80063fe:	00ca      	lsls	r2, r1, #3
 8006400:	4610      	mov	r0, r2
 8006402:	4619      	mov	r1, r3
 8006404:	4603      	mov	r3, r0
 8006406:	4642      	mov	r2, r8
 8006408:	189b      	adds	r3, r3, r2
 800640a:	66bb      	str	r3, [r7, #104]	; 0x68
 800640c:	464b      	mov	r3, r9
 800640e:	460a      	mov	r2, r1
 8006410:	eb42 0303 	adc.w	r3, r2, r3
 8006414:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	663b      	str	r3, [r7, #96]	; 0x60
 8006420:	667a      	str	r2, [r7, #100]	; 0x64
 8006422:	f04f 0200 	mov.w	r2, #0
 8006426:	f04f 0300 	mov.w	r3, #0
 800642a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800642e:	4649      	mov	r1, r9
 8006430:	008b      	lsls	r3, r1, #2
 8006432:	4641      	mov	r1, r8
 8006434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006438:	4641      	mov	r1, r8
 800643a:	008a      	lsls	r2, r1, #2
 800643c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006440:	f7fa fc52 	bl	8000ce8 <__aeabi_uldivmod>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <UART_SetConfig+0x4e4>)
 800644a:	fba3 1302 	umull	r1, r3, r3, r2
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	2164      	movs	r1, #100	; 0x64
 8006452:	fb01 f303 	mul.w	r3, r1, r3
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	3332      	adds	r3, #50	; 0x32
 800645c:	4a08      	ldr	r2, [pc, #32]	; (8006480 <UART_SetConfig+0x4e4>)
 800645e:	fba2 2303 	umull	r2, r3, r2, r3
 8006462:	095b      	lsrs	r3, r3, #5
 8006464:	f003 020f 	and.w	r2, r3, #15
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4422      	add	r2, r4
 8006470:	609a      	str	r2, [r3, #8]
}
 8006472:	bf00      	nop
 8006474:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006478:	46bd      	mov	sp, r7
 800647a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800647e:	bf00      	nop
 8006480:	51eb851f 	.word	0x51eb851f

08006484 <__errno>:
 8006484:	4b01      	ldr	r3, [pc, #4]	; (800648c <__errno+0x8>)
 8006486:	6818      	ldr	r0, [r3, #0]
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	20000060 	.word	0x20000060

08006490 <__libc_init_array>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	4d0d      	ldr	r5, [pc, #52]	; (80064c8 <__libc_init_array+0x38>)
 8006494:	4c0d      	ldr	r4, [pc, #52]	; (80064cc <__libc_init_array+0x3c>)
 8006496:	1b64      	subs	r4, r4, r5
 8006498:	10a4      	asrs	r4, r4, #2
 800649a:	2600      	movs	r6, #0
 800649c:	42a6      	cmp	r6, r4
 800649e:	d109      	bne.n	80064b4 <__libc_init_array+0x24>
 80064a0:	4d0b      	ldr	r5, [pc, #44]	; (80064d0 <__libc_init_array+0x40>)
 80064a2:	4c0c      	ldr	r4, [pc, #48]	; (80064d4 <__libc_init_array+0x44>)
 80064a4:	f004 fb3a 	bl	800ab1c <_init>
 80064a8:	1b64      	subs	r4, r4, r5
 80064aa:	10a4      	asrs	r4, r4, #2
 80064ac:	2600      	movs	r6, #0
 80064ae:	42a6      	cmp	r6, r4
 80064b0:	d105      	bne.n	80064be <__libc_init_array+0x2e>
 80064b2:	bd70      	pop	{r4, r5, r6, pc}
 80064b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b8:	4798      	blx	r3
 80064ba:	3601      	adds	r6, #1
 80064bc:	e7ee      	b.n	800649c <__libc_init_array+0xc>
 80064be:	f855 3b04 	ldr.w	r3, [r5], #4
 80064c2:	4798      	blx	r3
 80064c4:	3601      	adds	r6, #1
 80064c6:	e7f2      	b.n	80064ae <__libc_init_array+0x1e>
 80064c8:	0800b0c8 	.word	0x0800b0c8
 80064cc:	0800b0c8 	.word	0x0800b0c8
 80064d0:	0800b0c8 	.word	0x0800b0c8
 80064d4:	0800b0cc 	.word	0x0800b0cc

080064d8 <memset>:
 80064d8:	4402      	add	r2, r0
 80064da:	4603      	mov	r3, r0
 80064dc:	4293      	cmp	r3, r2
 80064de:	d100      	bne.n	80064e2 <memset+0xa>
 80064e0:	4770      	bx	lr
 80064e2:	f803 1b01 	strb.w	r1, [r3], #1
 80064e6:	e7f9      	b.n	80064dc <memset+0x4>

080064e8 <__cvt>:
 80064e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064ec:	ec55 4b10 	vmov	r4, r5, d0
 80064f0:	2d00      	cmp	r5, #0
 80064f2:	460e      	mov	r6, r1
 80064f4:	4619      	mov	r1, r3
 80064f6:	462b      	mov	r3, r5
 80064f8:	bfbb      	ittet	lt
 80064fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80064fe:	461d      	movlt	r5, r3
 8006500:	2300      	movge	r3, #0
 8006502:	232d      	movlt	r3, #45	; 0x2d
 8006504:	700b      	strb	r3, [r1, #0]
 8006506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006508:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800650c:	4691      	mov	r9, r2
 800650e:	f023 0820 	bic.w	r8, r3, #32
 8006512:	bfbc      	itt	lt
 8006514:	4622      	movlt	r2, r4
 8006516:	4614      	movlt	r4, r2
 8006518:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800651c:	d005      	beq.n	800652a <__cvt+0x42>
 800651e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006522:	d100      	bne.n	8006526 <__cvt+0x3e>
 8006524:	3601      	adds	r6, #1
 8006526:	2102      	movs	r1, #2
 8006528:	e000      	b.n	800652c <__cvt+0x44>
 800652a:	2103      	movs	r1, #3
 800652c:	ab03      	add	r3, sp, #12
 800652e:	9301      	str	r3, [sp, #4]
 8006530:	ab02      	add	r3, sp, #8
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	ec45 4b10 	vmov	d0, r4, r5
 8006538:	4653      	mov	r3, sl
 800653a:	4632      	mov	r2, r6
 800653c:	f001 fb94 	bl	8007c68 <_dtoa_r>
 8006540:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006544:	4607      	mov	r7, r0
 8006546:	d102      	bne.n	800654e <__cvt+0x66>
 8006548:	f019 0f01 	tst.w	r9, #1
 800654c:	d022      	beq.n	8006594 <__cvt+0xac>
 800654e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006552:	eb07 0906 	add.w	r9, r7, r6
 8006556:	d110      	bne.n	800657a <__cvt+0x92>
 8006558:	783b      	ldrb	r3, [r7, #0]
 800655a:	2b30      	cmp	r3, #48	; 0x30
 800655c:	d10a      	bne.n	8006574 <__cvt+0x8c>
 800655e:	2200      	movs	r2, #0
 8006560:	2300      	movs	r3, #0
 8006562:	4620      	mov	r0, r4
 8006564:	4629      	mov	r1, r5
 8006566:	f7fa fadf 	bl	8000b28 <__aeabi_dcmpeq>
 800656a:	b918      	cbnz	r0, 8006574 <__cvt+0x8c>
 800656c:	f1c6 0601 	rsb	r6, r6, #1
 8006570:	f8ca 6000 	str.w	r6, [sl]
 8006574:	f8da 3000 	ldr.w	r3, [sl]
 8006578:	4499      	add	r9, r3
 800657a:	2200      	movs	r2, #0
 800657c:	2300      	movs	r3, #0
 800657e:	4620      	mov	r0, r4
 8006580:	4629      	mov	r1, r5
 8006582:	f7fa fad1 	bl	8000b28 <__aeabi_dcmpeq>
 8006586:	b108      	cbz	r0, 800658c <__cvt+0xa4>
 8006588:	f8cd 900c 	str.w	r9, [sp, #12]
 800658c:	2230      	movs	r2, #48	; 0x30
 800658e:	9b03      	ldr	r3, [sp, #12]
 8006590:	454b      	cmp	r3, r9
 8006592:	d307      	bcc.n	80065a4 <__cvt+0xbc>
 8006594:	9b03      	ldr	r3, [sp, #12]
 8006596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006598:	1bdb      	subs	r3, r3, r7
 800659a:	4638      	mov	r0, r7
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	b004      	add	sp, #16
 80065a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a4:	1c59      	adds	r1, r3, #1
 80065a6:	9103      	str	r1, [sp, #12]
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	e7f0      	b.n	800658e <__cvt+0xa6>

080065ac <__exponent>:
 80065ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ae:	4603      	mov	r3, r0
 80065b0:	2900      	cmp	r1, #0
 80065b2:	bfb8      	it	lt
 80065b4:	4249      	neglt	r1, r1
 80065b6:	f803 2b02 	strb.w	r2, [r3], #2
 80065ba:	bfb4      	ite	lt
 80065bc:	222d      	movlt	r2, #45	; 0x2d
 80065be:	222b      	movge	r2, #43	; 0x2b
 80065c0:	2909      	cmp	r1, #9
 80065c2:	7042      	strb	r2, [r0, #1]
 80065c4:	dd2a      	ble.n	800661c <__exponent+0x70>
 80065c6:	f10d 0407 	add.w	r4, sp, #7
 80065ca:	46a4      	mov	ip, r4
 80065cc:	270a      	movs	r7, #10
 80065ce:	46a6      	mov	lr, r4
 80065d0:	460a      	mov	r2, r1
 80065d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80065d6:	fb07 1516 	mls	r5, r7, r6, r1
 80065da:	3530      	adds	r5, #48	; 0x30
 80065dc:	2a63      	cmp	r2, #99	; 0x63
 80065de:	f104 34ff 	add.w	r4, r4, #4294967295
 80065e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80065e6:	4631      	mov	r1, r6
 80065e8:	dcf1      	bgt.n	80065ce <__exponent+0x22>
 80065ea:	3130      	adds	r1, #48	; 0x30
 80065ec:	f1ae 0502 	sub.w	r5, lr, #2
 80065f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80065f4:	1c44      	adds	r4, r0, #1
 80065f6:	4629      	mov	r1, r5
 80065f8:	4561      	cmp	r1, ip
 80065fa:	d30a      	bcc.n	8006612 <__exponent+0x66>
 80065fc:	f10d 0209 	add.w	r2, sp, #9
 8006600:	eba2 020e 	sub.w	r2, r2, lr
 8006604:	4565      	cmp	r5, ip
 8006606:	bf88      	it	hi
 8006608:	2200      	movhi	r2, #0
 800660a:	4413      	add	r3, r2
 800660c:	1a18      	subs	r0, r3, r0
 800660e:	b003      	add	sp, #12
 8006610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006612:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006616:	f804 2f01 	strb.w	r2, [r4, #1]!
 800661a:	e7ed      	b.n	80065f8 <__exponent+0x4c>
 800661c:	2330      	movs	r3, #48	; 0x30
 800661e:	3130      	adds	r1, #48	; 0x30
 8006620:	7083      	strb	r3, [r0, #2]
 8006622:	70c1      	strb	r1, [r0, #3]
 8006624:	1d03      	adds	r3, r0, #4
 8006626:	e7f1      	b.n	800660c <__exponent+0x60>

08006628 <_printf_float>:
 8006628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662c:	ed2d 8b02 	vpush	{d8}
 8006630:	b08d      	sub	sp, #52	; 0x34
 8006632:	460c      	mov	r4, r1
 8006634:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006638:	4616      	mov	r6, r2
 800663a:	461f      	mov	r7, r3
 800663c:	4605      	mov	r5, r0
 800663e:	f002 fc83 	bl	8008f48 <_localeconv_r>
 8006642:	f8d0 a000 	ldr.w	sl, [r0]
 8006646:	4650      	mov	r0, sl
 8006648:	f7f9 fdec 	bl	8000224 <strlen>
 800664c:	2300      	movs	r3, #0
 800664e:	930a      	str	r3, [sp, #40]	; 0x28
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	9305      	str	r3, [sp, #20]
 8006654:	f8d8 3000 	ldr.w	r3, [r8]
 8006658:	f894 b018 	ldrb.w	fp, [r4, #24]
 800665c:	3307      	adds	r3, #7
 800665e:	f023 0307 	bic.w	r3, r3, #7
 8006662:	f103 0208 	add.w	r2, r3, #8
 8006666:	f8c8 2000 	str.w	r2, [r8]
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006672:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006676:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800667a:	9307      	str	r3, [sp, #28]
 800667c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006680:	ee08 0a10 	vmov	s16, r0
 8006684:	4b9f      	ldr	r3, [pc, #636]	; (8006904 <_printf_float+0x2dc>)
 8006686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800668a:	f04f 32ff 	mov.w	r2, #4294967295
 800668e:	f7fa fa7d 	bl	8000b8c <__aeabi_dcmpun>
 8006692:	bb88      	cbnz	r0, 80066f8 <_printf_float+0xd0>
 8006694:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006698:	4b9a      	ldr	r3, [pc, #616]	; (8006904 <_printf_float+0x2dc>)
 800669a:	f04f 32ff 	mov.w	r2, #4294967295
 800669e:	f7fa fa57 	bl	8000b50 <__aeabi_dcmple>
 80066a2:	bb48      	cbnz	r0, 80066f8 <_printf_float+0xd0>
 80066a4:	2200      	movs	r2, #0
 80066a6:	2300      	movs	r3, #0
 80066a8:	4640      	mov	r0, r8
 80066aa:	4649      	mov	r1, r9
 80066ac:	f7fa fa46 	bl	8000b3c <__aeabi_dcmplt>
 80066b0:	b110      	cbz	r0, 80066b8 <_printf_float+0x90>
 80066b2:	232d      	movs	r3, #45	; 0x2d
 80066b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b8:	4b93      	ldr	r3, [pc, #588]	; (8006908 <_printf_float+0x2e0>)
 80066ba:	4894      	ldr	r0, [pc, #592]	; (800690c <_printf_float+0x2e4>)
 80066bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80066c0:	bf94      	ite	ls
 80066c2:	4698      	movls	r8, r3
 80066c4:	4680      	movhi	r8, r0
 80066c6:	2303      	movs	r3, #3
 80066c8:	6123      	str	r3, [r4, #16]
 80066ca:	9b05      	ldr	r3, [sp, #20]
 80066cc:	f023 0204 	bic.w	r2, r3, #4
 80066d0:	6022      	str	r2, [r4, #0]
 80066d2:	f04f 0900 	mov.w	r9, #0
 80066d6:	9700      	str	r7, [sp, #0]
 80066d8:	4633      	mov	r3, r6
 80066da:	aa0b      	add	r2, sp, #44	; 0x2c
 80066dc:	4621      	mov	r1, r4
 80066de:	4628      	mov	r0, r5
 80066e0:	f000 f9d8 	bl	8006a94 <_printf_common>
 80066e4:	3001      	adds	r0, #1
 80066e6:	f040 8090 	bne.w	800680a <_printf_float+0x1e2>
 80066ea:	f04f 30ff 	mov.w	r0, #4294967295
 80066ee:	b00d      	add	sp, #52	; 0x34
 80066f0:	ecbd 8b02 	vpop	{d8}
 80066f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f8:	4642      	mov	r2, r8
 80066fa:	464b      	mov	r3, r9
 80066fc:	4640      	mov	r0, r8
 80066fe:	4649      	mov	r1, r9
 8006700:	f7fa fa44 	bl	8000b8c <__aeabi_dcmpun>
 8006704:	b140      	cbz	r0, 8006718 <_printf_float+0xf0>
 8006706:	464b      	mov	r3, r9
 8006708:	2b00      	cmp	r3, #0
 800670a:	bfbc      	itt	lt
 800670c:	232d      	movlt	r3, #45	; 0x2d
 800670e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006712:	487f      	ldr	r0, [pc, #508]	; (8006910 <_printf_float+0x2e8>)
 8006714:	4b7f      	ldr	r3, [pc, #508]	; (8006914 <_printf_float+0x2ec>)
 8006716:	e7d1      	b.n	80066bc <_printf_float+0x94>
 8006718:	6863      	ldr	r3, [r4, #4]
 800671a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800671e:	9206      	str	r2, [sp, #24]
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	d13f      	bne.n	80067a4 <_printf_float+0x17c>
 8006724:	2306      	movs	r3, #6
 8006726:	6063      	str	r3, [r4, #4]
 8006728:	9b05      	ldr	r3, [sp, #20]
 800672a:	6861      	ldr	r1, [r4, #4]
 800672c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006730:	2300      	movs	r3, #0
 8006732:	9303      	str	r3, [sp, #12]
 8006734:	ab0a      	add	r3, sp, #40	; 0x28
 8006736:	e9cd b301 	strd	fp, r3, [sp, #4]
 800673a:	ab09      	add	r3, sp, #36	; 0x24
 800673c:	ec49 8b10 	vmov	d0, r8, r9
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	6022      	str	r2, [r4, #0]
 8006744:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006748:	4628      	mov	r0, r5
 800674a:	f7ff fecd 	bl	80064e8 <__cvt>
 800674e:	9b06      	ldr	r3, [sp, #24]
 8006750:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006752:	2b47      	cmp	r3, #71	; 0x47
 8006754:	4680      	mov	r8, r0
 8006756:	d108      	bne.n	800676a <_printf_float+0x142>
 8006758:	1cc8      	adds	r0, r1, #3
 800675a:	db02      	blt.n	8006762 <_printf_float+0x13a>
 800675c:	6863      	ldr	r3, [r4, #4]
 800675e:	4299      	cmp	r1, r3
 8006760:	dd41      	ble.n	80067e6 <_printf_float+0x1be>
 8006762:	f1ab 0b02 	sub.w	fp, fp, #2
 8006766:	fa5f fb8b 	uxtb.w	fp, fp
 800676a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800676e:	d820      	bhi.n	80067b2 <_printf_float+0x18a>
 8006770:	3901      	subs	r1, #1
 8006772:	465a      	mov	r2, fp
 8006774:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006778:	9109      	str	r1, [sp, #36]	; 0x24
 800677a:	f7ff ff17 	bl	80065ac <__exponent>
 800677e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006780:	1813      	adds	r3, r2, r0
 8006782:	2a01      	cmp	r2, #1
 8006784:	4681      	mov	r9, r0
 8006786:	6123      	str	r3, [r4, #16]
 8006788:	dc02      	bgt.n	8006790 <_printf_float+0x168>
 800678a:	6822      	ldr	r2, [r4, #0]
 800678c:	07d2      	lsls	r2, r2, #31
 800678e:	d501      	bpl.n	8006794 <_printf_float+0x16c>
 8006790:	3301      	adds	r3, #1
 8006792:	6123      	str	r3, [r4, #16]
 8006794:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006798:	2b00      	cmp	r3, #0
 800679a:	d09c      	beq.n	80066d6 <_printf_float+0xae>
 800679c:	232d      	movs	r3, #45	; 0x2d
 800679e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067a2:	e798      	b.n	80066d6 <_printf_float+0xae>
 80067a4:	9a06      	ldr	r2, [sp, #24]
 80067a6:	2a47      	cmp	r2, #71	; 0x47
 80067a8:	d1be      	bne.n	8006728 <_printf_float+0x100>
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1bc      	bne.n	8006728 <_printf_float+0x100>
 80067ae:	2301      	movs	r3, #1
 80067b0:	e7b9      	b.n	8006726 <_printf_float+0xfe>
 80067b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80067b6:	d118      	bne.n	80067ea <_printf_float+0x1c2>
 80067b8:	2900      	cmp	r1, #0
 80067ba:	6863      	ldr	r3, [r4, #4]
 80067bc:	dd0b      	ble.n	80067d6 <_printf_float+0x1ae>
 80067be:	6121      	str	r1, [r4, #16]
 80067c0:	b913      	cbnz	r3, 80067c8 <_printf_float+0x1a0>
 80067c2:	6822      	ldr	r2, [r4, #0]
 80067c4:	07d0      	lsls	r0, r2, #31
 80067c6:	d502      	bpl.n	80067ce <_printf_float+0x1a6>
 80067c8:	3301      	adds	r3, #1
 80067ca:	440b      	add	r3, r1
 80067cc:	6123      	str	r3, [r4, #16]
 80067ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80067d0:	f04f 0900 	mov.w	r9, #0
 80067d4:	e7de      	b.n	8006794 <_printf_float+0x16c>
 80067d6:	b913      	cbnz	r3, 80067de <_printf_float+0x1b6>
 80067d8:	6822      	ldr	r2, [r4, #0]
 80067da:	07d2      	lsls	r2, r2, #31
 80067dc:	d501      	bpl.n	80067e2 <_printf_float+0x1ba>
 80067de:	3302      	adds	r3, #2
 80067e0:	e7f4      	b.n	80067cc <_printf_float+0x1a4>
 80067e2:	2301      	movs	r3, #1
 80067e4:	e7f2      	b.n	80067cc <_printf_float+0x1a4>
 80067e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80067ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ec:	4299      	cmp	r1, r3
 80067ee:	db05      	blt.n	80067fc <_printf_float+0x1d4>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	6121      	str	r1, [r4, #16]
 80067f4:	07d8      	lsls	r0, r3, #31
 80067f6:	d5ea      	bpl.n	80067ce <_printf_float+0x1a6>
 80067f8:	1c4b      	adds	r3, r1, #1
 80067fa:	e7e7      	b.n	80067cc <_printf_float+0x1a4>
 80067fc:	2900      	cmp	r1, #0
 80067fe:	bfd4      	ite	le
 8006800:	f1c1 0202 	rsble	r2, r1, #2
 8006804:	2201      	movgt	r2, #1
 8006806:	4413      	add	r3, r2
 8006808:	e7e0      	b.n	80067cc <_printf_float+0x1a4>
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	055a      	lsls	r2, r3, #21
 800680e:	d407      	bmi.n	8006820 <_printf_float+0x1f8>
 8006810:	6923      	ldr	r3, [r4, #16]
 8006812:	4642      	mov	r2, r8
 8006814:	4631      	mov	r1, r6
 8006816:	4628      	mov	r0, r5
 8006818:	47b8      	blx	r7
 800681a:	3001      	adds	r0, #1
 800681c:	d12c      	bne.n	8006878 <_printf_float+0x250>
 800681e:	e764      	b.n	80066ea <_printf_float+0xc2>
 8006820:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006824:	f240 80e0 	bls.w	80069e8 <_printf_float+0x3c0>
 8006828:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800682c:	2200      	movs	r2, #0
 800682e:	2300      	movs	r3, #0
 8006830:	f7fa f97a 	bl	8000b28 <__aeabi_dcmpeq>
 8006834:	2800      	cmp	r0, #0
 8006836:	d034      	beq.n	80068a2 <_printf_float+0x27a>
 8006838:	4a37      	ldr	r2, [pc, #220]	; (8006918 <_printf_float+0x2f0>)
 800683a:	2301      	movs	r3, #1
 800683c:	4631      	mov	r1, r6
 800683e:	4628      	mov	r0, r5
 8006840:	47b8      	blx	r7
 8006842:	3001      	adds	r0, #1
 8006844:	f43f af51 	beq.w	80066ea <_printf_float+0xc2>
 8006848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800684c:	429a      	cmp	r2, r3
 800684e:	db02      	blt.n	8006856 <_printf_float+0x22e>
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	07d8      	lsls	r0, r3, #31
 8006854:	d510      	bpl.n	8006878 <_printf_float+0x250>
 8006856:	ee18 3a10 	vmov	r3, s16
 800685a:	4652      	mov	r2, sl
 800685c:	4631      	mov	r1, r6
 800685e:	4628      	mov	r0, r5
 8006860:	47b8      	blx	r7
 8006862:	3001      	adds	r0, #1
 8006864:	f43f af41 	beq.w	80066ea <_printf_float+0xc2>
 8006868:	f04f 0800 	mov.w	r8, #0
 800686c:	f104 091a 	add.w	r9, r4, #26
 8006870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006872:	3b01      	subs	r3, #1
 8006874:	4543      	cmp	r3, r8
 8006876:	dc09      	bgt.n	800688c <_printf_float+0x264>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	079b      	lsls	r3, r3, #30
 800687c:	f100 8105 	bmi.w	8006a8a <_printf_float+0x462>
 8006880:	68e0      	ldr	r0, [r4, #12]
 8006882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006884:	4298      	cmp	r0, r3
 8006886:	bfb8      	it	lt
 8006888:	4618      	movlt	r0, r3
 800688a:	e730      	b.n	80066ee <_printf_float+0xc6>
 800688c:	2301      	movs	r3, #1
 800688e:	464a      	mov	r2, r9
 8006890:	4631      	mov	r1, r6
 8006892:	4628      	mov	r0, r5
 8006894:	47b8      	blx	r7
 8006896:	3001      	adds	r0, #1
 8006898:	f43f af27 	beq.w	80066ea <_printf_float+0xc2>
 800689c:	f108 0801 	add.w	r8, r8, #1
 80068a0:	e7e6      	b.n	8006870 <_printf_float+0x248>
 80068a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	dc39      	bgt.n	800691c <_printf_float+0x2f4>
 80068a8:	4a1b      	ldr	r2, [pc, #108]	; (8006918 <_printf_float+0x2f0>)
 80068aa:	2301      	movs	r3, #1
 80068ac:	4631      	mov	r1, r6
 80068ae:	4628      	mov	r0, r5
 80068b0:	47b8      	blx	r7
 80068b2:	3001      	adds	r0, #1
 80068b4:	f43f af19 	beq.w	80066ea <_printf_float+0xc2>
 80068b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068bc:	4313      	orrs	r3, r2
 80068be:	d102      	bne.n	80068c6 <_printf_float+0x29e>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	07d9      	lsls	r1, r3, #31
 80068c4:	d5d8      	bpl.n	8006878 <_printf_float+0x250>
 80068c6:	ee18 3a10 	vmov	r3, s16
 80068ca:	4652      	mov	r2, sl
 80068cc:	4631      	mov	r1, r6
 80068ce:	4628      	mov	r0, r5
 80068d0:	47b8      	blx	r7
 80068d2:	3001      	adds	r0, #1
 80068d4:	f43f af09 	beq.w	80066ea <_printf_float+0xc2>
 80068d8:	f04f 0900 	mov.w	r9, #0
 80068dc:	f104 0a1a 	add.w	sl, r4, #26
 80068e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e2:	425b      	negs	r3, r3
 80068e4:	454b      	cmp	r3, r9
 80068e6:	dc01      	bgt.n	80068ec <_printf_float+0x2c4>
 80068e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ea:	e792      	b.n	8006812 <_printf_float+0x1ea>
 80068ec:	2301      	movs	r3, #1
 80068ee:	4652      	mov	r2, sl
 80068f0:	4631      	mov	r1, r6
 80068f2:	4628      	mov	r0, r5
 80068f4:	47b8      	blx	r7
 80068f6:	3001      	adds	r0, #1
 80068f8:	f43f aef7 	beq.w	80066ea <_printf_float+0xc2>
 80068fc:	f109 0901 	add.w	r9, r9, #1
 8006900:	e7ee      	b.n	80068e0 <_printf_float+0x2b8>
 8006902:	bf00      	nop
 8006904:	7fefffff 	.word	0x7fefffff
 8006908:	0800abc8 	.word	0x0800abc8
 800690c:	0800abcc 	.word	0x0800abcc
 8006910:	0800abd4 	.word	0x0800abd4
 8006914:	0800abd0 	.word	0x0800abd0
 8006918:	0800abd8 	.word	0x0800abd8
 800691c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800691e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006920:	429a      	cmp	r2, r3
 8006922:	bfa8      	it	ge
 8006924:	461a      	movge	r2, r3
 8006926:	2a00      	cmp	r2, #0
 8006928:	4691      	mov	r9, r2
 800692a:	dc37      	bgt.n	800699c <_printf_float+0x374>
 800692c:	f04f 0b00 	mov.w	fp, #0
 8006930:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006934:	f104 021a 	add.w	r2, r4, #26
 8006938:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800693a:	9305      	str	r3, [sp, #20]
 800693c:	eba3 0309 	sub.w	r3, r3, r9
 8006940:	455b      	cmp	r3, fp
 8006942:	dc33      	bgt.n	80069ac <_printf_float+0x384>
 8006944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006948:	429a      	cmp	r2, r3
 800694a:	db3b      	blt.n	80069c4 <_printf_float+0x39c>
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	07da      	lsls	r2, r3, #31
 8006950:	d438      	bmi.n	80069c4 <_printf_float+0x39c>
 8006952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006954:	9a05      	ldr	r2, [sp, #20]
 8006956:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006958:	1a9a      	subs	r2, r3, r2
 800695a:	eba3 0901 	sub.w	r9, r3, r1
 800695e:	4591      	cmp	r9, r2
 8006960:	bfa8      	it	ge
 8006962:	4691      	movge	r9, r2
 8006964:	f1b9 0f00 	cmp.w	r9, #0
 8006968:	dc35      	bgt.n	80069d6 <_printf_float+0x3ae>
 800696a:	f04f 0800 	mov.w	r8, #0
 800696e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006972:	f104 0a1a 	add.w	sl, r4, #26
 8006976:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800697a:	1a9b      	subs	r3, r3, r2
 800697c:	eba3 0309 	sub.w	r3, r3, r9
 8006980:	4543      	cmp	r3, r8
 8006982:	f77f af79 	ble.w	8006878 <_printf_float+0x250>
 8006986:	2301      	movs	r3, #1
 8006988:	4652      	mov	r2, sl
 800698a:	4631      	mov	r1, r6
 800698c:	4628      	mov	r0, r5
 800698e:	47b8      	blx	r7
 8006990:	3001      	adds	r0, #1
 8006992:	f43f aeaa 	beq.w	80066ea <_printf_float+0xc2>
 8006996:	f108 0801 	add.w	r8, r8, #1
 800699a:	e7ec      	b.n	8006976 <_printf_float+0x34e>
 800699c:	4613      	mov	r3, r2
 800699e:	4631      	mov	r1, r6
 80069a0:	4642      	mov	r2, r8
 80069a2:	4628      	mov	r0, r5
 80069a4:	47b8      	blx	r7
 80069a6:	3001      	adds	r0, #1
 80069a8:	d1c0      	bne.n	800692c <_printf_float+0x304>
 80069aa:	e69e      	b.n	80066ea <_printf_float+0xc2>
 80069ac:	2301      	movs	r3, #1
 80069ae:	4631      	mov	r1, r6
 80069b0:	4628      	mov	r0, r5
 80069b2:	9205      	str	r2, [sp, #20]
 80069b4:	47b8      	blx	r7
 80069b6:	3001      	adds	r0, #1
 80069b8:	f43f ae97 	beq.w	80066ea <_printf_float+0xc2>
 80069bc:	9a05      	ldr	r2, [sp, #20]
 80069be:	f10b 0b01 	add.w	fp, fp, #1
 80069c2:	e7b9      	b.n	8006938 <_printf_float+0x310>
 80069c4:	ee18 3a10 	vmov	r3, s16
 80069c8:	4652      	mov	r2, sl
 80069ca:	4631      	mov	r1, r6
 80069cc:	4628      	mov	r0, r5
 80069ce:	47b8      	blx	r7
 80069d0:	3001      	adds	r0, #1
 80069d2:	d1be      	bne.n	8006952 <_printf_float+0x32a>
 80069d4:	e689      	b.n	80066ea <_printf_float+0xc2>
 80069d6:	9a05      	ldr	r2, [sp, #20]
 80069d8:	464b      	mov	r3, r9
 80069da:	4442      	add	r2, r8
 80069dc:	4631      	mov	r1, r6
 80069de:	4628      	mov	r0, r5
 80069e0:	47b8      	blx	r7
 80069e2:	3001      	adds	r0, #1
 80069e4:	d1c1      	bne.n	800696a <_printf_float+0x342>
 80069e6:	e680      	b.n	80066ea <_printf_float+0xc2>
 80069e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069ea:	2a01      	cmp	r2, #1
 80069ec:	dc01      	bgt.n	80069f2 <_printf_float+0x3ca>
 80069ee:	07db      	lsls	r3, r3, #31
 80069f0:	d538      	bpl.n	8006a64 <_printf_float+0x43c>
 80069f2:	2301      	movs	r3, #1
 80069f4:	4642      	mov	r2, r8
 80069f6:	4631      	mov	r1, r6
 80069f8:	4628      	mov	r0, r5
 80069fa:	47b8      	blx	r7
 80069fc:	3001      	adds	r0, #1
 80069fe:	f43f ae74 	beq.w	80066ea <_printf_float+0xc2>
 8006a02:	ee18 3a10 	vmov	r3, s16
 8006a06:	4652      	mov	r2, sl
 8006a08:	4631      	mov	r1, r6
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	47b8      	blx	r7
 8006a0e:	3001      	adds	r0, #1
 8006a10:	f43f ae6b 	beq.w	80066ea <_printf_float+0xc2>
 8006a14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a18:	2200      	movs	r2, #0
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f7fa f884 	bl	8000b28 <__aeabi_dcmpeq>
 8006a20:	b9d8      	cbnz	r0, 8006a5a <_printf_float+0x432>
 8006a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a24:	f108 0201 	add.w	r2, r8, #1
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	47b8      	blx	r7
 8006a30:	3001      	adds	r0, #1
 8006a32:	d10e      	bne.n	8006a52 <_printf_float+0x42a>
 8006a34:	e659      	b.n	80066ea <_printf_float+0xc2>
 8006a36:	2301      	movs	r3, #1
 8006a38:	4652      	mov	r2, sl
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	47b8      	blx	r7
 8006a40:	3001      	adds	r0, #1
 8006a42:	f43f ae52 	beq.w	80066ea <_printf_float+0xc2>
 8006a46:	f108 0801 	add.w	r8, r8, #1
 8006a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	4543      	cmp	r3, r8
 8006a50:	dcf1      	bgt.n	8006a36 <_printf_float+0x40e>
 8006a52:	464b      	mov	r3, r9
 8006a54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a58:	e6dc      	b.n	8006814 <_printf_float+0x1ec>
 8006a5a:	f04f 0800 	mov.w	r8, #0
 8006a5e:	f104 0a1a 	add.w	sl, r4, #26
 8006a62:	e7f2      	b.n	8006a4a <_printf_float+0x422>
 8006a64:	2301      	movs	r3, #1
 8006a66:	4642      	mov	r2, r8
 8006a68:	e7df      	b.n	8006a2a <_printf_float+0x402>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	464a      	mov	r2, r9
 8006a6e:	4631      	mov	r1, r6
 8006a70:	4628      	mov	r0, r5
 8006a72:	47b8      	blx	r7
 8006a74:	3001      	adds	r0, #1
 8006a76:	f43f ae38 	beq.w	80066ea <_printf_float+0xc2>
 8006a7a:	f108 0801 	add.w	r8, r8, #1
 8006a7e:	68e3      	ldr	r3, [r4, #12]
 8006a80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a82:	1a5b      	subs	r3, r3, r1
 8006a84:	4543      	cmp	r3, r8
 8006a86:	dcf0      	bgt.n	8006a6a <_printf_float+0x442>
 8006a88:	e6fa      	b.n	8006880 <_printf_float+0x258>
 8006a8a:	f04f 0800 	mov.w	r8, #0
 8006a8e:	f104 0919 	add.w	r9, r4, #25
 8006a92:	e7f4      	b.n	8006a7e <_printf_float+0x456>

08006a94 <_printf_common>:
 8006a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a98:	4616      	mov	r6, r2
 8006a9a:	4699      	mov	r9, r3
 8006a9c:	688a      	ldr	r2, [r1, #8]
 8006a9e:	690b      	ldr	r3, [r1, #16]
 8006aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	bfb8      	it	lt
 8006aa8:	4613      	movlt	r3, r2
 8006aaa:	6033      	str	r3, [r6, #0]
 8006aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ab0:	4607      	mov	r7, r0
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	b10a      	cbz	r2, 8006aba <_printf_common+0x26>
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	6033      	str	r3, [r6, #0]
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	0699      	lsls	r1, r3, #26
 8006abe:	bf42      	ittt	mi
 8006ac0:	6833      	ldrmi	r3, [r6, #0]
 8006ac2:	3302      	addmi	r3, #2
 8006ac4:	6033      	strmi	r3, [r6, #0]
 8006ac6:	6825      	ldr	r5, [r4, #0]
 8006ac8:	f015 0506 	ands.w	r5, r5, #6
 8006acc:	d106      	bne.n	8006adc <_printf_common+0x48>
 8006ace:	f104 0a19 	add.w	sl, r4, #25
 8006ad2:	68e3      	ldr	r3, [r4, #12]
 8006ad4:	6832      	ldr	r2, [r6, #0]
 8006ad6:	1a9b      	subs	r3, r3, r2
 8006ad8:	42ab      	cmp	r3, r5
 8006ada:	dc26      	bgt.n	8006b2a <_printf_common+0x96>
 8006adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ae0:	1e13      	subs	r3, r2, #0
 8006ae2:	6822      	ldr	r2, [r4, #0]
 8006ae4:	bf18      	it	ne
 8006ae6:	2301      	movne	r3, #1
 8006ae8:	0692      	lsls	r2, r2, #26
 8006aea:	d42b      	bmi.n	8006b44 <_printf_common+0xb0>
 8006aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006af0:	4649      	mov	r1, r9
 8006af2:	4638      	mov	r0, r7
 8006af4:	47c0      	blx	r8
 8006af6:	3001      	adds	r0, #1
 8006af8:	d01e      	beq.n	8006b38 <_printf_common+0xa4>
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	68e5      	ldr	r5, [r4, #12]
 8006afe:	6832      	ldr	r2, [r6, #0]
 8006b00:	f003 0306 	and.w	r3, r3, #6
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	bf08      	it	eq
 8006b08:	1aad      	subeq	r5, r5, r2
 8006b0a:	68a3      	ldr	r3, [r4, #8]
 8006b0c:	6922      	ldr	r2, [r4, #16]
 8006b0e:	bf0c      	ite	eq
 8006b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b14:	2500      	movne	r5, #0
 8006b16:	4293      	cmp	r3, r2
 8006b18:	bfc4      	itt	gt
 8006b1a:	1a9b      	subgt	r3, r3, r2
 8006b1c:	18ed      	addgt	r5, r5, r3
 8006b1e:	2600      	movs	r6, #0
 8006b20:	341a      	adds	r4, #26
 8006b22:	42b5      	cmp	r5, r6
 8006b24:	d11a      	bne.n	8006b5c <_printf_common+0xc8>
 8006b26:	2000      	movs	r0, #0
 8006b28:	e008      	b.n	8006b3c <_printf_common+0xa8>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	4652      	mov	r2, sl
 8006b2e:	4649      	mov	r1, r9
 8006b30:	4638      	mov	r0, r7
 8006b32:	47c0      	blx	r8
 8006b34:	3001      	adds	r0, #1
 8006b36:	d103      	bne.n	8006b40 <_printf_common+0xac>
 8006b38:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b40:	3501      	adds	r5, #1
 8006b42:	e7c6      	b.n	8006ad2 <_printf_common+0x3e>
 8006b44:	18e1      	adds	r1, r4, r3
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	2030      	movs	r0, #48	; 0x30
 8006b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b4e:	4422      	add	r2, r4
 8006b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b58:	3302      	adds	r3, #2
 8006b5a:	e7c7      	b.n	8006aec <_printf_common+0x58>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	4622      	mov	r2, r4
 8006b60:	4649      	mov	r1, r9
 8006b62:	4638      	mov	r0, r7
 8006b64:	47c0      	blx	r8
 8006b66:	3001      	adds	r0, #1
 8006b68:	d0e6      	beq.n	8006b38 <_printf_common+0xa4>
 8006b6a:	3601      	adds	r6, #1
 8006b6c:	e7d9      	b.n	8006b22 <_printf_common+0x8e>
	...

08006b70 <_printf_i>:
 8006b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b74:	7e0f      	ldrb	r7, [r1, #24]
 8006b76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b78:	2f78      	cmp	r7, #120	; 0x78
 8006b7a:	4691      	mov	r9, r2
 8006b7c:	4680      	mov	r8, r0
 8006b7e:	460c      	mov	r4, r1
 8006b80:	469a      	mov	sl, r3
 8006b82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b86:	d807      	bhi.n	8006b98 <_printf_i+0x28>
 8006b88:	2f62      	cmp	r7, #98	; 0x62
 8006b8a:	d80a      	bhi.n	8006ba2 <_printf_i+0x32>
 8006b8c:	2f00      	cmp	r7, #0
 8006b8e:	f000 80d8 	beq.w	8006d42 <_printf_i+0x1d2>
 8006b92:	2f58      	cmp	r7, #88	; 0x58
 8006b94:	f000 80a3 	beq.w	8006cde <_printf_i+0x16e>
 8006b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ba0:	e03a      	b.n	8006c18 <_printf_i+0xa8>
 8006ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ba6:	2b15      	cmp	r3, #21
 8006ba8:	d8f6      	bhi.n	8006b98 <_printf_i+0x28>
 8006baa:	a101      	add	r1, pc, #4	; (adr r1, 8006bb0 <_printf_i+0x40>)
 8006bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bb0:	08006c09 	.word	0x08006c09
 8006bb4:	08006c1d 	.word	0x08006c1d
 8006bb8:	08006b99 	.word	0x08006b99
 8006bbc:	08006b99 	.word	0x08006b99
 8006bc0:	08006b99 	.word	0x08006b99
 8006bc4:	08006b99 	.word	0x08006b99
 8006bc8:	08006c1d 	.word	0x08006c1d
 8006bcc:	08006b99 	.word	0x08006b99
 8006bd0:	08006b99 	.word	0x08006b99
 8006bd4:	08006b99 	.word	0x08006b99
 8006bd8:	08006b99 	.word	0x08006b99
 8006bdc:	08006d29 	.word	0x08006d29
 8006be0:	08006c4d 	.word	0x08006c4d
 8006be4:	08006d0b 	.word	0x08006d0b
 8006be8:	08006b99 	.word	0x08006b99
 8006bec:	08006b99 	.word	0x08006b99
 8006bf0:	08006d4b 	.word	0x08006d4b
 8006bf4:	08006b99 	.word	0x08006b99
 8006bf8:	08006c4d 	.word	0x08006c4d
 8006bfc:	08006b99 	.word	0x08006b99
 8006c00:	08006b99 	.word	0x08006b99
 8006c04:	08006d13 	.word	0x08006d13
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	1d1a      	adds	r2, r3, #4
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	602a      	str	r2, [r5, #0]
 8006c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e0a3      	b.n	8006d64 <_printf_i+0x1f4>
 8006c1c:	6820      	ldr	r0, [r4, #0]
 8006c1e:	6829      	ldr	r1, [r5, #0]
 8006c20:	0606      	lsls	r6, r0, #24
 8006c22:	f101 0304 	add.w	r3, r1, #4
 8006c26:	d50a      	bpl.n	8006c3e <_printf_i+0xce>
 8006c28:	680e      	ldr	r6, [r1, #0]
 8006c2a:	602b      	str	r3, [r5, #0]
 8006c2c:	2e00      	cmp	r6, #0
 8006c2e:	da03      	bge.n	8006c38 <_printf_i+0xc8>
 8006c30:	232d      	movs	r3, #45	; 0x2d
 8006c32:	4276      	negs	r6, r6
 8006c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c38:	485e      	ldr	r0, [pc, #376]	; (8006db4 <_printf_i+0x244>)
 8006c3a:	230a      	movs	r3, #10
 8006c3c:	e019      	b.n	8006c72 <_printf_i+0x102>
 8006c3e:	680e      	ldr	r6, [r1, #0]
 8006c40:	602b      	str	r3, [r5, #0]
 8006c42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c46:	bf18      	it	ne
 8006c48:	b236      	sxthne	r6, r6
 8006c4a:	e7ef      	b.n	8006c2c <_printf_i+0xbc>
 8006c4c:	682b      	ldr	r3, [r5, #0]
 8006c4e:	6820      	ldr	r0, [r4, #0]
 8006c50:	1d19      	adds	r1, r3, #4
 8006c52:	6029      	str	r1, [r5, #0]
 8006c54:	0601      	lsls	r1, r0, #24
 8006c56:	d501      	bpl.n	8006c5c <_printf_i+0xec>
 8006c58:	681e      	ldr	r6, [r3, #0]
 8006c5a:	e002      	b.n	8006c62 <_printf_i+0xf2>
 8006c5c:	0646      	lsls	r6, r0, #25
 8006c5e:	d5fb      	bpl.n	8006c58 <_printf_i+0xe8>
 8006c60:	881e      	ldrh	r6, [r3, #0]
 8006c62:	4854      	ldr	r0, [pc, #336]	; (8006db4 <_printf_i+0x244>)
 8006c64:	2f6f      	cmp	r7, #111	; 0x6f
 8006c66:	bf0c      	ite	eq
 8006c68:	2308      	moveq	r3, #8
 8006c6a:	230a      	movne	r3, #10
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c72:	6865      	ldr	r5, [r4, #4]
 8006c74:	60a5      	str	r5, [r4, #8]
 8006c76:	2d00      	cmp	r5, #0
 8006c78:	bfa2      	ittt	ge
 8006c7a:	6821      	ldrge	r1, [r4, #0]
 8006c7c:	f021 0104 	bicge.w	r1, r1, #4
 8006c80:	6021      	strge	r1, [r4, #0]
 8006c82:	b90e      	cbnz	r6, 8006c88 <_printf_i+0x118>
 8006c84:	2d00      	cmp	r5, #0
 8006c86:	d04d      	beq.n	8006d24 <_printf_i+0x1b4>
 8006c88:	4615      	mov	r5, r2
 8006c8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c8e:	fb03 6711 	mls	r7, r3, r1, r6
 8006c92:	5dc7      	ldrb	r7, [r0, r7]
 8006c94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c98:	4637      	mov	r7, r6
 8006c9a:	42bb      	cmp	r3, r7
 8006c9c:	460e      	mov	r6, r1
 8006c9e:	d9f4      	bls.n	8006c8a <_printf_i+0x11a>
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d10b      	bne.n	8006cbc <_printf_i+0x14c>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	07de      	lsls	r6, r3, #31
 8006ca8:	d508      	bpl.n	8006cbc <_printf_i+0x14c>
 8006caa:	6923      	ldr	r3, [r4, #16]
 8006cac:	6861      	ldr	r1, [r4, #4]
 8006cae:	4299      	cmp	r1, r3
 8006cb0:	bfde      	ittt	le
 8006cb2:	2330      	movle	r3, #48	; 0x30
 8006cb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cbc:	1b52      	subs	r2, r2, r5
 8006cbe:	6122      	str	r2, [r4, #16]
 8006cc0:	f8cd a000 	str.w	sl, [sp]
 8006cc4:	464b      	mov	r3, r9
 8006cc6:	aa03      	add	r2, sp, #12
 8006cc8:	4621      	mov	r1, r4
 8006cca:	4640      	mov	r0, r8
 8006ccc:	f7ff fee2 	bl	8006a94 <_printf_common>
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	d14c      	bne.n	8006d6e <_printf_i+0x1fe>
 8006cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd8:	b004      	add	sp, #16
 8006cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cde:	4835      	ldr	r0, [pc, #212]	; (8006db4 <_printf_i+0x244>)
 8006ce0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ce4:	6829      	ldr	r1, [r5, #0]
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cec:	6029      	str	r1, [r5, #0]
 8006cee:	061d      	lsls	r5, r3, #24
 8006cf0:	d514      	bpl.n	8006d1c <_printf_i+0x1ac>
 8006cf2:	07df      	lsls	r7, r3, #31
 8006cf4:	bf44      	itt	mi
 8006cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8006cfa:	6023      	strmi	r3, [r4, #0]
 8006cfc:	b91e      	cbnz	r6, 8006d06 <_printf_i+0x196>
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	f023 0320 	bic.w	r3, r3, #32
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	2310      	movs	r3, #16
 8006d08:	e7b0      	b.n	8006c6c <_printf_i+0xfc>
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	f043 0320 	orr.w	r3, r3, #32
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	2378      	movs	r3, #120	; 0x78
 8006d14:	4828      	ldr	r0, [pc, #160]	; (8006db8 <_printf_i+0x248>)
 8006d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d1a:	e7e3      	b.n	8006ce4 <_printf_i+0x174>
 8006d1c:	0659      	lsls	r1, r3, #25
 8006d1e:	bf48      	it	mi
 8006d20:	b2b6      	uxthmi	r6, r6
 8006d22:	e7e6      	b.n	8006cf2 <_printf_i+0x182>
 8006d24:	4615      	mov	r5, r2
 8006d26:	e7bb      	b.n	8006ca0 <_printf_i+0x130>
 8006d28:	682b      	ldr	r3, [r5, #0]
 8006d2a:	6826      	ldr	r6, [r4, #0]
 8006d2c:	6961      	ldr	r1, [r4, #20]
 8006d2e:	1d18      	adds	r0, r3, #4
 8006d30:	6028      	str	r0, [r5, #0]
 8006d32:	0635      	lsls	r5, r6, #24
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	d501      	bpl.n	8006d3c <_printf_i+0x1cc>
 8006d38:	6019      	str	r1, [r3, #0]
 8006d3a:	e002      	b.n	8006d42 <_printf_i+0x1d2>
 8006d3c:	0670      	lsls	r0, r6, #25
 8006d3e:	d5fb      	bpl.n	8006d38 <_printf_i+0x1c8>
 8006d40:	8019      	strh	r1, [r3, #0]
 8006d42:	2300      	movs	r3, #0
 8006d44:	6123      	str	r3, [r4, #16]
 8006d46:	4615      	mov	r5, r2
 8006d48:	e7ba      	b.n	8006cc0 <_printf_i+0x150>
 8006d4a:	682b      	ldr	r3, [r5, #0]
 8006d4c:	1d1a      	adds	r2, r3, #4
 8006d4e:	602a      	str	r2, [r5, #0]
 8006d50:	681d      	ldr	r5, [r3, #0]
 8006d52:	6862      	ldr	r2, [r4, #4]
 8006d54:	2100      	movs	r1, #0
 8006d56:	4628      	mov	r0, r5
 8006d58:	f7f9 fa72 	bl	8000240 <memchr>
 8006d5c:	b108      	cbz	r0, 8006d62 <_printf_i+0x1f2>
 8006d5e:	1b40      	subs	r0, r0, r5
 8006d60:	6060      	str	r0, [r4, #4]
 8006d62:	6863      	ldr	r3, [r4, #4]
 8006d64:	6123      	str	r3, [r4, #16]
 8006d66:	2300      	movs	r3, #0
 8006d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d6c:	e7a8      	b.n	8006cc0 <_printf_i+0x150>
 8006d6e:	6923      	ldr	r3, [r4, #16]
 8006d70:	462a      	mov	r2, r5
 8006d72:	4649      	mov	r1, r9
 8006d74:	4640      	mov	r0, r8
 8006d76:	47d0      	blx	sl
 8006d78:	3001      	adds	r0, #1
 8006d7a:	d0ab      	beq.n	8006cd4 <_printf_i+0x164>
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	079b      	lsls	r3, r3, #30
 8006d80:	d413      	bmi.n	8006daa <_printf_i+0x23a>
 8006d82:	68e0      	ldr	r0, [r4, #12]
 8006d84:	9b03      	ldr	r3, [sp, #12]
 8006d86:	4298      	cmp	r0, r3
 8006d88:	bfb8      	it	lt
 8006d8a:	4618      	movlt	r0, r3
 8006d8c:	e7a4      	b.n	8006cd8 <_printf_i+0x168>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	4632      	mov	r2, r6
 8006d92:	4649      	mov	r1, r9
 8006d94:	4640      	mov	r0, r8
 8006d96:	47d0      	blx	sl
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d09b      	beq.n	8006cd4 <_printf_i+0x164>
 8006d9c:	3501      	adds	r5, #1
 8006d9e:	68e3      	ldr	r3, [r4, #12]
 8006da0:	9903      	ldr	r1, [sp, #12]
 8006da2:	1a5b      	subs	r3, r3, r1
 8006da4:	42ab      	cmp	r3, r5
 8006da6:	dcf2      	bgt.n	8006d8e <_printf_i+0x21e>
 8006da8:	e7eb      	b.n	8006d82 <_printf_i+0x212>
 8006daa:	2500      	movs	r5, #0
 8006dac:	f104 0619 	add.w	r6, r4, #25
 8006db0:	e7f5      	b.n	8006d9e <_printf_i+0x22e>
 8006db2:	bf00      	nop
 8006db4:	0800abda 	.word	0x0800abda
 8006db8:	0800abeb 	.word	0x0800abeb

08006dbc <siprintf>:
 8006dbc:	b40e      	push	{r1, r2, r3}
 8006dbe:	b500      	push	{lr}
 8006dc0:	b09c      	sub	sp, #112	; 0x70
 8006dc2:	ab1d      	add	r3, sp, #116	; 0x74
 8006dc4:	9002      	str	r0, [sp, #8]
 8006dc6:	9006      	str	r0, [sp, #24]
 8006dc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006dcc:	4809      	ldr	r0, [pc, #36]	; (8006df4 <siprintf+0x38>)
 8006dce:	9107      	str	r1, [sp, #28]
 8006dd0:	9104      	str	r1, [sp, #16]
 8006dd2:	4909      	ldr	r1, [pc, #36]	; (8006df8 <siprintf+0x3c>)
 8006dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dd8:	9105      	str	r1, [sp, #20]
 8006dda:	6800      	ldr	r0, [r0, #0]
 8006ddc:	9301      	str	r3, [sp, #4]
 8006dde:	a902      	add	r1, sp, #8
 8006de0:	f002 fef2 	bl	8009bc8 <_svfiprintf_r>
 8006de4:	9b02      	ldr	r3, [sp, #8]
 8006de6:	2200      	movs	r2, #0
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	b01c      	add	sp, #112	; 0x70
 8006dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8006df0:	b003      	add	sp, #12
 8006df2:	4770      	bx	lr
 8006df4:	20000060 	.word	0x20000060
 8006df8:	ffff0208 	.word	0xffff0208

08006dfc <sulp>:
 8006dfc:	b570      	push	{r4, r5, r6, lr}
 8006dfe:	4604      	mov	r4, r0
 8006e00:	460d      	mov	r5, r1
 8006e02:	ec45 4b10 	vmov	d0, r4, r5
 8006e06:	4616      	mov	r6, r2
 8006e08:	f002 fc3c 	bl	8009684 <__ulp>
 8006e0c:	ec51 0b10 	vmov	r0, r1, d0
 8006e10:	b17e      	cbz	r6, 8006e32 <sulp+0x36>
 8006e12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006e16:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	dd09      	ble.n	8006e32 <sulp+0x36>
 8006e1e:	051b      	lsls	r3, r3, #20
 8006e20:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006e24:	2400      	movs	r4, #0
 8006e26:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006e2a:	4622      	mov	r2, r4
 8006e2c:	462b      	mov	r3, r5
 8006e2e:	f7f9 fc13 	bl	8000658 <__aeabi_dmul>
 8006e32:	bd70      	pop	{r4, r5, r6, pc}
 8006e34:	0000      	movs	r0, r0
	...

08006e38 <_strtod_l>:
 8006e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e3c:	ed2d 8b02 	vpush	{d8}
 8006e40:	b09d      	sub	sp, #116	; 0x74
 8006e42:	461f      	mov	r7, r3
 8006e44:	2300      	movs	r3, #0
 8006e46:	9318      	str	r3, [sp, #96]	; 0x60
 8006e48:	4ba2      	ldr	r3, [pc, #648]	; (80070d4 <_strtod_l+0x29c>)
 8006e4a:	9213      	str	r2, [sp, #76]	; 0x4c
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	9305      	str	r3, [sp, #20]
 8006e50:	4604      	mov	r4, r0
 8006e52:	4618      	mov	r0, r3
 8006e54:	4688      	mov	r8, r1
 8006e56:	f7f9 f9e5 	bl	8000224 <strlen>
 8006e5a:	f04f 0a00 	mov.w	sl, #0
 8006e5e:	4605      	mov	r5, r0
 8006e60:	f04f 0b00 	mov.w	fp, #0
 8006e64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006e68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e6a:	781a      	ldrb	r2, [r3, #0]
 8006e6c:	2a2b      	cmp	r2, #43	; 0x2b
 8006e6e:	d04e      	beq.n	8006f0e <_strtod_l+0xd6>
 8006e70:	d83b      	bhi.n	8006eea <_strtod_l+0xb2>
 8006e72:	2a0d      	cmp	r2, #13
 8006e74:	d834      	bhi.n	8006ee0 <_strtod_l+0xa8>
 8006e76:	2a08      	cmp	r2, #8
 8006e78:	d834      	bhi.n	8006ee4 <_strtod_l+0xac>
 8006e7a:	2a00      	cmp	r2, #0
 8006e7c:	d03e      	beq.n	8006efc <_strtod_l+0xc4>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	930a      	str	r3, [sp, #40]	; 0x28
 8006e82:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006e84:	7833      	ldrb	r3, [r6, #0]
 8006e86:	2b30      	cmp	r3, #48	; 0x30
 8006e88:	f040 80b0 	bne.w	8006fec <_strtod_l+0x1b4>
 8006e8c:	7873      	ldrb	r3, [r6, #1]
 8006e8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e92:	2b58      	cmp	r3, #88	; 0x58
 8006e94:	d168      	bne.n	8006f68 <_strtod_l+0x130>
 8006e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e98:	9301      	str	r3, [sp, #4]
 8006e9a:	ab18      	add	r3, sp, #96	; 0x60
 8006e9c:	9702      	str	r7, [sp, #8]
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	4a8d      	ldr	r2, [pc, #564]	; (80070d8 <_strtod_l+0x2a0>)
 8006ea2:	ab19      	add	r3, sp, #100	; 0x64
 8006ea4:	a917      	add	r1, sp, #92	; 0x5c
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f001 fd46 	bl	8008938 <__gethex>
 8006eac:	f010 0707 	ands.w	r7, r0, #7
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	d005      	beq.n	8006ec0 <_strtod_l+0x88>
 8006eb4:	2f06      	cmp	r7, #6
 8006eb6:	d12c      	bne.n	8006f12 <_strtod_l+0xda>
 8006eb8:	3601      	adds	r6, #1
 8006eba:	2300      	movs	r3, #0
 8006ebc:	9617      	str	r6, [sp, #92]	; 0x5c
 8006ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8006ec0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f040 8590 	bne.w	80079e8 <_strtod_l+0xbb0>
 8006ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eca:	b1eb      	cbz	r3, 8006f08 <_strtod_l+0xd0>
 8006ecc:	4652      	mov	r2, sl
 8006ece:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006ed2:	ec43 2b10 	vmov	d0, r2, r3
 8006ed6:	b01d      	add	sp, #116	; 0x74
 8006ed8:	ecbd 8b02 	vpop	{d8}
 8006edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee0:	2a20      	cmp	r2, #32
 8006ee2:	d1cc      	bne.n	8006e7e <_strtod_l+0x46>
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	9317      	str	r3, [sp, #92]	; 0x5c
 8006ee8:	e7be      	b.n	8006e68 <_strtod_l+0x30>
 8006eea:	2a2d      	cmp	r2, #45	; 0x2d
 8006eec:	d1c7      	bne.n	8006e7e <_strtod_l+0x46>
 8006eee:	2201      	movs	r2, #1
 8006ef0:	920a      	str	r2, [sp, #40]	; 0x28
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ef6:	785b      	ldrb	r3, [r3, #1]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1c2      	bne.n	8006e82 <_strtod_l+0x4a>
 8006efc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006efe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f040 856e 	bne.w	80079e4 <_strtod_l+0xbac>
 8006f08:	4652      	mov	r2, sl
 8006f0a:	465b      	mov	r3, fp
 8006f0c:	e7e1      	b.n	8006ed2 <_strtod_l+0x9a>
 8006f0e:	2200      	movs	r2, #0
 8006f10:	e7ee      	b.n	8006ef0 <_strtod_l+0xb8>
 8006f12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006f14:	b13a      	cbz	r2, 8006f26 <_strtod_l+0xee>
 8006f16:	2135      	movs	r1, #53	; 0x35
 8006f18:	a81a      	add	r0, sp, #104	; 0x68
 8006f1a:	f002 fcbe 	bl	800989a <__copybits>
 8006f1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f20:	4620      	mov	r0, r4
 8006f22:	f002 f87d 	bl	8009020 <_Bfree>
 8006f26:	3f01      	subs	r7, #1
 8006f28:	2f04      	cmp	r7, #4
 8006f2a:	d806      	bhi.n	8006f3a <_strtod_l+0x102>
 8006f2c:	e8df f007 	tbb	[pc, r7]
 8006f30:	1714030a 	.word	0x1714030a
 8006f34:	0a          	.byte	0x0a
 8006f35:	00          	.byte	0x00
 8006f36:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006f3a:	0728      	lsls	r0, r5, #28
 8006f3c:	d5c0      	bpl.n	8006ec0 <_strtod_l+0x88>
 8006f3e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006f42:	e7bd      	b.n	8006ec0 <_strtod_l+0x88>
 8006f44:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006f48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006f52:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006f56:	e7f0      	b.n	8006f3a <_strtod_l+0x102>
 8006f58:	f8df b180 	ldr.w	fp, [pc, #384]	; 80070dc <_strtod_l+0x2a4>
 8006f5c:	e7ed      	b.n	8006f3a <_strtod_l+0x102>
 8006f5e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006f62:	f04f 3aff 	mov.w	sl, #4294967295
 8006f66:	e7e8      	b.n	8006f3a <_strtod_l+0x102>
 8006f68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f6e:	785b      	ldrb	r3, [r3, #1]
 8006f70:	2b30      	cmp	r3, #48	; 0x30
 8006f72:	d0f9      	beq.n	8006f68 <_strtod_l+0x130>
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d0a3      	beq.n	8006ec0 <_strtod_l+0x88>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	f04f 0900 	mov.w	r9, #0
 8006f7e:	9304      	str	r3, [sp, #16]
 8006f80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f82:	9308      	str	r3, [sp, #32]
 8006f84:	f8cd 901c 	str.w	r9, [sp, #28]
 8006f88:	464f      	mov	r7, r9
 8006f8a:	220a      	movs	r2, #10
 8006f8c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006f8e:	7806      	ldrb	r6, [r0, #0]
 8006f90:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006f94:	b2d9      	uxtb	r1, r3
 8006f96:	2909      	cmp	r1, #9
 8006f98:	d92a      	bls.n	8006ff0 <_strtod_l+0x1b8>
 8006f9a:	9905      	ldr	r1, [sp, #20]
 8006f9c:	462a      	mov	r2, r5
 8006f9e:	f003 f887 	bl	800a0b0 <strncmp>
 8006fa2:	b398      	cbz	r0, 800700c <_strtod_l+0x1d4>
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	4632      	mov	r2, r6
 8006fa8:	463d      	mov	r5, r7
 8006faa:	9005      	str	r0, [sp, #20]
 8006fac:	4603      	mov	r3, r0
 8006fae:	2a65      	cmp	r2, #101	; 0x65
 8006fb0:	d001      	beq.n	8006fb6 <_strtod_l+0x17e>
 8006fb2:	2a45      	cmp	r2, #69	; 0x45
 8006fb4:	d118      	bne.n	8006fe8 <_strtod_l+0x1b0>
 8006fb6:	b91d      	cbnz	r5, 8006fc0 <_strtod_l+0x188>
 8006fb8:	9a04      	ldr	r2, [sp, #16]
 8006fba:	4302      	orrs	r2, r0
 8006fbc:	d09e      	beq.n	8006efc <_strtod_l+0xc4>
 8006fbe:	2500      	movs	r5, #0
 8006fc0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006fc4:	f108 0201 	add.w	r2, r8, #1
 8006fc8:	9217      	str	r2, [sp, #92]	; 0x5c
 8006fca:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006fce:	2a2b      	cmp	r2, #43	; 0x2b
 8006fd0:	d075      	beq.n	80070be <_strtod_l+0x286>
 8006fd2:	2a2d      	cmp	r2, #45	; 0x2d
 8006fd4:	d07b      	beq.n	80070ce <_strtod_l+0x296>
 8006fd6:	f04f 0c00 	mov.w	ip, #0
 8006fda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006fde:	2909      	cmp	r1, #9
 8006fe0:	f240 8082 	bls.w	80070e8 <_strtod_l+0x2b0>
 8006fe4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006fe8:	2600      	movs	r6, #0
 8006fea:	e09d      	b.n	8007128 <_strtod_l+0x2f0>
 8006fec:	2300      	movs	r3, #0
 8006fee:	e7c4      	b.n	8006f7a <_strtod_l+0x142>
 8006ff0:	2f08      	cmp	r7, #8
 8006ff2:	bfd8      	it	le
 8006ff4:	9907      	ldrle	r1, [sp, #28]
 8006ff6:	f100 0001 	add.w	r0, r0, #1
 8006ffa:	bfda      	itte	le
 8006ffc:	fb02 3301 	mlale	r3, r2, r1, r3
 8007000:	9307      	strle	r3, [sp, #28]
 8007002:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007006:	3701      	adds	r7, #1
 8007008:	9017      	str	r0, [sp, #92]	; 0x5c
 800700a:	e7bf      	b.n	8006f8c <_strtod_l+0x154>
 800700c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800700e:	195a      	adds	r2, r3, r5
 8007010:	9217      	str	r2, [sp, #92]	; 0x5c
 8007012:	5d5a      	ldrb	r2, [r3, r5]
 8007014:	2f00      	cmp	r7, #0
 8007016:	d037      	beq.n	8007088 <_strtod_l+0x250>
 8007018:	9005      	str	r0, [sp, #20]
 800701a:	463d      	mov	r5, r7
 800701c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007020:	2b09      	cmp	r3, #9
 8007022:	d912      	bls.n	800704a <_strtod_l+0x212>
 8007024:	2301      	movs	r3, #1
 8007026:	e7c2      	b.n	8006fae <_strtod_l+0x176>
 8007028:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800702a:	1c5a      	adds	r2, r3, #1
 800702c:	9217      	str	r2, [sp, #92]	; 0x5c
 800702e:	785a      	ldrb	r2, [r3, #1]
 8007030:	3001      	adds	r0, #1
 8007032:	2a30      	cmp	r2, #48	; 0x30
 8007034:	d0f8      	beq.n	8007028 <_strtod_l+0x1f0>
 8007036:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800703a:	2b08      	cmp	r3, #8
 800703c:	f200 84d9 	bhi.w	80079f2 <_strtod_l+0xbba>
 8007040:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007042:	9005      	str	r0, [sp, #20]
 8007044:	2000      	movs	r0, #0
 8007046:	9308      	str	r3, [sp, #32]
 8007048:	4605      	mov	r5, r0
 800704a:	3a30      	subs	r2, #48	; 0x30
 800704c:	f100 0301 	add.w	r3, r0, #1
 8007050:	d014      	beq.n	800707c <_strtod_l+0x244>
 8007052:	9905      	ldr	r1, [sp, #20]
 8007054:	4419      	add	r1, r3
 8007056:	9105      	str	r1, [sp, #20]
 8007058:	462b      	mov	r3, r5
 800705a:	eb00 0e05 	add.w	lr, r0, r5
 800705e:	210a      	movs	r1, #10
 8007060:	4573      	cmp	r3, lr
 8007062:	d113      	bne.n	800708c <_strtod_l+0x254>
 8007064:	182b      	adds	r3, r5, r0
 8007066:	2b08      	cmp	r3, #8
 8007068:	f105 0501 	add.w	r5, r5, #1
 800706c:	4405      	add	r5, r0
 800706e:	dc1c      	bgt.n	80070aa <_strtod_l+0x272>
 8007070:	9907      	ldr	r1, [sp, #28]
 8007072:	230a      	movs	r3, #10
 8007074:	fb03 2301 	mla	r3, r3, r1, r2
 8007078:	9307      	str	r3, [sp, #28]
 800707a:	2300      	movs	r3, #0
 800707c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800707e:	1c51      	adds	r1, r2, #1
 8007080:	9117      	str	r1, [sp, #92]	; 0x5c
 8007082:	7852      	ldrb	r2, [r2, #1]
 8007084:	4618      	mov	r0, r3
 8007086:	e7c9      	b.n	800701c <_strtod_l+0x1e4>
 8007088:	4638      	mov	r0, r7
 800708a:	e7d2      	b.n	8007032 <_strtod_l+0x1fa>
 800708c:	2b08      	cmp	r3, #8
 800708e:	dc04      	bgt.n	800709a <_strtod_l+0x262>
 8007090:	9e07      	ldr	r6, [sp, #28]
 8007092:	434e      	muls	r6, r1
 8007094:	9607      	str	r6, [sp, #28]
 8007096:	3301      	adds	r3, #1
 8007098:	e7e2      	b.n	8007060 <_strtod_l+0x228>
 800709a:	f103 0c01 	add.w	ip, r3, #1
 800709e:	f1bc 0f10 	cmp.w	ip, #16
 80070a2:	bfd8      	it	le
 80070a4:	fb01 f909 	mulle.w	r9, r1, r9
 80070a8:	e7f5      	b.n	8007096 <_strtod_l+0x25e>
 80070aa:	2d10      	cmp	r5, #16
 80070ac:	bfdc      	itt	le
 80070ae:	230a      	movle	r3, #10
 80070b0:	fb03 2909 	mlale	r9, r3, r9, r2
 80070b4:	e7e1      	b.n	800707a <_strtod_l+0x242>
 80070b6:	2300      	movs	r3, #0
 80070b8:	9305      	str	r3, [sp, #20]
 80070ba:	2301      	movs	r3, #1
 80070bc:	e77c      	b.n	8006fb8 <_strtod_l+0x180>
 80070be:	f04f 0c00 	mov.w	ip, #0
 80070c2:	f108 0202 	add.w	r2, r8, #2
 80070c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80070c8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80070cc:	e785      	b.n	8006fda <_strtod_l+0x1a2>
 80070ce:	f04f 0c01 	mov.w	ip, #1
 80070d2:	e7f6      	b.n	80070c2 <_strtod_l+0x28a>
 80070d4:	0800ade0 	.word	0x0800ade0
 80070d8:	0800abfc 	.word	0x0800abfc
 80070dc:	7ff00000 	.word	0x7ff00000
 80070e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070e2:	1c51      	adds	r1, r2, #1
 80070e4:	9117      	str	r1, [sp, #92]	; 0x5c
 80070e6:	7852      	ldrb	r2, [r2, #1]
 80070e8:	2a30      	cmp	r2, #48	; 0x30
 80070ea:	d0f9      	beq.n	80070e0 <_strtod_l+0x2a8>
 80070ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80070f0:	2908      	cmp	r1, #8
 80070f2:	f63f af79 	bhi.w	8006fe8 <_strtod_l+0x1b0>
 80070f6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80070fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070fc:	9206      	str	r2, [sp, #24]
 80070fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007100:	1c51      	adds	r1, r2, #1
 8007102:	9117      	str	r1, [sp, #92]	; 0x5c
 8007104:	7852      	ldrb	r2, [r2, #1]
 8007106:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800710a:	2e09      	cmp	r6, #9
 800710c:	d937      	bls.n	800717e <_strtod_l+0x346>
 800710e:	9e06      	ldr	r6, [sp, #24]
 8007110:	1b89      	subs	r1, r1, r6
 8007112:	2908      	cmp	r1, #8
 8007114:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007118:	dc02      	bgt.n	8007120 <_strtod_l+0x2e8>
 800711a:	4576      	cmp	r6, lr
 800711c:	bfa8      	it	ge
 800711e:	4676      	movge	r6, lr
 8007120:	f1bc 0f00 	cmp.w	ip, #0
 8007124:	d000      	beq.n	8007128 <_strtod_l+0x2f0>
 8007126:	4276      	negs	r6, r6
 8007128:	2d00      	cmp	r5, #0
 800712a:	d14d      	bne.n	80071c8 <_strtod_l+0x390>
 800712c:	9904      	ldr	r1, [sp, #16]
 800712e:	4301      	orrs	r1, r0
 8007130:	f47f aec6 	bne.w	8006ec0 <_strtod_l+0x88>
 8007134:	2b00      	cmp	r3, #0
 8007136:	f47f aee1 	bne.w	8006efc <_strtod_l+0xc4>
 800713a:	2a69      	cmp	r2, #105	; 0x69
 800713c:	d027      	beq.n	800718e <_strtod_l+0x356>
 800713e:	dc24      	bgt.n	800718a <_strtod_l+0x352>
 8007140:	2a49      	cmp	r2, #73	; 0x49
 8007142:	d024      	beq.n	800718e <_strtod_l+0x356>
 8007144:	2a4e      	cmp	r2, #78	; 0x4e
 8007146:	f47f aed9 	bne.w	8006efc <_strtod_l+0xc4>
 800714a:	499f      	ldr	r1, [pc, #636]	; (80073c8 <_strtod_l+0x590>)
 800714c:	a817      	add	r0, sp, #92	; 0x5c
 800714e:	f001 fe4b 	bl	8008de8 <__match>
 8007152:	2800      	cmp	r0, #0
 8007154:	f43f aed2 	beq.w	8006efc <_strtod_l+0xc4>
 8007158:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	2b28      	cmp	r3, #40	; 0x28
 800715e:	d12d      	bne.n	80071bc <_strtod_l+0x384>
 8007160:	499a      	ldr	r1, [pc, #616]	; (80073cc <_strtod_l+0x594>)
 8007162:	aa1a      	add	r2, sp, #104	; 0x68
 8007164:	a817      	add	r0, sp, #92	; 0x5c
 8007166:	f001 fe53 	bl	8008e10 <__hexnan>
 800716a:	2805      	cmp	r0, #5
 800716c:	d126      	bne.n	80071bc <_strtod_l+0x384>
 800716e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007170:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007174:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007178:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800717c:	e6a0      	b.n	8006ec0 <_strtod_l+0x88>
 800717e:	210a      	movs	r1, #10
 8007180:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007184:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007188:	e7b9      	b.n	80070fe <_strtod_l+0x2c6>
 800718a:	2a6e      	cmp	r2, #110	; 0x6e
 800718c:	e7db      	b.n	8007146 <_strtod_l+0x30e>
 800718e:	4990      	ldr	r1, [pc, #576]	; (80073d0 <_strtod_l+0x598>)
 8007190:	a817      	add	r0, sp, #92	; 0x5c
 8007192:	f001 fe29 	bl	8008de8 <__match>
 8007196:	2800      	cmp	r0, #0
 8007198:	f43f aeb0 	beq.w	8006efc <_strtod_l+0xc4>
 800719c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800719e:	498d      	ldr	r1, [pc, #564]	; (80073d4 <_strtod_l+0x59c>)
 80071a0:	3b01      	subs	r3, #1
 80071a2:	a817      	add	r0, sp, #92	; 0x5c
 80071a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80071a6:	f001 fe1f 	bl	8008de8 <__match>
 80071aa:	b910      	cbnz	r0, 80071b2 <_strtod_l+0x37a>
 80071ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071ae:	3301      	adds	r3, #1
 80071b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80071b2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80073e4 <_strtod_l+0x5ac>
 80071b6:	f04f 0a00 	mov.w	sl, #0
 80071ba:	e681      	b.n	8006ec0 <_strtod_l+0x88>
 80071bc:	4886      	ldr	r0, [pc, #536]	; (80073d8 <_strtod_l+0x5a0>)
 80071be:	f002 ff5f 	bl	800a080 <nan>
 80071c2:	ec5b ab10 	vmov	sl, fp, d0
 80071c6:	e67b      	b.n	8006ec0 <_strtod_l+0x88>
 80071c8:	9b05      	ldr	r3, [sp, #20]
 80071ca:	9807      	ldr	r0, [sp, #28]
 80071cc:	1af3      	subs	r3, r6, r3
 80071ce:	2f00      	cmp	r7, #0
 80071d0:	bf08      	it	eq
 80071d2:	462f      	moveq	r7, r5
 80071d4:	2d10      	cmp	r5, #16
 80071d6:	9306      	str	r3, [sp, #24]
 80071d8:	46a8      	mov	r8, r5
 80071da:	bfa8      	it	ge
 80071dc:	f04f 0810 	movge.w	r8, #16
 80071e0:	f7f9 f9c0 	bl	8000564 <__aeabi_ui2d>
 80071e4:	2d09      	cmp	r5, #9
 80071e6:	4682      	mov	sl, r0
 80071e8:	468b      	mov	fp, r1
 80071ea:	dd13      	ble.n	8007214 <_strtod_l+0x3dc>
 80071ec:	4b7b      	ldr	r3, [pc, #492]	; (80073dc <_strtod_l+0x5a4>)
 80071ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80071f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80071f6:	f7f9 fa2f 	bl	8000658 <__aeabi_dmul>
 80071fa:	4682      	mov	sl, r0
 80071fc:	4648      	mov	r0, r9
 80071fe:	468b      	mov	fp, r1
 8007200:	f7f9 f9b0 	bl	8000564 <__aeabi_ui2d>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4650      	mov	r0, sl
 800720a:	4659      	mov	r1, fp
 800720c:	f7f9 f86e 	bl	80002ec <__adddf3>
 8007210:	4682      	mov	sl, r0
 8007212:	468b      	mov	fp, r1
 8007214:	2d0f      	cmp	r5, #15
 8007216:	dc38      	bgt.n	800728a <_strtod_l+0x452>
 8007218:	9b06      	ldr	r3, [sp, #24]
 800721a:	2b00      	cmp	r3, #0
 800721c:	f43f ae50 	beq.w	8006ec0 <_strtod_l+0x88>
 8007220:	dd24      	ble.n	800726c <_strtod_l+0x434>
 8007222:	2b16      	cmp	r3, #22
 8007224:	dc0b      	bgt.n	800723e <_strtod_l+0x406>
 8007226:	496d      	ldr	r1, [pc, #436]	; (80073dc <_strtod_l+0x5a4>)
 8007228:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800722c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007230:	4652      	mov	r2, sl
 8007232:	465b      	mov	r3, fp
 8007234:	f7f9 fa10 	bl	8000658 <__aeabi_dmul>
 8007238:	4682      	mov	sl, r0
 800723a:	468b      	mov	fp, r1
 800723c:	e640      	b.n	8006ec0 <_strtod_l+0x88>
 800723e:	9a06      	ldr	r2, [sp, #24]
 8007240:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007244:	4293      	cmp	r3, r2
 8007246:	db20      	blt.n	800728a <_strtod_l+0x452>
 8007248:	4c64      	ldr	r4, [pc, #400]	; (80073dc <_strtod_l+0x5a4>)
 800724a:	f1c5 050f 	rsb	r5, r5, #15
 800724e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007252:	4652      	mov	r2, sl
 8007254:	465b      	mov	r3, fp
 8007256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800725a:	f7f9 f9fd 	bl	8000658 <__aeabi_dmul>
 800725e:	9b06      	ldr	r3, [sp, #24]
 8007260:	1b5d      	subs	r5, r3, r5
 8007262:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007266:	e9d4 2300 	ldrd	r2, r3, [r4]
 800726a:	e7e3      	b.n	8007234 <_strtod_l+0x3fc>
 800726c:	9b06      	ldr	r3, [sp, #24]
 800726e:	3316      	adds	r3, #22
 8007270:	db0b      	blt.n	800728a <_strtod_l+0x452>
 8007272:	9b05      	ldr	r3, [sp, #20]
 8007274:	1b9e      	subs	r6, r3, r6
 8007276:	4b59      	ldr	r3, [pc, #356]	; (80073dc <_strtod_l+0x5a4>)
 8007278:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800727c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007280:	4650      	mov	r0, sl
 8007282:	4659      	mov	r1, fp
 8007284:	f7f9 fb12 	bl	80008ac <__aeabi_ddiv>
 8007288:	e7d6      	b.n	8007238 <_strtod_l+0x400>
 800728a:	9b06      	ldr	r3, [sp, #24]
 800728c:	eba5 0808 	sub.w	r8, r5, r8
 8007290:	4498      	add	r8, r3
 8007292:	f1b8 0f00 	cmp.w	r8, #0
 8007296:	dd74      	ble.n	8007382 <_strtod_l+0x54a>
 8007298:	f018 030f 	ands.w	r3, r8, #15
 800729c:	d00a      	beq.n	80072b4 <_strtod_l+0x47c>
 800729e:	494f      	ldr	r1, [pc, #316]	; (80073dc <_strtod_l+0x5a4>)
 80072a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80072a4:	4652      	mov	r2, sl
 80072a6:	465b      	mov	r3, fp
 80072a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072ac:	f7f9 f9d4 	bl	8000658 <__aeabi_dmul>
 80072b0:	4682      	mov	sl, r0
 80072b2:	468b      	mov	fp, r1
 80072b4:	f038 080f 	bics.w	r8, r8, #15
 80072b8:	d04f      	beq.n	800735a <_strtod_l+0x522>
 80072ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80072be:	dd22      	ble.n	8007306 <_strtod_l+0x4ce>
 80072c0:	2500      	movs	r5, #0
 80072c2:	462e      	mov	r6, r5
 80072c4:	9507      	str	r5, [sp, #28]
 80072c6:	9505      	str	r5, [sp, #20]
 80072c8:	2322      	movs	r3, #34	; 0x22
 80072ca:	f8df b118 	ldr.w	fp, [pc, #280]	; 80073e4 <_strtod_l+0x5ac>
 80072ce:	6023      	str	r3, [r4, #0]
 80072d0:	f04f 0a00 	mov.w	sl, #0
 80072d4:	9b07      	ldr	r3, [sp, #28]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f43f adf2 	beq.w	8006ec0 <_strtod_l+0x88>
 80072dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80072de:	4620      	mov	r0, r4
 80072e0:	f001 fe9e 	bl	8009020 <_Bfree>
 80072e4:	9905      	ldr	r1, [sp, #20]
 80072e6:	4620      	mov	r0, r4
 80072e8:	f001 fe9a 	bl	8009020 <_Bfree>
 80072ec:	4631      	mov	r1, r6
 80072ee:	4620      	mov	r0, r4
 80072f0:	f001 fe96 	bl	8009020 <_Bfree>
 80072f4:	9907      	ldr	r1, [sp, #28]
 80072f6:	4620      	mov	r0, r4
 80072f8:	f001 fe92 	bl	8009020 <_Bfree>
 80072fc:	4629      	mov	r1, r5
 80072fe:	4620      	mov	r0, r4
 8007300:	f001 fe8e 	bl	8009020 <_Bfree>
 8007304:	e5dc      	b.n	8006ec0 <_strtod_l+0x88>
 8007306:	4b36      	ldr	r3, [pc, #216]	; (80073e0 <_strtod_l+0x5a8>)
 8007308:	9304      	str	r3, [sp, #16]
 800730a:	2300      	movs	r3, #0
 800730c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007310:	4650      	mov	r0, sl
 8007312:	4659      	mov	r1, fp
 8007314:	4699      	mov	r9, r3
 8007316:	f1b8 0f01 	cmp.w	r8, #1
 800731a:	dc21      	bgt.n	8007360 <_strtod_l+0x528>
 800731c:	b10b      	cbz	r3, 8007322 <_strtod_l+0x4ea>
 800731e:	4682      	mov	sl, r0
 8007320:	468b      	mov	fp, r1
 8007322:	4b2f      	ldr	r3, [pc, #188]	; (80073e0 <_strtod_l+0x5a8>)
 8007324:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007328:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800732c:	4652      	mov	r2, sl
 800732e:	465b      	mov	r3, fp
 8007330:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007334:	f7f9 f990 	bl	8000658 <__aeabi_dmul>
 8007338:	4b2a      	ldr	r3, [pc, #168]	; (80073e4 <_strtod_l+0x5ac>)
 800733a:	460a      	mov	r2, r1
 800733c:	400b      	ands	r3, r1
 800733e:	492a      	ldr	r1, [pc, #168]	; (80073e8 <_strtod_l+0x5b0>)
 8007340:	428b      	cmp	r3, r1
 8007342:	4682      	mov	sl, r0
 8007344:	d8bc      	bhi.n	80072c0 <_strtod_l+0x488>
 8007346:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800734a:	428b      	cmp	r3, r1
 800734c:	bf86      	itte	hi
 800734e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80073ec <_strtod_l+0x5b4>
 8007352:	f04f 3aff 	movhi.w	sl, #4294967295
 8007356:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800735a:	2300      	movs	r3, #0
 800735c:	9304      	str	r3, [sp, #16]
 800735e:	e084      	b.n	800746a <_strtod_l+0x632>
 8007360:	f018 0f01 	tst.w	r8, #1
 8007364:	d005      	beq.n	8007372 <_strtod_l+0x53a>
 8007366:	9b04      	ldr	r3, [sp, #16]
 8007368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736c:	f7f9 f974 	bl	8000658 <__aeabi_dmul>
 8007370:	2301      	movs	r3, #1
 8007372:	9a04      	ldr	r2, [sp, #16]
 8007374:	3208      	adds	r2, #8
 8007376:	f109 0901 	add.w	r9, r9, #1
 800737a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800737e:	9204      	str	r2, [sp, #16]
 8007380:	e7c9      	b.n	8007316 <_strtod_l+0x4de>
 8007382:	d0ea      	beq.n	800735a <_strtod_l+0x522>
 8007384:	f1c8 0800 	rsb	r8, r8, #0
 8007388:	f018 020f 	ands.w	r2, r8, #15
 800738c:	d00a      	beq.n	80073a4 <_strtod_l+0x56c>
 800738e:	4b13      	ldr	r3, [pc, #76]	; (80073dc <_strtod_l+0x5a4>)
 8007390:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007394:	4650      	mov	r0, sl
 8007396:	4659      	mov	r1, fp
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	f7f9 fa86 	bl	80008ac <__aeabi_ddiv>
 80073a0:	4682      	mov	sl, r0
 80073a2:	468b      	mov	fp, r1
 80073a4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80073a8:	d0d7      	beq.n	800735a <_strtod_l+0x522>
 80073aa:	f1b8 0f1f 	cmp.w	r8, #31
 80073ae:	dd1f      	ble.n	80073f0 <_strtod_l+0x5b8>
 80073b0:	2500      	movs	r5, #0
 80073b2:	462e      	mov	r6, r5
 80073b4:	9507      	str	r5, [sp, #28]
 80073b6:	9505      	str	r5, [sp, #20]
 80073b8:	2322      	movs	r3, #34	; 0x22
 80073ba:	f04f 0a00 	mov.w	sl, #0
 80073be:	f04f 0b00 	mov.w	fp, #0
 80073c2:	6023      	str	r3, [r4, #0]
 80073c4:	e786      	b.n	80072d4 <_strtod_l+0x49c>
 80073c6:	bf00      	nop
 80073c8:	0800abd5 	.word	0x0800abd5
 80073cc:	0800ac10 	.word	0x0800ac10
 80073d0:	0800abcd 	.word	0x0800abcd
 80073d4:	0800ad03 	.word	0x0800ad03
 80073d8:	0800acff 	.word	0x0800acff
 80073dc:	0800ae78 	.word	0x0800ae78
 80073e0:	0800ae50 	.word	0x0800ae50
 80073e4:	7ff00000 	.word	0x7ff00000
 80073e8:	7ca00000 	.word	0x7ca00000
 80073ec:	7fefffff 	.word	0x7fefffff
 80073f0:	f018 0310 	ands.w	r3, r8, #16
 80073f4:	bf18      	it	ne
 80073f6:	236a      	movne	r3, #106	; 0x6a
 80073f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80077a8 <_strtod_l+0x970>
 80073fc:	9304      	str	r3, [sp, #16]
 80073fe:	4650      	mov	r0, sl
 8007400:	4659      	mov	r1, fp
 8007402:	2300      	movs	r3, #0
 8007404:	f018 0f01 	tst.w	r8, #1
 8007408:	d004      	beq.n	8007414 <_strtod_l+0x5dc>
 800740a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800740e:	f7f9 f923 	bl	8000658 <__aeabi_dmul>
 8007412:	2301      	movs	r3, #1
 8007414:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007418:	f109 0908 	add.w	r9, r9, #8
 800741c:	d1f2      	bne.n	8007404 <_strtod_l+0x5cc>
 800741e:	b10b      	cbz	r3, 8007424 <_strtod_l+0x5ec>
 8007420:	4682      	mov	sl, r0
 8007422:	468b      	mov	fp, r1
 8007424:	9b04      	ldr	r3, [sp, #16]
 8007426:	b1c3      	cbz	r3, 800745a <_strtod_l+0x622>
 8007428:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800742c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007430:	2b00      	cmp	r3, #0
 8007432:	4659      	mov	r1, fp
 8007434:	dd11      	ble.n	800745a <_strtod_l+0x622>
 8007436:	2b1f      	cmp	r3, #31
 8007438:	f340 8124 	ble.w	8007684 <_strtod_l+0x84c>
 800743c:	2b34      	cmp	r3, #52	; 0x34
 800743e:	bfde      	ittt	le
 8007440:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007444:	f04f 33ff 	movle.w	r3, #4294967295
 8007448:	fa03 f202 	lslle.w	r2, r3, r2
 800744c:	f04f 0a00 	mov.w	sl, #0
 8007450:	bfcc      	ite	gt
 8007452:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007456:	ea02 0b01 	andle.w	fp, r2, r1
 800745a:	2200      	movs	r2, #0
 800745c:	2300      	movs	r3, #0
 800745e:	4650      	mov	r0, sl
 8007460:	4659      	mov	r1, fp
 8007462:	f7f9 fb61 	bl	8000b28 <__aeabi_dcmpeq>
 8007466:	2800      	cmp	r0, #0
 8007468:	d1a2      	bne.n	80073b0 <_strtod_l+0x578>
 800746a:	9b07      	ldr	r3, [sp, #28]
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	9908      	ldr	r1, [sp, #32]
 8007470:	462b      	mov	r3, r5
 8007472:	463a      	mov	r2, r7
 8007474:	4620      	mov	r0, r4
 8007476:	f001 fe3b 	bl	80090f0 <__s2b>
 800747a:	9007      	str	r0, [sp, #28]
 800747c:	2800      	cmp	r0, #0
 800747e:	f43f af1f 	beq.w	80072c0 <_strtod_l+0x488>
 8007482:	9b05      	ldr	r3, [sp, #20]
 8007484:	1b9e      	subs	r6, r3, r6
 8007486:	9b06      	ldr	r3, [sp, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	bfb4      	ite	lt
 800748c:	4633      	movlt	r3, r6
 800748e:	2300      	movge	r3, #0
 8007490:	930c      	str	r3, [sp, #48]	; 0x30
 8007492:	9b06      	ldr	r3, [sp, #24]
 8007494:	2500      	movs	r5, #0
 8007496:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800749a:	9312      	str	r3, [sp, #72]	; 0x48
 800749c:	462e      	mov	r6, r5
 800749e:	9b07      	ldr	r3, [sp, #28]
 80074a0:	4620      	mov	r0, r4
 80074a2:	6859      	ldr	r1, [r3, #4]
 80074a4:	f001 fd7c 	bl	8008fa0 <_Balloc>
 80074a8:	9005      	str	r0, [sp, #20]
 80074aa:	2800      	cmp	r0, #0
 80074ac:	f43f af0c 	beq.w	80072c8 <_strtod_l+0x490>
 80074b0:	9b07      	ldr	r3, [sp, #28]
 80074b2:	691a      	ldr	r2, [r3, #16]
 80074b4:	3202      	adds	r2, #2
 80074b6:	f103 010c 	add.w	r1, r3, #12
 80074ba:	0092      	lsls	r2, r2, #2
 80074bc:	300c      	adds	r0, #12
 80074be:	f001 fd61 	bl	8008f84 <memcpy>
 80074c2:	ec4b ab10 	vmov	d0, sl, fp
 80074c6:	aa1a      	add	r2, sp, #104	; 0x68
 80074c8:	a919      	add	r1, sp, #100	; 0x64
 80074ca:	4620      	mov	r0, r4
 80074cc:	f002 f956 	bl	800977c <__d2b>
 80074d0:	ec4b ab18 	vmov	d8, sl, fp
 80074d4:	9018      	str	r0, [sp, #96]	; 0x60
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f43f aef6 	beq.w	80072c8 <_strtod_l+0x490>
 80074dc:	2101      	movs	r1, #1
 80074de:	4620      	mov	r0, r4
 80074e0:	f001 fea0 	bl	8009224 <__i2b>
 80074e4:	4606      	mov	r6, r0
 80074e6:	2800      	cmp	r0, #0
 80074e8:	f43f aeee 	beq.w	80072c8 <_strtod_l+0x490>
 80074ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074ee:	9904      	ldr	r1, [sp, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	bfab      	itete	ge
 80074f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80074f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80074f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80074fa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80074fe:	bfac      	ite	ge
 8007500:	eb03 0902 	addge.w	r9, r3, r2
 8007504:	1ad7      	sublt	r7, r2, r3
 8007506:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007508:	eba3 0801 	sub.w	r8, r3, r1
 800750c:	4490      	add	r8, r2
 800750e:	4ba1      	ldr	r3, [pc, #644]	; (8007794 <_strtod_l+0x95c>)
 8007510:	f108 38ff 	add.w	r8, r8, #4294967295
 8007514:	4598      	cmp	r8, r3
 8007516:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800751a:	f280 80c7 	bge.w	80076ac <_strtod_l+0x874>
 800751e:	eba3 0308 	sub.w	r3, r3, r8
 8007522:	2b1f      	cmp	r3, #31
 8007524:	eba2 0203 	sub.w	r2, r2, r3
 8007528:	f04f 0101 	mov.w	r1, #1
 800752c:	f300 80b1 	bgt.w	8007692 <_strtod_l+0x85a>
 8007530:	fa01 f303 	lsl.w	r3, r1, r3
 8007534:	930d      	str	r3, [sp, #52]	; 0x34
 8007536:	2300      	movs	r3, #0
 8007538:	9308      	str	r3, [sp, #32]
 800753a:	eb09 0802 	add.w	r8, r9, r2
 800753e:	9b04      	ldr	r3, [sp, #16]
 8007540:	45c1      	cmp	r9, r8
 8007542:	4417      	add	r7, r2
 8007544:	441f      	add	r7, r3
 8007546:	464b      	mov	r3, r9
 8007548:	bfa8      	it	ge
 800754a:	4643      	movge	r3, r8
 800754c:	42bb      	cmp	r3, r7
 800754e:	bfa8      	it	ge
 8007550:	463b      	movge	r3, r7
 8007552:	2b00      	cmp	r3, #0
 8007554:	bfc2      	ittt	gt
 8007556:	eba8 0803 	subgt.w	r8, r8, r3
 800755a:	1aff      	subgt	r7, r7, r3
 800755c:	eba9 0903 	subgt.w	r9, r9, r3
 8007560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007562:	2b00      	cmp	r3, #0
 8007564:	dd17      	ble.n	8007596 <_strtod_l+0x75e>
 8007566:	4631      	mov	r1, r6
 8007568:	461a      	mov	r2, r3
 800756a:	4620      	mov	r0, r4
 800756c:	f001 ff1a 	bl	80093a4 <__pow5mult>
 8007570:	4606      	mov	r6, r0
 8007572:	2800      	cmp	r0, #0
 8007574:	f43f aea8 	beq.w	80072c8 <_strtod_l+0x490>
 8007578:	4601      	mov	r1, r0
 800757a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800757c:	4620      	mov	r0, r4
 800757e:	f001 fe67 	bl	8009250 <__multiply>
 8007582:	900b      	str	r0, [sp, #44]	; 0x2c
 8007584:	2800      	cmp	r0, #0
 8007586:	f43f ae9f 	beq.w	80072c8 <_strtod_l+0x490>
 800758a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800758c:	4620      	mov	r0, r4
 800758e:	f001 fd47 	bl	8009020 <_Bfree>
 8007592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007594:	9318      	str	r3, [sp, #96]	; 0x60
 8007596:	f1b8 0f00 	cmp.w	r8, #0
 800759a:	f300 808c 	bgt.w	80076b6 <_strtod_l+0x87e>
 800759e:	9b06      	ldr	r3, [sp, #24]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	dd08      	ble.n	80075b6 <_strtod_l+0x77e>
 80075a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075a6:	9905      	ldr	r1, [sp, #20]
 80075a8:	4620      	mov	r0, r4
 80075aa:	f001 fefb 	bl	80093a4 <__pow5mult>
 80075ae:	9005      	str	r0, [sp, #20]
 80075b0:	2800      	cmp	r0, #0
 80075b2:	f43f ae89 	beq.w	80072c8 <_strtod_l+0x490>
 80075b6:	2f00      	cmp	r7, #0
 80075b8:	dd08      	ble.n	80075cc <_strtod_l+0x794>
 80075ba:	9905      	ldr	r1, [sp, #20]
 80075bc:	463a      	mov	r2, r7
 80075be:	4620      	mov	r0, r4
 80075c0:	f001 ff4a 	bl	8009458 <__lshift>
 80075c4:	9005      	str	r0, [sp, #20]
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f43f ae7e 	beq.w	80072c8 <_strtod_l+0x490>
 80075cc:	f1b9 0f00 	cmp.w	r9, #0
 80075d0:	dd08      	ble.n	80075e4 <_strtod_l+0x7ac>
 80075d2:	4631      	mov	r1, r6
 80075d4:	464a      	mov	r2, r9
 80075d6:	4620      	mov	r0, r4
 80075d8:	f001 ff3e 	bl	8009458 <__lshift>
 80075dc:	4606      	mov	r6, r0
 80075de:	2800      	cmp	r0, #0
 80075e0:	f43f ae72 	beq.w	80072c8 <_strtod_l+0x490>
 80075e4:	9a05      	ldr	r2, [sp, #20]
 80075e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075e8:	4620      	mov	r0, r4
 80075ea:	f001 ffc1 	bl	8009570 <__mdiff>
 80075ee:	4605      	mov	r5, r0
 80075f0:	2800      	cmp	r0, #0
 80075f2:	f43f ae69 	beq.w	80072c8 <_strtod_l+0x490>
 80075f6:	68c3      	ldr	r3, [r0, #12]
 80075f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80075fa:	2300      	movs	r3, #0
 80075fc:	60c3      	str	r3, [r0, #12]
 80075fe:	4631      	mov	r1, r6
 8007600:	f001 ff9a 	bl	8009538 <__mcmp>
 8007604:	2800      	cmp	r0, #0
 8007606:	da60      	bge.n	80076ca <_strtod_l+0x892>
 8007608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800760a:	ea53 030a 	orrs.w	r3, r3, sl
 800760e:	f040 8082 	bne.w	8007716 <_strtod_l+0x8de>
 8007612:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007616:	2b00      	cmp	r3, #0
 8007618:	d17d      	bne.n	8007716 <_strtod_l+0x8de>
 800761a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800761e:	0d1b      	lsrs	r3, r3, #20
 8007620:	051b      	lsls	r3, r3, #20
 8007622:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007626:	d976      	bls.n	8007716 <_strtod_l+0x8de>
 8007628:	696b      	ldr	r3, [r5, #20]
 800762a:	b913      	cbnz	r3, 8007632 <_strtod_l+0x7fa>
 800762c:	692b      	ldr	r3, [r5, #16]
 800762e:	2b01      	cmp	r3, #1
 8007630:	dd71      	ble.n	8007716 <_strtod_l+0x8de>
 8007632:	4629      	mov	r1, r5
 8007634:	2201      	movs	r2, #1
 8007636:	4620      	mov	r0, r4
 8007638:	f001 ff0e 	bl	8009458 <__lshift>
 800763c:	4631      	mov	r1, r6
 800763e:	4605      	mov	r5, r0
 8007640:	f001 ff7a 	bl	8009538 <__mcmp>
 8007644:	2800      	cmp	r0, #0
 8007646:	dd66      	ble.n	8007716 <_strtod_l+0x8de>
 8007648:	9904      	ldr	r1, [sp, #16]
 800764a:	4a53      	ldr	r2, [pc, #332]	; (8007798 <_strtod_l+0x960>)
 800764c:	465b      	mov	r3, fp
 800764e:	2900      	cmp	r1, #0
 8007650:	f000 8081 	beq.w	8007756 <_strtod_l+0x91e>
 8007654:	ea02 010b 	and.w	r1, r2, fp
 8007658:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800765c:	dc7b      	bgt.n	8007756 <_strtod_l+0x91e>
 800765e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007662:	f77f aea9 	ble.w	80073b8 <_strtod_l+0x580>
 8007666:	4b4d      	ldr	r3, [pc, #308]	; (800779c <_strtod_l+0x964>)
 8007668:	4650      	mov	r0, sl
 800766a:	4659      	mov	r1, fp
 800766c:	2200      	movs	r2, #0
 800766e:	f7f8 fff3 	bl	8000658 <__aeabi_dmul>
 8007672:	460b      	mov	r3, r1
 8007674:	4303      	orrs	r3, r0
 8007676:	bf08      	it	eq
 8007678:	2322      	moveq	r3, #34	; 0x22
 800767a:	4682      	mov	sl, r0
 800767c:	468b      	mov	fp, r1
 800767e:	bf08      	it	eq
 8007680:	6023      	streq	r3, [r4, #0]
 8007682:	e62b      	b.n	80072dc <_strtod_l+0x4a4>
 8007684:	f04f 32ff 	mov.w	r2, #4294967295
 8007688:	fa02 f303 	lsl.w	r3, r2, r3
 800768c:	ea03 0a0a 	and.w	sl, r3, sl
 8007690:	e6e3      	b.n	800745a <_strtod_l+0x622>
 8007692:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007696:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800769a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800769e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80076a2:	fa01 f308 	lsl.w	r3, r1, r8
 80076a6:	9308      	str	r3, [sp, #32]
 80076a8:	910d      	str	r1, [sp, #52]	; 0x34
 80076aa:	e746      	b.n	800753a <_strtod_l+0x702>
 80076ac:	2300      	movs	r3, #0
 80076ae:	9308      	str	r3, [sp, #32]
 80076b0:	2301      	movs	r3, #1
 80076b2:	930d      	str	r3, [sp, #52]	; 0x34
 80076b4:	e741      	b.n	800753a <_strtod_l+0x702>
 80076b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076b8:	4642      	mov	r2, r8
 80076ba:	4620      	mov	r0, r4
 80076bc:	f001 fecc 	bl	8009458 <__lshift>
 80076c0:	9018      	str	r0, [sp, #96]	; 0x60
 80076c2:	2800      	cmp	r0, #0
 80076c4:	f47f af6b 	bne.w	800759e <_strtod_l+0x766>
 80076c8:	e5fe      	b.n	80072c8 <_strtod_l+0x490>
 80076ca:	465f      	mov	r7, fp
 80076cc:	d16e      	bne.n	80077ac <_strtod_l+0x974>
 80076ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076d4:	b342      	cbz	r2, 8007728 <_strtod_l+0x8f0>
 80076d6:	4a32      	ldr	r2, [pc, #200]	; (80077a0 <_strtod_l+0x968>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d128      	bne.n	800772e <_strtod_l+0x8f6>
 80076dc:	9b04      	ldr	r3, [sp, #16]
 80076de:	4651      	mov	r1, sl
 80076e0:	b1eb      	cbz	r3, 800771e <_strtod_l+0x8e6>
 80076e2:	4b2d      	ldr	r3, [pc, #180]	; (8007798 <_strtod_l+0x960>)
 80076e4:	403b      	ands	r3, r7
 80076e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80076ea:	f04f 32ff 	mov.w	r2, #4294967295
 80076ee:	d819      	bhi.n	8007724 <_strtod_l+0x8ec>
 80076f0:	0d1b      	lsrs	r3, r3, #20
 80076f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80076f6:	fa02 f303 	lsl.w	r3, r2, r3
 80076fa:	4299      	cmp	r1, r3
 80076fc:	d117      	bne.n	800772e <_strtod_l+0x8f6>
 80076fe:	4b29      	ldr	r3, [pc, #164]	; (80077a4 <_strtod_l+0x96c>)
 8007700:	429f      	cmp	r7, r3
 8007702:	d102      	bne.n	800770a <_strtod_l+0x8d2>
 8007704:	3101      	adds	r1, #1
 8007706:	f43f addf 	beq.w	80072c8 <_strtod_l+0x490>
 800770a:	4b23      	ldr	r3, [pc, #140]	; (8007798 <_strtod_l+0x960>)
 800770c:	403b      	ands	r3, r7
 800770e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007712:	f04f 0a00 	mov.w	sl, #0
 8007716:	9b04      	ldr	r3, [sp, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1a4      	bne.n	8007666 <_strtod_l+0x82e>
 800771c:	e5de      	b.n	80072dc <_strtod_l+0x4a4>
 800771e:	f04f 33ff 	mov.w	r3, #4294967295
 8007722:	e7ea      	b.n	80076fa <_strtod_l+0x8c2>
 8007724:	4613      	mov	r3, r2
 8007726:	e7e8      	b.n	80076fa <_strtod_l+0x8c2>
 8007728:	ea53 030a 	orrs.w	r3, r3, sl
 800772c:	d08c      	beq.n	8007648 <_strtod_l+0x810>
 800772e:	9b08      	ldr	r3, [sp, #32]
 8007730:	b1db      	cbz	r3, 800776a <_strtod_l+0x932>
 8007732:	423b      	tst	r3, r7
 8007734:	d0ef      	beq.n	8007716 <_strtod_l+0x8de>
 8007736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007738:	9a04      	ldr	r2, [sp, #16]
 800773a:	4650      	mov	r0, sl
 800773c:	4659      	mov	r1, fp
 800773e:	b1c3      	cbz	r3, 8007772 <_strtod_l+0x93a>
 8007740:	f7ff fb5c 	bl	8006dfc <sulp>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	ec51 0b18 	vmov	r0, r1, d8
 800774c:	f7f8 fdce 	bl	80002ec <__adddf3>
 8007750:	4682      	mov	sl, r0
 8007752:	468b      	mov	fp, r1
 8007754:	e7df      	b.n	8007716 <_strtod_l+0x8de>
 8007756:	4013      	ands	r3, r2
 8007758:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800775c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007760:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007764:	f04f 3aff 	mov.w	sl, #4294967295
 8007768:	e7d5      	b.n	8007716 <_strtod_l+0x8de>
 800776a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800776c:	ea13 0f0a 	tst.w	r3, sl
 8007770:	e7e0      	b.n	8007734 <_strtod_l+0x8fc>
 8007772:	f7ff fb43 	bl	8006dfc <sulp>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	ec51 0b18 	vmov	r0, r1, d8
 800777e:	f7f8 fdb3 	bl	80002e8 <__aeabi_dsub>
 8007782:	2200      	movs	r2, #0
 8007784:	2300      	movs	r3, #0
 8007786:	4682      	mov	sl, r0
 8007788:	468b      	mov	fp, r1
 800778a:	f7f9 f9cd 	bl	8000b28 <__aeabi_dcmpeq>
 800778e:	2800      	cmp	r0, #0
 8007790:	d0c1      	beq.n	8007716 <_strtod_l+0x8de>
 8007792:	e611      	b.n	80073b8 <_strtod_l+0x580>
 8007794:	fffffc02 	.word	0xfffffc02
 8007798:	7ff00000 	.word	0x7ff00000
 800779c:	39500000 	.word	0x39500000
 80077a0:	000fffff 	.word	0x000fffff
 80077a4:	7fefffff 	.word	0x7fefffff
 80077a8:	0800ac28 	.word	0x0800ac28
 80077ac:	4631      	mov	r1, r6
 80077ae:	4628      	mov	r0, r5
 80077b0:	f002 f840 	bl	8009834 <__ratio>
 80077b4:	ec59 8b10 	vmov	r8, r9, d0
 80077b8:	ee10 0a10 	vmov	r0, s0
 80077bc:	2200      	movs	r2, #0
 80077be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80077c2:	4649      	mov	r1, r9
 80077c4:	f7f9 f9c4 	bl	8000b50 <__aeabi_dcmple>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d07a      	beq.n	80078c2 <_strtod_l+0xa8a>
 80077cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d04a      	beq.n	8007868 <_strtod_l+0xa30>
 80077d2:	4b95      	ldr	r3, [pc, #596]	; (8007a28 <_strtod_l+0xbf0>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80077da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007a28 <_strtod_l+0xbf0>
 80077de:	f04f 0800 	mov.w	r8, #0
 80077e2:	4b92      	ldr	r3, [pc, #584]	; (8007a2c <_strtod_l+0xbf4>)
 80077e4:	403b      	ands	r3, r7
 80077e6:	930d      	str	r3, [sp, #52]	; 0x34
 80077e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077ea:	4b91      	ldr	r3, [pc, #580]	; (8007a30 <_strtod_l+0xbf8>)
 80077ec:	429a      	cmp	r2, r3
 80077ee:	f040 80b0 	bne.w	8007952 <_strtod_l+0xb1a>
 80077f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80077f6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80077fa:	ec4b ab10 	vmov	d0, sl, fp
 80077fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007802:	f001 ff3f 	bl	8009684 <__ulp>
 8007806:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800780a:	ec53 2b10 	vmov	r2, r3, d0
 800780e:	f7f8 ff23 	bl	8000658 <__aeabi_dmul>
 8007812:	4652      	mov	r2, sl
 8007814:	465b      	mov	r3, fp
 8007816:	f7f8 fd69 	bl	80002ec <__adddf3>
 800781a:	460b      	mov	r3, r1
 800781c:	4983      	ldr	r1, [pc, #524]	; (8007a2c <_strtod_l+0xbf4>)
 800781e:	4a85      	ldr	r2, [pc, #532]	; (8007a34 <_strtod_l+0xbfc>)
 8007820:	4019      	ands	r1, r3
 8007822:	4291      	cmp	r1, r2
 8007824:	4682      	mov	sl, r0
 8007826:	d960      	bls.n	80078ea <_strtod_l+0xab2>
 8007828:	ee18 3a90 	vmov	r3, s17
 800782c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007830:	4293      	cmp	r3, r2
 8007832:	d104      	bne.n	800783e <_strtod_l+0xa06>
 8007834:	ee18 3a10 	vmov	r3, s16
 8007838:	3301      	adds	r3, #1
 800783a:	f43f ad45 	beq.w	80072c8 <_strtod_l+0x490>
 800783e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007a40 <_strtod_l+0xc08>
 8007842:	f04f 3aff 	mov.w	sl, #4294967295
 8007846:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007848:	4620      	mov	r0, r4
 800784a:	f001 fbe9 	bl	8009020 <_Bfree>
 800784e:	9905      	ldr	r1, [sp, #20]
 8007850:	4620      	mov	r0, r4
 8007852:	f001 fbe5 	bl	8009020 <_Bfree>
 8007856:	4631      	mov	r1, r6
 8007858:	4620      	mov	r0, r4
 800785a:	f001 fbe1 	bl	8009020 <_Bfree>
 800785e:	4629      	mov	r1, r5
 8007860:	4620      	mov	r0, r4
 8007862:	f001 fbdd 	bl	8009020 <_Bfree>
 8007866:	e61a      	b.n	800749e <_strtod_l+0x666>
 8007868:	f1ba 0f00 	cmp.w	sl, #0
 800786c:	d11b      	bne.n	80078a6 <_strtod_l+0xa6e>
 800786e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007872:	b9f3      	cbnz	r3, 80078b2 <_strtod_l+0xa7a>
 8007874:	4b6c      	ldr	r3, [pc, #432]	; (8007a28 <_strtod_l+0xbf0>)
 8007876:	2200      	movs	r2, #0
 8007878:	4640      	mov	r0, r8
 800787a:	4649      	mov	r1, r9
 800787c:	f7f9 f95e 	bl	8000b3c <__aeabi_dcmplt>
 8007880:	b9d0      	cbnz	r0, 80078b8 <_strtod_l+0xa80>
 8007882:	4640      	mov	r0, r8
 8007884:	4649      	mov	r1, r9
 8007886:	4b6c      	ldr	r3, [pc, #432]	; (8007a38 <_strtod_l+0xc00>)
 8007888:	2200      	movs	r2, #0
 800788a:	f7f8 fee5 	bl	8000658 <__aeabi_dmul>
 800788e:	4680      	mov	r8, r0
 8007890:	4689      	mov	r9, r1
 8007892:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007896:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800789a:	9315      	str	r3, [sp, #84]	; 0x54
 800789c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80078a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80078a4:	e79d      	b.n	80077e2 <_strtod_l+0x9aa>
 80078a6:	f1ba 0f01 	cmp.w	sl, #1
 80078aa:	d102      	bne.n	80078b2 <_strtod_l+0xa7a>
 80078ac:	2f00      	cmp	r7, #0
 80078ae:	f43f ad83 	beq.w	80073b8 <_strtod_l+0x580>
 80078b2:	4b62      	ldr	r3, [pc, #392]	; (8007a3c <_strtod_l+0xc04>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	e78e      	b.n	80077d6 <_strtod_l+0x99e>
 80078b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007a38 <_strtod_l+0xc00>
 80078bc:	f04f 0800 	mov.w	r8, #0
 80078c0:	e7e7      	b.n	8007892 <_strtod_l+0xa5a>
 80078c2:	4b5d      	ldr	r3, [pc, #372]	; (8007a38 <_strtod_l+0xc00>)
 80078c4:	4640      	mov	r0, r8
 80078c6:	4649      	mov	r1, r9
 80078c8:	2200      	movs	r2, #0
 80078ca:	f7f8 fec5 	bl	8000658 <__aeabi_dmul>
 80078ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078d0:	4680      	mov	r8, r0
 80078d2:	4689      	mov	r9, r1
 80078d4:	b933      	cbnz	r3, 80078e4 <_strtod_l+0xaac>
 80078d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078da:	900e      	str	r0, [sp, #56]	; 0x38
 80078dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80078de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80078e2:	e7dd      	b.n	80078a0 <_strtod_l+0xa68>
 80078e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80078e8:	e7f9      	b.n	80078de <_strtod_l+0xaa6>
 80078ea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80078ee:	9b04      	ldr	r3, [sp, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1a8      	bne.n	8007846 <_strtod_l+0xa0e>
 80078f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078fa:	0d1b      	lsrs	r3, r3, #20
 80078fc:	051b      	lsls	r3, r3, #20
 80078fe:	429a      	cmp	r2, r3
 8007900:	d1a1      	bne.n	8007846 <_strtod_l+0xa0e>
 8007902:	4640      	mov	r0, r8
 8007904:	4649      	mov	r1, r9
 8007906:	f7f9 fa07 	bl	8000d18 <__aeabi_d2lz>
 800790a:	f7f8 fe77 	bl	80005fc <__aeabi_l2d>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4640      	mov	r0, r8
 8007914:	4649      	mov	r1, r9
 8007916:	f7f8 fce7 	bl	80002e8 <__aeabi_dsub>
 800791a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800791c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007920:	ea43 030a 	orr.w	r3, r3, sl
 8007924:	4313      	orrs	r3, r2
 8007926:	4680      	mov	r8, r0
 8007928:	4689      	mov	r9, r1
 800792a:	d055      	beq.n	80079d8 <_strtod_l+0xba0>
 800792c:	a336      	add	r3, pc, #216	; (adr r3, 8007a08 <_strtod_l+0xbd0>)
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	f7f9 f903 	bl	8000b3c <__aeabi_dcmplt>
 8007936:	2800      	cmp	r0, #0
 8007938:	f47f acd0 	bne.w	80072dc <_strtod_l+0x4a4>
 800793c:	a334      	add	r3, pc, #208	; (adr r3, 8007a10 <_strtod_l+0xbd8>)
 800793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007942:	4640      	mov	r0, r8
 8007944:	4649      	mov	r1, r9
 8007946:	f7f9 f917 	bl	8000b78 <__aeabi_dcmpgt>
 800794a:	2800      	cmp	r0, #0
 800794c:	f43f af7b 	beq.w	8007846 <_strtod_l+0xa0e>
 8007950:	e4c4      	b.n	80072dc <_strtod_l+0x4a4>
 8007952:	9b04      	ldr	r3, [sp, #16]
 8007954:	b333      	cbz	r3, 80079a4 <_strtod_l+0xb6c>
 8007956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007958:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800795c:	d822      	bhi.n	80079a4 <_strtod_l+0xb6c>
 800795e:	a32e      	add	r3, pc, #184	; (adr r3, 8007a18 <_strtod_l+0xbe0>)
 8007960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007964:	4640      	mov	r0, r8
 8007966:	4649      	mov	r1, r9
 8007968:	f7f9 f8f2 	bl	8000b50 <__aeabi_dcmple>
 800796c:	b1a0      	cbz	r0, 8007998 <_strtod_l+0xb60>
 800796e:	4649      	mov	r1, r9
 8007970:	4640      	mov	r0, r8
 8007972:	f7f9 f949 	bl	8000c08 <__aeabi_d2uiz>
 8007976:	2801      	cmp	r0, #1
 8007978:	bf38      	it	cc
 800797a:	2001      	movcc	r0, #1
 800797c:	f7f8 fdf2 	bl	8000564 <__aeabi_ui2d>
 8007980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007982:	4680      	mov	r8, r0
 8007984:	4689      	mov	r9, r1
 8007986:	bb23      	cbnz	r3, 80079d2 <_strtod_l+0xb9a>
 8007988:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800798c:	9010      	str	r0, [sp, #64]	; 0x40
 800798e:	9311      	str	r3, [sp, #68]	; 0x44
 8007990:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007994:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800799a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800799c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80079a0:	1a9b      	subs	r3, r3, r2
 80079a2:	9309      	str	r3, [sp, #36]	; 0x24
 80079a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079a8:	eeb0 0a48 	vmov.f32	s0, s16
 80079ac:	eef0 0a68 	vmov.f32	s1, s17
 80079b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80079b4:	f001 fe66 	bl	8009684 <__ulp>
 80079b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079bc:	ec53 2b10 	vmov	r2, r3, d0
 80079c0:	f7f8 fe4a 	bl	8000658 <__aeabi_dmul>
 80079c4:	ec53 2b18 	vmov	r2, r3, d8
 80079c8:	f7f8 fc90 	bl	80002ec <__adddf3>
 80079cc:	4682      	mov	sl, r0
 80079ce:	468b      	mov	fp, r1
 80079d0:	e78d      	b.n	80078ee <_strtod_l+0xab6>
 80079d2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80079d6:	e7db      	b.n	8007990 <_strtod_l+0xb58>
 80079d8:	a311      	add	r3, pc, #68	; (adr r3, 8007a20 <_strtod_l+0xbe8>)
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	f7f9 f8ad 	bl	8000b3c <__aeabi_dcmplt>
 80079e2:	e7b2      	b.n	800794a <_strtod_l+0xb12>
 80079e4:	2300      	movs	r3, #0
 80079e6:	930a      	str	r3, [sp, #40]	; 0x28
 80079e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80079ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	f7ff ba6b 	b.w	8006ec8 <_strtod_l+0x90>
 80079f2:	2a65      	cmp	r2, #101	; 0x65
 80079f4:	f43f ab5f 	beq.w	80070b6 <_strtod_l+0x27e>
 80079f8:	2a45      	cmp	r2, #69	; 0x45
 80079fa:	f43f ab5c 	beq.w	80070b6 <_strtod_l+0x27e>
 80079fe:	2301      	movs	r3, #1
 8007a00:	f7ff bb94 	b.w	800712c <_strtod_l+0x2f4>
 8007a04:	f3af 8000 	nop.w
 8007a08:	94a03595 	.word	0x94a03595
 8007a0c:	3fdfffff 	.word	0x3fdfffff
 8007a10:	35afe535 	.word	0x35afe535
 8007a14:	3fe00000 	.word	0x3fe00000
 8007a18:	ffc00000 	.word	0xffc00000
 8007a1c:	41dfffff 	.word	0x41dfffff
 8007a20:	94a03595 	.word	0x94a03595
 8007a24:	3fcfffff 	.word	0x3fcfffff
 8007a28:	3ff00000 	.word	0x3ff00000
 8007a2c:	7ff00000 	.word	0x7ff00000
 8007a30:	7fe00000 	.word	0x7fe00000
 8007a34:	7c9fffff 	.word	0x7c9fffff
 8007a38:	3fe00000 	.word	0x3fe00000
 8007a3c:	bff00000 	.word	0xbff00000
 8007a40:	7fefffff 	.word	0x7fefffff

08007a44 <strtod>:
 8007a44:	460a      	mov	r2, r1
 8007a46:	4601      	mov	r1, r0
 8007a48:	4802      	ldr	r0, [pc, #8]	; (8007a54 <strtod+0x10>)
 8007a4a:	4b03      	ldr	r3, [pc, #12]	; (8007a58 <strtod+0x14>)
 8007a4c:	6800      	ldr	r0, [r0, #0]
 8007a4e:	f7ff b9f3 	b.w	8006e38 <_strtod_l>
 8007a52:	bf00      	nop
 8007a54:	20000060 	.word	0x20000060
 8007a58:	200000c8 	.word	0x200000c8

08007a5c <strtok>:
 8007a5c:	4b16      	ldr	r3, [pc, #88]	; (8007ab8 <strtok+0x5c>)
 8007a5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a60:	681e      	ldr	r6, [r3, #0]
 8007a62:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007a64:	4605      	mov	r5, r0
 8007a66:	b9fc      	cbnz	r4, 8007aa8 <strtok+0x4c>
 8007a68:	2050      	movs	r0, #80	; 0x50
 8007a6a:	9101      	str	r1, [sp, #4]
 8007a6c:	f001 fa70 	bl	8008f50 <malloc>
 8007a70:	9901      	ldr	r1, [sp, #4]
 8007a72:	65b0      	str	r0, [r6, #88]	; 0x58
 8007a74:	4602      	mov	r2, r0
 8007a76:	b920      	cbnz	r0, 8007a82 <strtok+0x26>
 8007a78:	4b10      	ldr	r3, [pc, #64]	; (8007abc <strtok+0x60>)
 8007a7a:	4811      	ldr	r0, [pc, #68]	; (8007ac0 <strtok+0x64>)
 8007a7c:	2157      	movs	r1, #87	; 0x57
 8007a7e:	f000 f849 	bl	8007b14 <__assert_func>
 8007a82:	e9c0 4400 	strd	r4, r4, [r0]
 8007a86:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007a8a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007a8e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007a92:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007a96:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007a9a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007a9e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007aa2:	6184      	str	r4, [r0, #24]
 8007aa4:	7704      	strb	r4, [r0, #28]
 8007aa6:	6244      	str	r4, [r0, #36]	; 0x24
 8007aa8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8007aaa:	2301      	movs	r3, #1
 8007aac:	4628      	mov	r0, r5
 8007aae:	b002      	add	sp, #8
 8007ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ab4:	f000 b806 	b.w	8007ac4 <__strtok_r>
 8007ab8:	20000060 	.word	0x20000060
 8007abc:	0800ac50 	.word	0x0800ac50
 8007ac0:	0800ac67 	.word	0x0800ac67

08007ac4 <__strtok_r>:
 8007ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ac6:	b908      	cbnz	r0, 8007acc <__strtok_r+0x8>
 8007ac8:	6810      	ldr	r0, [r2, #0]
 8007aca:	b188      	cbz	r0, 8007af0 <__strtok_r+0x2c>
 8007acc:	4604      	mov	r4, r0
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007ad4:	460f      	mov	r7, r1
 8007ad6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007ada:	b91e      	cbnz	r6, 8007ae4 <__strtok_r+0x20>
 8007adc:	b965      	cbnz	r5, 8007af8 <__strtok_r+0x34>
 8007ade:	6015      	str	r5, [r2, #0]
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	e005      	b.n	8007af0 <__strtok_r+0x2c>
 8007ae4:	42b5      	cmp	r5, r6
 8007ae6:	d1f6      	bne.n	8007ad6 <__strtok_r+0x12>
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1f0      	bne.n	8007ace <__strtok_r+0xa>
 8007aec:	6014      	str	r4, [r2, #0]
 8007aee:	7003      	strb	r3, [r0, #0]
 8007af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007af2:	461c      	mov	r4, r3
 8007af4:	e00c      	b.n	8007b10 <__strtok_r+0x4c>
 8007af6:	b915      	cbnz	r5, 8007afe <__strtok_r+0x3a>
 8007af8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007afc:	460e      	mov	r6, r1
 8007afe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007b02:	42ab      	cmp	r3, r5
 8007b04:	d1f7      	bne.n	8007af6 <__strtok_r+0x32>
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0f3      	beq.n	8007af2 <__strtok_r+0x2e>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007b10:	6014      	str	r4, [r2, #0]
 8007b12:	e7ed      	b.n	8007af0 <__strtok_r+0x2c>

08007b14 <__assert_func>:
 8007b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b16:	4614      	mov	r4, r2
 8007b18:	461a      	mov	r2, r3
 8007b1a:	4b09      	ldr	r3, [pc, #36]	; (8007b40 <__assert_func+0x2c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4605      	mov	r5, r0
 8007b20:	68d8      	ldr	r0, [r3, #12]
 8007b22:	b14c      	cbz	r4, 8007b38 <__assert_func+0x24>
 8007b24:	4b07      	ldr	r3, [pc, #28]	; (8007b44 <__assert_func+0x30>)
 8007b26:	9100      	str	r1, [sp, #0]
 8007b28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b2c:	4906      	ldr	r1, [pc, #24]	; (8007b48 <__assert_func+0x34>)
 8007b2e:	462b      	mov	r3, r5
 8007b30:	f000 fe88 	bl	8008844 <fiprintf>
 8007b34:	f002 fb9e 	bl	800a274 <abort>
 8007b38:	4b04      	ldr	r3, [pc, #16]	; (8007b4c <__assert_func+0x38>)
 8007b3a:	461c      	mov	r4, r3
 8007b3c:	e7f3      	b.n	8007b26 <__assert_func+0x12>
 8007b3e:	bf00      	nop
 8007b40:	20000060 	.word	0x20000060
 8007b44:	0800acc4 	.word	0x0800acc4
 8007b48:	0800acd1 	.word	0x0800acd1
 8007b4c:	0800acff 	.word	0x0800acff

08007b50 <quorem>:
 8007b50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	6903      	ldr	r3, [r0, #16]
 8007b56:	690c      	ldr	r4, [r1, #16]
 8007b58:	42a3      	cmp	r3, r4
 8007b5a:	4607      	mov	r7, r0
 8007b5c:	f2c0 8081 	blt.w	8007c62 <quorem+0x112>
 8007b60:	3c01      	subs	r4, #1
 8007b62:	f101 0814 	add.w	r8, r1, #20
 8007b66:	f100 0514 	add.w	r5, r0, #20
 8007b6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b6e:	9301      	str	r3, [sp, #4]
 8007b70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007b80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b84:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b88:	d331      	bcc.n	8007bee <quorem+0x9e>
 8007b8a:	f04f 0e00 	mov.w	lr, #0
 8007b8e:	4640      	mov	r0, r8
 8007b90:	46ac      	mov	ip, r5
 8007b92:	46f2      	mov	sl, lr
 8007b94:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b98:	b293      	uxth	r3, r2
 8007b9a:	fb06 e303 	mla	r3, r6, r3, lr
 8007b9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	ebaa 0303 	sub.w	r3, sl, r3
 8007ba8:	f8dc a000 	ldr.w	sl, [ip]
 8007bac:	0c12      	lsrs	r2, r2, #16
 8007bae:	fa13 f38a 	uxtah	r3, r3, sl
 8007bb2:	fb06 e202 	mla	r2, r6, r2, lr
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	9b00      	ldr	r3, [sp, #0]
 8007bba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bbe:	b292      	uxth	r2, r2
 8007bc0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007bc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bc8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007bcc:	4581      	cmp	r9, r0
 8007bce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bd2:	f84c 3b04 	str.w	r3, [ip], #4
 8007bd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007bda:	d2db      	bcs.n	8007b94 <quorem+0x44>
 8007bdc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007be0:	b92b      	cbnz	r3, 8007bee <quorem+0x9e>
 8007be2:	9b01      	ldr	r3, [sp, #4]
 8007be4:	3b04      	subs	r3, #4
 8007be6:	429d      	cmp	r5, r3
 8007be8:	461a      	mov	r2, r3
 8007bea:	d32e      	bcc.n	8007c4a <quorem+0xfa>
 8007bec:	613c      	str	r4, [r7, #16]
 8007bee:	4638      	mov	r0, r7
 8007bf0:	f001 fca2 	bl	8009538 <__mcmp>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	db24      	blt.n	8007c42 <quorem+0xf2>
 8007bf8:	3601      	adds	r6, #1
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f04f 0c00 	mov.w	ip, #0
 8007c00:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c04:	f8d0 e000 	ldr.w	lr, [r0]
 8007c08:	b293      	uxth	r3, r2
 8007c0a:	ebac 0303 	sub.w	r3, ip, r3
 8007c0e:	0c12      	lsrs	r2, r2, #16
 8007c10:	fa13 f38e 	uxtah	r3, r3, lr
 8007c14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c22:	45c1      	cmp	r9, r8
 8007c24:	f840 3b04 	str.w	r3, [r0], #4
 8007c28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c2c:	d2e8      	bcs.n	8007c00 <quorem+0xb0>
 8007c2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c36:	b922      	cbnz	r2, 8007c42 <quorem+0xf2>
 8007c38:	3b04      	subs	r3, #4
 8007c3a:	429d      	cmp	r5, r3
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	d30a      	bcc.n	8007c56 <quorem+0x106>
 8007c40:	613c      	str	r4, [r7, #16]
 8007c42:	4630      	mov	r0, r6
 8007c44:	b003      	add	sp, #12
 8007c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c4a:	6812      	ldr	r2, [r2, #0]
 8007c4c:	3b04      	subs	r3, #4
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	d1cc      	bne.n	8007bec <quorem+0x9c>
 8007c52:	3c01      	subs	r4, #1
 8007c54:	e7c7      	b.n	8007be6 <quorem+0x96>
 8007c56:	6812      	ldr	r2, [r2, #0]
 8007c58:	3b04      	subs	r3, #4
 8007c5a:	2a00      	cmp	r2, #0
 8007c5c:	d1f0      	bne.n	8007c40 <quorem+0xf0>
 8007c5e:	3c01      	subs	r4, #1
 8007c60:	e7eb      	b.n	8007c3a <quorem+0xea>
 8007c62:	2000      	movs	r0, #0
 8007c64:	e7ee      	b.n	8007c44 <quorem+0xf4>
	...

08007c68 <_dtoa_r>:
 8007c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6c:	ed2d 8b04 	vpush	{d8-d9}
 8007c70:	ec57 6b10 	vmov	r6, r7, d0
 8007c74:	b093      	sub	sp, #76	; 0x4c
 8007c76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007c7c:	9106      	str	r1, [sp, #24]
 8007c7e:	ee10 aa10 	vmov	sl, s0
 8007c82:	4604      	mov	r4, r0
 8007c84:	9209      	str	r2, [sp, #36]	; 0x24
 8007c86:	930c      	str	r3, [sp, #48]	; 0x30
 8007c88:	46bb      	mov	fp, r7
 8007c8a:	b975      	cbnz	r5, 8007caa <_dtoa_r+0x42>
 8007c8c:	2010      	movs	r0, #16
 8007c8e:	f001 f95f 	bl	8008f50 <malloc>
 8007c92:	4602      	mov	r2, r0
 8007c94:	6260      	str	r0, [r4, #36]	; 0x24
 8007c96:	b920      	cbnz	r0, 8007ca2 <_dtoa_r+0x3a>
 8007c98:	4ba7      	ldr	r3, [pc, #668]	; (8007f38 <_dtoa_r+0x2d0>)
 8007c9a:	21ea      	movs	r1, #234	; 0xea
 8007c9c:	48a7      	ldr	r0, [pc, #668]	; (8007f3c <_dtoa_r+0x2d4>)
 8007c9e:	f7ff ff39 	bl	8007b14 <__assert_func>
 8007ca2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ca6:	6005      	str	r5, [r0, #0]
 8007ca8:	60c5      	str	r5, [r0, #12]
 8007caa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cac:	6819      	ldr	r1, [r3, #0]
 8007cae:	b151      	cbz	r1, 8007cc6 <_dtoa_r+0x5e>
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	604a      	str	r2, [r1, #4]
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	4093      	lsls	r3, r2
 8007cb8:	608b      	str	r3, [r1, #8]
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f001 f9b0 	bl	8009020 <_Bfree>
 8007cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	1e3b      	subs	r3, r7, #0
 8007cc8:	bfaa      	itet	ge
 8007cca:	2300      	movge	r3, #0
 8007ccc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007cd0:	f8c8 3000 	strge.w	r3, [r8]
 8007cd4:	4b9a      	ldr	r3, [pc, #616]	; (8007f40 <_dtoa_r+0x2d8>)
 8007cd6:	bfbc      	itt	lt
 8007cd8:	2201      	movlt	r2, #1
 8007cda:	f8c8 2000 	strlt.w	r2, [r8]
 8007cde:	ea33 030b 	bics.w	r3, r3, fp
 8007ce2:	d11b      	bne.n	8007d1c <_dtoa_r+0xb4>
 8007ce4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ce6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cf0:	4333      	orrs	r3, r6
 8007cf2:	f000 8592 	beq.w	800881a <_dtoa_r+0xbb2>
 8007cf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cf8:	b963      	cbnz	r3, 8007d14 <_dtoa_r+0xac>
 8007cfa:	4b92      	ldr	r3, [pc, #584]	; (8007f44 <_dtoa_r+0x2dc>)
 8007cfc:	e022      	b.n	8007d44 <_dtoa_r+0xdc>
 8007cfe:	4b92      	ldr	r3, [pc, #584]	; (8007f48 <_dtoa_r+0x2e0>)
 8007d00:	9301      	str	r3, [sp, #4]
 8007d02:	3308      	adds	r3, #8
 8007d04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	9801      	ldr	r0, [sp, #4]
 8007d0a:	b013      	add	sp, #76	; 0x4c
 8007d0c:	ecbd 8b04 	vpop	{d8-d9}
 8007d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d14:	4b8b      	ldr	r3, [pc, #556]	; (8007f44 <_dtoa_r+0x2dc>)
 8007d16:	9301      	str	r3, [sp, #4]
 8007d18:	3303      	adds	r3, #3
 8007d1a:	e7f3      	b.n	8007d04 <_dtoa_r+0x9c>
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	2300      	movs	r3, #0
 8007d20:	4650      	mov	r0, sl
 8007d22:	4659      	mov	r1, fp
 8007d24:	f7f8 ff00 	bl	8000b28 <__aeabi_dcmpeq>
 8007d28:	ec4b ab19 	vmov	d9, sl, fp
 8007d2c:	4680      	mov	r8, r0
 8007d2e:	b158      	cbz	r0, 8007d48 <_dtoa_r+0xe0>
 8007d30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d32:	2301      	movs	r3, #1
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 856b 	beq.w	8008814 <_dtoa_r+0xbac>
 8007d3e:	4883      	ldr	r0, [pc, #524]	; (8007f4c <_dtoa_r+0x2e4>)
 8007d40:	6018      	str	r0, [r3, #0]
 8007d42:	1e43      	subs	r3, r0, #1
 8007d44:	9301      	str	r3, [sp, #4]
 8007d46:	e7df      	b.n	8007d08 <_dtoa_r+0xa0>
 8007d48:	ec4b ab10 	vmov	d0, sl, fp
 8007d4c:	aa10      	add	r2, sp, #64	; 0x40
 8007d4e:	a911      	add	r1, sp, #68	; 0x44
 8007d50:	4620      	mov	r0, r4
 8007d52:	f001 fd13 	bl	800977c <__d2b>
 8007d56:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007d5a:	ee08 0a10 	vmov	s16, r0
 8007d5e:	2d00      	cmp	r5, #0
 8007d60:	f000 8084 	beq.w	8007e6c <_dtoa_r+0x204>
 8007d64:	ee19 3a90 	vmov	r3, s19
 8007d68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d6c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007d70:	4656      	mov	r6, sl
 8007d72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007d76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007d7a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007d7e:	4b74      	ldr	r3, [pc, #464]	; (8007f50 <_dtoa_r+0x2e8>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	4630      	mov	r0, r6
 8007d84:	4639      	mov	r1, r7
 8007d86:	f7f8 faaf 	bl	80002e8 <__aeabi_dsub>
 8007d8a:	a365      	add	r3, pc, #404	; (adr r3, 8007f20 <_dtoa_r+0x2b8>)
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	f7f8 fc62 	bl	8000658 <__aeabi_dmul>
 8007d94:	a364      	add	r3, pc, #400	; (adr r3, 8007f28 <_dtoa_r+0x2c0>)
 8007d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9a:	f7f8 faa7 	bl	80002ec <__adddf3>
 8007d9e:	4606      	mov	r6, r0
 8007da0:	4628      	mov	r0, r5
 8007da2:	460f      	mov	r7, r1
 8007da4:	f7f8 fbee 	bl	8000584 <__aeabi_i2d>
 8007da8:	a361      	add	r3, pc, #388	; (adr r3, 8007f30 <_dtoa_r+0x2c8>)
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	f7f8 fc53 	bl	8000658 <__aeabi_dmul>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4630      	mov	r0, r6
 8007db8:	4639      	mov	r1, r7
 8007dba:	f7f8 fa97 	bl	80002ec <__adddf3>
 8007dbe:	4606      	mov	r6, r0
 8007dc0:	460f      	mov	r7, r1
 8007dc2:	f7f8 fef9 	bl	8000bb8 <__aeabi_d2iz>
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	9000      	str	r0, [sp, #0]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	4630      	mov	r0, r6
 8007dce:	4639      	mov	r1, r7
 8007dd0:	f7f8 feb4 	bl	8000b3c <__aeabi_dcmplt>
 8007dd4:	b150      	cbz	r0, 8007dec <_dtoa_r+0x184>
 8007dd6:	9800      	ldr	r0, [sp, #0]
 8007dd8:	f7f8 fbd4 	bl	8000584 <__aeabi_i2d>
 8007ddc:	4632      	mov	r2, r6
 8007dde:	463b      	mov	r3, r7
 8007de0:	f7f8 fea2 	bl	8000b28 <__aeabi_dcmpeq>
 8007de4:	b910      	cbnz	r0, 8007dec <_dtoa_r+0x184>
 8007de6:	9b00      	ldr	r3, [sp, #0]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	9b00      	ldr	r3, [sp, #0]
 8007dee:	2b16      	cmp	r3, #22
 8007df0:	d85a      	bhi.n	8007ea8 <_dtoa_r+0x240>
 8007df2:	9a00      	ldr	r2, [sp, #0]
 8007df4:	4b57      	ldr	r3, [pc, #348]	; (8007f54 <_dtoa_r+0x2ec>)
 8007df6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	ec51 0b19 	vmov	r0, r1, d9
 8007e02:	f7f8 fe9b 	bl	8000b3c <__aeabi_dcmplt>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d050      	beq.n	8007eac <_dtoa_r+0x244>
 8007e0a:	9b00      	ldr	r3, [sp, #0]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	2300      	movs	r3, #0
 8007e12:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e16:	1b5d      	subs	r5, r3, r5
 8007e18:	1e6b      	subs	r3, r5, #1
 8007e1a:	9305      	str	r3, [sp, #20]
 8007e1c:	bf45      	ittet	mi
 8007e1e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007e22:	9304      	strmi	r3, [sp, #16]
 8007e24:	2300      	movpl	r3, #0
 8007e26:	2300      	movmi	r3, #0
 8007e28:	bf4c      	ite	mi
 8007e2a:	9305      	strmi	r3, [sp, #20]
 8007e2c:	9304      	strpl	r3, [sp, #16]
 8007e2e:	9b00      	ldr	r3, [sp, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	db3d      	blt.n	8007eb0 <_dtoa_r+0x248>
 8007e34:	9b05      	ldr	r3, [sp, #20]
 8007e36:	9a00      	ldr	r2, [sp, #0]
 8007e38:	920a      	str	r2, [sp, #40]	; 0x28
 8007e3a:	4413      	add	r3, r2
 8007e3c:	9305      	str	r3, [sp, #20]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	9307      	str	r3, [sp, #28]
 8007e42:	9b06      	ldr	r3, [sp, #24]
 8007e44:	2b09      	cmp	r3, #9
 8007e46:	f200 8089 	bhi.w	8007f5c <_dtoa_r+0x2f4>
 8007e4a:	2b05      	cmp	r3, #5
 8007e4c:	bfc4      	itt	gt
 8007e4e:	3b04      	subgt	r3, #4
 8007e50:	9306      	strgt	r3, [sp, #24]
 8007e52:	9b06      	ldr	r3, [sp, #24]
 8007e54:	f1a3 0302 	sub.w	r3, r3, #2
 8007e58:	bfcc      	ite	gt
 8007e5a:	2500      	movgt	r5, #0
 8007e5c:	2501      	movle	r5, #1
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	f200 8087 	bhi.w	8007f72 <_dtoa_r+0x30a>
 8007e64:	e8df f003 	tbb	[pc, r3]
 8007e68:	59383a2d 	.word	0x59383a2d
 8007e6c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007e70:	441d      	add	r5, r3
 8007e72:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007e76:	2b20      	cmp	r3, #32
 8007e78:	bfc1      	itttt	gt
 8007e7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007e7e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007e82:	fa0b f303 	lslgt.w	r3, fp, r3
 8007e86:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007e8a:	bfda      	itte	le
 8007e8c:	f1c3 0320 	rsble	r3, r3, #32
 8007e90:	fa06 f003 	lslle.w	r0, r6, r3
 8007e94:	4318      	orrgt	r0, r3
 8007e96:	f7f8 fb65 	bl	8000564 <__aeabi_ui2d>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	4606      	mov	r6, r0
 8007e9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007ea2:	3d01      	subs	r5, #1
 8007ea4:	930e      	str	r3, [sp, #56]	; 0x38
 8007ea6:	e76a      	b.n	8007d7e <_dtoa_r+0x116>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e7b2      	b.n	8007e12 <_dtoa_r+0x1aa>
 8007eac:	900b      	str	r0, [sp, #44]	; 0x2c
 8007eae:	e7b1      	b.n	8007e14 <_dtoa_r+0x1ac>
 8007eb0:	9b04      	ldr	r3, [sp, #16]
 8007eb2:	9a00      	ldr	r2, [sp, #0]
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	9304      	str	r3, [sp, #16]
 8007eb8:	4253      	negs	r3, r2
 8007eba:	9307      	str	r3, [sp, #28]
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8007ec0:	e7bf      	b.n	8007e42 <_dtoa_r+0x1da>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	9308      	str	r3, [sp, #32]
 8007ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	dc55      	bgt.n	8007f78 <_dtoa_r+0x310>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ed6:	e00c      	b.n	8007ef2 <_dtoa_r+0x28a>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e7f3      	b.n	8007ec4 <_dtoa_r+0x25c>
 8007edc:	2300      	movs	r3, #0
 8007ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ee0:	9308      	str	r3, [sp, #32]
 8007ee2:	9b00      	ldr	r3, [sp, #0]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	9302      	str	r3, [sp, #8]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	9303      	str	r3, [sp, #12]
 8007eee:	bfb8      	it	lt
 8007ef0:	2301      	movlt	r3, #1
 8007ef2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	6042      	str	r2, [r0, #4]
 8007ef8:	2204      	movs	r2, #4
 8007efa:	f102 0614 	add.w	r6, r2, #20
 8007efe:	429e      	cmp	r6, r3
 8007f00:	6841      	ldr	r1, [r0, #4]
 8007f02:	d93d      	bls.n	8007f80 <_dtoa_r+0x318>
 8007f04:	4620      	mov	r0, r4
 8007f06:	f001 f84b 	bl	8008fa0 <_Balloc>
 8007f0a:	9001      	str	r0, [sp, #4]
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d13b      	bne.n	8007f88 <_dtoa_r+0x320>
 8007f10:	4b11      	ldr	r3, [pc, #68]	; (8007f58 <_dtoa_r+0x2f0>)
 8007f12:	4602      	mov	r2, r0
 8007f14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f18:	e6c0      	b.n	8007c9c <_dtoa_r+0x34>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e7df      	b.n	8007ede <_dtoa_r+0x276>
 8007f1e:	bf00      	nop
 8007f20:	636f4361 	.word	0x636f4361
 8007f24:	3fd287a7 	.word	0x3fd287a7
 8007f28:	8b60c8b3 	.word	0x8b60c8b3
 8007f2c:	3fc68a28 	.word	0x3fc68a28
 8007f30:	509f79fb 	.word	0x509f79fb
 8007f34:	3fd34413 	.word	0x3fd34413
 8007f38:	0800ac50 	.word	0x0800ac50
 8007f3c:	0800ad0d 	.word	0x0800ad0d
 8007f40:	7ff00000 	.word	0x7ff00000
 8007f44:	0800ad09 	.word	0x0800ad09
 8007f48:	0800ad00 	.word	0x0800ad00
 8007f4c:	0800abd9 	.word	0x0800abd9
 8007f50:	3ff80000 	.word	0x3ff80000
 8007f54:	0800ae78 	.word	0x0800ae78
 8007f58:	0800ad68 	.word	0x0800ad68
 8007f5c:	2501      	movs	r5, #1
 8007f5e:	2300      	movs	r3, #0
 8007f60:	9306      	str	r3, [sp, #24]
 8007f62:	9508      	str	r5, [sp, #32]
 8007f64:	f04f 33ff 	mov.w	r3, #4294967295
 8007f68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2312      	movs	r3, #18
 8007f70:	e7b0      	b.n	8007ed4 <_dtoa_r+0x26c>
 8007f72:	2301      	movs	r3, #1
 8007f74:	9308      	str	r3, [sp, #32]
 8007f76:	e7f5      	b.n	8007f64 <_dtoa_r+0x2fc>
 8007f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f7e:	e7b8      	b.n	8007ef2 <_dtoa_r+0x28a>
 8007f80:	3101      	adds	r1, #1
 8007f82:	6041      	str	r1, [r0, #4]
 8007f84:	0052      	lsls	r2, r2, #1
 8007f86:	e7b8      	b.n	8007efa <_dtoa_r+0x292>
 8007f88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f8a:	9a01      	ldr	r2, [sp, #4]
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	9b03      	ldr	r3, [sp, #12]
 8007f90:	2b0e      	cmp	r3, #14
 8007f92:	f200 809d 	bhi.w	80080d0 <_dtoa_r+0x468>
 8007f96:	2d00      	cmp	r5, #0
 8007f98:	f000 809a 	beq.w	80080d0 <_dtoa_r+0x468>
 8007f9c:	9b00      	ldr	r3, [sp, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	dd32      	ble.n	8008008 <_dtoa_r+0x3a0>
 8007fa2:	4ab7      	ldr	r2, [pc, #732]	; (8008280 <_dtoa_r+0x618>)
 8007fa4:	f003 030f 	and.w	r3, r3, #15
 8007fa8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007fac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fb0:	9b00      	ldr	r3, [sp, #0]
 8007fb2:	05d8      	lsls	r0, r3, #23
 8007fb4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007fb8:	d516      	bpl.n	8007fe8 <_dtoa_r+0x380>
 8007fba:	4bb2      	ldr	r3, [pc, #712]	; (8008284 <_dtoa_r+0x61c>)
 8007fbc:	ec51 0b19 	vmov	r0, r1, d9
 8007fc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fc4:	f7f8 fc72 	bl	80008ac <__aeabi_ddiv>
 8007fc8:	f007 070f 	and.w	r7, r7, #15
 8007fcc:	4682      	mov	sl, r0
 8007fce:	468b      	mov	fp, r1
 8007fd0:	2503      	movs	r5, #3
 8007fd2:	4eac      	ldr	r6, [pc, #688]	; (8008284 <_dtoa_r+0x61c>)
 8007fd4:	b957      	cbnz	r7, 8007fec <_dtoa_r+0x384>
 8007fd6:	4642      	mov	r2, r8
 8007fd8:	464b      	mov	r3, r9
 8007fda:	4650      	mov	r0, sl
 8007fdc:	4659      	mov	r1, fp
 8007fde:	f7f8 fc65 	bl	80008ac <__aeabi_ddiv>
 8007fe2:	4682      	mov	sl, r0
 8007fe4:	468b      	mov	fp, r1
 8007fe6:	e028      	b.n	800803a <_dtoa_r+0x3d2>
 8007fe8:	2502      	movs	r5, #2
 8007fea:	e7f2      	b.n	8007fd2 <_dtoa_r+0x36a>
 8007fec:	07f9      	lsls	r1, r7, #31
 8007fee:	d508      	bpl.n	8008002 <_dtoa_r+0x39a>
 8007ff0:	4640      	mov	r0, r8
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ff8:	f7f8 fb2e 	bl	8000658 <__aeabi_dmul>
 8007ffc:	3501      	adds	r5, #1
 8007ffe:	4680      	mov	r8, r0
 8008000:	4689      	mov	r9, r1
 8008002:	107f      	asrs	r7, r7, #1
 8008004:	3608      	adds	r6, #8
 8008006:	e7e5      	b.n	8007fd4 <_dtoa_r+0x36c>
 8008008:	f000 809b 	beq.w	8008142 <_dtoa_r+0x4da>
 800800c:	9b00      	ldr	r3, [sp, #0]
 800800e:	4f9d      	ldr	r7, [pc, #628]	; (8008284 <_dtoa_r+0x61c>)
 8008010:	425e      	negs	r6, r3
 8008012:	4b9b      	ldr	r3, [pc, #620]	; (8008280 <_dtoa_r+0x618>)
 8008014:	f006 020f 	and.w	r2, r6, #15
 8008018:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800801c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008020:	ec51 0b19 	vmov	r0, r1, d9
 8008024:	f7f8 fb18 	bl	8000658 <__aeabi_dmul>
 8008028:	1136      	asrs	r6, r6, #4
 800802a:	4682      	mov	sl, r0
 800802c:	468b      	mov	fp, r1
 800802e:	2300      	movs	r3, #0
 8008030:	2502      	movs	r5, #2
 8008032:	2e00      	cmp	r6, #0
 8008034:	d17a      	bne.n	800812c <_dtoa_r+0x4c4>
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1d3      	bne.n	8007fe2 <_dtoa_r+0x37a>
 800803a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 8082 	beq.w	8008146 <_dtoa_r+0x4de>
 8008042:	4b91      	ldr	r3, [pc, #580]	; (8008288 <_dtoa_r+0x620>)
 8008044:	2200      	movs	r2, #0
 8008046:	4650      	mov	r0, sl
 8008048:	4659      	mov	r1, fp
 800804a:	f7f8 fd77 	bl	8000b3c <__aeabi_dcmplt>
 800804e:	2800      	cmp	r0, #0
 8008050:	d079      	beq.n	8008146 <_dtoa_r+0x4de>
 8008052:	9b03      	ldr	r3, [sp, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d076      	beq.n	8008146 <_dtoa_r+0x4de>
 8008058:	9b02      	ldr	r3, [sp, #8]
 800805a:	2b00      	cmp	r3, #0
 800805c:	dd36      	ble.n	80080cc <_dtoa_r+0x464>
 800805e:	9b00      	ldr	r3, [sp, #0]
 8008060:	4650      	mov	r0, sl
 8008062:	4659      	mov	r1, fp
 8008064:	1e5f      	subs	r7, r3, #1
 8008066:	2200      	movs	r2, #0
 8008068:	4b88      	ldr	r3, [pc, #544]	; (800828c <_dtoa_r+0x624>)
 800806a:	f7f8 faf5 	bl	8000658 <__aeabi_dmul>
 800806e:	9e02      	ldr	r6, [sp, #8]
 8008070:	4682      	mov	sl, r0
 8008072:	468b      	mov	fp, r1
 8008074:	3501      	adds	r5, #1
 8008076:	4628      	mov	r0, r5
 8008078:	f7f8 fa84 	bl	8000584 <__aeabi_i2d>
 800807c:	4652      	mov	r2, sl
 800807e:	465b      	mov	r3, fp
 8008080:	f7f8 faea 	bl	8000658 <__aeabi_dmul>
 8008084:	4b82      	ldr	r3, [pc, #520]	; (8008290 <_dtoa_r+0x628>)
 8008086:	2200      	movs	r2, #0
 8008088:	f7f8 f930 	bl	80002ec <__adddf3>
 800808c:	46d0      	mov	r8, sl
 800808e:	46d9      	mov	r9, fp
 8008090:	4682      	mov	sl, r0
 8008092:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008096:	2e00      	cmp	r6, #0
 8008098:	d158      	bne.n	800814c <_dtoa_r+0x4e4>
 800809a:	4b7e      	ldr	r3, [pc, #504]	; (8008294 <_dtoa_r+0x62c>)
 800809c:	2200      	movs	r2, #0
 800809e:	4640      	mov	r0, r8
 80080a0:	4649      	mov	r1, r9
 80080a2:	f7f8 f921 	bl	80002e8 <__aeabi_dsub>
 80080a6:	4652      	mov	r2, sl
 80080a8:	465b      	mov	r3, fp
 80080aa:	4680      	mov	r8, r0
 80080ac:	4689      	mov	r9, r1
 80080ae:	f7f8 fd63 	bl	8000b78 <__aeabi_dcmpgt>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	f040 8295 	bne.w	80085e2 <_dtoa_r+0x97a>
 80080b8:	4652      	mov	r2, sl
 80080ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80080be:	4640      	mov	r0, r8
 80080c0:	4649      	mov	r1, r9
 80080c2:	f7f8 fd3b 	bl	8000b3c <__aeabi_dcmplt>
 80080c6:	2800      	cmp	r0, #0
 80080c8:	f040 8289 	bne.w	80085de <_dtoa_r+0x976>
 80080cc:	ec5b ab19 	vmov	sl, fp, d9
 80080d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f2c0 8148 	blt.w	8008368 <_dtoa_r+0x700>
 80080d8:	9a00      	ldr	r2, [sp, #0]
 80080da:	2a0e      	cmp	r2, #14
 80080dc:	f300 8144 	bgt.w	8008368 <_dtoa_r+0x700>
 80080e0:	4b67      	ldr	r3, [pc, #412]	; (8008280 <_dtoa_r+0x618>)
 80080e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f280 80d5 	bge.w	800829c <_dtoa_r+0x634>
 80080f2:	9b03      	ldr	r3, [sp, #12]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f300 80d1 	bgt.w	800829c <_dtoa_r+0x634>
 80080fa:	f040 826f 	bne.w	80085dc <_dtoa_r+0x974>
 80080fe:	4b65      	ldr	r3, [pc, #404]	; (8008294 <_dtoa_r+0x62c>)
 8008100:	2200      	movs	r2, #0
 8008102:	4640      	mov	r0, r8
 8008104:	4649      	mov	r1, r9
 8008106:	f7f8 faa7 	bl	8000658 <__aeabi_dmul>
 800810a:	4652      	mov	r2, sl
 800810c:	465b      	mov	r3, fp
 800810e:	f7f8 fd29 	bl	8000b64 <__aeabi_dcmpge>
 8008112:	9e03      	ldr	r6, [sp, #12]
 8008114:	4637      	mov	r7, r6
 8008116:	2800      	cmp	r0, #0
 8008118:	f040 8245 	bne.w	80085a6 <_dtoa_r+0x93e>
 800811c:	9d01      	ldr	r5, [sp, #4]
 800811e:	2331      	movs	r3, #49	; 0x31
 8008120:	f805 3b01 	strb.w	r3, [r5], #1
 8008124:	9b00      	ldr	r3, [sp, #0]
 8008126:	3301      	adds	r3, #1
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	e240      	b.n	80085ae <_dtoa_r+0x946>
 800812c:	07f2      	lsls	r2, r6, #31
 800812e:	d505      	bpl.n	800813c <_dtoa_r+0x4d4>
 8008130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008134:	f7f8 fa90 	bl	8000658 <__aeabi_dmul>
 8008138:	3501      	adds	r5, #1
 800813a:	2301      	movs	r3, #1
 800813c:	1076      	asrs	r6, r6, #1
 800813e:	3708      	adds	r7, #8
 8008140:	e777      	b.n	8008032 <_dtoa_r+0x3ca>
 8008142:	2502      	movs	r5, #2
 8008144:	e779      	b.n	800803a <_dtoa_r+0x3d2>
 8008146:	9f00      	ldr	r7, [sp, #0]
 8008148:	9e03      	ldr	r6, [sp, #12]
 800814a:	e794      	b.n	8008076 <_dtoa_r+0x40e>
 800814c:	9901      	ldr	r1, [sp, #4]
 800814e:	4b4c      	ldr	r3, [pc, #304]	; (8008280 <_dtoa_r+0x618>)
 8008150:	4431      	add	r1, r6
 8008152:	910d      	str	r1, [sp, #52]	; 0x34
 8008154:	9908      	ldr	r1, [sp, #32]
 8008156:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800815a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800815e:	2900      	cmp	r1, #0
 8008160:	d043      	beq.n	80081ea <_dtoa_r+0x582>
 8008162:	494d      	ldr	r1, [pc, #308]	; (8008298 <_dtoa_r+0x630>)
 8008164:	2000      	movs	r0, #0
 8008166:	f7f8 fba1 	bl	80008ac <__aeabi_ddiv>
 800816a:	4652      	mov	r2, sl
 800816c:	465b      	mov	r3, fp
 800816e:	f7f8 f8bb 	bl	80002e8 <__aeabi_dsub>
 8008172:	9d01      	ldr	r5, [sp, #4]
 8008174:	4682      	mov	sl, r0
 8008176:	468b      	mov	fp, r1
 8008178:	4649      	mov	r1, r9
 800817a:	4640      	mov	r0, r8
 800817c:	f7f8 fd1c 	bl	8000bb8 <__aeabi_d2iz>
 8008180:	4606      	mov	r6, r0
 8008182:	f7f8 f9ff 	bl	8000584 <__aeabi_i2d>
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	4640      	mov	r0, r8
 800818c:	4649      	mov	r1, r9
 800818e:	f7f8 f8ab 	bl	80002e8 <__aeabi_dsub>
 8008192:	3630      	adds	r6, #48	; 0x30
 8008194:	f805 6b01 	strb.w	r6, [r5], #1
 8008198:	4652      	mov	r2, sl
 800819a:	465b      	mov	r3, fp
 800819c:	4680      	mov	r8, r0
 800819e:	4689      	mov	r9, r1
 80081a0:	f7f8 fccc 	bl	8000b3c <__aeabi_dcmplt>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d163      	bne.n	8008270 <_dtoa_r+0x608>
 80081a8:	4642      	mov	r2, r8
 80081aa:	464b      	mov	r3, r9
 80081ac:	4936      	ldr	r1, [pc, #216]	; (8008288 <_dtoa_r+0x620>)
 80081ae:	2000      	movs	r0, #0
 80081b0:	f7f8 f89a 	bl	80002e8 <__aeabi_dsub>
 80081b4:	4652      	mov	r2, sl
 80081b6:	465b      	mov	r3, fp
 80081b8:	f7f8 fcc0 	bl	8000b3c <__aeabi_dcmplt>
 80081bc:	2800      	cmp	r0, #0
 80081be:	f040 80b5 	bne.w	800832c <_dtoa_r+0x6c4>
 80081c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081c4:	429d      	cmp	r5, r3
 80081c6:	d081      	beq.n	80080cc <_dtoa_r+0x464>
 80081c8:	4b30      	ldr	r3, [pc, #192]	; (800828c <_dtoa_r+0x624>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	4650      	mov	r0, sl
 80081ce:	4659      	mov	r1, fp
 80081d0:	f7f8 fa42 	bl	8000658 <__aeabi_dmul>
 80081d4:	4b2d      	ldr	r3, [pc, #180]	; (800828c <_dtoa_r+0x624>)
 80081d6:	4682      	mov	sl, r0
 80081d8:	468b      	mov	fp, r1
 80081da:	4640      	mov	r0, r8
 80081dc:	4649      	mov	r1, r9
 80081de:	2200      	movs	r2, #0
 80081e0:	f7f8 fa3a 	bl	8000658 <__aeabi_dmul>
 80081e4:	4680      	mov	r8, r0
 80081e6:	4689      	mov	r9, r1
 80081e8:	e7c6      	b.n	8008178 <_dtoa_r+0x510>
 80081ea:	4650      	mov	r0, sl
 80081ec:	4659      	mov	r1, fp
 80081ee:	f7f8 fa33 	bl	8000658 <__aeabi_dmul>
 80081f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081f4:	9d01      	ldr	r5, [sp, #4]
 80081f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80081f8:	4682      	mov	sl, r0
 80081fa:	468b      	mov	fp, r1
 80081fc:	4649      	mov	r1, r9
 80081fe:	4640      	mov	r0, r8
 8008200:	f7f8 fcda 	bl	8000bb8 <__aeabi_d2iz>
 8008204:	4606      	mov	r6, r0
 8008206:	f7f8 f9bd 	bl	8000584 <__aeabi_i2d>
 800820a:	3630      	adds	r6, #48	; 0x30
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	4640      	mov	r0, r8
 8008212:	4649      	mov	r1, r9
 8008214:	f7f8 f868 	bl	80002e8 <__aeabi_dsub>
 8008218:	f805 6b01 	strb.w	r6, [r5], #1
 800821c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800821e:	429d      	cmp	r5, r3
 8008220:	4680      	mov	r8, r0
 8008222:	4689      	mov	r9, r1
 8008224:	f04f 0200 	mov.w	r2, #0
 8008228:	d124      	bne.n	8008274 <_dtoa_r+0x60c>
 800822a:	4b1b      	ldr	r3, [pc, #108]	; (8008298 <_dtoa_r+0x630>)
 800822c:	4650      	mov	r0, sl
 800822e:	4659      	mov	r1, fp
 8008230:	f7f8 f85c 	bl	80002ec <__adddf3>
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	4640      	mov	r0, r8
 800823a:	4649      	mov	r1, r9
 800823c:	f7f8 fc9c 	bl	8000b78 <__aeabi_dcmpgt>
 8008240:	2800      	cmp	r0, #0
 8008242:	d173      	bne.n	800832c <_dtoa_r+0x6c4>
 8008244:	4652      	mov	r2, sl
 8008246:	465b      	mov	r3, fp
 8008248:	4913      	ldr	r1, [pc, #76]	; (8008298 <_dtoa_r+0x630>)
 800824a:	2000      	movs	r0, #0
 800824c:	f7f8 f84c 	bl	80002e8 <__aeabi_dsub>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	4640      	mov	r0, r8
 8008256:	4649      	mov	r1, r9
 8008258:	f7f8 fc70 	bl	8000b3c <__aeabi_dcmplt>
 800825c:	2800      	cmp	r0, #0
 800825e:	f43f af35 	beq.w	80080cc <_dtoa_r+0x464>
 8008262:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008264:	1e6b      	subs	r3, r5, #1
 8008266:	930f      	str	r3, [sp, #60]	; 0x3c
 8008268:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800826c:	2b30      	cmp	r3, #48	; 0x30
 800826e:	d0f8      	beq.n	8008262 <_dtoa_r+0x5fa>
 8008270:	9700      	str	r7, [sp, #0]
 8008272:	e049      	b.n	8008308 <_dtoa_r+0x6a0>
 8008274:	4b05      	ldr	r3, [pc, #20]	; (800828c <_dtoa_r+0x624>)
 8008276:	f7f8 f9ef 	bl	8000658 <__aeabi_dmul>
 800827a:	4680      	mov	r8, r0
 800827c:	4689      	mov	r9, r1
 800827e:	e7bd      	b.n	80081fc <_dtoa_r+0x594>
 8008280:	0800ae78 	.word	0x0800ae78
 8008284:	0800ae50 	.word	0x0800ae50
 8008288:	3ff00000 	.word	0x3ff00000
 800828c:	40240000 	.word	0x40240000
 8008290:	401c0000 	.word	0x401c0000
 8008294:	40140000 	.word	0x40140000
 8008298:	3fe00000 	.word	0x3fe00000
 800829c:	9d01      	ldr	r5, [sp, #4]
 800829e:	4656      	mov	r6, sl
 80082a0:	465f      	mov	r7, fp
 80082a2:	4642      	mov	r2, r8
 80082a4:	464b      	mov	r3, r9
 80082a6:	4630      	mov	r0, r6
 80082a8:	4639      	mov	r1, r7
 80082aa:	f7f8 faff 	bl	80008ac <__aeabi_ddiv>
 80082ae:	f7f8 fc83 	bl	8000bb8 <__aeabi_d2iz>
 80082b2:	4682      	mov	sl, r0
 80082b4:	f7f8 f966 	bl	8000584 <__aeabi_i2d>
 80082b8:	4642      	mov	r2, r8
 80082ba:	464b      	mov	r3, r9
 80082bc:	f7f8 f9cc 	bl	8000658 <__aeabi_dmul>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	4630      	mov	r0, r6
 80082c6:	4639      	mov	r1, r7
 80082c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80082cc:	f7f8 f80c 	bl	80002e8 <__aeabi_dsub>
 80082d0:	f805 6b01 	strb.w	r6, [r5], #1
 80082d4:	9e01      	ldr	r6, [sp, #4]
 80082d6:	9f03      	ldr	r7, [sp, #12]
 80082d8:	1bae      	subs	r6, r5, r6
 80082da:	42b7      	cmp	r7, r6
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	d135      	bne.n	800834e <_dtoa_r+0x6e6>
 80082e2:	f7f8 f803 	bl	80002ec <__adddf3>
 80082e6:	4642      	mov	r2, r8
 80082e8:	464b      	mov	r3, r9
 80082ea:	4606      	mov	r6, r0
 80082ec:	460f      	mov	r7, r1
 80082ee:	f7f8 fc43 	bl	8000b78 <__aeabi_dcmpgt>
 80082f2:	b9d0      	cbnz	r0, 800832a <_dtoa_r+0x6c2>
 80082f4:	4642      	mov	r2, r8
 80082f6:	464b      	mov	r3, r9
 80082f8:	4630      	mov	r0, r6
 80082fa:	4639      	mov	r1, r7
 80082fc:	f7f8 fc14 	bl	8000b28 <__aeabi_dcmpeq>
 8008300:	b110      	cbz	r0, 8008308 <_dtoa_r+0x6a0>
 8008302:	f01a 0f01 	tst.w	sl, #1
 8008306:	d110      	bne.n	800832a <_dtoa_r+0x6c2>
 8008308:	4620      	mov	r0, r4
 800830a:	ee18 1a10 	vmov	r1, s16
 800830e:	f000 fe87 	bl	8009020 <_Bfree>
 8008312:	2300      	movs	r3, #0
 8008314:	9800      	ldr	r0, [sp, #0]
 8008316:	702b      	strb	r3, [r5, #0]
 8008318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800831a:	3001      	adds	r0, #1
 800831c:	6018      	str	r0, [r3, #0]
 800831e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008320:	2b00      	cmp	r3, #0
 8008322:	f43f acf1 	beq.w	8007d08 <_dtoa_r+0xa0>
 8008326:	601d      	str	r5, [r3, #0]
 8008328:	e4ee      	b.n	8007d08 <_dtoa_r+0xa0>
 800832a:	9f00      	ldr	r7, [sp, #0]
 800832c:	462b      	mov	r3, r5
 800832e:	461d      	mov	r5, r3
 8008330:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008334:	2a39      	cmp	r2, #57	; 0x39
 8008336:	d106      	bne.n	8008346 <_dtoa_r+0x6de>
 8008338:	9a01      	ldr	r2, [sp, #4]
 800833a:	429a      	cmp	r2, r3
 800833c:	d1f7      	bne.n	800832e <_dtoa_r+0x6c6>
 800833e:	9901      	ldr	r1, [sp, #4]
 8008340:	2230      	movs	r2, #48	; 0x30
 8008342:	3701      	adds	r7, #1
 8008344:	700a      	strb	r2, [r1, #0]
 8008346:	781a      	ldrb	r2, [r3, #0]
 8008348:	3201      	adds	r2, #1
 800834a:	701a      	strb	r2, [r3, #0]
 800834c:	e790      	b.n	8008270 <_dtoa_r+0x608>
 800834e:	4ba6      	ldr	r3, [pc, #664]	; (80085e8 <_dtoa_r+0x980>)
 8008350:	2200      	movs	r2, #0
 8008352:	f7f8 f981 	bl	8000658 <__aeabi_dmul>
 8008356:	2200      	movs	r2, #0
 8008358:	2300      	movs	r3, #0
 800835a:	4606      	mov	r6, r0
 800835c:	460f      	mov	r7, r1
 800835e:	f7f8 fbe3 	bl	8000b28 <__aeabi_dcmpeq>
 8008362:	2800      	cmp	r0, #0
 8008364:	d09d      	beq.n	80082a2 <_dtoa_r+0x63a>
 8008366:	e7cf      	b.n	8008308 <_dtoa_r+0x6a0>
 8008368:	9a08      	ldr	r2, [sp, #32]
 800836a:	2a00      	cmp	r2, #0
 800836c:	f000 80d7 	beq.w	800851e <_dtoa_r+0x8b6>
 8008370:	9a06      	ldr	r2, [sp, #24]
 8008372:	2a01      	cmp	r2, #1
 8008374:	f300 80ba 	bgt.w	80084ec <_dtoa_r+0x884>
 8008378:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800837a:	2a00      	cmp	r2, #0
 800837c:	f000 80b2 	beq.w	80084e4 <_dtoa_r+0x87c>
 8008380:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008384:	9e07      	ldr	r6, [sp, #28]
 8008386:	9d04      	ldr	r5, [sp, #16]
 8008388:	9a04      	ldr	r2, [sp, #16]
 800838a:	441a      	add	r2, r3
 800838c:	9204      	str	r2, [sp, #16]
 800838e:	9a05      	ldr	r2, [sp, #20]
 8008390:	2101      	movs	r1, #1
 8008392:	441a      	add	r2, r3
 8008394:	4620      	mov	r0, r4
 8008396:	9205      	str	r2, [sp, #20]
 8008398:	f000 ff44 	bl	8009224 <__i2b>
 800839c:	4607      	mov	r7, r0
 800839e:	2d00      	cmp	r5, #0
 80083a0:	dd0c      	ble.n	80083bc <_dtoa_r+0x754>
 80083a2:	9b05      	ldr	r3, [sp, #20]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	dd09      	ble.n	80083bc <_dtoa_r+0x754>
 80083a8:	42ab      	cmp	r3, r5
 80083aa:	9a04      	ldr	r2, [sp, #16]
 80083ac:	bfa8      	it	ge
 80083ae:	462b      	movge	r3, r5
 80083b0:	1ad2      	subs	r2, r2, r3
 80083b2:	9204      	str	r2, [sp, #16]
 80083b4:	9a05      	ldr	r2, [sp, #20]
 80083b6:	1aed      	subs	r5, r5, r3
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	9305      	str	r3, [sp, #20]
 80083bc:	9b07      	ldr	r3, [sp, #28]
 80083be:	b31b      	cbz	r3, 8008408 <_dtoa_r+0x7a0>
 80083c0:	9b08      	ldr	r3, [sp, #32]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f000 80af 	beq.w	8008526 <_dtoa_r+0x8be>
 80083c8:	2e00      	cmp	r6, #0
 80083ca:	dd13      	ble.n	80083f4 <_dtoa_r+0x78c>
 80083cc:	4639      	mov	r1, r7
 80083ce:	4632      	mov	r2, r6
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 ffe7 	bl	80093a4 <__pow5mult>
 80083d6:	ee18 2a10 	vmov	r2, s16
 80083da:	4601      	mov	r1, r0
 80083dc:	4607      	mov	r7, r0
 80083de:	4620      	mov	r0, r4
 80083e0:	f000 ff36 	bl	8009250 <__multiply>
 80083e4:	ee18 1a10 	vmov	r1, s16
 80083e8:	4680      	mov	r8, r0
 80083ea:	4620      	mov	r0, r4
 80083ec:	f000 fe18 	bl	8009020 <_Bfree>
 80083f0:	ee08 8a10 	vmov	s16, r8
 80083f4:	9b07      	ldr	r3, [sp, #28]
 80083f6:	1b9a      	subs	r2, r3, r6
 80083f8:	d006      	beq.n	8008408 <_dtoa_r+0x7a0>
 80083fa:	ee18 1a10 	vmov	r1, s16
 80083fe:	4620      	mov	r0, r4
 8008400:	f000 ffd0 	bl	80093a4 <__pow5mult>
 8008404:	ee08 0a10 	vmov	s16, r0
 8008408:	2101      	movs	r1, #1
 800840a:	4620      	mov	r0, r4
 800840c:	f000 ff0a 	bl	8009224 <__i2b>
 8008410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008412:	2b00      	cmp	r3, #0
 8008414:	4606      	mov	r6, r0
 8008416:	f340 8088 	ble.w	800852a <_dtoa_r+0x8c2>
 800841a:	461a      	mov	r2, r3
 800841c:	4601      	mov	r1, r0
 800841e:	4620      	mov	r0, r4
 8008420:	f000 ffc0 	bl	80093a4 <__pow5mult>
 8008424:	9b06      	ldr	r3, [sp, #24]
 8008426:	2b01      	cmp	r3, #1
 8008428:	4606      	mov	r6, r0
 800842a:	f340 8081 	ble.w	8008530 <_dtoa_r+0x8c8>
 800842e:	f04f 0800 	mov.w	r8, #0
 8008432:	6933      	ldr	r3, [r6, #16]
 8008434:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008438:	6918      	ldr	r0, [r3, #16]
 800843a:	f000 fea3 	bl	8009184 <__hi0bits>
 800843e:	f1c0 0020 	rsb	r0, r0, #32
 8008442:	9b05      	ldr	r3, [sp, #20]
 8008444:	4418      	add	r0, r3
 8008446:	f010 001f 	ands.w	r0, r0, #31
 800844a:	f000 8092 	beq.w	8008572 <_dtoa_r+0x90a>
 800844e:	f1c0 0320 	rsb	r3, r0, #32
 8008452:	2b04      	cmp	r3, #4
 8008454:	f340 808a 	ble.w	800856c <_dtoa_r+0x904>
 8008458:	f1c0 001c 	rsb	r0, r0, #28
 800845c:	9b04      	ldr	r3, [sp, #16]
 800845e:	4403      	add	r3, r0
 8008460:	9304      	str	r3, [sp, #16]
 8008462:	9b05      	ldr	r3, [sp, #20]
 8008464:	4403      	add	r3, r0
 8008466:	4405      	add	r5, r0
 8008468:	9305      	str	r3, [sp, #20]
 800846a:	9b04      	ldr	r3, [sp, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	dd07      	ble.n	8008480 <_dtoa_r+0x818>
 8008470:	ee18 1a10 	vmov	r1, s16
 8008474:	461a      	mov	r2, r3
 8008476:	4620      	mov	r0, r4
 8008478:	f000 ffee 	bl	8009458 <__lshift>
 800847c:	ee08 0a10 	vmov	s16, r0
 8008480:	9b05      	ldr	r3, [sp, #20]
 8008482:	2b00      	cmp	r3, #0
 8008484:	dd05      	ble.n	8008492 <_dtoa_r+0x82a>
 8008486:	4631      	mov	r1, r6
 8008488:	461a      	mov	r2, r3
 800848a:	4620      	mov	r0, r4
 800848c:	f000 ffe4 	bl	8009458 <__lshift>
 8008490:	4606      	mov	r6, r0
 8008492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008494:	2b00      	cmp	r3, #0
 8008496:	d06e      	beq.n	8008576 <_dtoa_r+0x90e>
 8008498:	ee18 0a10 	vmov	r0, s16
 800849c:	4631      	mov	r1, r6
 800849e:	f001 f84b 	bl	8009538 <__mcmp>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	da67      	bge.n	8008576 <_dtoa_r+0x90e>
 80084a6:	9b00      	ldr	r3, [sp, #0]
 80084a8:	3b01      	subs	r3, #1
 80084aa:	ee18 1a10 	vmov	r1, s16
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	220a      	movs	r2, #10
 80084b2:	2300      	movs	r3, #0
 80084b4:	4620      	mov	r0, r4
 80084b6:	f000 fdd5 	bl	8009064 <__multadd>
 80084ba:	9b08      	ldr	r3, [sp, #32]
 80084bc:	ee08 0a10 	vmov	s16, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 81b1 	beq.w	8008828 <_dtoa_r+0xbc0>
 80084c6:	2300      	movs	r3, #0
 80084c8:	4639      	mov	r1, r7
 80084ca:	220a      	movs	r2, #10
 80084cc:	4620      	mov	r0, r4
 80084ce:	f000 fdc9 	bl	8009064 <__multadd>
 80084d2:	9b02      	ldr	r3, [sp, #8]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	4607      	mov	r7, r0
 80084d8:	f300 808e 	bgt.w	80085f8 <_dtoa_r+0x990>
 80084dc:	9b06      	ldr	r3, [sp, #24]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	dc51      	bgt.n	8008586 <_dtoa_r+0x91e>
 80084e2:	e089      	b.n	80085f8 <_dtoa_r+0x990>
 80084e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80084ea:	e74b      	b.n	8008384 <_dtoa_r+0x71c>
 80084ec:	9b03      	ldr	r3, [sp, #12]
 80084ee:	1e5e      	subs	r6, r3, #1
 80084f0:	9b07      	ldr	r3, [sp, #28]
 80084f2:	42b3      	cmp	r3, r6
 80084f4:	bfbf      	itttt	lt
 80084f6:	9b07      	ldrlt	r3, [sp, #28]
 80084f8:	9607      	strlt	r6, [sp, #28]
 80084fa:	1af2      	sublt	r2, r6, r3
 80084fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80084fe:	bfb6      	itet	lt
 8008500:	189b      	addlt	r3, r3, r2
 8008502:	1b9e      	subge	r6, r3, r6
 8008504:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008506:	9b03      	ldr	r3, [sp, #12]
 8008508:	bfb8      	it	lt
 800850a:	2600      	movlt	r6, #0
 800850c:	2b00      	cmp	r3, #0
 800850e:	bfb7      	itett	lt
 8008510:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008514:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008518:	1a9d      	sublt	r5, r3, r2
 800851a:	2300      	movlt	r3, #0
 800851c:	e734      	b.n	8008388 <_dtoa_r+0x720>
 800851e:	9e07      	ldr	r6, [sp, #28]
 8008520:	9d04      	ldr	r5, [sp, #16]
 8008522:	9f08      	ldr	r7, [sp, #32]
 8008524:	e73b      	b.n	800839e <_dtoa_r+0x736>
 8008526:	9a07      	ldr	r2, [sp, #28]
 8008528:	e767      	b.n	80083fa <_dtoa_r+0x792>
 800852a:	9b06      	ldr	r3, [sp, #24]
 800852c:	2b01      	cmp	r3, #1
 800852e:	dc18      	bgt.n	8008562 <_dtoa_r+0x8fa>
 8008530:	f1ba 0f00 	cmp.w	sl, #0
 8008534:	d115      	bne.n	8008562 <_dtoa_r+0x8fa>
 8008536:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800853a:	b993      	cbnz	r3, 8008562 <_dtoa_r+0x8fa>
 800853c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008540:	0d1b      	lsrs	r3, r3, #20
 8008542:	051b      	lsls	r3, r3, #20
 8008544:	b183      	cbz	r3, 8008568 <_dtoa_r+0x900>
 8008546:	9b04      	ldr	r3, [sp, #16]
 8008548:	3301      	adds	r3, #1
 800854a:	9304      	str	r3, [sp, #16]
 800854c:	9b05      	ldr	r3, [sp, #20]
 800854e:	3301      	adds	r3, #1
 8008550:	9305      	str	r3, [sp, #20]
 8008552:	f04f 0801 	mov.w	r8, #1
 8008556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008558:	2b00      	cmp	r3, #0
 800855a:	f47f af6a 	bne.w	8008432 <_dtoa_r+0x7ca>
 800855e:	2001      	movs	r0, #1
 8008560:	e76f      	b.n	8008442 <_dtoa_r+0x7da>
 8008562:	f04f 0800 	mov.w	r8, #0
 8008566:	e7f6      	b.n	8008556 <_dtoa_r+0x8ee>
 8008568:	4698      	mov	r8, r3
 800856a:	e7f4      	b.n	8008556 <_dtoa_r+0x8ee>
 800856c:	f43f af7d 	beq.w	800846a <_dtoa_r+0x802>
 8008570:	4618      	mov	r0, r3
 8008572:	301c      	adds	r0, #28
 8008574:	e772      	b.n	800845c <_dtoa_r+0x7f4>
 8008576:	9b03      	ldr	r3, [sp, #12]
 8008578:	2b00      	cmp	r3, #0
 800857a:	dc37      	bgt.n	80085ec <_dtoa_r+0x984>
 800857c:	9b06      	ldr	r3, [sp, #24]
 800857e:	2b02      	cmp	r3, #2
 8008580:	dd34      	ble.n	80085ec <_dtoa_r+0x984>
 8008582:	9b03      	ldr	r3, [sp, #12]
 8008584:	9302      	str	r3, [sp, #8]
 8008586:	9b02      	ldr	r3, [sp, #8]
 8008588:	b96b      	cbnz	r3, 80085a6 <_dtoa_r+0x93e>
 800858a:	4631      	mov	r1, r6
 800858c:	2205      	movs	r2, #5
 800858e:	4620      	mov	r0, r4
 8008590:	f000 fd68 	bl	8009064 <__multadd>
 8008594:	4601      	mov	r1, r0
 8008596:	4606      	mov	r6, r0
 8008598:	ee18 0a10 	vmov	r0, s16
 800859c:	f000 ffcc 	bl	8009538 <__mcmp>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	f73f adbb 	bgt.w	800811c <_dtoa_r+0x4b4>
 80085a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a8:	9d01      	ldr	r5, [sp, #4]
 80085aa:	43db      	mvns	r3, r3
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	f04f 0800 	mov.w	r8, #0
 80085b2:	4631      	mov	r1, r6
 80085b4:	4620      	mov	r0, r4
 80085b6:	f000 fd33 	bl	8009020 <_Bfree>
 80085ba:	2f00      	cmp	r7, #0
 80085bc:	f43f aea4 	beq.w	8008308 <_dtoa_r+0x6a0>
 80085c0:	f1b8 0f00 	cmp.w	r8, #0
 80085c4:	d005      	beq.n	80085d2 <_dtoa_r+0x96a>
 80085c6:	45b8      	cmp	r8, r7
 80085c8:	d003      	beq.n	80085d2 <_dtoa_r+0x96a>
 80085ca:	4641      	mov	r1, r8
 80085cc:	4620      	mov	r0, r4
 80085ce:	f000 fd27 	bl	8009020 <_Bfree>
 80085d2:	4639      	mov	r1, r7
 80085d4:	4620      	mov	r0, r4
 80085d6:	f000 fd23 	bl	8009020 <_Bfree>
 80085da:	e695      	b.n	8008308 <_dtoa_r+0x6a0>
 80085dc:	2600      	movs	r6, #0
 80085de:	4637      	mov	r7, r6
 80085e0:	e7e1      	b.n	80085a6 <_dtoa_r+0x93e>
 80085e2:	9700      	str	r7, [sp, #0]
 80085e4:	4637      	mov	r7, r6
 80085e6:	e599      	b.n	800811c <_dtoa_r+0x4b4>
 80085e8:	40240000 	.word	0x40240000
 80085ec:	9b08      	ldr	r3, [sp, #32]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 80ca 	beq.w	8008788 <_dtoa_r+0xb20>
 80085f4:	9b03      	ldr	r3, [sp, #12]
 80085f6:	9302      	str	r3, [sp, #8]
 80085f8:	2d00      	cmp	r5, #0
 80085fa:	dd05      	ble.n	8008608 <_dtoa_r+0x9a0>
 80085fc:	4639      	mov	r1, r7
 80085fe:	462a      	mov	r2, r5
 8008600:	4620      	mov	r0, r4
 8008602:	f000 ff29 	bl	8009458 <__lshift>
 8008606:	4607      	mov	r7, r0
 8008608:	f1b8 0f00 	cmp.w	r8, #0
 800860c:	d05b      	beq.n	80086c6 <_dtoa_r+0xa5e>
 800860e:	6879      	ldr	r1, [r7, #4]
 8008610:	4620      	mov	r0, r4
 8008612:	f000 fcc5 	bl	8008fa0 <_Balloc>
 8008616:	4605      	mov	r5, r0
 8008618:	b928      	cbnz	r0, 8008626 <_dtoa_r+0x9be>
 800861a:	4b87      	ldr	r3, [pc, #540]	; (8008838 <_dtoa_r+0xbd0>)
 800861c:	4602      	mov	r2, r0
 800861e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008622:	f7ff bb3b 	b.w	8007c9c <_dtoa_r+0x34>
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	3202      	adds	r2, #2
 800862a:	0092      	lsls	r2, r2, #2
 800862c:	f107 010c 	add.w	r1, r7, #12
 8008630:	300c      	adds	r0, #12
 8008632:	f000 fca7 	bl	8008f84 <memcpy>
 8008636:	2201      	movs	r2, #1
 8008638:	4629      	mov	r1, r5
 800863a:	4620      	mov	r0, r4
 800863c:	f000 ff0c 	bl	8009458 <__lshift>
 8008640:	9b01      	ldr	r3, [sp, #4]
 8008642:	f103 0901 	add.w	r9, r3, #1
 8008646:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800864a:	4413      	add	r3, r2
 800864c:	9305      	str	r3, [sp, #20]
 800864e:	f00a 0301 	and.w	r3, sl, #1
 8008652:	46b8      	mov	r8, r7
 8008654:	9304      	str	r3, [sp, #16]
 8008656:	4607      	mov	r7, r0
 8008658:	4631      	mov	r1, r6
 800865a:	ee18 0a10 	vmov	r0, s16
 800865e:	f7ff fa77 	bl	8007b50 <quorem>
 8008662:	4641      	mov	r1, r8
 8008664:	9002      	str	r0, [sp, #8]
 8008666:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800866a:	ee18 0a10 	vmov	r0, s16
 800866e:	f000 ff63 	bl	8009538 <__mcmp>
 8008672:	463a      	mov	r2, r7
 8008674:	9003      	str	r0, [sp, #12]
 8008676:	4631      	mov	r1, r6
 8008678:	4620      	mov	r0, r4
 800867a:	f000 ff79 	bl	8009570 <__mdiff>
 800867e:	68c2      	ldr	r2, [r0, #12]
 8008680:	f109 3bff 	add.w	fp, r9, #4294967295
 8008684:	4605      	mov	r5, r0
 8008686:	bb02      	cbnz	r2, 80086ca <_dtoa_r+0xa62>
 8008688:	4601      	mov	r1, r0
 800868a:	ee18 0a10 	vmov	r0, s16
 800868e:	f000 ff53 	bl	8009538 <__mcmp>
 8008692:	4602      	mov	r2, r0
 8008694:	4629      	mov	r1, r5
 8008696:	4620      	mov	r0, r4
 8008698:	9207      	str	r2, [sp, #28]
 800869a:	f000 fcc1 	bl	8009020 <_Bfree>
 800869e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80086a2:	ea43 0102 	orr.w	r1, r3, r2
 80086a6:	9b04      	ldr	r3, [sp, #16]
 80086a8:	430b      	orrs	r3, r1
 80086aa:	464d      	mov	r5, r9
 80086ac:	d10f      	bne.n	80086ce <_dtoa_r+0xa66>
 80086ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80086b2:	d02a      	beq.n	800870a <_dtoa_r+0xaa2>
 80086b4:	9b03      	ldr	r3, [sp, #12]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	dd02      	ble.n	80086c0 <_dtoa_r+0xa58>
 80086ba:	9b02      	ldr	r3, [sp, #8]
 80086bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80086c0:	f88b a000 	strb.w	sl, [fp]
 80086c4:	e775      	b.n	80085b2 <_dtoa_r+0x94a>
 80086c6:	4638      	mov	r0, r7
 80086c8:	e7ba      	b.n	8008640 <_dtoa_r+0x9d8>
 80086ca:	2201      	movs	r2, #1
 80086cc:	e7e2      	b.n	8008694 <_dtoa_r+0xa2c>
 80086ce:	9b03      	ldr	r3, [sp, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	db04      	blt.n	80086de <_dtoa_r+0xa76>
 80086d4:	9906      	ldr	r1, [sp, #24]
 80086d6:	430b      	orrs	r3, r1
 80086d8:	9904      	ldr	r1, [sp, #16]
 80086da:	430b      	orrs	r3, r1
 80086dc:	d122      	bne.n	8008724 <_dtoa_r+0xabc>
 80086de:	2a00      	cmp	r2, #0
 80086e0:	ddee      	ble.n	80086c0 <_dtoa_r+0xa58>
 80086e2:	ee18 1a10 	vmov	r1, s16
 80086e6:	2201      	movs	r2, #1
 80086e8:	4620      	mov	r0, r4
 80086ea:	f000 feb5 	bl	8009458 <__lshift>
 80086ee:	4631      	mov	r1, r6
 80086f0:	ee08 0a10 	vmov	s16, r0
 80086f4:	f000 ff20 	bl	8009538 <__mcmp>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	dc03      	bgt.n	8008704 <_dtoa_r+0xa9c>
 80086fc:	d1e0      	bne.n	80086c0 <_dtoa_r+0xa58>
 80086fe:	f01a 0f01 	tst.w	sl, #1
 8008702:	d0dd      	beq.n	80086c0 <_dtoa_r+0xa58>
 8008704:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008708:	d1d7      	bne.n	80086ba <_dtoa_r+0xa52>
 800870a:	2339      	movs	r3, #57	; 0x39
 800870c:	f88b 3000 	strb.w	r3, [fp]
 8008710:	462b      	mov	r3, r5
 8008712:	461d      	mov	r5, r3
 8008714:	3b01      	subs	r3, #1
 8008716:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800871a:	2a39      	cmp	r2, #57	; 0x39
 800871c:	d071      	beq.n	8008802 <_dtoa_r+0xb9a>
 800871e:	3201      	adds	r2, #1
 8008720:	701a      	strb	r2, [r3, #0]
 8008722:	e746      	b.n	80085b2 <_dtoa_r+0x94a>
 8008724:	2a00      	cmp	r2, #0
 8008726:	dd07      	ble.n	8008738 <_dtoa_r+0xad0>
 8008728:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800872c:	d0ed      	beq.n	800870a <_dtoa_r+0xaa2>
 800872e:	f10a 0301 	add.w	r3, sl, #1
 8008732:	f88b 3000 	strb.w	r3, [fp]
 8008736:	e73c      	b.n	80085b2 <_dtoa_r+0x94a>
 8008738:	9b05      	ldr	r3, [sp, #20]
 800873a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800873e:	4599      	cmp	r9, r3
 8008740:	d047      	beq.n	80087d2 <_dtoa_r+0xb6a>
 8008742:	ee18 1a10 	vmov	r1, s16
 8008746:	2300      	movs	r3, #0
 8008748:	220a      	movs	r2, #10
 800874a:	4620      	mov	r0, r4
 800874c:	f000 fc8a 	bl	8009064 <__multadd>
 8008750:	45b8      	cmp	r8, r7
 8008752:	ee08 0a10 	vmov	s16, r0
 8008756:	f04f 0300 	mov.w	r3, #0
 800875a:	f04f 020a 	mov.w	r2, #10
 800875e:	4641      	mov	r1, r8
 8008760:	4620      	mov	r0, r4
 8008762:	d106      	bne.n	8008772 <_dtoa_r+0xb0a>
 8008764:	f000 fc7e 	bl	8009064 <__multadd>
 8008768:	4680      	mov	r8, r0
 800876a:	4607      	mov	r7, r0
 800876c:	f109 0901 	add.w	r9, r9, #1
 8008770:	e772      	b.n	8008658 <_dtoa_r+0x9f0>
 8008772:	f000 fc77 	bl	8009064 <__multadd>
 8008776:	4639      	mov	r1, r7
 8008778:	4680      	mov	r8, r0
 800877a:	2300      	movs	r3, #0
 800877c:	220a      	movs	r2, #10
 800877e:	4620      	mov	r0, r4
 8008780:	f000 fc70 	bl	8009064 <__multadd>
 8008784:	4607      	mov	r7, r0
 8008786:	e7f1      	b.n	800876c <_dtoa_r+0xb04>
 8008788:	9b03      	ldr	r3, [sp, #12]
 800878a:	9302      	str	r3, [sp, #8]
 800878c:	9d01      	ldr	r5, [sp, #4]
 800878e:	ee18 0a10 	vmov	r0, s16
 8008792:	4631      	mov	r1, r6
 8008794:	f7ff f9dc 	bl	8007b50 <quorem>
 8008798:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800879c:	9b01      	ldr	r3, [sp, #4]
 800879e:	f805 ab01 	strb.w	sl, [r5], #1
 80087a2:	1aea      	subs	r2, r5, r3
 80087a4:	9b02      	ldr	r3, [sp, #8]
 80087a6:	4293      	cmp	r3, r2
 80087a8:	dd09      	ble.n	80087be <_dtoa_r+0xb56>
 80087aa:	ee18 1a10 	vmov	r1, s16
 80087ae:	2300      	movs	r3, #0
 80087b0:	220a      	movs	r2, #10
 80087b2:	4620      	mov	r0, r4
 80087b4:	f000 fc56 	bl	8009064 <__multadd>
 80087b8:	ee08 0a10 	vmov	s16, r0
 80087bc:	e7e7      	b.n	800878e <_dtoa_r+0xb26>
 80087be:	9b02      	ldr	r3, [sp, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	bfc8      	it	gt
 80087c4:	461d      	movgt	r5, r3
 80087c6:	9b01      	ldr	r3, [sp, #4]
 80087c8:	bfd8      	it	le
 80087ca:	2501      	movle	r5, #1
 80087cc:	441d      	add	r5, r3
 80087ce:	f04f 0800 	mov.w	r8, #0
 80087d2:	ee18 1a10 	vmov	r1, s16
 80087d6:	2201      	movs	r2, #1
 80087d8:	4620      	mov	r0, r4
 80087da:	f000 fe3d 	bl	8009458 <__lshift>
 80087de:	4631      	mov	r1, r6
 80087e0:	ee08 0a10 	vmov	s16, r0
 80087e4:	f000 fea8 	bl	8009538 <__mcmp>
 80087e8:	2800      	cmp	r0, #0
 80087ea:	dc91      	bgt.n	8008710 <_dtoa_r+0xaa8>
 80087ec:	d102      	bne.n	80087f4 <_dtoa_r+0xb8c>
 80087ee:	f01a 0f01 	tst.w	sl, #1
 80087f2:	d18d      	bne.n	8008710 <_dtoa_r+0xaa8>
 80087f4:	462b      	mov	r3, r5
 80087f6:	461d      	mov	r5, r3
 80087f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087fc:	2a30      	cmp	r2, #48	; 0x30
 80087fe:	d0fa      	beq.n	80087f6 <_dtoa_r+0xb8e>
 8008800:	e6d7      	b.n	80085b2 <_dtoa_r+0x94a>
 8008802:	9a01      	ldr	r2, [sp, #4]
 8008804:	429a      	cmp	r2, r3
 8008806:	d184      	bne.n	8008712 <_dtoa_r+0xaaa>
 8008808:	9b00      	ldr	r3, [sp, #0]
 800880a:	3301      	adds	r3, #1
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	2331      	movs	r3, #49	; 0x31
 8008810:	7013      	strb	r3, [r2, #0]
 8008812:	e6ce      	b.n	80085b2 <_dtoa_r+0x94a>
 8008814:	4b09      	ldr	r3, [pc, #36]	; (800883c <_dtoa_r+0xbd4>)
 8008816:	f7ff ba95 	b.w	8007d44 <_dtoa_r+0xdc>
 800881a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800881c:	2b00      	cmp	r3, #0
 800881e:	f47f aa6e 	bne.w	8007cfe <_dtoa_r+0x96>
 8008822:	4b07      	ldr	r3, [pc, #28]	; (8008840 <_dtoa_r+0xbd8>)
 8008824:	f7ff ba8e 	b.w	8007d44 <_dtoa_r+0xdc>
 8008828:	9b02      	ldr	r3, [sp, #8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	dcae      	bgt.n	800878c <_dtoa_r+0xb24>
 800882e:	9b06      	ldr	r3, [sp, #24]
 8008830:	2b02      	cmp	r3, #2
 8008832:	f73f aea8 	bgt.w	8008586 <_dtoa_r+0x91e>
 8008836:	e7a9      	b.n	800878c <_dtoa_r+0xb24>
 8008838:	0800ad68 	.word	0x0800ad68
 800883c:	0800abd8 	.word	0x0800abd8
 8008840:	0800ad00 	.word	0x0800ad00

08008844 <fiprintf>:
 8008844:	b40e      	push	{r1, r2, r3}
 8008846:	b503      	push	{r0, r1, lr}
 8008848:	4601      	mov	r1, r0
 800884a:	ab03      	add	r3, sp, #12
 800884c:	4805      	ldr	r0, [pc, #20]	; (8008864 <fiprintf+0x20>)
 800884e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008852:	6800      	ldr	r0, [r0, #0]
 8008854:	9301      	str	r3, [sp, #4]
 8008856:	f001 fae1 	bl	8009e1c <_vfiprintf_r>
 800885a:	b002      	add	sp, #8
 800885c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008860:	b003      	add	sp, #12
 8008862:	4770      	bx	lr
 8008864:	20000060 	.word	0x20000060

08008868 <rshift>:
 8008868:	6903      	ldr	r3, [r0, #16]
 800886a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800886e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008872:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008876:	f100 0414 	add.w	r4, r0, #20
 800887a:	dd45      	ble.n	8008908 <rshift+0xa0>
 800887c:	f011 011f 	ands.w	r1, r1, #31
 8008880:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008884:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008888:	d10c      	bne.n	80088a4 <rshift+0x3c>
 800888a:	f100 0710 	add.w	r7, r0, #16
 800888e:	4629      	mov	r1, r5
 8008890:	42b1      	cmp	r1, r6
 8008892:	d334      	bcc.n	80088fe <rshift+0x96>
 8008894:	1a9b      	subs	r3, r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	1eea      	subs	r2, r5, #3
 800889a:	4296      	cmp	r6, r2
 800889c:	bf38      	it	cc
 800889e:	2300      	movcc	r3, #0
 80088a0:	4423      	add	r3, r4
 80088a2:	e015      	b.n	80088d0 <rshift+0x68>
 80088a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80088a8:	f1c1 0820 	rsb	r8, r1, #32
 80088ac:	40cf      	lsrs	r7, r1
 80088ae:	f105 0e04 	add.w	lr, r5, #4
 80088b2:	46a1      	mov	r9, r4
 80088b4:	4576      	cmp	r6, lr
 80088b6:	46f4      	mov	ip, lr
 80088b8:	d815      	bhi.n	80088e6 <rshift+0x7e>
 80088ba:	1a9a      	subs	r2, r3, r2
 80088bc:	0092      	lsls	r2, r2, #2
 80088be:	3a04      	subs	r2, #4
 80088c0:	3501      	adds	r5, #1
 80088c2:	42ae      	cmp	r6, r5
 80088c4:	bf38      	it	cc
 80088c6:	2200      	movcc	r2, #0
 80088c8:	18a3      	adds	r3, r4, r2
 80088ca:	50a7      	str	r7, [r4, r2]
 80088cc:	b107      	cbz	r7, 80088d0 <rshift+0x68>
 80088ce:	3304      	adds	r3, #4
 80088d0:	1b1a      	subs	r2, r3, r4
 80088d2:	42a3      	cmp	r3, r4
 80088d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80088d8:	bf08      	it	eq
 80088da:	2300      	moveq	r3, #0
 80088dc:	6102      	str	r2, [r0, #16]
 80088de:	bf08      	it	eq
 80088e0:	6143      	streq	r3, [r0, #20]
 80088e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088e6:	f8dc c000 	ldr.w	ip, [ip]
 80088ea:	fa0c fc08 	lsl.w	ip, ip, r8
 80088ee:	ea4c 0707 	orr.w	r7, ip, r7
 80088f2:	f849 7b04 	str.w	r7, [r9], #4
 80088f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80088fa:	40cf      	lsrs	r7, r1
 80088fc:	e7da      	b.n	80088b4 <rshift+0x4c>
 80088fe:	f851 cb04 	ldr.w	ip, [r1], #4
 8008902:	f847 cf04 	str.w	ip, [r7, #4]!
 8008906:	e7c3      	b.n	8008890 <rshift+0x28>
 8008908:	4623      	mov	r3, r4
 800890a:	e7e1      	b.n	80088d0 <rshift+0x68>

0800890c <__hexdig_fun>:
 800890c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008910:	2b09      	cmp	r3, #9
 8008912:	d802      	bhi.n	800891a <__hexdig_fun+0xe>
 8008914:	3820      	subs	r0, #32
 8008916:	b2c0      	uxtb	r0, r0
 8008918:	4770      	bx	lr
 800891a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800891e:	2b05      	cmp	r3, #5
 8008920:	d801      	bhi.n	8008926 <__hexdig_fun+0x1a>
 8008922:	3847      	subs	r0, #71	; 0x47
 8008924:	e7f7      	b.n	8008916 <__hexdig_fun+0xa>
 8008926:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800892a:	2b05      	cmp	r3, #5
 800892c:	d801      	bhi.n	8008932 <__hexdig_fun+0x26>
 800892e:	3827      	subs	r0, #39	; 0x27
 8008930:	e7f1      	b.n	8008916 <__hexdig_fun+0xa>
 8008932:	2000      	movs	r0, #0
 8008934:	4770      	bx	lr
	...

08008938 <__gethex>:
 8008938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893c:	ed2d 8b02 	vpush	{d8}
 8008940:	b089      	sub	sp, #36	; 0x24
 8008942:	ee08 0a10 	vmov	s16, r0
 8008946:	9304      	str	r3, [sp, #16]
 8008948:	4bb4      	ldr	r3, [pc, #720]	; (8008c1c <__gethex+0x2e4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	9301      	str	r3, [sp, #4]
 800894e:	4618      	mov	r0, r3
 8008950:	468b      	mov	fp, r1
 8008952:	4690      	mov	r8, r2
 8008954:	f7f7 fc66 	bl	8000224 <strlen>
 8008958:	9b01      	ldr	r3, [sp, #4]
 800895a:	f8db 2000 	ldr.w	r2, [fp]
 800895e:	4403      	add	r3, r0
 8008960:	4682      	mov	sl, r0
 8008962:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008966:	9305      	str	r3, [sp, #20]
 8008968:	1c93      	adds	r3, r2, #2
 800896a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800896e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008972:	32fe      	adds	r2, #254	; 0xfe
 8008974:	18d1      	adds	r1, r2, r3
 8008976:	461f      	mov	r7, r3
 8008978:	f813 0b01 	ldrb.w	r0, [r3], #1
 800897c:	9100      	str	r1, [sp, #0]
 800897e:	2830      	cmp	r0, #48	; 0x30
 8008980:	d0f8      	beq.n	8008974 <__gethex+0x3c>
 8008982:	f7ff ffc3 	bl	800890c <__hexdig_fun>
 8008986:	4604      	mov	r4, r0
 8008988:	2800      	cmp	r0, #0
 800898a:	d13a      	bne.n	8008a02 <__gethex+0xca>
 800898c:	9901      	ldr	r1, [sp, #4]
 800898e:	4652      	mov	r2, sl
 8008990:	4638      	mov	r0, r7
 8008992:	f001 fb8d 	bl	800a0b0 <strncmp>
 8008996:	4605      	mov	r5, r0
 8008998:	2800      	cmp	r0, #0
 800899a:	d168      	bne.n	8008a6e <__gethex+0x136>
 800899c:	f817 000a 	ldrb.w	r0, [r7, sl]
 80089a0:	eb07 060a 	add.w	r6, r7, sl
 80089a4:	f7ff ffb2 	bl	800890c <__hexdig_fun>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d062      	beq.n	8008a72 <__gethex+0x13a>
 80089ac:	4633      	mov	r3, r6
 80089ae:	7818      	ldrb	r0, [r3, #0]
 80089b0:	2830      	cmp	r0, #48	; 0x30
 80089b2:	461f      	mov	r7, r3
 80089b4:	f103 0301 	add.w	r3, r3, #1
 80089b8:	d0f9      	beq.n	80089ae <__gethex+0x76>
 80089ba:	f7ff ffa7 	bl	800890c <__hexdig_fun>
 80089be:	2301      	movs	r3, #1
 80089c0:	fab0 f480 	clz	r4, r0
 80089c4:	0964      	lsrs	r4, r4, #5
 80089c6:	4635      	mov	r5, r6
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	463a      	mov	r2, r7
 80089cc:	4616      	mov	r6, r2
 80089ce:	3201      	adds	r2, #1
 80089d0:	7830      	ldrb	r0, [r6, #0]
 80089d2:	f7ff ff9b 	bl	800890c <__hexdig_fun>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d1f8      	bne.n	80089cc <__gethex+0x94>
 80089da:	9901      	ldr	r1, [sp, #4]
 80089dc:	4652      	mov	r2, sl
 80089de:	4630      	mov	r0, r6
 80089e0:	f001 fb66 	bl	800a0b0 <strncmp>
 80089e4:	b980      	cbnz	r0, 8008a08 <__gethex+0xd0>
 80089e6:	b94d      	cbnz	r5, 80089fc <__gethex+0xc4>
 80089e8:	eb06 050a 	add.w	r5, r6, sl
 80089ec:	462a      	mov	r2, r5
 80089ee:	4616      	mov	r6, r2
 80089f0:	3201      	adds	r2, #1
 80089f2:	7830      	ldrb	r0, [r6, #0]
 80089f4:	f7ff ff8a 	bl	800890c <__hexdig_fun>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d1f8      	bne.n	80089ee <__gethex+0xb6>
 80089fc:	1bad      	subs	r5, r5, r6
 80089fe:	00ad      	lsls	r5, r5, #2
 8008a00:	e004      	b.n	8008a0c <__gethex+0xd4>
 8008a02:	2400      	movs	r4, #0
 8008a04:	4625      	mov	r5, r4
 8008a06:	e7e0      	b.n	80089ca <__gethex+0x92>
 8008a08:	2d00      	cmp	r5, #0
 8008a0a:	d1f7      	bne.n	80089fc <__gethex+0xc4>
 8008a0c:	7833      	ldrb	r3, [r6, #0]
 8008a0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a12:	2b50      	cmp	r3, #80	; 0x50
 8008a14:	d13b      	bne.n	8008a8e <__gethex+0x156>
 8008a16:	7873      	ldrb	r3, [r6, #1]
 8008a18:	2b2b      	cmp	r3, #43	; 0x2b
 8008a1a:	d02c      	beq.n	8008a76 <__gethex+0x13e>
 8008a1c:	2b2d      	cmp	r3, #45	; 0x2d
 8008a1e:	d02e      	beq.n	8008a7e <__gethex+0x146>
 8008a20:	1c71      	adds	r1, r6, #1
 8008a22:	f04f 0900 	mov.w	r9, #0
 8008a26:	7808      	ldrb	r0, [r1, #0]
 8008a28:	f7ff ff70 	bl	800890c <__hexdig_fun>
 8008a2c:	1e43      	subs	r3, r0, #1
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	2b18      	cmp	r3, #24
 8008a32:	d82c      	bhi.n	8008a8e <__gethex+0x156>
 8008a34:	f1a0 0210 	sub.w	r2, r0, #16
 8008a38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a3c:	f7ff ff66 	bl	800890c <__hexdig_fun>
 8008a40:	1e43      	subs	r3, r0, #1
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b18      	cmp	r3, #24
 8008a46:	d91d      	bls.n	8008a84 <__gethex+0x14c>
 8008a48:	f1b9 0f00 	cmp.w	r9, #0
 8008a4c:	d000      	beq.n	8008a50 <__gethex+0x118>
 8008a4e:	4252      	negs	r2, r2
 8008a50:	4415      	add	r5, r2
 8008a52:	f8cb 1000 	str.w	r1, [fp]
 8008a56:	b1e4      	cbz	r4, 8008a92 <__gethex+0x15a>
 8008a58:	9b00      	ldr	r3, [sp, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	bf14      	ite	ne
 8008a5e:	2700      	movne	r7, #0
 8008a60:	2706      	moveq	r7, #6
 8008a62:	4638      	mov	r0, r7
 8008a64:	b009      	add	sp, #36	; 0x24
 8008a66:	ecbd 8b02 	vpop	{d8}
 8008a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6e:	463e      	mov	r6, r7
 8008a70:	4625      	mov	r5, r4
 8008a72:	2401      	movs	r4, #1
 8008a74:	e7ca      	b.n	8008a0c <__gethex+0xd4>
 8008a76:	f04f 0900 	mov.w	r9, #0
 8008a7a:	1cb1      	adds	r1, r6, #2
 8008a7c:	e7d3      	b.n	8008a26 <__gethex+0xee>
 8008a7e:	f04f 0901 	mov.w	r9, #1
 8008a82:	e7fa      	b.n	8008a7a <__gethex+0x142>
 8008a84:	230a      	movs	r3, #10
 8008a86:	fb03 0202 	mla	r2, r3, r2, r0
 8008a8a:	3a10      	subs	r2, #16
 8008a8c:	e7d4      	b.n	8008a38 <__gethex+0x100>
 8008a8e:	4631      	mov	r1, r6
 8008a90:	e7df      	b.n	8008a52 <__gethex+0x11a>
 8008a92:	1bf3      	subs	r3, r6, r7
 8008a94:	3b01      	subs	r3, #1
 8008a96:	4621      	mov	r1, r4
 8008a98:	2b07      	cmp	r3, #7
 8008a9a:	dc0b      	bgt.n	8008ab4 <__gethex+0x17c>
 8008a9c:	ee18 0a10 	vmov	r0, s16
 8008aa0:	f000 fa7e 	bl	8008fa0 <_Balloc>
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	b940      	cbnz	r0, 8008aba <__gethex+0x182>
 8008aa8:	4b5d      	ldr	r3, [pc, #372]	; (8008c20 <__gethex+0x2e8>)
 8008aaa:	4602      	mov	r2, r0
 8008aac:	21de      	movs	r1, #222	; 0xde
 8008aae:	485d      	ldr	r0, [pc, #372]	; (8008c24 <__gethex+0x2ec>)
 8008ab0:	f7ff f830 	bl	8007b14 <__assert_func>
 8008ab4:	3101      	adds	r1, #1
 8008ab6:	105b      	asrs	r3, r3, #1
 8008ab8:	e7ee      	b.n	8008a98 <__gethex+0x160>
 8008aba:	f100 0914 	add.w	r9, r0, #20
 8008abe:	f04f 0b00 	mov.w	fp, #0
 8008ac2:	f1ca 0301 	rsb	r3, sl, #1
 8008ac6:	f8cd 9008 	str.w	r9, [sp, #8]
 8008aca:	f8cd b000 	str.w	fp, [sp]
 8008ace:	9306      	str	r3, [sp, #24]
 8008ad0:	42b7      	cmp	r7, r6
 8008ad2:	d340      	bcc.n	8008b56 <__gethex+0x21e>
 8008ad4:	9802      	ldr	r0, [sp, #8]
 8008ad6:	9b00      	ldr	r3, [sp, #0]
 8008ad8:	f840 3b04 	str.w	r3, [r0], #4
 8008adc:	eba0 0009 	sub.w	r0, r0, r9
 8008ae0:	1080      	asrs	r0, r0, #2
 8008ae2:	0146      	lsls	r6, r0, #5
 8008ae4:	6120      	str	r0, [r4, #16]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 fb4c 	bl	8009184 <__hi0bits>
 8008aec:	1a30      	subs	r0, r6, r0
 8008aee:	f8d8 6000 	ldr.w	r6, [r8]
 8008af2:	42b0      	cmp	r0, r6
 8008af4:	dd63      	ble.n	8008bbe <__gethex+0x286>
 8008af6:	1b87      	subs	r7, r0, r6
 8008af8:	4639      	mov	r1, r7
 8008afa:	4620      	mov	r0, r4
 8008afc:	f000 fef0 	bl	80098e0 <__any_on>
 8008b00:	4682      	mov	sl, r0
 8008b02:	b1a8      	cbz	r0, 8008b30 <__gethex+0x1f8>
 8008b04:	1e7b      	subs	r3, r7, #1
 8008b06:	1159      	asrs	r1, r3, #5
 8008b08:	f003 021f 	and.w	r2, r3, #31
 8008b0c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008b10:	f04f 0a01 	mov.w	sl, #1
 8008b14:	fa0a f202 	lsl.w	r2, sl, r2
 8008b18:	420a      	tst	r2, r1
 8008b1a:	d009      	beq.n	8008b30 <__gethex+0x1f8>
 8008b1c:	4553      	cmp	r3, sl
 8008b1e:	dd05      	ble.n	8008b2c <__gethex+0x1f4>
 8008b20:	1eb9      	subs	r1, r7, #2
 8008b22:	4620      	mov	r0, r4
 8008b24:	f000 fedc 	bl	80098e0 <__any_on>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d145      	bne.n	8008bb8 <__gethex+0x280>
 8008b2c:	f04f 0a02 	mov.w	sl, #2
 8008b30:	4639      	mov	r1, r7
 8008b32:	4620      	mov	r0, r4
 8008b34:	f7ff fe98 	bl	8008868 <rshift>
 8008b38:	443d      	add	r5, r7
 8008b3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b3e:	42ab      	cmp	r3, r5
 8008b40:	da4c      	bge.n	8008bdc <__gethex+0x2a4>
 8008b42:	ee18 0a10 	vmov	r0, s16
 8008b46:	4621      	mov	r1, r4
 8008b48:	f000 fa6a 	bl	8009020 <_Bfree>
 8008b4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b4e:	2300      	movs	r3, #0
 8008b50:	6013      	str	r3, [r2, #0]
 8008b52:	27a3      	movs	r7, #163	; 0xa3
 8008b54:	e785      	b.n	8008a62 <__gethex+0x12a>
 8008b56:	1e73      	subs	r3, r6, #1
 8008b58:	9a05      	ldr	r2, [sp, #20]
 8008b5a:	9303      	str	r3, [sp, #12]
 8008b5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d019      	beq.n	8008b98 <__gethex+0x260>
 8008b64:	f1bb 0f20 	cmp.w	fp, #32
 8008b68:	d107      	bne.n	8008b7a <__gethex+0x242>
 8008b6a:	9b02      	ldr	r3, [sp, #8]
 8008b6c:	9a00      	ldr	r2, [sp, #0]
 8008b6e:	f843 2b04 	str.w	r2, [r3], #4
 8008b72:	9302      	str	r3, [sp, #8]
 8008b74:	2300      	movs	r3, #0
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	469b      	mov	fp, r3
 8008b7a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008b7e:	f7ff fec5 	bl	800890c <__hexdig_fun>
 8008b82:	9b00      	ldr	r3, [sp, #0]
 8008b84:	f000 000f 	and.w	r0, r0, #15
 8008b88:	fa00 f00b 	lsl.w	r0, r0, fp
 8008b8c:	4303      	orrs	r3, r0
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	f10b 0b04 	add.w	fp, fp, #4
 8008b94:	9b03      	ldr	r3, [sp, #12]
 8008b96:	e00d      	b.n	8008bb4 <__gethex+0x27c>
 8008b98:	9b03      	ldr	r3, [sp, #12]
 8008b9a:	9a06      	ldr	r2, [sp, #24]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	42bb      	cmp	r3, r7
 8008ba0:	d3e0      	bcc.n	8008b64 <__gethex+0x22c>
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	9901      	ldr	r1, [sp, #4]
 8008ba6:	9307      	str	r3, [sp, #28]
 8008ba8:	4652      	mov	r2, sl
 8008baa:	f001 fa81 	bl	800a0b0 <strncmp>
 8008bae:	9b07      	ldr	r3, [sp, #28]
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d1d7      	bne.n	8008b64 <__gethex+0x22c>
 8008bb4:	461e      	mov	r6, r3
 8008bb6:	e78b      	b.n	8008ad0 <__gethex+0x198>
 8008bb8:	f04f 0a03 	mov.w	sl, #3
 8008bbc:	e7b8      	b.n	8008b30 <__gethex+0x1f8>
 8008bbe:	da0a      	bge.n	8008bd6 <__gethex+0x29e>
 8008bc0:	1a37      	subs	r7, r6, r0
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	ee18 0a10 	vmov	r0, s16
 8008bc8:	463a      	mov	r2, r7
 8008bca:	f000 fc45 	bl	8009458 <__lshift>
 8008bce:	1bed      	subs	r5, r5, r7
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	f100 0914 	add.w	r9, r0, #20
 8008bd6:	f04f 0a00 	mov.w	sl, #0
 8008bda:	e7ae      	b.n	8008b3a <__gethex+0x202>
 8008bdc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008be0:	42a8      	cmp	r0, r5
 8008be2:	dd72      	ble.n	8008cca <__gethex+0x392>
 8008be4:	1b45      	subs	r5, r0, r5
 8008be6:	42ae      	cmp	r6, r5
 8008be8:	dc36      	bgt.n	8008c58 <__gethex+0x320>
 8008bea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d02a      	beq.n	8008c48 <__gethex+0x310>
 8008bf2:	2b03      	cmp	r3, #3
 8008bf4:	d02c      	beq.n	8008c50 <__gethex+0x318>
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d11c      	bne.n	8008c34 <__gethex+0x2fc>
 8008bfa:	42ae      	cmp	r6, r5
 8008bfc:	d11a      	bne.n	8008c34 <__gethex+0x2fc>
 8008bfe:	2e01      	cmp	r6, #1
 8008c00:	d112      	bne.n	8008c28 <__gethex+0x2f0>
 8008c02:	9a04      	ldr	r2, [sp, #16]
 8008c04:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c08:	6013      	str	r3, [r2, #0]
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	6123      	str	r3, [r4, #16]
 8008c0e:	f8c9 3000 	str.w	r3, [r9]
 8008c12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c14:	2762      	movs	r7, #98	; 0x62
 8008c16:	601c      	str	r4, [r3, #0]
 8008c18:	e723      	b.n	8008a62 <__gethex+0x12a>
 8008c1a:	bf00      	nop
 8008c1c:	0800ade0 	.word	0x0800ade0
 8008c20:	0800ad68 	.word	0x0800ad68
 8008c24:	0800ad79 	.word	0x0800ad79
 8008c28:	1e71      	subs	r1, r6, #1
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f000 fe58 	bl	80098e0 <__any_on>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d1e6      	bne.n	8008c02 <__gethex+0x2ca>
 8008c34:	ee18 0a10 	vmov	r0, s16
 8008c38:	4621      	mov	r1, r4
 8008c3a:	f000 f9f1 	bl	8009020 <_Bfree>
 8008c3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c40:	2300      	movs	r3, #0
 8008c42:	6013      	str	r3, [r2, #0]
 8008c44:	2750      	movs	r7, #80	; 0x50
 8008c46:	e70c      	b.n	8008a62 <__gethex+0x12a>
 8008c48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1f2      	bne.n	8008c34 <__gethex+0x2fc>
 8008c4e:	e7d8      	b.n	8008c02 <__gethex+0x2ca>
 8008c50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1d5      	bne.n	8008c02 <__gethex+0x2ca>
 8008c56:	e7ed      	b.n	8008c34 <__gethex+0x2fc>
 8008c58:	1e6f      	subs	r7, r5, #1
 8008c5a:	f1ba 0f00 	cmp.w	sl, #0
 8008c5e:	d131      	bne.n	8008cc4 <__gethex+0x38c>
 8008c60:	b127      	cbz	r7, 8008c6c <__gethex+0x334>
 8008c62:	4639      	mov	r1, r7
 8008c64:	4620      	mov	r0, r4
 8008c66:	f000 fe3b 	bl	80098e0 <__any_on>
 8008c6a:	4682      	mov	sl, r0
 8008c6c:	117b      	asrs	r3, r7, #5
 8008c6e:	2101      	movs	r1, #1
 8008c70:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008c74:	f007 071f 	and.w	r7, r7, #31
 8008c78:	fa01 f707 	lsl.w	r7, r1, r7
 8008c7c:	421f      	tst	r7, r3
 8008c7e:	4629      	mov	r1, r5
 8008c80:	4620      	mov	r0, r4
 8008c82:	bf18      	it	ne
 8008c84:	f04a 0a02 	orrne.w	sl, sl, #2
 8008c88:	1b76      	subs	r6, r6, r5
 8008c8a:	f7ff fded 	bl	8008868 <rshift>
 8008c8e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008c92:	2702      	movs	r7, #2
 8008c94:	f1ba 0f00 	cmp.w	sl, #0
 8008c98:	d048      	beq.n	8008d2c <__gethex+0x3f4>
 8008c9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d015      	beq.n	8008cce <__gethex+0x396>
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d017      	beq.n	8008cd6 <__gethex+0x39e>
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d109      	bne.n	8008cbe <__gethex+0x386>
 8008caa:	f01a 0f02 	tst.w	sl, #2
 8008cae:	d006      	beq.n	8008cbe <__gethex+0x386>
 8008cb0:	f8d9 0000 	ldr.w	r0, [r9]
 8008cb4:	ea4a 0a00 	orr.w	sl, sl, r0
 8008cb8:	f01a 0f01 	tst.w	sl, #1
 8008cbc:	d10e      	bne.n	8008cdc <__gethex+0x3a4>
 8008cbe:	f047 0710 	orr.w	r7, r7, #16
 8008cc2:	e033      	b.n	8008d2c <__gethex+0x3f4>
 8008cc4:	f04f 0a01 	mov.w	sl, #1
 8008cc8:	e7d0      	b.n	8008c6c <__gethex+0x334>
 8008cca:	2701      	movs	r7, #1
 8008ccc:	e7e2      	b.n	8008c94 <__gethex+0x35c>
 8008cce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cd0:	f1c3 0301 	rsb	r3, r3, #1
 8008cd4:	9315      	str	r3, [sp, #84]	; 0x54
 8008cd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d0f0      	beq.n	8008cbe <__gethex+0x386>
 8008cdc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ce0:	f104 0314 	add.w	r3, r4, #20
 8008ce4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008ce8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008cec:	f04f 0c00 	mov.w	ip, #0
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008cfa:	d01c      	beq.n	8008d36 <__gethex+0x3fe>
 8008cfc:	3201      	adds	r2, #1
 8008cfe:	6002      	str	r2, [r0, #0]
 8008d00:	2f02      	cmp	r7, #2
 8008d02:	f104 0314 	add.w	r3, r4, #20
 8008d06:	d13f      	bne.n	8008d88 <__gethex+0x450>
 8008d08:	f8d8 2000 	ldr.w	r2, [r8]
 8008d0c:	3a01      	subs	r2, #1
 8008d0e:	42b2      	cmp	r2, r6
 8008d10:	d10a      	bne.n	8008d28 <__gethex+0x3f0>
 8008d12:	1171      	asrs	r1, r6, #5
 8008d14:	2201      	movs	r2, #1
 8008d16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d1a:	f006 061f 	and.w	r6, r6, #31
 8008d1e:	fa02 f606 	lsl.w	r6, r2, r6
 8008d22:	421e      	tst	r6, r3
 8008d24:	bf18      	it	ne
 8008d26:	4617      	movne	r7, r2
 8008d28:	f047 0720 	orr.w	r7, r7, #32
 8008d2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d2e:	601c      	str	r4, [r3, #0]
 8008d30:	9b04      	ldr	r3, [sp, #16]
 8008d32:	601d      	str	r5, [r3, #0]
 8008d34:	e695      	b.n	8008a62 <__gethex+0x12a>
 8008d36:	4299      	cmp	r1, r3
 8008d38:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d3c:	d8d8      	bhi.n	8008cf0 <__gethex+0x3b8>
 8008d3e:	68a3      	ldr	r3, [r4, #8]
 8008d40:	459b      	cmp	fp, r3
 8008d42:	db19      	blt.n	8008d78 <__gethex+0x440>
 8008d44:	6861      	ldr	r1, [r4, #4]
 8008d46:	ee18 0a10 	vmov	r0, s16
 8008d4a:	3101      	adds	r1, #1
 8008d4c:	f000 f928 	bl	8008fa0 <_Balloc>
 8008d50:	4681      	mov	r9, r0
 8008d52:	b918      	cbnz	r0, 8008d5c <__gethex+0x424>
 8008d54:	4b1a      	ldr	r3, [pc, #104]	; (8008dc0 <__gethex+0x488>)
 8008d56:	4602      	mov	r2, r0
 8008d58:	2184      	movs	r1, #132	; 0x84
 8008d5a:	e6a8      	b.n	8008aae <__gethex+0x176>
 8008d5c:	6922      	ldr	r2, [r4, #16]
 8008d5e:	3202      	adds	r2, #2
 8008d60:	f104 010c 	add.w	r1, r4, #12
 8008d64:	0092      	lsls	r2, r2, #2
 8008d66:	300c      	adds	r0, #12
 8008d68:	f000 f90c 	bl	8008f84 <memcpy>
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	ee18 0a10 	vmov	r0, s16
 8008d72:	f000 f955 	bl	8009020 <_Bfree>
 8008d76:	464c      	mov	r4, r9
 8008d78:	6923      	ldr	r3, [r4, #16]
 8008d7a:	1c5a      	adds	r2, r3, #1
 8008d7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d80:	6122      	str	r2, [r4, #16]
 8008d82:	2201      	movs	r2, #1
 8008d84:	615a      	str	r2, [r3, #20]
 8008d86:	e7bb      	b.n	8008d00 <__gethex+0x3c8>
 8008d88:	6922      	ldr	r2, [r4, #16]
 8008d8a:	455a      	cmp	r2, fp
 8008d8c:	dd0b      	ble.n	8008da6 <__gethex+0x46e>
 8008d8e:	2101      	movs	r1, #1
 8008d90:	4620      	mov	r0, r4
 8008d92:	f7ff fd69 	bl	8008868 <rshift>
 8008d96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d9a:	3501      	adds	r5, #1
 8008d9c:	42ab      	cmp	r3, r5
 8008d9e:	f6ff aed0 	blt.w	8008b42 <__gethex+0x20a>
 8008da2:	2701      	movs	r7, #1
 8008da4:	e7c0      	b.n	8008d28 <__gethex+0x3f0>
 8008da6:	f016 061f 	ands.w	r6, r6, #31
 8008daa:	d0fa      	beq.n	8008da2 <__gethex+0x46a>
 8008dac:	4453      	add	r3, sl
 8008dae:	f1c6 0620 	rsb	r6, r6, #32
 8008db2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008db6:	f000 f9e5 	bl	8009184 <__hi0bits>
 8008dba:	42b0      	cmp	r0, r6
 8008dbc:	dbe7      	blt.n	8008d8e <__gethex+0x456>
 8008dbe:	e7f0      	b.n	8008da2 <__gethex+0x46a>
 8008dc0:	0800ad68 	.word	0x0800ad68

08008dc4 <L_shift>:
 8008dc4:	f1c2 0208 	rsb	r2, r2, #8
 8008dc8:	0092      	lsls	r2, r2, #2
 8008dca:	b570      	push	{r4, r5, r6, lr}
 8008dcc:	f1c2 0620 	rsb	r6, r2, #32
 8008dd0:	6843      	ldr	r3, [r0, #4]
 8008dd2:	6804      	ldr	r4, [r0, #0]
 8008dd4:	fa03 f506 	lsl.w	r5, r3, r6
 8008dd8:	432c      	orrs	r4, r5
 8008dda:	40d3      	lsrs	r3, r2
 8008ddc:	6004      	str	r4, [r0, #0]
 8008dde:	f840 3f04 	str.w	r3, [r0, #4]!
 8008de2:	4288      	cmp	r0, r1
 8008de4:	d3f4      	bcc.n	8008dd0 <L_shift+0xc>
 8008de6:	bd70      	pop	{r4, r5, r6, pc}

08008de8 <__match>:
 8008de8:	b530      	push	{r4, r5, lr}
 8008dea:	6803      	ldr	r3, [r0, #0]
 8008dec:	3301      	adds	r3, #1
 8008dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008df2:	b914      	cbnz	r4, 8008dfa <__match+0x12>
 8008df4:	6003      	str	r3, [r0, #0]
 8008df6:	2001      	movs	r0, #1
 8008df8:	bd30      	pop	{r4, r5, pc}
 8008dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dfe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008e02:	2d19      	cmp	r5, #25
 8008e04:	bf98      	it	ls
 8008e06:	3220      	addls	r2, #32
 8008e08:	42a2      	cmp	r2, r4
 8008e0a:	d0f0      	beq.n	8008dee <__match+0x6>
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	e7f3      	b.n	8008df8 <__match+0x10>

08008e10 <__hexnan>:
 8008e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e14:	680b      	ldr	r3, [r1, #0]
 8008e16:	115e      	asrs	r6, r3, #5
 8008e18:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e1c:	f013 031f 	ands.w	r3, r3, #31
 8008e20:	b087      	sub	sp, #28
 8008e22:	bf18      	it	ne
 8008e24:	3604      	addne	r6, #4
 8008e26:	2500      	movs	r5, #0
 8008e28:	1f37      	subs	r7, r6, #4
 8008e2a:	4690      	mov	r8, r2
 8008e2c:	6802      	ldr	r2, [r0, #0]
 8008e2e:	9301      	str	r3, [sp, #4]
 8008e30:	4682      	mov	sl, r0
 8008e32:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e36:	46b9      	mov	r9, r7
 8008e38:	463c      	mov	r4, r7
 8008e3a:	9502      	str	r5, [sp, #8]
 8008e3c:	46ab      	mov	fp, r5
 8008e3e:	7851      	ldrb	r1, [r2, #1]
 8008e40:	1c53      	adds	r3, r2, #1
 8008e42:	9303      	str	r3, [sp, #12]
 8008e44:	b341      	cbz	r1, 8008e98 <__hexnan+0x88>
 8008e46:	4608      	mov	r0, r1
 8008e48:	9205      	str	r2, [sp, #20]
 8008e4a:	9104      	str	r1, [sp, #16]
 8008e4c:	f7ff fd5e 	bl	800890c <__hexdig_fun>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d14f      	bne.n	8008ef4 <__hexnan+0xe4>
 8008e54:	9904      	ldr	r1, [sp, #16]
 8008e56:	9a05      	ldr	r2, [sp, #20]
 8008e58:	2920      	cmp	r1, #32
 8008e5a:	d818      	bhi.n	8008e8e <__hexnan+0x7e>
 8008e5c:	9b02      	ldr	r3, [sp, #8]
 8008e5e:	459b      	cmp	fp, r3
 8008e60:	dd13      	ble.n	8008e8a <__hexnan+0x7a>
 8008e62:	454c      	cmp	r4, r9
 8008e64:	d206      	bcs.n	8008e74 <__hexnan+0x64>
 8008e66:	2d07      	cmp	r5, #7
 8008e68:	dc04      	bgt.n	8008e74 <__hexnan+0x64>
 8008e6a:	462a      	mov	r2, r5
 8008e6c:	4649      	mov	r1, r9
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f7ff ffa8 	bl	8008dc4 <L_shift>
 8008e74:	4544      	cmp	r4, r8
 8008e76:	d950      	bls.n	8008f1a <__hexnan+0x10a>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f1a4 0904 	sub.w	r9, r4, #4
 8008e7e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e82:	f8cd b008 	str.w	fp, [sp, #8]
 8008e86:	464c      	mov	r4, r9
 8008e88:	461d      	mov	r5, r3
 8008e8a:	9a03      	ldr	r2, [sp, #12]
 8008e8c:	e7d7      	b.n	8008e3e <__hexnan+0x2e>
 8008e8e:	2929      	cmp	r1, #41	; 0x29
 8008e90:	d156      	bne.n	8008f40 <__hexnan+0x130>
 8008e92:	3202      	adds	r2, #2
 8008e94:	f8ca 2000 	str.w	r2, [sl]
 8008e98:	f1bb 0f00 	cmp.w	fp, #0
 8008e9c:	d050      	beq.n	8008f40 <__hexnan+0x130>
 8008e9e:	454c      	cmp	r4, r9
 8008ea0:	d206      	bcs.n	8008eb0 <__hexnan+0xa0>
 8008ea2:	2d07      	cmp	r5, #7
 8008ea4:	dc04      	bgt.n	8008eb0 <__hexnan+0xa0>
 8008ea6:	462a      	mov	r2, r5
 8008ea8:	4649      	mov	r1, r9
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f7ff ff8a 	bl	8008dc4 <L_shift>
 8008eb0:	4544      	cmp	r4, r8
 8008eb2:	d934      	bls.n	8008f1e <__hexnan+0x10e>
 8008eb4:	f1a8 0204 	sub.w	r2, r8, #4
 8008eb8:	4623      	mov	r3, r4
 8008eba:	f853 1b04 	ldr.w	r1, [r3], #4
 8008ebe:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ec2:	429f      	cmp	r7, r3
 8008ec4:	d2f9      	bcs.n	8008eba <__hexnan+0xaa>
 8008ec6:	1b3b      	subs	r3, r7, r4
 8008ec8:	f023 0303 	bic.w	r3, r3, #3
 8008ecc:	3304      	adds	r3, #4
 8008ece:	3401      	adds	r4, #1
 8008ed0:	3e03      	subs	r6, #3
 8008ed2:	42b4      	cmp	r4, r6
 8008ed4:	bf88      	it	hi
 8008ed6:	2304      	movhi	r3, #4
 8008ed8:	4443      	add	r3, r8
 8008eda:	2200      	movs	r2, #0
 8008edc:	f843 2b04 	str.w	r2, [r3], #4
 8008ee0:	429f      	cmp	r7, r3
 8008ee2:	d2fb      	bcs.n	8008edc <__hexnan+0xcc>
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	b91b      	cbnz	r3, 8008ef0 <__hexnan+0xe0>
 8008ee8:	4547      	cmp	r7, r8
 8008eea:	d127      	bne.n	8008f3c <__hexnan+0x12c>
 8008eec:	2301      	movs	r3, #1
 8008eee:	603b      	str	r3, [r7, #0]
 8008ef0:	2005      	movs	r0, #5
 8008ef2:	e026      	b.n	8008f42 <__hexnan+0x132>
 8008ef4:	3501      	adds	r5, #1
 8008ef6:	2d08      	cmp	r5, #8
 8008ef8:	f10b 0b01 	add.w	fp, fp, #1
 8008efc:	dd06      	ble.n	8008f0c <__hexnan+0xfc>
 8008efe:	4544      	cmp	r4, r8
 8008f00:	d9c3      	bls.n	8008e8a <__hexnan+0x7a>
 8008f02:	2300      	movs	r3, #0
 8008f04:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f08:	2501      	movs	r5, #1
 8008f0a:	3c04      	subs	r4, #4
 8008f0c:	6822      	ldr	r2, [r4, #0]
 8008f0e:	f000 000f 	and.w	r0, r0, #15
 8008f12:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008f16:	6022      	str	r2, [r4, #0]
 8008f18:	e7b7      	b.n	8008e8a <__hexnan+0x7a>
 8008f1a:	2508      	movs	r5, #8
 8008f1c:	e7b5      	b.n	8008e8a <__hexnan+0x7a>
 8008f1e:	9b01      	ldr	r3, [sp, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d0df      	beq.n	8008ee4 <__hexnan+0xd4>
 8008f24:	f04f 32ff 	mov.w	r2, #4294967295
 8008f28:	f1c3 0320 	rsb	r3, r3, #32
 8008f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f34:	401a      	ands	r2, r3
 8008f36:	f846 2c04 	str.w	r2, [r6, #-4]
 8008f3a:	e7d3      	b.n	8008ee4 <__hexnan+0xd4>
 8008f3c:	3f04      	subs	r7, #4
 8008f3e:	e7d1      	b.n	8008ee4 <__hexnan+0xd4>
 8008f40:	2004      	movs	r0, #4
 8008f42:	b007      	add	sp, #28
 8008f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f48 <_localeconv_r>:
 8008f48:	4800      	ldr	r0, [pc, #0]	; (8008f4c <_localeconv_r+0x4>)
 8008f4a:	4770      	bx	lr
 8008f4c:	200001b8 	.word	0x200001b8

08008f50 <malloc>:
 8008f50:	4b02      	ldr	r3, [pc, #8]	; (8008f5c <malloc+0xc>)
 8008f52:	4601      	mov	r1, r0
 8008f54:	6818      	ldr	r0, [r3, #0]
 8008f56:	f000 bd67 	b.w	8009a28 <_malloc_r>
 8008f5a:	bf00      	nop
 8008f5c:	20000060 	.word	0x20000060

08008f60 <__ascii_mbtowc>:
 8008f60:	b082      	sub	sp, #8
 8008f62:	b901      	cbnz	r1, 8008f66 <__ascii_mbtowc+0x6>
 8008f64:	a901      	add	r1, sp, #4
 8008f66:	b142      	cbz	r2, 8008f7a <__ascii_mbtowc+0x1a>
 8008f68:	b14b      	cbz	r3, 8008f7e <__ascii_mbtowc+0x1e>
 8008f6a:	7813      	ldrb	r3, [r2, #0]
 8008f6c:	600b      	str	r3, [r1, #0]
 8008f6e:	7812      	ldrb	r2, [r2, #0]
 8008f70:	1e10      	subs	r0, r2, #0
 8008f72:	bf18      	it	ne
 8008f74:	2001      	movne	r0, #1
 8008f76:	b002      	add	sp, #8
 8008f78:	4770      	bx	lr
 8008f7a:	4610      	mov	r0, r2
 8008f7c:	e7fb      	b.n	8008f76 <__ascii_mbtowc+0x16>
 8008f7e:	f06f 0001 	mvn.w	r0, #1
 8008f82:	e7f8      	b.n	8008f76 <__ascii_mbtowc+0x16>

08008f84 <memcpy>:
 8008f84:	440a      	add	r2, r1
 8008f86:	4291      	cmp	r1, r2
 8008f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f8c:	d100      	bne.n	8008f90 <memcpy+0xc>
 8008f8e:	4770      	bx	lr
 8008f90:	b510      	push	{r4, lr}
 8008f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f9a:	4291      	cmp	r1, r2
 8008f9c:	d1f9      	bne.n	8008f92 <memcpy+0xe>
 8008f9e:	bd10      	pop	{r4, pc}

08008fa0 <_Balloc>:
 8008fa0:	b570      	push	{r4, r5, r6, lr}
 8008fa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	460d      	mov	r5, r1
 8008fa8:	b976      	cbnz	r6, 8008fc8 <_Balloc+0x28>
 8008faa:	2010      	movs	r0, #16
 8008fac:	f7ff ffd0 	bl	8008f50 <malloc>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	6260      	str	r0, [r4, #36]	; 0x24
 8008fb4:	b920      	cbnz	r0, 8008fc0 <_Balloc+0x20>
 8008fb6:	4b18      	ldr	r3, [pc, #96]	; (8009018 <_Balloc+0x78>)
 8008fb8:	4818      	ldr	r0, [pc, #96]	; (800901c <_Balloc+0x7c>)
 8008fba:	2166      	movs	r1, #102	; 0x66
 8008fbc:	f7fe fdaa 	bl	8007b14 <__assert_func>
 8008fc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fc4:	6006      	str	r6, [r0, #0]
 8008fc6:	60c6      	str	r6, [r0, #12]
 8008fc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008fca:	68f3      	ldr	r3, [r6, #12]
 8008fcc:	b183      	cbz	r3, 8008ff0 <_Balloc+0x50>
 8008fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fd6:	b9b8      	cbnz	r0, 8009008 <_Balloc+0x68>
 8008fd8:	2101      	movs	r1, #1
 8008fda:	fa01 f605 	lsl.w	r6, r1, r5
 8008fde:	1d72      	adds	r2, r6, #5
 8008fe0:	0092      	lsls	r2, r2, #2
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f000 fc9d 	bl	8009922 <_calloc_r>
 8008fe8:	b160      	cbz	r0, 8009004 <_Balloc+0x64>
 8008fea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008fee:	e00e      	b.n	800900e <_Balloc+0x6e>
 8008ff0:	2221      	movs	r2, #33	; 0x21
 8008ff2:	2104      	movs	r1, #4
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f000 fc94 	bl	8009922 <_calloc_r>
 8008ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ffc:	60f0      	str	r0, [r6, #12]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1e4      	bne.n	8008fce <_Balloc+0x2e>
 8009004:	2000      	movs	r0, #0
 8009006:	bd70      	pop	{r4, r5, r6, pc}
 8009008:	6802      	ldr	r2, [r0, #0]
 800900a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800900e:	2300      	movs	r3, #0
 8009010:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009014:	e7f7      	b.n	8009006 <_Balloc+0x66>
 8009016:	bf00      	nop
 8009018:	0800ac50 	.word	0x0800ac50
 800901c:	0800adf4 	.word	0x0800adf4

08009020 <_Bfree>:
 8009020:	b570      	push	{r4, r5, r6, lr}
 8009022:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009024:	4605      	mov	r5, r0
 8009026:	460c      	mov	r4, r1
 8009028:	b976      	cbnz	r6, 8009048 <_Bfree+0x28>
 800902a:	2010      	movs	r0, #16
 800902c:	f7ff ff90 	bl	8008f50 <malloc>
 8009030:	4602      	mov	r2, r0
 8009032:	6268      	str	r0, [r5, #36]	; 0x24
 8009034:	b920      	cbnz	r0, 8009040 <_Bfree+0x20>
 8009036:	4b09      	ldr	r3, [pc, #36]	; (800905c <_Bfree+0x3c>)
 8009038:	4809      	ldr	r0, [pc, #36]	; (8009060 <_Bfree+0x40>)
 800903a:	218a      	movs	r1, #138	; 0x8a
 800903c:	f7fe fd6a 	bl	8007b14 <__assert_func>
 8009040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009044:	6006      	str	r6, [r0, #0]
 8009046:	60c6      	str	r6, [r0, #12]
 8009048:	b13c      	cbz	r4, 800905a <_Bfree+0x3a>
 800904a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800904c:	6862      	ldr	r2, [r4, #4]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009054:	6021      	str	r1, [r4, #0]
 8009056:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800905a:	bd70      	pop	{r4, r5, r6, pc}
 800905c:	0800ac50 	.word	0x0800ac50
 8009060:	0800adf4 	.word	0x0800adf4

08009064 <__multadd>:
 8009064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009068:	690d      	ldr	r5, [r1, #16]
 800906a:	4607      	mov	r7, r0
 800906c:	460c      	mov	r4, r1
 800906e:	461e      	mov	r6, r3
 8009070:	f101 0c14 	add.w	ip, r1, #20
 8009074:	2000      	movs	r0, #0
 8009076:	f8dc 3000 	ldr.w	r3, [ip]
 800907a:	b299      	uxth	r1, r3
 800907c:	fb02 6101 	mla	r1, r2, r1, r6
 8009080:	0c1e      	lsrs	r6, r3, #16
 8009082:	0c0b      	lsrs	r3, r1, #16
 8009084:	fb02 3306 	mla	r3, r2, r6, r3
 8009088:	b289      	uxth	r1, r1
 800908a:	3001      	adds	r0, #1
 800908c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009090:	4285      	cmp	r5, r0
 8009092:	f84c 1b04 	str.w	r1, [ip], #4
 8009096:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800909a:	dcec      	bgt.n	8009076 <__multadd+0x12>
 800909c:	b30e      	cbz	r6, 80090e2 <__multadd+0x7e>
 800909e:	68a3      	ldr	r3, [r4, #8]
 80090a0:	42ab      	cmp	r3, r5
 80090a2:	dc19      	bgt.n	80090d8 <__multadd+0x74>
 80090a4:	6861      	ldr	r1, [r4, #4]
 80090a6:	4638      	mov	r0, r7
 80090a8:	3101      	adds	r1, #1
 80090aa:	f7ff ff79 	bl	8008fa0 <_Balloc>
 80090ae:	4680      	mov	r8, r0
 80090b0:	b928      	cbnz	r0, 80090be <__multadd+0x5a>
 80090b2:	4602      	mov	r2, r0
 80090b4:	4b0c      	ldr	r3, [pc, #48]	; (80090e8 <__multadd+0x84>)
 80090b6:	480d      	ldr	r0, [pc, #52]	; (80090ec <__multadd+0x88>)
 80090b8:	21b5      	movs	r1, #181	; 0xb5
 80090ba:	f7fe fd2b 	bl	8007b14 <__assert_func>
 80090be:	6922      	ldr	r2, [r4, #16]
 80090c0:	3202      	adds	r2, #2
 80090c2:	f104 010c 	add.w	r1, r4, #12
 80090c6:	0092      	lsls	r2, r2, #2
 80090c8:	300c      	adds	r0, #12
 80090ca:	f7ff ff5b 	bl	8008f84 <memcpy>
 80090ce:	4621      	mov	r1, r4
 80090d0:	4638      	mov	r0, r7
 80090d2:	f7ff ffa5 	bl	8009020 <_Bfree>
 80090d6:	4644      	mov	r4, r8
 80090d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090dc:	3501      	adds	r5, #1
 80090de:	615e      	str	r6, [r3, #20]
 80090e0:	6125      	str	r5, [r4, #16]
 80090e2:	4620      	mov	r0, r4
 80090e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090e8:	0800ad68 	.word	0x0800ad68
 80090ec:	0800adf4 	.word	0x0800adf4

080090f0 <__s2b>:
 80090f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090f4:	460c      	mov	r4, r1
 80090f6:	4615      	mov	r5, r2
 80090f8:	461f      	mov	r7, r3
 80090fa:	2209      	movs	r2, #9
 80090fc:	3308      	adds	r3, #8
 80090fe:	4606      	mov	r6, r0
 8009100:	fb93 f3f2 	sdiv	r3, r3, r2
 8009104:	2100      	movs	r1, #0
 8009106:	2201      	movs	r2, #1
 8009108:	429a      	cmp	r2, r3
 800910a:	db09      	blt.n	8009120 <__s2b+0x30>
 800910c:	4630      	mov	r0, r6
 800910e:	f7ff ff47 	bl	8008fa0 <_Balloc>
 8009112:	b940      	cbnz	r0, 8009126 <__s2b+0x36>
 8009114:	4602      	mov	r2, r0
 8009116:	4b19      	ldr	r3, [pc, #100]	; (800917c <__s2b+0x8c>)
 8009118:	4819      	ldr	r0, [pc, #100]	; (8009180 <__s2b+0x90>)
 800911a:	21ce      	movs	r1, #206	; 0xce
 800911c:	f7fe fcfa 	bl	8007b14 <__assert_func>
 8009120:	0052      	lsls	r2, r2, #1
 8009122:	3101      	adds	r1, #1
 8009124:	e7f0      	b.n	8009108 <__s2b+0x18>
 8009126:	9b08      	ldr	r3, [sp, #32]
 8009128:	6143      	str	r3, [r0, #20]
 800912a:	2d09      	cmp	r5, #9
 800912c:	f04f 0301 	mov.w	r3, #1
 8009130:	6103      	str	r3, [r0, #16]
 8009132:	dd16      	ble.n	8009162 <__s2b+0x72>
 8009134:	f104 0909 	add.w	r9, r4, #9
 8009138:	46c8      	mov	r8, r9
 800913a:	442c      	add	r4, r5
 800913c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009140:	4601      	mov	r1, r0
 8009142:	3b30      	subs	r3, #48	; 0x30
 8009144:	220a      	movs	r2, #10
 8009146:	4630      	mov	r0, r6
 8009148:	f7ff ff8c 	bl	8009064 <__multadd>
 800914c:	45a0      	cmp	r8, r4
 800914e:	d1f5      	bne.n	800913c <__s2b+0x4c>
 8009150:	f1a5 0408 	sub.w	r4, r5, #8
 8009154:	444c      	add	r4, r9
 8009156:	1b2d      	subs	r5, r5, r4
 8009158:	1963      	adds	r3, r4, r5
 800915a:	42bb      	cmp	r3, r7
 800915c:	db04      	blt.n	8009168 <__s2b+0x78>
 800915e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009162:	340a      	adds	r4, #10
 8009164:	2509      	movs	r5, #9
 8009166:	e7f6      	b.n	8009156 <__s2b+0x66>
 8009168:	f814 3b01 	ldrb.w	r3, [r4], #1
 800916c:	4601      	mov	r1, r0
 800916e:	3b30      	subs	r3, #48	; 0x30
 8009170:	220a      	movs	r2, #10
 8009172:	4630      	mov	r0, r6
 8009174:	f7ff ff76 	bl	8009064 <__multadd>
 8009178:	e7ee      	b.n	8009158 <__s2b+0x68>
 800917a:	bf00      	nop
 800917c:	0800ad68 	.word	0x0800ad68
 8009180:	0800adf4 	.word	0x0800adf4

08009184 <__hi0bits>:
 8009184:	0c03      	lsrs	r3, r0, #16
 8009186:	041b      	lsls	r3, r3, #16
 8009188:	b9d3      	cbnz	r3, 80091c0 <__hi0bits+0x3c>
 800918a:	0400      	lsls	r0, r0, #16
 800918c:	2310      	movs	r3, #16
 800918e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009192:	bf04      	itt	eq
 8009194:	0200      	lsleq	r0, r0, #8
 8009196:	3308      	addeq	r3, #8
 8009198:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800919c:	bf04      	itt	eq
 800919e:	0100      	lsleq	r0, r0, #4
 80091a0:	3304      	addeq	r3, #4
 80091a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80091a6:	bf04      	itt	eq
 80091a8:	0080      	lsleq	r0, r0, #2
 80091aa:	3302      	addeq	r3, #2
 80091ac:	2800      	cmp	r0, #0
 80091ae:	db05      	blt.n	80091bc <__hi0bits+0x38>
 80091b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80091b4:	f103 0301 	add.w	r3, r3, #1
 80091b8:	bf08      	it	eq
 80091ba:	2320      	moveq	r3, #32
 80091bc:	4618      	mov	r0, r3
 80091be:	4770      	bx	lr
 80091c0:	2300      	movs	r3, #0
 80091c2:	e7e4      	b.n	800918e <__hi0bits+0xa>

080091c4 <__lo0bits>:
 80091c4:	6803      	ldr	r3, [r0, #0]
 80091c6:	f013 0207 	ands.w	r2, r3, #7
 80091ca:	4601      	mov	r1, r0
 80091cc:	d00b      	beq.n	80091e6 <__lo0bits+0x22>
 80091ce:	07da      	lsls	r2, r3, #31
 80091d0:	d423      	bmi.n	800921a <__lo0bits+0x56>
 80091d2:	0798      	lsls	r0, r3, #30
 80091d4:	bf49      	itett	mi
 80091d6:	085b      	lsrmi	r3, r3, #1
 80091d8:	089b      	lsrpl	r3, r3, #2
 80091da:	2001      	movmi	r0, #1
 80091dc:	600b      	strmi	r3, [r1, #0]
 80091de:	bf5c      	itt	pl
 80091e0:	600b      	strpl	r3, [r1, #0]
 80091e2:	2002      	movpl	r0, #2
 80091e4:	4770      	bx	lr
 80091e6:	b298      	uxth	r0, r3
 80091e8:	b9a8      	cbnz	r0, 8009216 <__lo0bits+0x52>
 80091ea:	0c1b      	lsrs	r3, r3, #16
 80091ec:	2010      	movs	r0, #16
 80091ee:	b2da      	uxtb	r2, r3
 80091f0:	b90a      	cbnz	r2, 80091f6 <__lo0bits+0x32>
 80091f2:	3008      	adds	r0, #8
 80091f4:	0a1b      	lsrs	r3, r3, #8
 80091f6:	071a      	lsls	r2, r3, #28
 80091f8:	bf04      	itt	eq
 80091fa:	091b      	lsreq	r3, r3, #4
 80091fc:	3004      	addeq	r0, #4
 80091fe:	079a      	lsls	r2, r3, #30
 8009200:	bf04      	itt	eq
 8009202:	089b      	lsreq	r3, r3, #2
 8009204:	3002      	addeq	r0, #2
 8009206:	07da      	lsls	r2, r3, #31
 8009208:	d403      	bmi.n	8009212 <__lo0bits+0x4e>
 800920a:	085b      	lsrs	r3, r3, #1
 800920c:	f100 0001 	add.w	r0, r0, #1
 8009210:	d005      	beq.n	800921e <__lo0bits+0x5a>
 8009212:	600b      	str	r3, [r1, #0]
 8009214:	4770      	bx	lr
 8009216:	4610      	mov	r0, r2
 8009218:	e7e9      	b.n	80091ee <__lo0bits+0x2a>
 800921a:	2000      	movs	r0, #0
 800921c:	4770      	bx	lr
 800921e:	2020      	movs	r0, #32
 8009220:	4770      	bx	lr
	...

08009224 <__i2b>:
 8009224:	b510      	push	{r4, lr}
 8009226:	460c      	mov	r4, r1
 8009228:	2101      	movs	r1, #1
 800922a:	f7ff feb9 	bl	8008fa0 <_Balloc>
 800922e:	4602      	mov	r2, r0
 8009230:	b928      	cbnz	r0, 800923e <__i2b+0x1a>
 8009232:	4b05      	ldr	r3, [pc, #20]	; (8009248 <__i2b+0x24>)
 8009234:	4805      	ldr	r0, [pc, #20]	; (800924c <__i2b+0x28>)
 8009236:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800923a:	f7fe fc6b 	bl	8007b14 <__assert_func>
 800923e:	2301      	movs	r3, #1
 8009240:	6144      	str	r4, [r0, #20]
 8009242:	6103      	str	r3, [r0, #16]
 8009244:	bd10      	pop	{r4, pc}
 8009246:	bf00      	nop
 8009248:	0800ad68 	.word	0x0800ad68
 800924c:	0800adf4 	.word	0x0800adf4

08009250 <__multiply>:
 8009250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	4691      	mov	r9, r2
 8009256:	690a      	ldr	r2, [r1, #16]
 8009258:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800925c:	429a      	cmp	r2, r3
 800925e:	bfb8      	it	lt
 8009260:	460b      	movlt	r3, r1
 8009262:	460c      	mov	r4, r1
 8009264:	bfbc      	itt	lt
 8009266:	464c      	movlt	r4, r9
 8009268:	4699      	movlt	r9, r3
 800926a:	6927      	ldr	r7, [r4, #16]
 800926c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009270:	68a3      	ldr	r3, [r4, #8]
 8009272:	6861      	ldr	r1, [r4, #4]
 8009274:	eb07 060a 	add.w	r6, r7, sl
 8009278:	42b3      	cmp	r3, r6
 800927a:	b085      	sub	sp, #20
 800927c:	bfb8      	it	lt
 800927e:	3101      	addlt	r1, #1
 8009280:	f7ff fe8e 	bl	8008fa0 <_Balloc>
 8009284:	b930      	cbnz	r0, 8009294 <__multiply+0x44>
 8009286:	4602      	mov	r2, r0
 8009288:	4b44      	ldr	r3, [pc, #272]	; (800939c <__multiply+0x14c>)
 800928a:	4845      	ldr	r0, [pc, #276]	; (80093a0 <__multiply+0x150>)
 800928c:	f240 115d 	movw	r1, #349	; 0x15d
 8009290:	f7fe fc40 	bl	8007b14 <__assert_func>
 8009294:	f100 0514 	add.w	r5, r0, #20
 8009298:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800929c:	462b      	mov	r3, r5
 800929e:	2200      	movs	r2, #0
 80092a0:	4543      	cmp	r3, r8
 80092a2:	d321      	bcc.n	80092e8 <__multiply+0x98>
 80092a4:	f104 0314 	add.w	r3, r4, #20
 80092a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80092ac:	f109 0314 	add.w	r3, r9, #20
 80092b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80092b4:	9202      	str	r2, [sp, #8]
 80092b6:	1b3a      	subs	r2, r7, r4
 80092b8:	3a15      	subs	r2, #21
 80092ba:	f022 0203 	bic.w	r2, r2, #3
 80092be:	3204      	adds	r2, #4
 80092c0:	f104 0115 	add.w	r1, r4, #21
 80092c4:	428f      	cmp	r7, r1
 80092c6:	bf38      	it	cc
 80092c8:	2204      	movcc	r2, #4
 80092ca:	9201      	str	r2, [sp, #4]
 80092cc:	9a02      	ldr	r2, [sp, #8]
 80092ce:	9303      	str	r3, [sp, #12]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d80c      	bhi.n	80092ee <__multiply+0x9e>
 80092d4:	2e00      	cmp	r6, #0
 80092d6:	dd03      	ble.n	80092e0 <__multiply+0x90>
 80092d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d05a      	beq.n	8009396 <__multiply+0x146>
 80092e0:	6106      	str	r6, [r0, #16]
 80092e2:	b005      	add	sp, #20
 80092e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e8:	f843 2b04 	str.w	r2, [r3], #4
 80092ec:	e7d8      	b.n	80092a0 <__multiply+0x50>
 80092ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80092f2:	f1ba 0f00 	cmp.w	sl, #0
 80092f6:	d024      	beq.n	8009342 <__multiply+0xf2>
 80092f8:	f104 0e14 	add.w	lr, r4, #20
 80092fc:	46a9      	mov	r9, r5
 80092fe:	f04f 0c00 	mov.w	ip, #0
 8009302:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009306:	f8d9 1000 	ldr.w	r1, [r9]
 800930a:	fa1f fb82 	uxth.w	fp, r2
 800930e:	b289      	uxth	r1, r1
 8009310:	fb0a 110b 	mla	r1, sl, fp, r1
 8009314:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009318:	f8d9 2000 	ldr.w	r2, [r9]
 800931c:	4461      	add	r1, ip
 800931e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009322:	fb0a c20b 	mla	r2, sl, fp, ip
 8009326:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800932a:	b289      	uxth	r1, r1
 800932c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009330:	4577      	cmp	r7, lr
 8009332:	f849 1b04 	str.w	r1, [r9], #4
 8009336:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800933a:	d8e2      	bhi.n	8009302 <__multiply+0xb2>
 800933c:	9a01      	ldr	r2, [sp, #4]
 800933e:	f845 c002 	str.w	ip, [r5, r2]
 8009342:	9a03      	ldr	r2, [sp, #12]
 8009344:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009348:	3304      	adds	r3, #4
 800934a:	f1b9 0f00 	cmp.w	r9, #0
 800934e:	d020      	beq.n	8009392 <__multiply+0x142>
 8009350:	6829      	ldr	r1, [r5, #0]
 8009352:	f104 0c14 	add.w	ip, r4, #20
 8009356:	46ae      	mov	lr, r5
 8009358:	f04f 0a00 	mov.w	sl, #0
 800935c:	f8bc b000 	ldrh.w	fp, [ip]
 8009360:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009364:	fb09 220b 	mla	r2, r9, fp, r2
 8009368:	4492      	add	sl, r2
 800936a:	b289      	uxth	r1, r1
 800936c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009370:	f84e 1b04 	str.w	r1, [lr], #4
 8009374:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009378:	f8be 1000 	ldrh.w	r1, [lr]
 800937c:	0c12      	lsrs	r2, r2, #16
 800937e:	fb09 1102 	mla	r1, r9, r2, r1
 8009382:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009386:	4567      	cmp	r7, ip
 8009388:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800938c:	d8e6      	bhi.n	800935c <__multiply+0x10c>
 800938e:	9a01      	ldr	r2, [sp, #4]
 8009390:	50a9      	str	r1, [r5, r2]
 8009392:	3504      	adds	r5, #4
 8009394:	e79a      	b.n	80092cc <__multiply+0x7c>
 8009396:	3e01      	subs	r6, #1
 8009398:	e79c      	b.n	80092d4 <__multiply+0x84>
 800939a:	bf00      	nop
 800939c:	0800ad68 	.word	0x0800ad68
 80093a0:	0800adf4 	.word	0x0800adf4

080093a4 <__pow5mult>:
 80093a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093a8:	4615      	mov	r5, r2
 80093aa:	f012 0203 	ands.w	r2, r2, #3
 80093ae:	4606      	mov	r6, r0
 80093b0:	460f      	mov	r7, r1
 80093b2:	d007      	beq.n	80093c4 <__pow5mult+0x20>
 80093b4:	4c25      	ldr	r4, [pc, #148]	; (800944c <__pow5mult+0xa8>)
 80093b6:	3a01      	subs	r2, #1
 80093b8:	2300      	movs	r3, #0
 80093ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093be:	f7ff fe51 	bl	8009064 <__multadd>
 80093c2:	4607      	mov	r7, r0
 80093c4:	10ad      	asrs	r5, r5, #2
 80093c6:	d03d      	beq.n	8009444 <__pow5mult+0xa0>
 80093c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80093ca:	b97c      	cbnz	r4, 80093ec <__pow5mult+0x48>
 80093cc:	2010      	movs	r0, #16
 80093ce:	f7ff fdbf 	bl	8008f50 <malloc>
 80093d2:	4602      	mov	r2, r0
 80093d4:	6270      	str	r0, [r6, #36]	; 0x24
 80093d6:	b928      	cbnz	r0, 80093e4 <__pow5mult+0x40>
 80093d8:	4b1d      	ldr	r3, [pc, #116]	; (8009450 <__pow5mult+0xac>)
 80093da:	481e      	ldr	r0, [pc, #120]	; (8009454 <__pow5mult+0xb0>)
 80093dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80093e0:	f7fe fb98 	bl	8007b14 <__assert_func>
 80093e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093e8:	6004      	str	r4, [r0, #0]
 80093ea:	60c4      	str	r4, [r0, #12]
 80093ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80093f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093f4:	b94c      	cbnz	r4, 800940a <__pow5mult+0x66>
 80093f6:	f240 2171 	movw	r1, #625	; 0x271
 80093fa:	4630      	mov	r0, r6
 80093fc:	f7ff ff12 	bl	8009224 <__i2b>
 8009400:	2300      	movs	r3, #0
 8009402:	f8c8 0008 	str.w	r0, [r8, #8]
 8009406:	4604      	mov	r4, r0
 8009408:	6003      	str	r3, [r0, #0]
 800940a:	f04f 0900 	mov.w	r9, #0
 800940e:	07eb      	lsls	r3, r5, #31
 8009410:	d50a      	bpl.n	8009428 <__pow5mult+0x84>
 8009412:	4639      	mov	r1, r7
 8009414:	4622      	mov	r2, r4
 8009416:	4630      	mov	r0, r6
 8009418:	f7ff ff1a 	bl	8009250 <__multiply>
 800941c:	4639      	mov	r1, r7
 800941e:	4680      	mov	r8, r0
 8009420:	4630      	mov	r0, r6
 8009422:	f7ff fdfd 	bl	8009020 <_Bfree>
 8009426:	4647      	mov	r7, r8
 8009428:	106d      	asrs	r5, r5, #1
 800942a:	d00b      	beq.n	8009444 <__pow5mult+0xa0>
 800942c:	6820      	ldr	r0, [r4, #0]
 800942e:	b938      	cbnz	r0, 8009440 <__pow5mult+0x9c>
 8009430:	4622      	mov	r2, r4
 8009432:	4621      	mov	r1, r4
 8009434:	4630      	mov	r0, r6
 8009436:	f7ff ff0b 	bl	8009250 <__multiply>
 800943a:	6020      	str	r0, [r4, #0]
 800943c:	f8c0 9000 	str.w	r9, [r0]
 8009440:	4604      	mov	r4, r0
 8009442:	e7e4      	b.n	800940e <__pow5mult+0x6a>
 8009444:	4638      	mov	r0, r7
 8009446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800944a:	bf00      	nop
 800944c:	0800af40 	.word	0x0800af40
 8009450:	0800ac50 	.word	0x0800ac50
 8009454:	0800adf4 	.word	0x0800adf4

08009458 <__lshift>:
 8009458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800945c:	460c      	mov	r4, r1
 800945e:	6849      	ldr	r1, [r1, #4]
 8009460:	6923      	ldr	r3, [r4, #16]
 8009462:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009466:	68a3      	ldr	r3, [r4, #8]
 8009468:	4607      	mov	r7, r0
 800946a:	4691      	mov	r9, r2
 800946c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009470:	f108 0601 	add.w	r6, r8, #1
 8009474:	42b3      	cmp	r3, r6
 8009476:	db0b      	blt.n	8009490 <__lshift+0x38>
 8009478:	4638      	mov	r0, r7
 800947a:	f7ff fd91 	bl	8008fa0 <_Balloc>
 800947e:	4605      	mov	r5, r0
 8009480:	b948      	cbnz	r0, 8009496 <__lshift+0x3e>
 8009482:	4602      	mov	r2, r0
 8009484:	4b2a      	ldr	r3, [pc, #168]	; (8009530 <__lshift+0xd8>)
 8009486:	482b      	ldr	r0, [pc, #172]	; (8009534 <__lshift+0xdc>)
 8009488:	f240 11d9 	movw	r1, #473	; 0x1d9
 800948c:	f7fe fb42 	bl	8007b14 <__assert_func>
 8009490:	3101      	adds	r1, #1
 8009492:	005b      	lsls	r3, r3, #1
 8009494:	e7ee      	b.n	8009474 <__lshift+0x1c>
 8009496:	2300      	movs	r3, #0
 8009498:	f100 0114 	add.w	r1, r0, #20
 800949c:	f100 0210 	add.w	r2, r0, #16
 80094a0:	4618      	mov	r0, r3
 80094a2:	4553      	cmp	r3, sl
 80094a4:	db37      	blt.n	8009516 <__lshift+0xbe>
 80094a6:	6920      	ldr	r0, [r4, #16]
 80094a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094ac:	f104 0314 	add.w	r3, r4, #20
 80094b0:	f019 091f 	ands.w	r9, r9, #31
 80094b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80094bc:	d02f      	beq.n	800951e <__lshift+0xc6>
 80094be:	f1c9 0e20 	rsb	lr, r9, #32
 80094c2:	468a      	mov	sl, r1
 80094c4:	f04f 0c00 	mov.w	ip, #0
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	fa02 f209 	lsl.w	r2, r2, r9
 80094ce:	ea42 020c 	orr.w	r2, r2, ip
 80094d2:	f84a 2b04 	str.w	r2, [sl], #4
 80094d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80094da:	4298      	cmp	r0, r3
 80094dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80094e0:	d8f2      	bhi.n	80094c8 <__lshift+0x70>
 80094e2:	1b03      	subs	r3, r0, r4
 80094e4:	3b15      	subs	r3, #21
 80094e6:	f023 0303 	bic.w	r3, r3, #3
 80094ea:	3304      	adds	r3, #4
 80094ec:	f104 0215 	add.w	r2, r4, #21
 80094f0:	4290      	cmp	r0, r2
 80094f2:	bf38      	it	cc
 80094f4:	2304      	movcc	r3, #4
 80094f6:	f841 c003 	str.w	ip, [r1, r3]
 80094fa:	f1bc 0f00 	cmp.w	ip, #0
 80094fe:	d001      	beq.n	8009504 <__lshift+0xac>
 8009500:	f108 0602 	add.w	r6, r8, #2
 8009504:	3e01      	subs	r6, #1
 8009506:	4638      	mov	r0, r7
 8009508:	612e      	str	r6, [r5, #16]
 800950a:	4621      	mov	r1, r4
 800950c:	f7ff fd88 	bl	8009020 <_Bfree>
 8009510:	4628      	mov	r0, r5
 8009512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009516:	f842 0f04 	str.w	r0, [r2, #4]!
 800951a:	3301      	adds	r3, #1
 800951c:	e7c1      	b.n	80094a2 <__lshift+0x4a>
 800951e:	3904      	subs	r1, #4
 8009520:	f853 2b04 	ldr.w	r2, [r3], #4
 8009524:	f841 2f04 	str.w	r2, [r1, #4]!
 8009528:	4298      	cmp	r0, r3
 800952a:	d8f9      	bhi.n	8009520 <__lshift+0xc8>
 800952c:	e7ea      	b.n	8009504 <__lshift+0xac>
 800952e:	bf00      	nop
 8009530:	0800ad68 	.word	0x0800ad68
 8009534:	0800adf4 	.word	0x0800adf4

08009538 <__mcmp>:
 8009538:	b530      	push	{r4, r5, lr}
 800953a:	6902      	ldr	r2, [r0, #16]
 800953c:	690c      	ldr	r4, [r1, #16]
 800953e:	1b12      	subs	r2, r2, r4
 8009540:	d10e      	bne.n	8009560 <__mcmp+0x28>
 8009542:	f100 0314 	add.w	r3, r0, #20
 8009546:	3114      	adds	r1, #20
 8009548:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800954c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009550:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009554:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009558:	42a5      	cmp	r5, r4
 800955a:	d003      	beq.n	8009564 <__mcmp+0x2c>
 800955c:	d305      	bcc.n	800956a <__mcmp+0x32>
 800955e:	2201      	movs	r2, #1
 8009560:	4610      	mov	r0, r2
 8009562:	bd30      	pop	{r4, r5, pc}
 8009564:	4283      	cmp	r3, r0
 8009566:	d3f3      	bcc.n	8009550 <__mcmp+0x18>
 8009568:	e7fa      	b.n	8009560 <__mcmp+0x28>
 800956a:	f04f 32ff 	mov.w	r2, #4294967295
 800956e:	e7f7      	b.n	8009560 <__mcmp+0x28>

08009570 <__mdiff>:
 8009570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	460c      	mov	r4, r1
 8009576:	4606      	mov	r6, r0
 8009578:	4611      	mov	r1, r2
 800957a:	4620      	mov	r0, r4
 800957c:	4690      	mov	r8, r2
 800957e:	f7ff ffdb 	bl	8009538 <__mcmp>
 8009582:	1e05      	subs	r5, r0, #0
 8009584:	d110      	bne.n	80095a8 <__mdiff+0x38>
 8009586:	4629      	mov	r1, r5
 8009588:	4630      	mov	r0, r6
 800958a:	f7ff fd09 	bl	8008fa0 <_Balloc>
 800958e:	b930      	cbnz	r0, 800959e <__mdiff+0x2e>
 8009590:	4b3a      	ldr	r3, [pc, #232]	; (800967c <__mdiff+0x10c>)
 8009592:	4602      	mov	r2, r0
 8009594:	f240 2132 	movw	r1, #562	; 0x232
 8009598:	4839      	ldr	r0, [pc, #228]	; (8009680 <__mdiff+0x110>)
 800959a:	f7fe fabb 	bl	8007b14 <__assert_func>
 800959e:	2301      	movs	r3, #1
 80095a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a8:	bfa4      	itt	ge
 80095aa:	4643      	movge	r3, r8
 80095ac:	46a0      	movge	r8, r4
 80095ae:	4630      	mov	r0, r6
 80095b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80095b4:	bfa6      	itte	ge
 80095b6:	461c      	movge	r4, r3
 80095b8:	2500      	movge	r5, #0
 80095ba:	2501      	movlt	r5, #1
 80095bc:	f7ff fcf0 	bl	8008fa0 <_Balloc>
 80095c0:	b920      	cbnz	r0, 80095cc <__mdiff+0x5c>
 80095c2:	4b2e      	ldr	r3, [pc, #184]	; (800967c <__mdiff+0x10c>)
 80095c4:	4602      	mov	r2, r0
 80095c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80095ca:	e7e5      	b.n	8009598 <__mdiff+0x28>
 80095cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80095d0:	6926      	ldr	r6, [r4, #16]
 80095d2:	60c5      	str	r5, [r0, #12]
 80095d4:	f104 0914 	add.w	r9, r4, #20
 80095d8:	f108 0514 	add.w	r5, r8, #20
 80095dc:	f100 0e14 	add.w	lr, r0, #20
 80095e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80095e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80095e8:	f108 0210 	add.w	r2, r8, #16
 80095ec:	46f2      	mov	sl, lr
 80095ee:	2100      	movs	r1, #0
 80095f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80095f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80095f8:	fa1f f883 	uxth.w	r8, r3
 80095fc:	fa11 f18b 	uxtah	r1, r1, fp
 8009600:	0c1b      	lsrs	r3, r3, #16
 8009602:	eba1 0808 	sub.w	r8, r1, r8
 8009606:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800960a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800960e:	fa1f f888 	uxth.w	r8, r8
 8009612:	1419      	asrs	r1, r3, #16
 8009614:	454e      	cmp	r6, r9
 8009616:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800961a:	f84a 3b04 	str.w	r3, [sl], #4
 800961e:	d8e7      	bhi.n	80095f0 <__mdiff+0x80>
 8009620:	1b33      	subs	r3, r6, r4
 8009622:	3b15      	subs	r3, #21
 8009624:	f023 0303 	bic.w	r3, r3, #3
 8009628:	3304      	adds	r3, #4
 800962a:	3415      	adds	r4, #21
 800962c:	42a6      	cmp	r6, r4
 800962e:	bf38      	it	cc
 8009630:	2304      	movcc	r3, #4
 8009632:	441d      	add	r5, r3
 8009634:	4473      	add	r3, lr
 8009636:	469e      	mov	lr, r3
 8009638:	462e      	mov	r6, r5
 800963a:	4566      	cmp	r6, ip
 800963c:	d30e      	bcc.n	800965c <__mdiff+0xec>
 800963e:	f10c 0203 	add.w	r2, ip, #3
 8009642:	1b52      	subs	r2, r2, r5
 8009644:	f022 0203 	bic.w	r2, r2, #3
 8009648:	3d03      	subs	r5, #3
 800964a:	45ac      	cmp	ip, r5
 800964c:	bf38      	it	cc
 800964e:	2200      	movcc	r2, #0
 8009650:	441a      	add	r2, r3
 8009652:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009656:	b17b      	cbz	r3, 8009678 <__mdiff+0x108>
 8009658:	6107      	str	r7, [r0, #16]
 800965a:	e7a3      	b.n	80095a4 <__mdiff+0x34>
 800965c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009660:	fa11 f288 	uxtah	r2, r1, r8
 8009664:	1414      	asrs	r4, r2, #16
 8009666:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800966a:	b292      	uxth	r2, r2
 800966c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009670:	f84e 2b04 	str.w	r2, [lr], #4
 8009674:	1421      	asrs	r1, r4, #16
 8009676:	e7e0      	b.n	800963a <__mdiff+0xca>
 8009678:	3f01      	subs	r7, #1
 800967a:	e7ea      	b.n	8009652 <__mdiff+0xe2>
 800967c:	0800ad68 	.word	0x0800ad68
 8009680:	0800adf4 	.word	0x0800adf4

08009684 <__ulp>:
 8009684:	b082      	sub	sp, #8
 8009686:	ed8d 0b00 	vstr	d0, [sp]
 800968a:	9b01      	ldr	r3, [sp, #4]
 800968c:	4912      	ldr	r1, [pc, #72]	; (80096d8 <__ulp+0x54>)
 800968e:	4019      	ands	r1, r3
 8009690:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009694:	2900      	cmp	r1, #0
 8009696:	dd05      	ble.n	80096a4 <__ulp+0x20>
 8009698:	2200      	movs	r2, #0
 800969a:	460b      	mov	r3, r1
 800969c:	ec43 2b10 	vmov	d0, r2, r3
 80096a0:	b002      	add	sp, #8
 80096a2:	4770      	bx	lr
 80096a4:	4249      	negs	r1, r1
 80096a6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80096aa:	ea4f 5021 	mov.w	r0, r1, asr #20
 80096ae:	f04f 0200 	mov.w	r2, #0
 80096b2:	f04f 0300 	mov.w	r3, #0
 80096b6:	da04      	bge.n	80096c2 <__ulp+0x3e>
 80096b8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80096bc:	fa41 f300 	asr.w	r3, r1, r0
 80096c0:	e7ec      	b.n	800969c <__ulp+0x18>
 80096c2:	f1a0 0114 	sub.w	r1, r0, #20
 80096c6:	291e      	cmp	r1, #30
 80096c8:	bfda      	itte	le
 80096ca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80096ce:	fa20 f101 	lsrle.w	r1, r0, r1
 80096d2:	2101      	movgt	r1, #1
 80096d4:	460a      	mov	r2, r1
 80096d6:	e7e1      	b.n	800969c <__ulp+0x18>
 80096d8:	7ff00000 	.word	0x7ff00000

080096dc <__b2d>:
 80096dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096de:	6905      	ldr	r5, [r0, #16]
 80096e0:	f100 0714 	add.w	r7, r0, #20
 80096e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80096e8:	1f2e      	subs	r6, r5, #4
 80096ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80096ee:	4620      	mov	r0, r4
 80096f0:	f7ff fd48 	bl	8009184 <__hi0bits>
 80096f4:	f1c0 0320 	rsb	r3, r0, #32
 80096f8:	280a      	cmp	r0, #10
 80096fa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009778 <__b2d+0x9c>
 80096fe:	600b      	str	r3, [r1, #0]
 8009700:	dc14      	bgt.n	800972c <__b2d+0x50>
 8009702:	f1c0 0e0b 	rsb	lr, r0, #11
 8009706:	fa24 f10e 	lsr.w	r1, r4, lr
 800970a:	42b7      	cmp	r7, r6
 800970c:	ea41 030c 	orr.w	r3, r1, ip
 8009710:	bf34      	ite	cc
 8009712:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009716:	2100      	movcs	r1, #0
 8009718:	3015      	adds	r0, #21
 800971a:	fa04 f000 	lsl.w	r0, r4, r0
 800971e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009722:	ea40 0201 	orr.w	r2, r0, r1
 8009726:	ec43 2b10 	vmov	d0, r2, r3
 800972a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800972c:	42b7      	cmp	r7, r6
 800972e:	bf3a      	itte	cc
 8009730:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009734:	f1a5 0608 	subcc.w	r6, r5, #8
 8009738:	2100      	movcs	r1, #0
 800973a:	380b      	subs	r0, #11
 800973c:	d017      	beq.n	800976e <__b2d+0x92>
 800973e:	f1c0 0c20 	rsb	ip, r0, #32
 8009742:	fa04 f500 	lsl.w	r5, r4, r0
 8009746:	42be      	cmp	r6, r7
 8009748:	fa21 f40c 	lsr.w	r4, r1, ip
 800974c:	ea45 0504 	orr.w	r5, r5, r4
 8009750:	bf8c      	ite	hi
 8009752:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009756:	2400      	movls	r4, #0
 8009758:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800975c:	fa01 f000 	lsl.w	r0, r1, r0
 8009760:	fa24 f40c 	lsr.w	r4, r4, ip
 8009764:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009768:	ea40 0204 	orr.w	r2, r0, r4
 800976c:	e7db      	b.n	8009726 <__b2d+0x4a>
 800976e:	ea44 030c 	orr.w	r3, r4, ip
 8009772:	460a      	mov	r2, r1
 8009774:	e7d7      	b.n	8009726 <__b2d+0x4a>
 8009776:	bf00      	nop
 8009778:	3ff00000 	.word	0x3ff00000

0800977c <__d2b>:
 800977c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009780:	4689      	mov	r9, r1
 8009782:	2101      	movs	r1, #1
 8009784:	ec57 6b10 	vmov	r6, r7, d0
 8009788:	4690      	mov	r8, r2
 800978a:	f7ff fc09 	bl	8008fa0 <_Balloc>
 800978e:	4604      	mov	r4, r0
 8009790:	b930      	cbnz	r0, 80097a0 <__d2b+0x24>
 8009792:	4602      	mov	r2, r0
 8009794:	4b25      	ldr	r3, [pc, #148]	; (800982c <__d2b+0xb0>)
 8009796:	4826      	ldr	r0, [pc, #152]	; (8009830 <__d2b+0xb4>)
 8009798:	f240 310a 	movw	r1, #778	; 0x30a
 800979c:	f7fe f9ba 	bl	8007b14 <__assert_func>
 80097a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80097a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097a8:	bb35      	cbnz	r5, 80097f8 <__d2b+0x7c>
 80097aa:	2e00      	cmp	r6, #0
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	d028      	beq.n	8009802 <__d2b+0x86>
 80097b0:	4668      	mov	r0, sp
 80097b2:	9600      	str	r6, [sp, #0]
 80097b4:	f7ff fd06 	bl	80091c4 <__lo0bits>
 80097b8:	9900      	ldr	r1, [sp, #0]
 80097ba:	b300      	cbz	r0, 80097fe <__d2b+0x82>
 80097bc:	9a01      	ldr	r2, [sp, #4]
 80097be:	f1c0 0320 	rsb	r3, r0, #32
 80097c2:	fa02 f303 	lsl.w	r3, r2, r3
 80097c6:	430b      	orrs	r3, r1
 80097c8:	40c2      	lsrs	r2, r0
 80097ca:	6163      	str	r3, [r4, #20]
 80097cc:	9201      	str	r2, [sp, #4]
 80097ce:	9b01      	ldr	r3, [sp, #4]
 80097d0:	61a3      	str	r3, [r4, #24]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	bf14      	ite	ne
 80097d6:	2202      	movne	r2, #2
 80097d8:	2201      	moveq	r2, #1
 80097da:	6122      	str	r2, [r4, #16]
 80097dc:	b1d5      	cbz	r5, 8009814 <__d2b+0x98>
 80097de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80097e2:	4405      	add	r5, r0
 80097e4:	f8c9 5000 	str.w	r5, [r9]
 80097e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80097ec:	f8c8 0000 	str.w	r0, [r8]
 80097f0:	4620      	mov	r0, r4
 80097f2:	b003      	add	sp, #12
 80097f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097fc:	e7d5      	b.n	80097aa <__d2b+0x2e>
 80097fe:	6161      	str	r1, [r4, #20]
 8009800:	e7e5      	b.n	80097ce <__d2b+0x52>
 8009802:	a801      	add	r0, sp, #4
 8009804:	f7ff fcde 	bl	80091c4 <__lo0bits>
 8009808:	9b01      	ldr	r3, [sp, #4]
 800980a:	6163      	str	r3, [r4, #20]
 800980c:	2201      	movs	r2, #1
 800980e:	6122      	str	r2, [r4, #16]
 8009810:	3020      	adds	r0, #32
 8009812:	e7e3      	b.n	80097dc <__d2b+0x60>
 8009814:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009818:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800981c:	f8c9 0000 	str.w	r0, [r9]
 8009820:	6918      	ldr	r0, [r3, #16]
 8009822:	f7ff fcaf 	bl	8009184 <__hi0bits>
 8009826:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800982a:	e7df      	b.n	80097ec <__d2b+0x70>
 800982c:	0800ad68 	.word	0x0800ad68
 8009830:	0800adf4 	.word	0x0800adf4

08009834 <__ratio>:
 8009834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009838:	4688      	mov	r8, r1
 800983a:	4669      	mov	r1, sp
 800983c:	4681      	mov	r9, r0
 800983e:	f7ff ff4d 	bl	80096dc <__b2d>
 8009842:	a901      	add	r1, sp, #4
 8009844:	4640      	mov	r0, r8
 8009846:	ec55 4b10 	vmov	r4, r5, d0
 800984a:	f7ff ff47 	bl	80096dc <__b2d>
 800984e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009852:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009856:	eba3 0c02 	sub.w	ip, r3, r2
 800985a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800985e:	1a9b      	subs	r3, r3, r2
 8009860:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009864:	ec51 0b10 	vmov	r0, r1, d0
 8009868:	2b00      	cmp	r3, #0
 800986a:	bfd6      	itet	le
 800986c:	460a      	movle	r2, r1
 800986e:	462a      	movgt	r2, r5
 8009870:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009874:	468b      	mov	fp, r1
 8009876:	462f      	mov	r7, r5
 8009878:	bfd4      	ite	le
 800987a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800987e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009882:	4620      	mov	r0, r4
 8009884:	ee10 2a10 	vmov	r2, s0
 8009888:	465b      	mov	r3, fp
 800988a:	4639      	mov	r1, r7
 800988c:	f7f7 f80e 	bl	80008ac <__aeabi_ddiv>
 8009890:	ec41 0b10 	vmov	d0, r0, r1
 8009894:	b003      	add	sp, #12
 8009896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800989a <__copybits>:
 800989a:	3901      	subs	r1, #1
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	1149      	asrs	r1, r1, #5
 80098a0:	6914      	ldr	r4, [r2, #16]
 80098a2:	3101      	adds	r1, #1
 80098a4:	f102 0314 	add.w	r3, r2, #20
 80098a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80098ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80098b0:	1f05      	subs	r5, r0, #4
 80098b2:	42a3      	cmp	r3, r4
 80098b4:	d30c      	bcc.n	80098d0 <__copybits+0x36>
 80098b6:	1aa3      	subs	r3, r4, r2
 80098b8:	3b11      	subs	r3, #17
 80098ba:	f023 0303 	bic.w	r3, r3, #3
 80098be:	3211      	adds	r2, #17
 80098c0:	42a2      	cmp	r2, r4
 80098c2:	bf88      	it	hi
 80098c4:	2300      	movhi	r3, #0
 80098c6:	4418      	add	r0, r3
 80098c8:	2300      	movs	r3, #0
 80098ca:	4288      	cmp	r0, r1
 80098cc:	d305      	bcc.n	80098da <__copybits+0x40>
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	f853 6b04 	ldr.w	r6, [r3], #4
 80098d4:	f845 6f04 	str.w	r6, [r5, #4]!
 80098d8:	e7eb      	b.n	80098b2 <__copybits+0x18>
 80098da:	f840 3b04 	str.w	r3, [r0], #4
 80098de:	e7f4      	b.n	80098ca <__copybits+0x30>

080098e0 <__any_on>:
 80098e0:	f100 0214 	add.w	r2, r0, #20
 80098e4:	6900      	ldr	r0, [r0, #16]
 80098e6:	114b      	asrs	r3, r1, #5
 80098e8:	4298      	cmp	r0, r3
 80098ea:	b510      	push	{r4, lr}
 80098ec:	db11      	blt.n	8009912 <__any_on+0x32>
 80098ee:	dd0a      	ble.n	8009906 <__any_on+0x26>
 80098f0:	f011 011f 	ands.w	r1, r1, #31
 80098f4:	d007      	beq.n	8009906 <__any_on+0x26>
 80098f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80098fa:	fa24 f001 	lsr.w	r0, r4, r1
 80098fe:	fa00 f101 	lsl.w	r1, r0, r1
 8009902:	428c      	cmp	r4, r1
 8009904:	d10b      	bne.n	800991e <__any_on+0x3e>
 8009906:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800990a:	4293      	cmp	r3, r2
 800990c:	d803      	bhi.n	8009916 <__any_on+0x36>
 800990e:	2000      	movs	r0, #0
 8009910:	bd10      	pop	{r4, pc}
 8009912:	4603      	mov	r3, r0
 8009914:	e7f7      	b.n	8009906 <__any_on+0x26>
 8009916:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800991a:	2900      	cmp	r1, #0
 800991c:	d0f5      	beq.n	800990a <__any_on+0x2a>
 800991e:	2001      	movs	r0, #1
 8009920:	e7f6      	b.n	8009910 <__any_on+0x30>

08009922 <_calloc_r>:
 8009922:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009924:	fba1 2402 	umull	r2, r4, r1, r2
 8009928:	b94c      	cbnz	r4, 800993e <_calloc_r+0x1c>
 800992a:	4611      	mov	r1, r2
 800992c:	9201      	str	r2, [sp, #4]
 800992e:	f000 f87b 	bl	8009a28 <_malloc_r>
 8009932:	9a01      	ldr	r2, [sp, #4]
 8009934:	4605      	mov	r5, r0
 8009936:	b930      	cbnz	r0, 8009946 <_calloc_r+0x24>
 8009938:	4628      	mov	r0, r5
 800993a:	b003      	add	sp, #12
 800993c:	bd30      	pop	{r4, r5, pc}
 800993e:	220c      	movs	r2, #12
 8009940:	6002      	str	r2, [r0, #0]
 8009942:	2500      	movs	r5, #0
 8009944:	e7f8      	b.n	8009938 <_calloc_r+0x16>
 8009946:	4621      	mov	r1, r4
 8009948:	f7fc fdc6 	bl	80064d8 <memset>
 800994c:	e7f4      	b.n	8009938 <_calloc_r+0x16>
	...

08009950 <_free_r>:
 8009950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009952:	2900      	cmp	r1, #0
 8009954:	d044      	beq.n	80099e0 <_free_r+0x90>
 8009956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800995a:	9001      	str	r0, [sp, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	f1a1 0404 	sub.w	r4, r1, #4
 8009962:	bfb8      	it	lt
 8009964:	18e4      	addlt	r4, r4, r3
 8009966:	f000 fec7 	bl	800a6f8 <__malloc_lock>
 800996a:	4a1e      	ldr	r2, [pc, #120]	; (80099e4 <_free_r+0x94>)
 800996c:	9801      	ldr	r0, [sp, #4]
 800996e:	6813      	ldr	r3, [r2, #0]
 8009970:	b933      	cbnz	r3, 8009980 <_free_r+0x30>
 8009972:	6063      	str	r3, [r4, #4]
 8009974:	6014      	str	r4, [r2, #0]
 8009976:	b003      	add	sp, #12
 8009978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800997c:	f000 bec2 	b.w	800a704 <__malloc_unlock>
 8009980:	42a3      	cmp	r3, r4
 8009982:	d908      	bls.n	8009996 <_free_r+0x46>
 8009984:	6825      	ldr	r5, [r4, #0]
 8009986:	1961      	adds	r1, r4, r5
 8009988:	428b      	cmp	r3, r1
 800998a:	bf01      	itttt	eq
 800998c:	6819      	ldreq	r1, [r3, #0]
 800998e:	685b      	ldreq	r3, [r3, #4]
 8009990:	1949      	addeq	r1, r1, r5
 8009992:	6021      	streq	r1, [r4, #0]
 8009994:	e7ed      	b.n	8009972 <_free_r+0x22>
 8009996:	461a      	mov	r2, r3
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	b10b      	cbz	r3, 80099a0 <_free_r+0x50>
 800999c:	42a3      	cmp	r3, r4
 800999e:	d9fa      	bls.n	8009996 <_free_r+0x46>
 80099a0:	6811      	ldr	r1, [r2, #0]
 80099a2:	1855      	adds	r5, r2, r1
 80099a4:	42a5      	cmp	r5, r4
 80099a6:	d10b      	bne.n	80099c0 <_free_r+0x70>
 80099a8:	6824      	ldr	r4, [r4, #0]
 80099aa:	4421      	add	r1, r4
 80099ac:	1854      	adds	r4, r2, r1
 80099ae:	42a3      	cmp	r3, r4
 80099b0:	6011      	str	r1, [r2, #0]
 80099b2:	d1e0      	bne.n	8009976 <_free_r+0x26>
 80099b4:	681c      	ldr	r4, [r3, #0]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	6053      	str	r3, [r2, #4]
 80099ba:	4421      	add	r1, r4
 80099bc:	6011      	str	r1, [r2, #0]
 80099be:	e7da      	b.n	8009976 <_free_r+0x26>
 80099c0:	d902      	bls.n	80099c8 <_free_r+0x78>
 80099c2:	230c      	movs	r3, #12
 80099c4:	6003      	str	r3, [r0, #0]
 80099c6:	e7d6      	b.n	8009976 <_free_r+0x26>
 80099c8:	6825      	ldr	r5, [r4, #0]
 80099ca:	1961      	adds	r1, r4, r5
 80099cc:	428b      	cmp	r3, r1
 80099ce:	bf04      	itt	eq
 80099d0:	6819      	ldreq	r1, [r3, #0]
 80099d2:	685b      	ldreq	r3, [r3, #4]
 80099d4:	6063      	str	r3, [r4, #4]
 80099d6:	bf04      	itt	eq
 80099d8:	1949      	addeq	r1, r1, r5
 80099da:	6021      	streq	r1, [r4, #0]
 80099dc:	6054      	str	r4, [r2, #4]
 80099de:	e7ca      	b.n	8009976 <_free_r+0x26>
 80099e0:	b003      	add	sp, #12
 80099e2:	bd30      	pop	{r4, r5, pc}
 80099e4:	200004e8 	.word	0x200004e8

080099e8 <sbrk_aligned>:
 80099e8:	b570      	push	{r4, r5, r6, lr}
 80099ea:	4e0e      	ldr	r6, [pc, #56]	; (8009a24 <sbrk_aligned+0x3c>)
 80099ec:	460c      	mov	r4, r1
 80099ee:	6831      	ldr	r1, [r6, #0]
 80099f0:	4605      	mov	r5, r0
 80099f2:	b911      	cbnz	r1, 80099fa <sbrk_aligned+0x12>
 80099f4:	f000 fb4c 	bl	800a090 <_sbrk_r>
 80099f8:	6030      	str	r0, [r6, #0]
 80099fa:	4621      	mov	r1, r4
 80099fc:	4628      	mov	r0, r5
 80099fe:	f000 fb47 	bl	800a090 <_sbrk_r>
 8009a02:	1c43      	adds	r3, r0, #1
 8009a04:	d00a      	beq.n	8009a1c <sbrk_aligned+0x34>
 8009a06:	1cc4      	adds	r4, r0, #3
 8009a08:	f024 0403 	bic.w	r4, r4, #3
 8009a0c:	42a0      	cmp	r0, r4
 8009a0e:	d007      	beq.n	8009a20 <sbrk_aligned+0x38>
 8009a10:	1a21      	subs	r1, r4, r0
 8009a12:	4628      	mov	r0, r5
 8009a14:	f000 fb3c 	bl	800a090 <_sbrk_r>
 8009a18:	3001      	adds	r0, #1
 8009a1a:	d101      	bne.n	8009a20 <sbrk_aligned+0x38>
 8009a1c:	f04f 34ff 	mov.w	r4, #4294967295
 8009a20:	4620      	mov	r0, r4
 8009a22:	bd70      	pop	{r4, r5, r6, pc}
 8009a24:	200004ec 	.word	0x200004ec

08009a28 <_malloc_r>:
 8009a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a2c:	1ccd      	adds	r5, r1, #3
 8009a2e:	f025 0503 	bic.w	r5, r5, #3
 8009a32:	3508      	adds	r5, #8
 8009a34:	2d0c      	cmp	r5, #12
 8009a36:	bf38      	it	cc
 8009a38:	250c      	movcc	r5, #12
 8009a3a:	2d00      	cmp	r5, #0
 8009a3c:	4607      	mov	r7, r0
 8009a3e:	db01      	blt.n	8009a44 <_malloc_r+0x1c>
 8009a40:	42a9      	cmp	r1, r5
 8009a42:	d905      	bls.n	8009a50 <_malloc_r+0x28>
 8009a44:	230c      	movs	r3, #12
 8009a46:	603b      	str	r3, [r7, #0]
 8009a48:	2600      	movs	r6, #0
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a50:	4e2e      	ldr	r6, [pc, #184]	; (8009b0c <_malloc_r+0xe4>)
 8009a52:	f000 fe51 	bl	800a6f8 <__malloc_lock>
 8009a56:	6833      	ldr	r3, [r6, #0]
 8009a58:	461c      	mov	r4, r3
 8009a5a:	bb34      	cbnz	r4, 8009aaa <_malloc_r+0x82>
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	4638      	mov	r0, r7
 8009a60:	f7ff ffc2 	bl	80099e8 <sbrk_aligned>
 8009a64:	1c43      	adds	r3, r0, #1
 8009a66:	4604      	mov	r4, r0
 8009a68:	d14d      	bne.n	8009b06 <_malloc_r+0xde>
 8009a6a:	6834      	ldr	r4, [r6, #0]
 8009a6c:	4626      	mov	r6, r4
 8009a6e:	2e00      	cmp	r6, #0
 8009a70:	d140      	bne.n	8009af4 <_malloc_r+0xcc>
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	4631      	mov	r1, r6
 8009a76:	4638      	mov	r0, r7
 8009a78:	eb04 0803 	add.w	r8, r4, r3
 8009a7c:	f000 fb08 	bl	800a090 <_sbrk_r>
 8009a80:	4580      	cmp	r8, r0
 8009a82:	d13a      	bne.n	8009afa <_malloc_r+0xd2>
 8009a84:	6821      	ldr	r1, [r4, #0]
 8009a86:	3503      	adds	r5, #3
 8009a88:	1a6d      	subs	r5, r5, r1
 8009a8a:	f025 0503 	bic.w	r5, r5, #3
 8009a8e:	3508      	adds	r5, #8
 8009a90:	2d0c      	cmp	r5, #12
 8009a92:	bf38      	it	cc
 8009a94:	250c      	movcc	r5, #12
 8009a96:	4629      	mov	r1, r5
 8009a98:	4638      	mov	r0, r7
 8009a9a:	f7ff ffa5 	bl	80099e8 <sbrk_aligned>
 8009a9e:	3001      	adds	r0, #1
 8009aa0:	d02b      	beq.n	8009afa <_malloc_r+0xd2>
 8009aa2:	6823      	ldr	r3, [r4, #0]
 8009aa4:	442b      	add	r3, r5
 8009aa6:	6023      	str	r3, [r4, #0]
 8009aa8:	e00e      	b.n	8009ac8 <_malloc_r+0xa0>
 8009aaa:	6822      	ldr	r2, [r4, #0]
 8009aac:	1b52      	subs	r2, r2, r5
 8009aae:	d41e      	bmi.n	8009aee <_malloc_r+0xc6>
 8009ab0:	2a0b      	cmp	r2, #11
 8009ab2:	d916      	bls.n	8009ae2 <_malloc_r+0xba>
 8009ab4:	1961      	adds	r1, r4, r5
 8009ab6:	42a3      	cmp	r3, r4
 8009ab8:	6025      	str	r5, [r4, #0]
 8009aba:	bf18      	it	ne
 8009abc:	6059      	strne	r1, [r3, #4]
 8009abe:	6863      	ldr	r3, [r4, #4]
 8009ac0:	bf08      	it	eq
 8009ac2:	6031      	streq	r1, [r6, #0]
 8009ac4:	5162      	str	r2, [r4, r5]
 8009ac6:	604b      	str	r3, [r1, #4]
 8009ac8:	4638      	mov	r0, r7
 8009aca:	f104 060b 	add.w	r6, r4, #11
 8009ace:	f000 fe19 	bl	800a704 <__malloc_unlock>
 8009ad2:	f026 0607 	bic.w	r6, r6, #7
 8009ad6:	1d23      	adds	r3, r4, #4
 8009ad8:	1af2      	subs	r2, r6, r3
 8009ada:	d0b6      	beq.n	8009a4a <_malloc_r+0x22>
 8009adc:	1b9b      	subs	r3, r3, r6
 8009ade:	50a3      	str	r3, [r4, r2]
 8009ae0:	e7b3      	b.n	8009a4a <_malloc_r+0x22>
 8009ae2:	6862      	ldr	r2, [r4, #4]
 8009ae4:	42a3      	cmp	r3, r4
 8009ae6:	bf0c      	ite	eq
 8009ae8:	6032      	streq	r2, [r6, #0]
 8009aea:	605a      	strne	r2, [r3, #4]
 8009aec:	e7ec      	b.n	8009ac8 <_malloc_r+0xa0>
 8009aee:	4623      	mov	r3, r4
 8009af0:	6864      	ldr	r4, [r4, #4]
 8009af2:	e7b2      	b.n	8009a5a <_malloc_r+0x32>
 8009af4:	4634      	mov	r4, r6
 8009af6:	6876      	ldr	r6, [r6, #4]
 8009af8:	e7b9      	b.n	8009a6e <_malloc_r+0x46>
 8009afa:	230c      	movs	r3, #12
 8009afc:	603b      	str	r3, [r7, #0]
 8009afe:	4638      	mov	r0, r7
 8009b00:	f000 fe00 	bl	800a704 <__malloc_unlock>
 8009b04:	e7a1      	b.n	8009a4a <_malloc_r+0x22>
 8009b06:	6025      	str	r5, [r4, #0]
 8009b08:	e7de      	b.n	8009ac8 <_malloc_r+0xa0>
 8009b0a:	bf00      	nop
 8009b0c:	200004e8 	.word	0x200004e8

08009b10 <__ssputs_r>:
 8009b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b14:	688e      	ldr	r6, [r1, #8]
 8009b16:	429e      	cmp	r6, r3
 8009b18:	4682      	mov	sl, r0
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	4690      	mov	r8, r2
 8009b1e:	461f      	mov	r7, r3
 8009b20:	d838      	bhi.n	8009b94 <__ssputs_r+0x84>
 8009b22:	898a      	ldrh	r2, [r1, #12]
 8009b24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b28:	d032      	beq.n	8009b90 <__ssputs_r+0x80>
 8009b2a:	6825      	ldr	r5, [r4, #0]
 8009b2c:	6909      	ldr	r1, [r1, #16]
 8009b2e:	eba5 0901 	sub.w	r9, r5, r1
 8009b32:	6965      	ldr	r5, [r4, #20]
 8009b34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	444b      	add	r3, r9
 8009b40:	106d      	asrs	r5, r5, #1
 8009b42:	429d      	cmp	r5, r3
 8009b44:	bf38      	it	cc
 8009b46:	461d      	movcc	r5, r3
 8009b48:	0553      	lsls	r3, r2, #21
 8009b4a:	d531      	bpl.n	8009bb0 <__ssputs_r+0xa0>
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	f7ff ff6b 	bl	8009a28 <_malloc_r>
 8009b52:	4606      	mov	r6, r0
 8009b54:	b950      	cbnz	r0, 8009b6c <__ssputs_r+0x5c>
 8009b56:	230c      	movs	r3, #12
 8009b58:	f8ca 3000 	str.w	r3, [sl]
 8009b5c:	89a3      	ldrh	r3, [r4, #12]
 8009b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b62:	81a3      	strh	r3, [r4, #12]
 8009b64:	f04f 30ff 	mov.w	r0, #4294967295
 8009b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b6c:	6921      	ldr	r1, [r4, #16]
 8009b6e:	464a      	mov	r2, r9
 8009b70:	f7ff fa08 	bl	8008f84 <memcpy>
 8009b74:	89a3      	ldrh	r3, [r4, #12]
 8009b76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b7e:	81a3      	strh	r3, [r4, #12]
 8009b80:	6126      	str	r6, [r4, #16]
 8009b82:	6165      	str	r5, [r4, #20]
 8009b84:	444e      	add	r6, r9
 8009b86:	eba5 0509 	sub.w	r5, r5, r9
 8009b8a:	6026      	str	r6, [r4, #0]
 8009b8c:	60a5      	str	r5, [r4, #8]
 8009b8e:	463e      	mov	r6, r7
 8009b90:	42be      	cmp	r6, r7
 8009b92:	d900      	bls.n	8009b96 <__ssputs_r+0x86>
 8009b94:	463e      	mov	r6, r7
 8009b96:	6820      	ldr	r0, [r4, #0]
 8009b98:	4632      	mov	r2, r6
 8009b9a:	4641      	mov	r1, r8
 8009b9c:	f000 fd92 	bl	800a6c4 <memmove>
 8009ba0:	68a3      	ldr	r3, [r4, #8]
 8009ba2:	1b9b      	subs	r3, r3, r6
 8009ba4:	60a3      	str	r3, [r4, #8]
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	4433      	add	r3, r6
 8009baa:	6023      	str	r3, [r4, #0]
 8009bac:	2000      	movs	r0, #0
 8009bae:	e7db      	b.n	8009b68 <__ssputs_r+0x58>
 8009bb0:	462a      	mov	r2, r5
 8009bb2:	f000 fdad 	bl	800a710 <_realloc_r>
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d1e1      	bne.n	8009b80 <__ssputs_r+0x70>
 8009bbc:	6921      	ldr	r1, [r4, #16]
 8009bbe:	4650      	mov	r0, sl
 8009bc0:	f7ff fec6 	bl	8009950 <_free_r>
 8009bc4:	e7c7      	b.n	8009b56 <__ssputs_r+0x46>
	...

08009bc8 <_svfiprintf_r>:
 8009bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bcc:	4698      	mov	r8, r3
 8009bce:	898b      	ldrh	r3, [r1, #12]
 8009bd0:	061b      	lsls	r3, r3, #24
 8009bd2:	b09d      	sub	sp, #116	; 0x74
 8009bd4:	4607      	mov	r7, r0
 8009bd6:	460d      	mov	r5, r1
 8009bd8:	4614      	mov	r4, r2
 8009bda:	d50e      	bpl.n	8009bfa <_svfiprintf_r+0x32>
 8009bdc:	690b      	ldr	r3, [r1, #16]
 8009bde:	b963      	cbnz	r3, 8009bfa <_svfiprintf_r+0x32>
 8009be0:	2140      	movs	r1, #64	; 0x40
 8009be2:	f7ff ff21 	bl	8009a28 <_malloc_r>
 8009be6:	6028      	str	r0, [r5, #0]
 8009be8:	6128      	str	r0, [r5, #16]
 8009bea:	b920      	cbnz	r0, 8009bf6 <_svfiprintf_r+0x2e>
 8009bec:	230c      	movs	r3, #12
 8009bee:	603b      	str	r3, [r7, #0]
 8009bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf4:	e0d1      	b.n	8009d9a <_svfiprintf_r+0x1d2>
 8009bf6:	2340      	movs	r3, #64	; 0x40
 8009bf8:	616b      	str	r3, [r5, #20]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8009bfe:	2320      	movs	r3, #32
 8009c00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c04:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c08:	2330      	movs	r3, #48	; 0x30
 8009c0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009db4 <_svfiprintf_r+0x1ec>
 8009c0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c12:	f04f 0901 	mov.w	r9, #1
 8009c16:	4623      	mov	r3, r4
 8009c18:	469a      	mov	sl, r3
 8009c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c1e:	b10a      	cbz	r2, 8009c24 <_svfiprintf_r+0x5c>
 8009c20:	2a25      	cmp	r2, #37	; 0x25
 8009c22:	d1f9      	bne.n	8009c18 <_svfiprintf_r+0x50>
 8009c24:	ebba 0b04 	subs.w	fp, sl, r4
 8009c28:	d00b      	beq.n	8009c42 <_svfiprintf_r+0x7a>
 8009c2a:	465b      	mov	r3, fp
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	4629      	mov	r1, r5
 8009c30:	4638      	mov	r0, r7
 8009c32:	f7ff ff6d 	bl	8009b10 <__ssputs_r>
 8009c36:	3001      	adds	r0, #1
 8009c38:	f000 80aa 	beq.w	8009d90 <_svfiprintf_r+0x1c8>
 8009c3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c3e:	445a      	add	r2, fp
 8009c40:	9209      	str	r2, [sp, #36]	; 0x24
 8009c42:	f89a 3000 	ldrb.w	r3, [sl]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f000 80a2 	beq.w	8009d90 <_svfiprintf_r+0x1c8>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c56:	f10a 0a01 	add.w	sl, sl, #1
 8009c5a:	9304      	str	r3, [sp, #16]
 8009c5c:	9307      	str	r3, [sp, #28]
 8009c5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c62:	931a      	str	r3, [sp, #104]	; 0x68
 8009c64:	4654      	mov	r4, sl
 8009c66:	2205      	movs	r2, #5
 8009c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c6c:	4851      	ldr	r0, [pc, #324]	; (8009db4 <_svfiprintf_r+0x1ec>)
 8009c6e:	f7f6 fae7 	bl	8000240 <memchr>
 8009c72:	9a04      	ldr	r2, [sp, #16]
 8009c74:	b9d8      	cbnz	r0, 8009cae <_svfiprintf_r+0xe6>
 8009c76:	06d0      	lsls	r0, r2, #27
 8009c78:	bf44      	itt	mi
 8009c7a:	2320      	movmi	r3, #32
 8009c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c80:	0711      	lsls	r1, r2, #28
 8009c82:	bf44      	itt	mi
 8009c84:	232b      	movmi	r3, #43	; 0x2b
 8009c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8009c90:	d015      	beq.n	8009cbe <_svfiprintf_r+0xf6>
 8009c92:	9a07      	ldr	r2, [sp, #28]
 8009c94:	4654      	mov	r4, sl
 8009c96:	2000      	movs	r0, #0
 8009c98:	f04f 0c0a 	mov.w	ip, #10
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ca2:	3b30      	subs	r3, #48	; 0x30
 8009ca4:	2b09      	cmp	r3, #9
 8009ca6:	d94e      	bls.n	8009d46 <_svfiprintf_r+0x17e>
 8009ca8:	b1b0      	cbz	r0, 8009cd8 <_svfiprintf_r+0x110>
 8009caa:	9207      	str	r2, [sp, #28]
 8009cac:	e014      	b.n	8009cd8 <_svfiprintf_r+0x110>
 8009cae:	eba0 0308 	sub.w	r3, r0, r8
 8009cb2:	fa09 f303 	lsl.w	r3, r9, r3
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	9304      	str	r3, [sp, #16]
 8009cba:	46a2      	mov	sl, r4
 8009cbc:	e7d2      	b.n	8009c64 <_svfiprintf_r+0x9c>
 8009cbe:	9b03      	ldr	r3, [sp, #12]
 8009cc0:	1d19      	adds	r1, r3, #4
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	9103      	str	r1, [sp, #12]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	bfbb      	ittet	lt
 8009cca:	425b      	neglt	r3, r3
 8009ccc:	f042 0202 	orrlt.w	r2, r2, #2
 8009cd0:	9307      	strge	r3, [sp, #28]
 8009cd2:	9307      	strlt	r3, [sp, #28]
 8009cd4:	bfb8      	it	lt
 8009cd6:	9204      	strlt	r2, [sp, #16]
 8009cd8:	7823      	ldrb	r3, [r4, #0]
 8009cda:	2b2e      	cmp	r3, #46	; 0x2e
 8009cdc:	d10c      	bne.n	8009cf8 <_svfiprintf_r+0x130>
 8009cde:	7863      	ldrb	r3, [r4, #1]
 8009ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ce2:	d135      	bne.n	8009d50 <_svfiprintf_r+0x188>
 8009ce4:	9b03      	ldr	r3, [sp, #12]
 8009ce6:	1d1a      	adds	r2, r3, #4
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	9203      	str	r2, [sp, #12]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	bfb8      	it	lt
 8009cf0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cf4:	3402      	adds	r4, #2
 8009cf6:	9305      	str	r3, [sp, #20]
 8009cf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009dc4 <_svfiprintf_r+0x1fc>
 8009cfc:	7821      	ldrb	r1, [r4, #0]
 8009cfe:	2203      	movs	r2, #3
 8009d00:	4650      	mov	r0, sl
 8009d02:	f7f6 fa9d 	bl	8000240 <memchr>
 8009d06:	b140      	cbz	r0, 8009d1a <_svfiprintf_r+0x152>
 8009d08:	2340      	movs	r3, #64	; 0x40
 8009d0a:	eba0 000a 	sub.w	r0, r0, sl
 8009d0e:	fa03 f000 	lsl.w	r0, r3, r0
 8009d12:	9b04      	ldr	r3, [sp, #16]
 8009d14:	4303      	orrs	r3, r0
 8009d16:	3401      	adds	r4, #1
 8009d18:	9304      	str	r3, [sp, #16]
 8009d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d1e:	4826      	ldr	r0, [pc, #152]	; (8009db8 <_svfiprintf_r+0x1f0>)
 8009d20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d24:	2206      	movs	r2, #6
 8009d26:	f7f6 fa8b 	bl	8000240 <memchr>
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	d038      	beq.n	8009da0 <_svfiprintf_r+0x1d8>
 8009d2e:	4b23      	ldr	r3, [pc, #140]	; (8009dbc <_svfiprintf_r+0x1f4>)
 8009d30:	bb1b      	cbnz	r3, 8009d7a <_svfiprintf_r+0x1b2>
 8009d32:	9b03      	ldr	r3, [sp, #12]
 8009d34:	3307      	adds	r3, #7
 8009d36:	f023 0307 	bic.w	r3, r3, #7
 8009d3a:	3308      	adds	r3, #8
 8009d3c:	9303      	str	r3, [sp, #12]
 8009d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d40:	4433      	add	r3, r6
 8009d42:	9309      	str	r3, [sp, #36]	; 0x24
 8009d44:	e767      	b.n	8009c16 <_svfiprintf_r+0x4e>
 8009d46:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d4a:	460c      	mov	r4, r1
 8009d4c:	2001      	movs	r0, #1
 8009d4e:	e7a5      	b.n	8009c9c <_svfiprintf_r+0xd4>
 8009d50:	2300      	movs	r3, #0
 8009d52:	3401      	adds	r4, #1
 8009d54:	9305      	str	r3, [sp, #20]
 8009d56:	4619      	mov	r1, r3
 8009d58:	f04f 0c0a 	mov.w	ip, #10
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d62:	3a30      	subs	r2, #48	; 0x30
 8009d64:	2a09      	cmp	r2, #9
 8009d66:	d903      	bls.n	8009d70 <_svfiprintf_r+0x1a8>
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d0c5      	beq.n	8009cf8 <_svfiprintf_r+0x130>
 8009d6c:	9105      	str	r1, [sp, #20]
 8009d6e:	e7c3      	b.n	8009cf8 <_svfiprintf_r+0x130>
 8009d70:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d74:	4604      	mov	r4, r0
 8009d76:	2301      	movs	r3, #1
 8009d78:	e7f0      	b.n	8009d5c <_svfiprintf_r+0x194>
 8009d7a:	ab03      	add	r3, sp, #12
 8009d7c:	9300      	str	r3, [sp, #0]
 8009d7e:	462a      	mov	r2, r5
 8009d80:	4b0f      	ldr	r3, [pc, #60]	; (8009dc0 <_svfiprintf_r+0x1f8>)
 8009d82:	a904      	add	r1, sp, #16
 8009d84:	4638      	mov	r0, r7
 8009d86:	f7fc fc4f 	bl	8006628 <_printf_float>
 8009d8a:	1c42      	adds	r2, r0, #1
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	d1d6      	bne.n	8009d3e <_svfiprintf_r+0x176>
 8009d90:	89ab      	ldrh	r3, [r5, #12]
 8009d92:	065b      	lsls	r3, r3, #25
 8009d94:	f53f af2c 	bmi.w	8009bf0 <_svfiprintf_r+0x28>
 8009d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d9a:	b01d      	add	sp, #116	; 0x74
 8009d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da0:	ab03      	add	r3, sp, #12
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	462a      	mov	r2, r5
 8009da6:	4b06      	ldr	r3, [pc, #24]	; (8009dc0 <_svfiprintf_r+0x1f8>)
 8009da8:	a904      	add	r1, sp, #16
 8009daa:	4638      	mov	r0, r7
 8009dac:	f7fc fee0 	bl	8006b70 <_printf_i>
 8009db0:	e7eb      	b.n	8009d8a <_svfiprintf_r+0x1c2>
 8009db2:	bf00      	nop
 8009db4:	0800af4c 	.word	0x0800af4c
 8009db8:	0800af56 	.word	0x0800af56
 8009dbc:	08006629 	.word	0x08006629
 8009dc0:	08009b11 	.word	0x08009b11
 8009dc4:	0800af52 	.word	0x0800af52

08009dc8 <__sfputc_r>:
 8009dc8:	6893      	ldr	r3, [r2, #8]
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	b410      	push	{r4}
 8009dd0:	6093      	str	r3, [r2, #8]
 8009dd2:	da08      	bge.n	8009de6 <__sfputc_r+0x1e>
 8009dd4:	6994      	ldr	r4, [r2, #24]
 8009dd6:	42a3      	cmp	r3, r4
 8009dd8:	db01      	blt.n	8009dde <__sfputc_r+0x16>
 8009dda:	290a      	cmp	r1, #10
 8009ddc:	d103      	bne.n	8009de6 <__sfputc_r+0x1e>
 8009dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009de2:	f000 b979 	b.w	800a0d8 <__swbuf_r>
 8009de6:	6813      	ldr	r3, [r2, #0]
 8009de8:	1c58      	adds	r0, r3, #1
 8009dea:	6010      	str	r0, [r2, #0]
 8009dec:	7019      	strb	r1, [r3, #0]
 8009dee:	4608      	mov	r0, r1
 8009df0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <__sfputs_r>:
 8009df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df8:	4606      	mov	r6, r0
 8009dfa:	460f      	mov	r7, r1
 8009dfc:	4614      	mov	r4, r2
 8009dfe:	18d5      	adds	r5, r2, r3
 8009e00:	42ac      	cmp	r4, r5
 8009e02:	d101      	bne.n	8009e08 <__sfputs_r+0x12>
 8009e04:	2000      	movs	r0, #0
 8009e06:	e007      	b.n	8009e18 <__sfputs_r+0x22>
 8009e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e0c:	463a      	mov	r2, r7
 8009e0e:	4630      	mov	r0, r6
 8009e10:	f7ff ffda 	bl	8009dc8 <__sfputc_r>
 8009e14:	1c43      	adds	r3, r0, #1
 8009e16:	d1f3      	bne.n	8009e00 <__sfputs_r+0xa>
 8009e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e1c <_vfiprintf_r>:
 8009e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e20:	460d      	mov	r5, r1
 8009e22:	b09d      	sub	sp, #116	; 0x74
 8009e24:	4614      	mov	r4, r2
 8009e26:	4698      	mov	r8, r3
 8009e28:	4606      	mov	r6, r0
 8009e2a:	b118      	cbz	r0, 8009e34 <_vfiprintf_r+0x18>
 8009e2c:	6983      	ldr	r3, [r0, #24]
 8009e2e:	b90b      	cbnz	r3, 8009e34 <_vfiprintf_r+0x18>
 8009e30:	f000 fb42 	bl	800a4b8 <__sinit>
 8009e34:	4b89      	ldr	r3, [pc, #548]	; (800a05c <_vfiprintf_r+0x240>)
 8009e36:	429d      	cmp	r5, r3
 8009e38:	d11b      	bne.n	8009e72 <_vfiprintf_r+0x56>
 8009e3a:	6875      	ldr	r5, [r6, #4]
 8009e3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e3e:	07d9      	lsls	r1, r3, #31
 8009e40:	d405      	bmi.n	8009e4e <_vfiprintf_r+0x32>
 8009e42:	89ab      	ldrh	r3, [r5, #12]
 8009e44:	059a      	lsls	r2, r3, #22
 8009e46:	d402      	bmi.n	8009e4e <_vfiprintf_r+0x32>
 8009e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e4a:	f000 fbd3 	bl	800a5f4 <__retarget_lock_acquire_recursive>
 8009e4e:	89ab      	ldrh	r3, [r5, #12]
 8009e50:	071b      	lsls	r3, r3, #28
 8009e52:	d501      	bpl.n	8009e58 <_vfiprintf_r+0x3c>
 8009e54:	692b      	ldr	r3, [r5, #16]
 8009e56:	b9eb      	cbnz	r3, 8009e94 <_vfiprintf_r+0x78>
 8009e58:	4629      	mov	r1, r5
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	f000 f99c 	bl	800a198 <__swsetup_r>
 8009e60:	b1c0      	cbz	r0, 8009e94 <_vfiprintf_r+0x78>
 8009e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e64:	07dc      	lsls	r4, r3, #31
 8009e66:	d50e      	bpl.n	8009e86 <_vfiprintf_r+0x6a>
 8009e68:	f04f 30ff 	mov.w	r0, #4294967295
 8009e6c:	b01d      	add	sp, #116	; 0x74
 8009e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e72:	4b7b      	ldr	r3, [pc, #492]	; (800a060 <_vfiprintf_r+0x244>)
 8009e74:	429d      	cmp	r5, r3
 8009e76:	d101      	bne.n	8009e7c <_vfiprintf_r+0x60>
 8009e78:	68b5      	ldr	r5, [r6, #8]
 8009e7a:	e7df      	b.n	8009e3c <_vfiprintf_r+0x20>
 8009e7c:	4b79      	ldr	r3, [pc, #484]	; (800a064 <_vfiprintf_r+0x248>)
 8009e7e:	429d      	cmp	r5, r3
 8009e80:	bf08      	it	eq
 8009e82:	68f5      	ldreq	r5, [r6, #12]
 8009e84:	e7da      	b.n	8009e3c <_vfiprintf_r+0x20>
 8009e86:	89ab      	ldrh	r3, [r5, #12]
 8009e88:	0598      	lsls	r0, r3, #22
 8009e8a:	d4ed      	bmi.n	8009e68 <_vfiprintf_r+0x4c>
 8009e8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e8e:	f000 fbb2 	bl	800a5f6 <__retarget_lock_release_recursive>
 8009e92:	e7e9      	b.n	8009e68 <_vfiprintf_r+0x4c>
 8009e94:	2300      	movs	r3, #0
 8009e96:	9309      	str	r3, [sp, #36]	; 0x24
 8009e98:	2320      	movs	r3, #32
 8009e9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ea2:	2330      	movs	r3, #48	; 0x30
 8009ea4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a068 <_vfiprintf_r+0x24c>
 8009ea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009eac:	f04f 0901 	mov.w	r9, #1
 8009eb0:	4623      	mov	r3, r4
 8009eb2:	469a      	mov	sl, r3
 8009eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eb8:	b10a      	cbz	r2, 8009ebe <_vfiprintf_r+0xa2>
 8009eba:	2a25      	cmp	r2, #37	; 0x25
 8009ebc:	d1f9      	bne.n	8009eb2 <_vfiprintf_r+0x96>
 8009ebe:	ebba 0b04 	subs.w	fp, sl, r4
 8009ec2:	d00b      	beq.n	8009edc <_vfiprintf_r+0xc0>
 8009ec4:	465b      	mov	r3, fp
 8009ec6:	4622      	mov	r2, r4
 8009ec8:	4629      	mov	r1, r5
 8009eca:	4630      	mov	r0, r6
 8009ecc:	f7ff ff93 	bl	8009df6 <__sfputs_r>
 8009ed0:	3001      	adds	r0, #1
 8009ed2:	f000 80aa 	beq.w	800a02a <_vfiprintf_r+0x20e>
 8009ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ed8:	445a      	add	r2, fp
 8009eda:	9209      	str	r2, [sp, #36]	; 0x24
 8009edc:	f89a 3000 	ldrb.w	r3, [sl]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	f000 80a2 	beq.w	800a02a <_vfiprintf_r+0x20e>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8009eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ef0:	f10a 0a01 	add.w	sl, sl, #1
 8009ef4:	9304      	str	r3, [sp, #16]
 8009ef6:	9307      	str	r3, [sp, #28]
 8009ef8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009efc:	931a      	str	r3, [sp, #104]	; 0x68
 8009efe:	4654      	mov	r4, sl
 8009f00:	2205      	movs	r2, #5
 8009f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f06:	4858      	ldr	r0, [pc, #352]	; (800a068 <_vfiprintf_r+0x24c>)
 8009f08:	f7f6 f99a 	bl	8000240 <memchr>
 8009f0c:	9a04      	ldr	r2, [sp, #16]
 8009f0e:	b9d8      	cbnz	r0, 8009f48 <_vfiprintf_r+0x12c>
 8009f10:	06d1      	lsls	r1, r2, #27
 8009f12:	bf44      	itt	mi
 8009f14:	2320      	movmi	r3, #32
 8009f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f1a:	0713      	lsls	r3, r2, #28
 8009f1c:	bf44      	itt	mi
 8009f1e:	232b      	movmi	r3, #43	; 0x2b
 8009f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f24:	f89a 3000 	ldrb.w	r3, [sl]
 8009f28:	2b2a      	cmp	r3, #42	; 0x2a
 8009f2a:	d015      	beq.n	8009f58 <_vfiprintf_r+0x13c>
 8009f2c:	9a07      	ldr	r2, [sp, #28]
 8009f2e:	4654      	mov	r4, sl
 8009f30:	2000      	movs	r0, #0
 8009f32:	f04f 0c0a 	mov.w	ip, #10
 8009f36:	4621      	mov	r1, r4
 8009f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f3c:	3b30      	subs	r3, #48	; 0x30
 8009f3e:	2b09      	cmp	r3, #9
 8009f40:	d94e      	bls.n	8009fe0 <_vfiprintf_r+0x1c4>
 8009f42:	b1b0      	cbz	r0, 8009f72 <_vfiprintf_r+0x156>
 8009f44:	9207      	str	r2, [sp, #28]
 8009f46:	e014      	b.n	8009f72 <_vfiprintf_r+0x156>
 8009f48:	eba0 0308 	sub.w	r3, r0, r8
 8009f4c:	fa09 f303 	lsl.w	r3, r9, r3
 8009f50:	4313      	orrs	r3, r2
 8009f52:	9304      	str	r3, [sp, #16]
 8009f54:	46a2      	mov	sl, r4
 8009f56:	e7d2      	b.n	8009efe <_vfiprintf_r+0xe2>
 8009f58:	9b03      	ldr	r3, [sp, #12]
 8009f5a:	1d19      	adds	r1, r3, #4
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	9103      	str	r1, [sp, #12]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	bfbb      	ittet	lt
 8009f64:	425b      	neglt	r3, r3
 8009f66:	f042 0202 	orrlt.w	r2, r2, #2
 8009f6a:	9307      	strge	r3, [sp, #28]
 8009f6c:	9307      	strlt	r3, [sp, #28]
 8009f6e:	bfb8      	it	lt
 8009f70:	9204      	strlt	r2, [sp, #16]
 8009f72:	7823      	ldrb	r3, [r4, #0]
 8009f74:	2b2e      	cmp	r3, #46	; 0x2e
 8009f76:	d10c      	bne.n	8009f92 <_vfiprintf_r+0x176>
 8009f78:	7863      	ldrb	r3, [r4, #1]
 8009f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f7c:	d135      	bne.n	8009fea <_vfiprintf_r+0x1ce>
 8009f7e:	9b03      	ldr	r3, [sp, #12]
 8009f80:	1d1a      	adds	r2, r3, #4
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	9203      	str	r2, [sp, #12]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	bfb8      	it	lt
 8009f8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f8e:	3402      	adds	r4, #2
 8009f90:	9305      	str	r3, [sp, #20]
 8009f92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a078 <_vfiprintf_r+0x25c>
 8009f96:	7821      	ldrb	r1, [r4, #0]
 8009f98:	2203      	movs	r2, #3
 8009f9a:	4650      	mov	r0, sl
 8009f9c:	f7f6 f950 	bl	8000240 <memchr>
 8009fa0:	b140      	cbz	r0, 8009fb4 <_vfiprintf_r+0x198>
 8009fa2:	2340      	movs	r3, #64	; 0x40
 8009fa4:	eba0 000a 	sub.w	r0, r0, sl
 8009fa8:	fa03 f000 	lsl.w	r0, r3, r0
 8009fac:	9b04      	ldr	r3, [sp, #16]
 8009fae:	4303      	orrs	r3, r0
 8009fb0:	3401      	adds	r4, #1
 8009fb2:	9304      	str	r3, [sp, #16]
 8009fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fb8:	482c      	ldr	r0, [pc, #176]	; (800a06c <_vfiprintf_r+0x250>)
 8009fba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fbe:	2206      	movs	r2, #6
 8009fc0:	f7f6 f93e 	bl	8000240 <memchr>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d03f      	beq.n	800a048 <_vfiprintf_r+0x22c>
 8009fc8:	4b29      	ldr	r3, [pc, #164]	; (800a070 <_vfiprintf_r+0x254>)
 8009fca:	bb1b      	cbnz	r3, 800a014 <_vfiprintf_r+0x1f8>
 8009fcc:	9b03      	ldr	r3, [sp, #12]
 8009fce:	3307      	adds	r3, #7
 8009fd0:	f023 0307 	bic.w	r3, r3, #7
 8009fd4:	3308      	adds	r3, #8
 8009fd6:	9303      	str	r3, [sp, #12]
 8009fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fda:	443b      	add	r3, r7
 8009fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8009fde:	e767      	b.n	8009eb0 <_vfiprintf_r+0x94>
 8009fe0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	2001      	movs	r0, #1
 8009fe8:	e7a5      	b.n	8009f36 <_vfiprintf_r+0x11a>
 8009fea:	2300      	movs	r3, #0
 8009fec:	3401      	adds	r4, #1
 8009fee:	9305      	str	r3, [sp, #20]
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	f04f 0c0a 	mov.w	ip, #10
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ffc:	3a30      	subs	r2, #48	; 0x30
 8009ffe:	2a09      	cmp	r2, #9
 800a000:	d903      	bls.n	800a00a <_vfiprintf_r+0x1ee>
 800a002:	2b00      	cmp	r3, #0
 800a004:	d0c5      	beq.n	8009f92 <_vfiprintf_r+0x176>
 800a006:	9105      	str	r1, [sp, #20]
 800a008:	e7c3      	b.n	8009f92 <_vfiprintf_r+0x176>
 800a00a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a00e:	4604      	mov	r4, r0
 800a010:	2301      	movs	r3, #1
 800a012:	e7f0      	b.n	8009ff6 <_vfiprintf_r+0x1da>
 800a014:	ab03      	add	r3, sp, #12
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	462a      	mov	r2, r5
 800a01a:	4b16      	ldr	r3, [pc, #88]	; (800a074 <_vfiprintf_r+0x258>)
 800a01c:	a904      	add	r1, sp, #16
 800a01e:	4630      	mov	r0, r6
 800a020:	f7fc fb02 	bl	8006628 <_printf_float>
 800a024:	4607      	mov	r7, r0
 800a026:	1c78      	adds	r0, r7, #1
 800a028:	d1d6      	bne.n	8009fd8 <_vfiprintf_r+0x1bc>
 800a02a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a02c:	07d9      	lsls	r1, r3, #31
 800a02e:	d405      	bmi.n	800a03c <_vfiprintf_r+0x220>
 800a030:	89ab      	ldrh	r3, [r5, #12]
 800a032:	059a      	lsls	r2, r3, #22
 800a034:	d402      	bmi.n	800a03c <_vfiprintf_r+0x220>
 800a036:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a038:	f000 fadd 	bl	800a5f6 <__retarget_lock_release_recursive>
 800a03c:	89ab      	ldrh	r3, [r5, #12]
 800a03e:	065b      	lsls	r3, r3, #25
 800a040:	f53f af12 	bmi.w	8009e68 <_vfiprintf_r+0x4c>
 800a044:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a046:	e711      	b.n	8009e6c <_vfiprintf_r+0x50>
 800a048:	ab03      	add	r3, sp, #12
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	462a      	mov	r2, r5
 800a04e:	4b09      	ldr	r3, [pc, #36]	; (800a074 <_vfiprintf_r+0x258>)
 800a050:	a904      	add	r1, sp, #16
 800a052:	4630      	mov	r0, r6
 800a054:	f7fc fd8c 	bl	8006b70 <_printf_i>
 800a058:	e7e4      	b.n	800a024 <_vfiprintf_r+0x208>
 800a05a:	bf00      	nop
 800a05c:	0800b080 	.word	0x0800b080
 800a060:	0800b0a0 	.word	0x0800b0a0
 800a064:	0800b060 	.word	0x0800b060
 800a068:	0800af4c 	.word	0x0800af4c
 800a06c:	0800af56 	.word	0x0800af56
 800a070:	08006629 	.word	0x08006629
 800a074:	08009df7 	.word	0x08009df7
 800a078:	0800af52 	.word	0x0800af52
 800a07c:	00000000 	.word	0x00000000

0800a080 <nan>:
 800a080:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a088 <nan+0x8>
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	00000000 	.word	0x00000000
 800a08c:	7ff80000 	.word	0x7ff80000

0800a090 <_sbrk_r>:
 800a090:	b538      	push	{r3, r4, r5, lr}
 800a092:	4d06      	ldr	r5, [pc, #24]	; (800a0ac <_sbrk_r+0x1c>)
 800a094:	2300      	movs	r3, #0
 800a096:	4604      	mov	r4, r0
 800a098:	4608      	mov	r0, r1
 800a09a:	602b      	str	r3, [r5, #0]
 800a09c:	f7f9 f806 	bl	80030ac <_sbrk>
 800a0a0:	1c43      	adds	r3, r0, #1
 800a0a2:	d102      	bne.n	800a0aa <_sbrk_r+0x1a>
 800a0a4:	682b      	ldr	r3, [r5, #0]
 800a0a6:	b103      	cbz	r3, 800a0aa <_sbrk_r+0x1a>
 800a0a8:	6023      	str	r3, [r4, #0]
 800a0aa:	bd38      	pop	{r3, r4, r5, pc}
 800a0ac:	200004f4 	.word	0x200004f4

0800a0b0 <strncmp>:
 800a0b0:	b510      	push	{r4, lr}
 800a0b2:	b17a      	cbz	r2, 800a0d4 <strncmp+0x24>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	3901      	subs	r1, #1
 800a0b8:	1884      	adds	r4, r0, r2
 800a0ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a0be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a0c2:	4290      	cmp	r0, r2
 800a0c4:	d101      	bne.n	800a0ca <strncmp+0x1a>
 800a0c6:	42a3      	cmp	r3, r4
 800a0c8:	d101      	bne.n	800a0ce <strncmp+0x1e>
 800a0ca:	1a80      	subs	r0, r0, r2
 800a0cc:	bd10      	pop	{r4, pc}
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d1f3      	bne.n	800a0ba <strncmp+0xa>
 800a0d2:	e7fa      	b.n	800a0ca <strncmp+0x1a>
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	e7f9      	b.n	800a0cc <strncmp+0x1c>

0800a0d8 <__swbuf_r>:
 800a0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0da:	460e      	mov	r6, r1
 800a0dc:	4614      	mov	r4, r2
 800a0de:	4605      	mov	r5, r0
 800a0e0:	b118      	cbz	r0, 800a0ea <__swbuf_r+0x12>
 800a0e2:	6983      	ldr	r3, [r0, #24]
 800a0e4:	b90b      	cbnz	r3, 800a0ea <__swbuf_r+0x12>
 800a0e6:	f000 f9e7 	bl	800a4b8 <__sinit>
 800a0ea:	4b21      	ldr	r3, [pc, #132]	; (800a170 <__swbuf_r+0x98>)
 800a0ec:	429c      	cmp	r4, r3
 800a0ee:	d12b      	bne.n	800a148 <__swbuf_r+0x70>
 800a0f0:	686c      	ldr	r4, [r5, #4]
 800a0f2:	69a3      	ldr	r3, [r4, #24]
 800a0f4:	60a3      	str	r3, [r4, #8]
 800a0f6:	89a3      	ldrh	r3, [r4, #12]
 800a0f8:	071a      	lsls	r2, r3, #28
 800a0fa:	d52f      	bpl.n	800a15c <__swbuf_r+0x84>
 800a0fc:	6923      	ldr	r3, [r4, #16]
 800a0fe:	b36b      	cbz	r3, 800a15c <__swbuf_r+0x84>
 800a100:	6923      	ldr	r3, [r4, #16]
 800a102:	6820      	ldr	r0, [r4, #0]
 800a104:	1ac0      	subs	r0, r0, r3
 800a106:	6963      	ldr	r3, [r4, #20]
 800a108:	b2f6      	uxtb	r6, r6
 800a10a:	4283      	cmp	r3, r0
 800a10c:	4637      	mov	r7, r6
 800a10e:	dc04      	bgt.n	800a11a <__swbuf_r+0x42>
 800a110:	4621      	mov	r1, r4
 800a112:	4628      	mov	r0, r5
 800a114:	f000 f93c 	bl	800a390 <_fflush_r>
 800a118:	bb30      	cbnz	r0, 800a168 <__swbuf_r+0x90>
 800a11a:	68a3      	ldr	r3, [r4, #8]
 800a11c:	3b01      	subs	r3, #1
 800a11e:	60a3      	str	r3, [r4, #8]
 800a120:	6823      	ldr	r3, [r4, #0]
 800a122:	1c5a      	adds	r2, r3, #1
 800a124:	6022      	str	r2, [r4, #0]
 800a126:	701e      	strb	r6, [r3, #0]
 800a128:	6963      	ldr	r3, [r4, #20]
 800a12a:	3001      	adds	r0, #1
 800a12c:	4283      	cmp	r3, r0
 800a12e:	d004      	beq.n	800a13a <__swbuf_r+0x62>
 800a130:	89a3      	ldrh	r3, [r4, #12]
 800a132:	07db      	lsls	r3, r3, #31
 800a134:	d506      	bpl.n	800a144 <__swbuf_r+0x6c>
 800a136:	2e0a      	cmp	r6, #10
 800a138:	d104      	bne.n	800a144 <__swbuf_r+0x6c>
 800a13a:	4621      	mov	r1, r4
 800a13c:	4628      	mov	r0, r5
 800a13e:	f000 f927 	bl	800a390 <_fflush_r>
 800a142:	b988      	cbnz	r0, 800a168 <__swbuf_r+0x90>
 800a144:	4638      	mov	r0, r7
 800a146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a148:	4b0a      	ldr	r3, [pc, #40]	; (800a174 <__swbuf_r+0x9c>)
 800a14a:	429c      	cmp	r4, r3
 800a14c:	d101      	bne.n	800a152 <__swbuf_r+0x7a>
 800a14e:	68ac      	ldr	r4, [r5, #8]
 800a150:	e7cf      	b.n	800a0f2 <__swbuf_r+0x1a>
 800a152:	4b09      	ldr	r3, [pc, #36]	; (800a178 <__swbuf_r+0xa0>)
 800a154:	429c      	cmp	r4, r3
 800a156:	bf08      	it	eq
 800a158:	68ec      	ldreq	r4, [r5, #12]
 800a15a:	e7ca      	b.n	800a0f2 <__swbuf_r+0x1a>
 800a15c:	4621      	mov	r1, r4
 800a15e:	4628      	mov	r0, r5
 800a160:	f000 f81a 	bl	800a198 <__swsetup_r>
 800a164:	2800      	cmp	r0, #0
 800a166:	d0cb      	beq.n	800a100 <__swbuf_r+0x28>
 800a168:	f04f 37ff 	mov.w	r7, #4294967295
 800a16c:	e7ea      	b.n	800a144 <__swbuf_r+0x6c>
 800a16e:	bf00      	nop
 800a170:	0800b080 	.word	0x0800b080
 800a174:	0800b0a0 	.word	0x0800b0a0
 800a178:	0800b060 	.word	0x0800b060

0800a17c <__ascii_wctomb>:
 800a17c:	b149      	cbz	r1, 800a192 <__ascii_wctomb+0x16>
 800a17e:	2aff      	cmp	r2, #255	; 0xff
 800a180:	bf85      	ittet	hi
 800a182:	238a      	movhi	r3, #138	; 0x8a
 800a184:	6003      	strhi	r3, [r0, #0]
 800a186:	700a      	strbls	r2, [r1, #0]
 800a188:	f04f 30ff 	movhi.w	r0, #4294967295
 800a18c:	bf98      	it	ls
 800a18e:	2001      	movls	r0, #1
 800a190:	4770      	bx	lr
 800a192:	4608      	mov	r0, r1
 800a194:	4770      	bx	lr
	...

0800a198 <__swsetup_r>:
 800a198:	4b32      	ldr	r3, [pc, #200]	; (800a264 <__swsetup_r+0xcc>)
 800a19a:	b570      	push	{r4, r5, r6, lr}
 800a19c:	681d      	ldr	r5, [r3, #0]
 800a19e:	4606      	mov	r6, r0
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	b125      	cbz	r5, 800a1ae <__swsetup_r+0x16>
 800a1a4:	69ab      	ldr	r3, [r5, #24]
 800a1a6:	b913      	cbnz	r3, 800a1ae <__swsetup_r+0x16>
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f000 f985 	bl	800a4b8 <__sinit>
 800a1ae:	4b2e      	ldr	r3, [pc, #184]	; (800a268 <__swsetup_r+0xd0>)
 800a1b0:	429c      	cmp	r4, r3
 800a1b2:	d10f      	bne.n	800a1d4 <__swsetup_r+0x3c>
 800a1b4:	686c      	ldr	r4, [r5, #4]
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1bc:	0719      	lsls	r1, r3, #28
 800a1be:	d42c      	bmi.n	800a21a <__swsetup_r+0x82>
 800a1c0:	06dd      	lsls	r5, r3, #27
 800a1c2:	d411      	bmi.n	800a1e8 <__swsetup_r+0x50>
 800a1c4:	2309      	movs	r3, #9
 800a1c6:	6033      	str	r3, [r6, #0]
 800a1c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a1cc:	81a3      	strh	r3, [r4, #12]
 800a1ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d2:	e03e      	b.n	800a252 <__swsetup_r+0xba>
 800a1d4:	4b25      	ldr	r3, [pc, #148]	; (800a26c <__swsetup_r+0xd4>)
 800a1d6:	429c      	cmp	r4, r3
 800a1d8:	d101      	bne.n	800a1de <__swsetup_r+0x46>
 800a1da:	68ac      	ldr	r4, [r5, #8]
 800a1dc:	e7eb      	b.n	800a1b6 <__swsetup_r+0x1e>
 800a1de:	4b24      	ldr	r3, [pc, #144]	; (800a270 <__swsetup_r+0xd8>)
 800a1e0:	429c      	cmp	r4, r3
 800a1e2:	bf08      	it	eq
 800a1e4:	68ec      	ldreq	r4, [r5, #12]
 800a1e6:	e7e6      	b.n	800a1b6 <__swsetup_r+0x1e>
 800a1e8:	0758      	lsls	r0, r3, #29
 800a1ea:	d512      	bpl.n	800a212 <__swsetup_r+0x7a>
 800a1ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1ee:	b141      	cbz	r1, 800a202 <__swsetup_r+0x6a>
 800a1f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1f4:	4299      	cmp	r1, r3
 800a1f6:	d002      	beq.n	800a1fe <__swsetup_r+0x66>
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	f7ff fba9 	bl	8009950 <_free_r>
 800a1fe:	2300      	movs	r3, #0
 800a200:	6363      	str	r3, [r4, #52]	; 0x34
 800a202:	89a3      	ldrh	r3, [r4, #12]
 800a204:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a208:	81a3      	strh	r3, [r4, #12]
 800a20a:	2300      	movs	r3, #0
 800a20c:	6063      	str	r3, [r4, #4]
 800a20e:	6923      	ldr	r3, [r4, #16]
 800a210:	6023      	str	r3, [r4, #0]
 800a212:	89a3      	ldrh	r3, [r4, #12]
 800a214:	f043 0308 	orr.w	r3, r3, #8
 800a218:	81a3      	strh	r3, [r4, #12]
 800a21a:	6923      	ldr	r3, [r4, #16]
 800a21c:	b94b      	cbnz	r3, 800a232 <__swsetup_r+0x9a>
 800a21e:	89a3      	ldrh	r3, [r4, #12]
 800a220:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a228:	d003      	beq.n	800a232 <__swsetup_r+0x9a>
 800a22a:	4621      	mov	r1, r4
 800a22c:	4630      	mov	r0, r6
 800a22e:	f000 fa09 	bl	800a644 <__smakebuf_r>
 800a232:	89a0      	ldrh	r0, [r4, #12]
 800a234:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a238:	f010 0301 	ands.w	r3, r0, #1
 800a23c:	d00a      	beq.n	800a254 <__swsetup_r+0xbc>
 800a23e:	2300      	movs	r3, #0
 800a240:	60a3      	str	r3, [r4, #8]
 800a242:	6963      	ldr	r3, [r4, #20]
 800a244:	425b      	negs	r3, r3
 800a246:	61a3      	str	r3, [r4, #24]
 800a248:	6923      	ldr	r3, [r4, #16]
 800a24a:	b943      	cbnz	r3, 800a25e <__swsetup_r+0xc6>
 800a24c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a250:	d1ba      	bne.n	800a1c8 <__swsetup_r+0x30>
 800a252:	bd70      	pop	{r4, r5, r6, pc}
 800a254:	0781      	lsls	r1, r0, #30
 800a256:	bf58      	it	pl
 800a258:	6963      	ldrpl	r3, [r4, #20]
 800a25a:	60a3      	str	r3, [r4, #8]
 800a25c:	e7f4      	b.n	800a248 <__swsetup_r+0xb0>
 800a25e:	2000      	movs	r0, #0
 800a260:	e7f7      	b.n	800a252 <__swsetup_r+0xba>
 800a262:	bf00      	nop
 800a264:	20000060 	.word	0x20000060
 800a268:	0800b080 	.word	0x0800b080
 800a26c:	0800b0a0 	.word	0x0800b0a0
 800a270:	0800b060 	.word	0x0800b060

0800a274 <abort>:
 800a274:	b508      	push	{r3, lr}
 800a276:	2006      	movs	r0, #6
 800a278:	f000 faa2 	bl	800a7c0 <raise>
 800a27c:	2001      	movs	r0, #1
 800a27e:	f7f8 fe9d 	bl	8002fbc <_exit>
	...

0800a284 <__sflush_r>:
 800a284:	898a      	ldrh	r2, [r1, #12]
 800a286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a28a:	4605      	mov	r5, r0
 800a28c:	0710      	lsls	r0, r2, #28
 800a28e:	460c      	mov	r4, r1
 800a290:	d458      	bmi.n	800a344 <__sflush_r+0xc0>
 800a292:	684b      	ldr	r3, [r1, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	dc05      	bgt.n	800a2a4 <__sflush_r+0x20>
 800a298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	dc02      	bgt.n	800a2a4 <__sflush_r+0x20>
 800a29e:	2000      	movs	r0, #0
 800a2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2a6:	2e00      	cmp	r6, #0
 800a2a8:	d0f9      	beq.n	800a29e <__sflush_r+0x1a>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2b0:	682f      	ldr	r7, [r5, #0]
 800a2b2:	602b      	str	r3, [r5, #0]
 800a2b4:	d032      	beq.n	800a31c <__sflush_r+0x98>
 800a2b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2b8:	89a3      	ldrh	r3, [r4, #12]
 800a2ba:	075a      	lsls	r2, r3, #29
 800a2bc:	d505      	bpl.n	800a2ca <__sflush_r+0x46>
 800a2be:	6863      	ldr	r3, [r4, #4]
 800a2c0:	1ac0      	subs	r0, r0, r3
 800a2c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2c4:	b10b      	cbz	r3, 800a2ca <__sflush_r+0x46>
 800a2c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2c8:	1ac0      	subs	r0, r0, r3
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2d0:	6a21      	ldr	r1, [r4, #32]
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	47b0      	blx	r6
 800a2d6:	1c43      	adds	r3, r0, #1
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	d106      	bne.n	800a2ea <__sflush_r+0x66>
 800a2dc:	6829      	ldr	r1, [r5, #0]
 800a2de:	291d      	cmp	r1, #29
 800a2e0:	d82c      	bhi.n	800a33c <__sflush_r+0xb8>
 800a2e2:	4a2a      	ldr	r2, [pc, #168]	; (800a38c <__sflush_r+0x108>)
 800a2e4:	40ca      	lsrs	r2, r1
 800a2e6:	07d6      	lsls	r6, r2, #31
 800a2e8:	d528      	bpl.n	800a33c <__sflush_r+0xb8>
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	6062      	str	r2, [r4, #4]
 800a2ee:	04d9      	lsls	r1, r3, #19
 800a2f0:	6922      	ldr	r2, [r4, #16]
 800a2f2:	6022      	str	r2, [r4, #0]
 800a2f4:	d504      	bpl.n	800a300 <__sflush_r+0x7c>
 800a2f6:	1c42      	adds	r2, r0, #1
 800a2f8:	d101      	bne.n	800a2fe <__sflush_r+0x7a>
 800a2fa:	682b      	ldr	r3, [r5, #0]
 800a2fc:	b903      	cbnz	r3, 800a300 <__sflush_r+0x7c>
 800a2fe:	6560      	str	r0, [r4, #84]	; 0x54
 800a300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a302:	602f      	str	r7, [r5, #0]
 800a304:	2900      	cmp	r1, #0
 800a306:	d0ca      	beq.n	800a29e <__sflush_r+0x1a>
 800a308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a30c:	4299      	cmp	r1, r3
 800a30e:	d002      	beq.n	800a316 <__sflush_r+0x92>
 800a310:	4628      	mov	r0, r5
 800a312:	f7ff fb1d 	bl	8009950 <_free_r>
 800a316:	2000      	movs	r0, #0
 800a318:	6360      	str	r0, [r4, #52]	; 0x34
 800a31a:	e7c1      	b.n	800a2a0 <__sflush_r+0x1c>
 800a31c:	6a21      	ldr	r1, [r4, #32]
 800a31e:	2301      	movs	r3, #1
 800a320:	4628      	mov	r0, r5
 800a322:	47b0      	blx	r6
 800a324:	1c41      	adds	r1, r0, #1
 800a326:	d1c7      	bne.n	800a2b8 <__sflush_r+0x34>
 800a328:	682b      	ldr	r3, [r5, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d0c4      	beq.n	800a2b8 <__sflush_r+0x34>
 800a32e:	2b1d      	cmp	r3, #29
 800a330:	d001      	beq.n	800a336 <__sflush_r+0xb2>
 800a332:	2b16      	cmp	r3, #22
 800a334:	d101      	bne.n	800a33a <__sflush_r+0xb6>
 800a336:	602f      	str	r7, [r5, #0]
 800a338:	e7b1      	b.n	800a29e <__sflush_r+0x1a>
 800a33a:	89a3      	ldrh	r3, [r4, #12]
 800a33c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a340:	81a3      	strh	r3, [r4, #12]
 800a342:	e7ad      	b.n	800a2a0 <__sflush_r+0x1c>
 800a344:	690f      	ldr	r7, [r1, #16]
 800a346:	2f00      	cmp	r7, #0
 800a348:	d0a9      	beq.n	800a29e <__sflush_r+0x1a>
 800a34a:	0793      	lsls	r3, r2, #30
 800a34c:	680e      	ldr	r6, [r1, #0]
 800a34e:	bf08      	it	eq
 800a350:	694b      	ldreq	r3, [r1, #20]
 800a352:	600f      	str	r7, [r1, #0]
 800a354:	bf18      	it	ne
 800a356:	2300      	movne	r3, #0
 800a358:	eba6 0807 	sub.w	r8, r6, r7
 800a35c:	608b      	str	r3, [r1, #8]
 800a35e:	f1b8 0f00 	cmp.w	r8, #0
 800a362:	dd9c      	ble.n	800a29e <__sflush_r+0x1a>
 800a364:	6a21      	ldr	r1, [r4, #32]
 800a366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a368:	4643      	mov	r3, r8
 800a36a:	463a      	mov	r2, r7
 800a36c:	4628      	mov	r0, r5
 800a36e:	47b0      	blx	r6
 800a370:	2800      	cmp	r0, #0
 800a372:	dc06      	bgt.n	800a382 <__sflush_r+0xfe>
 800a374:	89a3      	ldrh	r3, [r4, #12]
 800a376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a37a:	81a3      	strh	r3, [r4, #12]
 800a37c:	f04f 30ff 	mov.w	r0, #4294967295
 800a380:	e78e      	b.n	800a2a0 <__sflush_r+0x1c>
 800a382:	4407      	add	r7, r0
 800a384:	eba8 0800 	sub.w	r8, r8, r0
 800a388:	e7e9      	b.n	800a35e <__sflush_r+0xda>
 800a38a:	bf00      	nop
 800a38c:	20400001 	.word	0x20400001

0800a390 <_fflush_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	690b      	ldr	r3, [r1, #16]
 800a394:	4605      	mov	r5, r0
 800a396:	460c      	mov	r4, r1
 800a398:	b913      	cbnz	r3, 800a3a0 <_fflush_r+0x10>
 800a39a:	2500      	movs	r5, #0
 800a39c:	4628      	mov	r0, r5
 800a39e:	bd38      	pop	{r3, r4, r5, pc}
 800a3a0:	b118      	cbz	r0, 800a3aa <_fflush_r+0x1a>
 800a3a2:	6983      	ldr	r3, [r0, #24]
 800a3a4:	b90b      	cbnz	r3, 800a3aa <_fflush_r+0x1a>
 800a3a6:	f000 f887 	bl	800a4b8 <__sinit>
 800a3aa:	4b14      	ldr	r3, [pc, #80]	; (800a3fc <_fflush_r+0x6c>)
 800a3ac:	429c      	cmp	r4, r3
 800a3ae:	d11b      	bne.n	800a3e8 <_fflush_r+0x58>
 800a3b0:	686c      	ldr	r4, [r5, #4]
 800a3b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d0ef      	beq.n	800a39a <_fflush_r+0xa>
 800a3ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3bc:	07d0      	lsls	r0, r2, #31
 800a3be:	d404      	bmi.n	800a3ca <_fflush_r+0x3a>
 800a3c0:	0599      	lsls	r1, r3, #22
 800a3c2:	d402      	bmi.n	800a3ca <_fflush_r+0x3a>
 800a3c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3c6:	f000 f915 	bl	800a5f4 <__retarget_lock_acquire_recursive>
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	4621      	mov	r1, r4
 800a3ce:	f7ff ff59 	bl	800a284 <__sflush_r>
 800a3d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3d4:	07da      	lsls	r2, r3, #31
 800a3d6:	4605      	mov	r5, r0
 800a3d8:	d4e0      	bmi.n	800a39c <_fflush_r+0xc>
 800a3da:	89a3      	ldrh	r3, [r4, #12]
 800a3dc:	059b      	lsls	r3, r3, #22
 800a3de:	d4dd      	bmi.n	800a39c <_fflush_r+0xc>
 800a3e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3e2:	f000 f908 	bl	800a5f6 <__retarget_lock_release_recursive>
 800a3e6:	e7d9      	b.n	800a39c <_fflush_r+0xc>
 800a3e8:	4b05      	ldr	r3, [pc, #20]	; (800a400 <_fflush_r+0x70>)
 800a3ea:	429c      	cmp	r4, r3
 800a3ec:	d101      	bne.n	800a3f2 <_fflush_r+0x62>
 800a3ee:	68ac      	ldr	r4, [r5, #8]
 800a3f0:	e7df      	b.n	800a3b2 <_fflush_r+0x22>
 800a3f2:	4b04      	ldr	r3, [pc, #16]	; (800a404 <_fflush_r+0x74>)
 800a3f4:	429c      	cmp	r4, r3
 800a3f6:	bf08      	it	eq
 800a3f8:	68ec      	ldreq	r4, [r5, #12]
 800a3fa:	e7da      	b.n	800a3b2 <_fflush_r+0x22>
 800a3fc:	0800b080 	.word	0x0800b080
 800a400:	0800b0a0 	.word	0x0800b0a0
 800a404:	0800b060 	.word	0x0800b060

0800a408 <std>:
 800a408:	2300      	movs	r3, #0
 800a40a:	b510      	push	{r4, lr}
 800a40c:	4604      	mov	r4, r0
 800a40e:	e9c0 3300 	strd	r3, r3, [r0]
 800a412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a416:	6083      	str	r3, [r0, #8]
 800a418:	8181      	strh	r1, [r0, #12]
 800a41a:	6643      	str	r3, [r0, #100]	; 0x64
 800a41c:	81c2      	strh	r2, [r0, #14]
 800a41e:	6183      	str	r3, [r0, #24]
 800a420:	4619      	mov	r1, r3
 800a422:	2208      	movs	r2, #8
 800a424:	305c      	adds	r0, #92	; 0x5c
 800a426:	f7fc f857 	bl	80064d8 <memset>
 800a42a:	4b05      	ldr	r3, [pc, #20]	; (800a440 <std+0x38>)
 800a42c:	6263      	str	r3, [r4, #36]	; 0x24
 800a42e:	4b05      	ldr	r3, [pc, #20]	; (800a444 <std+0x3c>)
 800a430:	62a3      	str	r3, [r4, #40]	; 0x28
 800a432:	4b05      	ldr	r3, [pc, #20]	; (800a448 <std+0x40>)
 800a434:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a436:	4b05      	ldr	r3, [pc, #20]	; (800a44c <std+0x44>)
 800a438:	6224      	str	r4, [r4, #32]
 800a43a:	6323      	str	r3, [r4, #48]	; 0x30
 800a43c:	bd10      	pop	{r4, pc}
 800a43e:	bf00      	nop
 800a440:	0800a7f9 	.word	0x0800a7f9
 800a444:	0800a81b 	.word	0x0800a81b
 800a448:	0800a853 	.word	0x0800a853
 800a44c:	0800a877 	.word	0x0800a877

0800a450 <_cleanup_r>:
 800a450:	4901      	ldr	r1, [pc, #4]	; (800a458 <_cleanup_r+0x8>)
 800a452:	f000 b8af 	b.w	800a5b4 <_fwalk_reent>
 800a456:	bf00      	nop
 800a458:	0800a391 	.word	0x0800a391

0800a45c <__sfmoreglue>:
 800a45c:	b570      	push	{r4, r5, r6, lr}
 800a45e:	2268      	movs	r2, #104	; 0x68
 800a460:	1e4d      	subs	r5, r1, #1
 800a462:	4355      	muls	r5, r2
 800a464:	460e      	mov	r6, r1
 800a466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a46a:	f7ff fadd 	bl	8009a28 <_malloc_r>
 800a46e:	4604      	mov	r4, r0
 800a470:	b140      	cbz	r0, 800a484 <__sfmoreglue+0x28>
 800a472:	2100      	movs	r1, #0
 800a474:	e9c0 1600 	strd	r1, r6, [r0]
 800a478:	300c      	adds	r0, #12
 800a47a:	60a0      	str	r0, [r4, #8]
 800a47c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a480:	f7fc f82a 	bl	80064d8 <memset>
 800a484:	4620      	mov	r0, r4
 800a486:	bd70      	pop	{r4, r5, r6, pc}

0800a488 <__sfp_lock_acquire>:
 800a488:	4801      	ldr	r0, [pc, #4]	; (800a490 <__sfp_lock_acquire+0x8>)
 800a48a:	f000 b8b3 	b.w	800a5f4 <__retarget_lock_acquire_recursive>
 800a48e:	bf00      	nop
 800a490:	200004f1 	.word	0x200004f1

0800a494 <__sfp_lock_release>:
 800a494:	4801      	ldr	r0, [pc, #4]	; (800a49c <__sfp_lock_release+0x8>)
 800a496:	f000 b8ae 	b.w	800a5f6 <__retarget_lock_release_recursive>
 800a49a:	bf00      	nop
 800a49c:	200004f1 	.word	0x200004f1

0800a4a0 <__sinit_lock_acquire>:
 800a4a0:	4801      	ldr	r0, [pc, #4]	; (800a4a8 <__sinit_lock_acquire+0x8>)
 800a4a2:	f000 b8a7 	b.w	800a5f4 <__retarget_lock_acquire_recursive>
 800a4a6:	bf00      	nop
 800a4a8:	200004f2 	.word	0x200004f2

0800a4ac <__sinit_lock_release>:
 800a4ac:	4801      	ldr	r0, [pc, #4]	; (800a4b4 <__sinit_lock_release+0x8>)
 800a4ae:	f000 b8a2 	b.w	800a5f6 <__retarget_lock_release_recursive>
 800a4b2:	bf00      	nop
 800a4b4:	200004f2 	.word	0x200004f2

0800a4b8 <__sinit>:
 800a4b8:	b510      	push	{r4, lr}
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	f7ff fff0 	bl	800a4a0 <__sinit_lock_acquire>
 800a4c0:	69a3      	ldr	r3, [r4, #24]
 800a4c2:	b11b      	cbz	r3, 800a4cc <__sinit+0x14>
 800a4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4c8:	f7ff bff0 	b.w	800a4ac <__sinit_lock_release>
 800a4cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a4d0:	6523      	str	r3, [r4, #80]	; 0x50
 800a4d2:	4b13      	ldr	r3, [pc, #76]	; (800a520 <__sinit+0x68>)
 800a4d4:	4a13      	ldr	r2, [pc, #76]	; (800a524 <__sinit+0x6c>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a4da:	42a3      	cmp	r3, r4
 800a4dc:	bf04      	itt	eq
 800a4de:	2301      	moveq	r3, #1
 800a4e0:	61a3      	streq	r3, [r4, #24]
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f000 f820 	bl	800a528 <__sfp>
 800a4e8:	6060      	str	r0, [r4, #4]
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f000 f81c 	bl	800a528 <__sfp>
 800a4f0:	60a0      	str	r0, [r4, #8]
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f000 f818 	bl	800a528 <__sfp>
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	60e0      	str	r0, [r4, #12]
 800a4fc:	2104      	movs	r1, #4
 800a4fe:	6860      	ldr	r0, [r4, #4]
 800a500:	f7ff ff82 	bl	800a408 <std>
 800a504:	68a0      	ldr	r0, [r4, #8]
 800a506:	2201      	movs	r2, #1
 800a508:	2109      	movs	r1, #9
 800a50a:	f7ff ff7d 	bl	800a408 <std>
 800a50e:	68e0      	ldr	r0, [r4, #12]
 800a510:	2202      	movs	r2, #2
 800a512:	2112      	movs	r1, #18
 800a514:	f7ff ff78 	bl	800a408 <std>
 800a518:	2301      	movs	r3, #1
 800a51a:	61a3      	str	r3, [r4, #24]
 800a51c:	e7d2      	b.n	800a4c4 <__sinit+0xc>
 800a51e:	bf00      	nop
 800a520:	0800abc4 	.word	0x0800abc4
 800a524:	0800a451 	.word	0x0800a451

0800a528 <__sfp>:
 800a528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52a:	4607      	mov	r7, r0
 800a52c:	f7ff ffac 	bl	800a488 <__sfp_lock_acquire>
 800a530:	4b1e      	ldr	r3, [pc, #120]	; (800a5ac <__sfp+0x84>)
 800a532:	681e      	ldr	r6, [r3, #0]
 800a534:	69b3      	ldr	r3, [r6, #24]
 800a536:	b913      	cbnz	r3, 800a53e <__sfp+0x16>
 800a538:	4630      	mov	r0, r6
 800a53a:	f7ff ffbd 	bl	800a4b8 <__sinit>
 800a53e:	3648      	adds	r6, #72	; 0x48
 800a540:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a544:	3b01      	subs	r3, #1
 800a546:	d503      	bpl.n	800a550 <__sfp+0x28>
 800a548:	6833      	ldr	r3, [r6, #0]
 800a54a:	b30b      	cbz	r3, 800a590 <__sfp+0x68>
 800a54c:	6836      	ldr	r6, [r6, #0]
 800a54e:	e7f7      	b.n	800a540 <__sfp+0x18>
 800a550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a554:	b9d5      	cbnz	r5, 800a58c <__sfp+0x64>
 800a556:	4b16      	ldr	r3, [pc, #88]	; (800a5b0 <__sfp+0x88>)
 800a558:	60e3      	str	r3, [r4, #12]
 800a55a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a55e:	6665      	str	r5, [r4, #100]	; 0x64
 800a560:	f000 f847 	bl	800a5f2 <__retarget_lock_init_recursive>
 800a564:	f7ff ff96 	bl	800a494 <__sfp_lock_release>
 800a568:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a56c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a570:	6025      	str	r5, [r4, #0]
 800a572:	61a5      	str	r5, [r4, #24]
 800a574:	2208      	movs	r2, #8
 800a576:	4629      	mov	r1, r5
 800a578:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a57c:	f7fb ffac 	bl	80064d8 <memset>
 800a580:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a584:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a588:	4620      	mov	r0, r4
 800a58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a58c:	3468      	adds	r4, #104	; 0x68
 800a58e:	e7d9      	b.n	800a544 <__sfp+0x1c>
 800a590:	2104      	movs	r1, #4
 800a592:	4638      	mov	r0, r7
 800a594:	f7ff ff62 	bl	800a45c <__sfmoreglue>
 800a598:	4604      	mov	r4, r0
 800a59a:	6030      	str	r0, [r6, #0]
 800a59c:	2800      	cmp	r0, #0
 800a59e:	d1d5      	bne.n	800a54c <__sfp+0x24>
 800a5a0:	f7ff ff78 	bl	800a494 <__sfp_lock_release>
 800a5a4:	230c      	movs	r3, #12
 800a5a6:	603b      	str	r3, [r7, #0]
 800a5a8:	e7ee      	b.n	800a588 <__sfp+0x60>
 800a5aa:	bf00      	nop
 800a5ac:	0800abc4 	.word	0x0800abc4
 800a5b0:	ffff0001 	.word	0xffff0001

0800a5b4 <_fwalk_reent>:
 800a5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b8:	4606      	mov	r6, r0
 800a5ba:	4688      	mov	r8, r1
 800a5bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a5c0:	2700      	movs	r7, #0
 800a5c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5c6:	f1b9 0901 	subs.w	r9, r9, #1
 800a5ca:	d505      	bpl.n	800a5d8 <_fwalk_reent+0x24>
 800a5cc:	6824      	ldr	r4, [r4, #0]
 800a5ce:	2c00      	cmp	r4, #0
 800a5d0:	d1f7      	bne.n	800a5c2 <_fwalk_reent+0xe>
 800a5d2:	4638      	mov	r0, r7
 800a5d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5d8:	89ab      	ldrh	r3, [r5, #12]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d907      	bls.n	800a5ee <_fwalk_reent+0x3a>
 800a5de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	d003      	beq.n	800a5ee <_fwalk_reent+0x3a>
 800a5e6:	4629      	mov	r1, r5
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	47c0      	blx	r8
 800a5ec:	4307      	orrs	r7, r0
 800a5ee:	3568      	adds	r5, #104	; 0x68
 800a5f0:	e7e9      	b.n	800a5c6 <_fwalk_reent+0x12>

0800a5f2 <__retarget_lock_init_recursive>:
 800a5f2:	4770      	bx	lr

0800a5f4 <__retarget_lock_acquire_recursive>:
 800a5f4:	4770      	bx	lr

0800a5f6 <__retarget_lock_release_recursive>:
 800a5f6:	4770      	bx	lr

0800a5f8 <__swhatbuf_r>:
 800a5f8:	b570      	push	{r4, r5, r6, lr}
 800a5fa:	460e      	mov	r6, r1
 800a5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a600:	2900      	cmp	r1, #0
 800a602:	b096      	sub	sp, #88	; 0x58
 800a604:	4614      	mov	r4, r2
 800a606:	461d      	mov	r5, r3
 800a608:	da08      	bge.n	800a61c <__swhatbuf_r+0x24>
 800a60a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a60e:	2200      	movs	r2, #0
 800a610:	602a      	str	r2, [r5, #0]
 800a612:	061a      	lsls	r2, r3, #24
 800a614:	d410      	bmi.n	800a638 <__swhatbuf_r+0x40>
 800a616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a61a:	e00e      	b.n	800a63a <__swhatbuf_r+0x42>
 800a61c:	466a      	mov	r2, sp
 800a61e:	f000 f951 	bl	800a8c4 <_fstat_r>
 800a622:	2800      	cmp	r0, #0
 800a624:	dbf1      	blt.n	800a60a <__swhatbuf_r+0x12>
 800a626:	9a01      	ldr	r2, [sp, #4]
 800a628:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a62c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a630:	425a      	negs	r2, r3
 800a632:	415a      	adcs	r2, r3
 800a634:	602a      	str	r2, [r5, #0]
 800a636:	e7ee      	b.n	800a616 <__swhatbuf_r+0x1e>
 800a638:	2340      	movs	r3, #64	; 0x40
 800a63a:	2000      	movs	r0, #0
 800a63c:	6023      	str	r3, [r4, #0]
 800a63e:	b016      	add	sp, #88	; 0x58
 800a640:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a644 <__smakebuf_r>:
 800a644:	898b      	ldrh	r3, [r1, #12]
 800a646:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a648:	079d      	lsls	r5, r3, #30
 800a64a:	4606      	mov	r6, r0
 800a64c:	460c      	mov	r4, r1
 800a64e:	d507      	bpl.n	800a660 <__smakebuf_r+0x1c>
 800a650:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	6123      	str	r3, [r4, #16]
 800a658:	2301      	movs	r3, #1
 800a65a:	6163      	str	r3, [r4, #20]
 800a65c:	b002      	add	sp, #8
 800a65e:	bd70      	pop	{r4, r5, r6, pc}
 800a660:	ab01      	add	r3, sp, #4
 800a662:	466a      	mov	r2, sp
 800a664:	f7ff ffc8 	bl	800a5f8 <__swhatbuf_r>
 800a668:	9900      	ldr	r1, [sp, #0]
 800a66a:	4605      	mov	r5, r0
 800a66c:	4630      	mov	r0, r6
 800a66e:	f7ff f9db 	bl	8009a28 <_malloc_r>
 800a672:	b948      	cbnz	r0, 800a688 <__smakebuf_r+0x44>
 800a674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a678:	059a      	lsls	r2, r3, #22
 800a67a:	d4ef      	bmi.n	800a65c <__smakebuf_r+0x18>
 800a67c:	f023 0303 	bic.w	r3, r3, #3
 800a680:	f043 0302 	orr.w	r3, r3, #2
 800a684:	81a3      	strh	r3, [r4, #12]
 800a686:	e7e3      	b.n	800a650 <__smakebuf_r+0xc>
 800a688:	4b0d      	ldr	r3, [pc, #52]	; (800a6c0 <__smakebuf_r+0x7c>)
 800a68a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	6020      	str	r0, [r4, #0]
 800a690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a694:	81a3      	strh	r3, [r4, #12]
 800a696:	9b00      	ldr	r3, [sp, #0]
 800a698:	6163      	str	r3, [r4, #20]
 800a69a:	9b01      	ldr	r3, [sp, #4]
 800a69c:	6120      	str	r0, [r4, #16]
 800a69e:	b15b      	cbz	r3, 800a6b8 <__smakebuf_r+0x74>
 800a6a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f000 f91f 	bl	800a8e8 <_isatty_r>
 800a6aa:	b128      	cbz	r0, 800a6b8 <__smakebuf_r+0x74>
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	f023 0303 	bic.w	r3, r3, #3
 800a6b2:	f043 0301 	orr.w	r3, r3, #1
 800a6b6:	81a3      	strh	r3, [r4, #12]
 800a6b8:	89a0      	ldrh	r0, [r4, #12]
 800a6ba:	4305      	orrs	r5, r0
 800a6bc:	81a5      	strh	r5, [r4, #12]
 800a6be:	e7cd      	b.n	800a65c <__smakebuf_r+0x18>
 800a6c0:	0800a451 	.word	0x0800a451

0800a6c4 <memmove>:
 800a6c4:	4288      	cmp	r0, r1
 800a6c6:	b510      	push	{r4, lr}
 800a6c8:	eb01 0402 	add.w	r4, r1, r2
 800a6cc:	d902      	bls.n	800a6d4 <memmove+0x10>
 800a6ce:	4284      	cmp	r4, r0
 800a6d0:	4623      	mov	r3, r4
 800a6d2:	d807      	bhi.n	800a6e4 <memmove+0x20>
 800a6d4:	1e43      	subs	r3, r0, #1
 800a6d6:	42a1      	cmp	r1, r4
 800a6d8:	d008      	beq.n	800a6ec <memmove+0x28>
 800a6da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6e2:	e7f8      	b.n	800a6d6 <memmove+0x12>
 800a6e4:	4402      	add	r2, r0
 800a6e6:	4601      	mov	r1, r0
 800a6e8:	428a      	cmp	r2, r1
 800a6ea:	d100      	bne.n	800a6ee <memmove+0x2a>
 800a6ec:	bd10      	pop	{r4, pc}
 800a6ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6f6:	e7f7      	b.n	800a6e8 <memmove+0x24>

0800a6f8 <__malloc_lock>:
 800a6f8:	4801      	ldr	r0, [pc, #4]	; (800a700 <__malloc_lock+0x8>)
 800a6fa:	f7ff bf7b 	b.w	800a5f4 <__retarget_lock_acquire_recursive>
 800a6fe:	bf00      	nop
 800a700:	200004f0 	.word	0x200004f0

0800a704 <__malloc_unlock>:
 800a704:	4801      	ldr	r0, [pc, #4]	; (800a70c <__malloc_unlock+0x8>)
 800a706:	f7ff bf76 	b.w	800a5f6 <__retarget_lock_release_recursive>
 800a70a:	bf00      	nop
 800a70c:	200004f0 	.word	0x200004f0

0800a710 <_realloc_r>:
 800a710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a714:	4680      	mov	r8, r0
 800a716:	4614      	mov	r4, r2
 800a718:	460e      	mov	r6, r1
 800a71a:	b921      	cbnz	r1, 800a726 <_realloc_r+0x16>
 800a71c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a720:	4611      	mov	r1, r2
 800a722:	f7ff b981 	b.w	8009a28 <_malloc_r>
 800a726:	b92a      	cbnz	r2, 800a734 <_realloc_r+0x24>
 800a728:	f7ff f912 	bl	8009950 <_free_r>
 800a72c:	4625      	mov	r5, r4
 800a72e:	4628      	mov	r0, r5
 800a730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a734:	f000 f8fa 	bl	800a92c <_malloc_usable_size_r>
 800a738:	4284      	cmp	r4, r0
 800a73a:	4607      	mov	r7, r0
 800a73c:	d802      	bhi.n	800a744 <_realloc_r+0x34>
 800a73e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a742:	d812      	bhi.n	800a76a <_realloc_r+0x5a>
 800a744:	4621      	mov	r1, r4
 800a746:	4640      	mov	r0, r8
 800a748:	f7ff f96e 	bl	8009a28 <_malloc_r>
 800a74c:	4605      	mov	r5, r0
 800a74e:	2800      	cmp	r0, #0
 800a750:	d0ed      	beq.n	800a72e <_realloc_r+0x1e>
 800a752:	42bc      	cmp	r4, r7
 800a754:	4622      	mov	r2, r4
 800a756:	4631      	mov	r1, r6
 800a758:	bf28      	it	cs
 800a75a:	463a      	movcs	r2, r7
 800a75c:	f7fe fc12 	bl	8008f84 <memcpy>
 800a760:	4631      	mov	r1, r6
 800a762:	4640      	mov	r0, r8
 800a764:	f7ff f8f4 	bl	8009950 <_free_r>
 800a768:	e7e1      	b.n	800a72e <_realloc_r+0x1e>
 800a76a:	4635      	mov	r5, r6
 800a76c:	e7df      	b.n	800a72e <_realloc_r+0x1e>

0800a76e <_raise_r>:
 800a76e:	291f      	cmp	r1, #31
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	4604      	mov	r4, r0
 800a774:	460d      	mov	r5, r1
 800a776:	d904      	bls.n	800a782 <_raise_r+0x14>
 800a778:	2316      	movs	r3, #22
 800a77a:	6003      	str	r3, [r0, #0]
 800a77c:	f04f 30ff 	mov.w	r0, #4294967295
 800a780:	bd38      	pop	{r3, r4, r5, pc}
 800a782:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a784:	b112      	cbz	r2, 800a78c <_raise_r+0x1e>
 800a786:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a78a:	b94b      	cbnz	r3, 800a7a0 <_raise_r+0x32>
 800a78c:	4620      	mov	r0, r4
 800a78e:	f000 f831 	bl	800a7f4 <_getpid_r>
 800a792:	462a      	mov	r2, r5
 800a794:	4601      	mov	r1, r0
 800a796:	4620      	mov	r0, r4
 800a798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a79c:	f000 b818 	b.w	800a7d0 <_kill_r>
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d00a      	beq.n	800a7ba <_raise_r+0x4c>
 800a7a4:	1c59      	adds	r1, r3, #1
 800a7a6:	d103      	bne.n	800a7b0 <_raise_r+0x42>
 800a7a8:	2316      	movs	r3, #22
 800a7aa:	6003      	str	r3, [r0, #0]
 800a7ac:	2001      	movs	r0, #1
 800a7ae:	e7e7      	b.n	800a780 <_raise_r+0x12>
 800a7b0:	2400      	movs	r4, #0
 800a7b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	4798      	blx	r3
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	e7e0      	b.n	800a780 <_raise_r+0x12>
	...

0800a7c0 <raise>:
 800a7c0:	4b02      	ldr	r3, [pc, #8]	; (800a7cc <raise+0xc>)
 800a7c2:	4601      	mov	r1, r0
 800a7c4:	6818      	ldr	r0, [r3, #0]
 800a7c6:	f7ff bfd2 	b.w	800a76e <_raise_r>
 800a7ca:	bf00      	nop
 800a7cc:	20000060 	.word	0x20000060

0800a7d0 <_kill_r>:
 800a7d0:	b538      	push	{r3, r4, r5, lr}
 800a7d2:	4d07      	ldr	r5, [pc, #28]	; (800a7f0 <_kill_r+0x20>)
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	4608      	mov	r0, r1
 800a7da:	4611      	mov	r1, r2
 800a7dc:	602b      	str	r3, [r5, #0]
 800a7de:	f7f8 fbdd 	bl	8002f9c <_kill>
 800a7e2:	1c43      	adds	r3, r0, #1
 800a7e4:	d102      	bne.n	800a7ec <_kill_r+0x1c>
 800a7e6:	682b      	ldr	r3, [r5, #0]
 800a7e8:	b103      	cbz	r3, 800a7ec <_kill_r+0x1c>
 800a7ea:	6023      	str	r3, [r4, #0]
 800a7ec:	bd38      	pop	{r3, r4, r5, pc}
 800a7ee:	bf00      	nop
 800a7f0:	200004f4 	.word	0x200004f4

0800a7f4 <_getpid_r>:
 800a7f4:	f7f8 bbca 	b.w	8002f8c <_getpid>

0800a7f8 <__sread>:
 800a7f8:	b510      	push	{r4, lr}
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a800:	f000 f89c 	bl	800a93c <_read_r>
 800a804:	2800      	cmp	r0, #0
 800a806:	bfab      	itete	ge
 800a808:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a80a:	89a3      	ldrhlt	r3, [r4, #12]
 800a80c:	181b      	addge	r3, r3, r0
 800a80e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a812:	bfac      	ite	ge
 800a814:	6563      	strge	r3, [r4, #84]	; 0x54
 800a816:	81a3      	strhlt	r3, [r4, #12]
 800a818:	bd10      	pop	{r4, pc}

0800a81a <__swrite>:
 800a81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a81e:	461f      	mov	r7, r3
 800a820:	898b      	ldrh	r3, [r1, #12]
 800a822:	05db      	lsls	r3, r3, #23
 800a824:	4605      	mov	r5, r0
 800a826:	460c      	mov	r4, r1
 800a828:	4616      	mov	r6, r2
 800a82a:	d505      	bpl.n	800a838 <__swrite+0x1e>
 800a82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a830:	2302      	movs	r3, #2
 800a832:	2200      	movs	r2, #0
 800a834:	f000 f868 	bl	800a908 <_lseek_r>
 800a838:	89a3      	ldrh	r3, [r4, #12]
 800a83a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a83e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a842:	81a3      	strh	r3, [r4, #12]
 800a844:	4632      	mov	r2, r6
 800a846:	463b      	mov	r3, r7
 800a848:	4628      	mov	r0, r5
 800a84a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a84e:	f000 b817 	b.w	800a880 <_write_r>

0800a852 <__sseek>:
 800a852:	b510      	push	{r4, lr}
 800a854:	460c      	mov	r4, r1
 800a856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a85a:	f000 f855 	bl	800a908 <_lseek_r>
 800a85e:	1c43      	adds	r3, r0, #1
 800a860:	89a3      	ldrh	r3, [r4, #12]
 800a862:	bf15      	itete	ne
 800a864:	6560      	strne	r0, [r4, #84]	; 0x54
 800a866:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a86a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a86e:	81a3      	strheq	r3, [r4, #12]
 800a870:	bf18      	it	ne
 800a872:	81a3      	strhne	r3, [r4, #12]
 800a874:	bd10      	pop	{r4, pc}

0800a876 <__sclose>:
 800a876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a87a:	f000 b813 	b.w	800a8a4 <_close_r>
	...

0800a880 <_write_r>:
 800a880:	b538      	push	{r3, r4, r5, lr}
 800a882:	4d07      	ldr	r5, [pc, #28]	; (800a8a0 <_write_r+0x20>)
 800a884:	4604      	mov	r4, r0
 800a886:	4608      	mov	r0, r1
 800a888:	4611      	mov	r1, r2
 800a88a:	2200      	movs	r2, #0
 800a88c:	602a      	str	r2, [r5, #0]
 800a88e:	461a      	mov	r2, r3
 800a890:	f7f8 fbbb 	bl	800300a <_write>
 800a894:	1c43      	adds	r3, r0, #1
 800a896:	d102      	bne.n	800a89e <_write_r+0x1e>
 800a898:	682b      	ldr	r3, [r5, #0]
 800a89a:	b103      	cbz	r3, 800a89e <_write_r+0x1e>
 800a89c:	6023      	str	r3, [r4, #0]
 800a89e:	bd38      	pop	{r3, r4, r5, pc}
 800a8a0:	200004f4 	.word	0x200004f4

0800a8a4 <_close_r>:
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	4d06      	ldr	r5, [pc, #24]	; (800a8c0 <_close_r+0x1c>)
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	4608      	mov	r0, r1
 800a8ae:	602b      	str	r3, [r5, #0]
 800a8b0:	f7f8 fbc7 	bl	8003042 <_close>
 800a8b4:	1c43      	adds	r3, r0, #1
 800a8b6:	d102      	bne.n	800a8be <_close_r+0x1a>
 800a8b8:	682b      	ldr	r3, [r5, #0]
 800a8ba:	b103      	cbz	r3, 800a8be <_close_r+0x1a>
 800a8bc:	6023      	str	r3, [r4, #0]
 800a8be:	bd38      	pop	{r3, r4, r5, pc}
 800a8c0:	200004f4 	.word	0x200004f4

0800a8c4 <_fstat_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4d07      	ldr	r5, [pc, #28]	; (800a8e4 <_fstat_r+0x20>)
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	4608      	mov	r0, r1
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	602b      	str	r3, [r5, #0]
 800a8d2:	f7f8 fbc2 	bl	800305a <_fstat>
 800a8d6:	1c43      	adds	r3, r0, #1
 800a8d8:	d102      	bne.n	800a8e0 <_fstat_r+0x1c>
 800a8da:	682b      	ldr	r3, [r5, #0]
 800a8dc:	b103      	cbz	r3, 800a8e0 <_fstat_r+0x1c>
 800a8de:	6023      	str	r3, [r4, #0]
 800a8e0:	bd38      	pop	{r3, r4, r5, pc}
 800a8e2:	bf00      	nop
 800a8e4:	200004f4 	.word	0x200004f4

0800a8e8 <_isatty_r>:
 800a8e8:	b538      	push	{r3, r4, r5, lr}
 800a8ea:	4d06      	ldr	r5, [pc, #24]	; (800a904 <_isatty_r+0x1c>)
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	4608      	mov	r0, r1
 800a8f2:	602b      	str	r3, [r5, #0]
 800a8f4:	f7f8 fbc1 	bl	800307a <_isatty>
 800a8f8:	1c43      	adds	r3, r0, #1
 800a8fa:	d102      	bne.n	800a902 <_isatty_r+0x1a>
 800a8fc:	682b      	ldr	r3, [r5, #0]
 800a8fe:	b103      	cbz	r3, 800a902 <_isatty_r+0x1a>
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	bd38      	pop	{r3, r4, r5, pc}
 800a904:	200004f4 	.word	0x200004f4

0800a908 <_lseek_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	4d07      	ldr	r5, [pc, #28]	; (800a928 <_lseek_r+0x20>)
 800a90c:	4604      	mov	r4, r0
 800a90e:	4608      	mov	r0, r1
 800a910:	4611      	mov	r1, r2
 800a912:	2200      	movs	r2, #0
 800a914:	602a      	str	r2, [r5, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	f7f8 fbba 	bl	8003090 <_lseek>
 800a91c:	1c43      	adds	r3, r0, #1
 800a91e:	d102      	bne.n	800a926 <_lseek_r+0x1e>
 800a920:	682b      	ldr	r3, [r5, #0]
 800a922:	b103      	cbz	r3, 800a926 <_lseek_r+0x1e>
 800a924:	6023      	str	r3, [r4, #0]
 800a926:	bd38      	pop	{r3, r4, r5, pc}
 800a928:	200004f4 	.word	0x200004f4

0800a92c <_malloc_usable_size_r>:
 800a92c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a930:	1f18      	subs	r0, r3, #4
 800a932:	2b00      	cmp	r3, #0
 800a934:	bfbc      	itt	lt
 800a936:	580b      	ldrlt	r3, [r1, r0]
 800a938:	18c0      	addlt	r0, r0, r3
 800a93a:	4770      	bx	lr

0800a93c <_read_r>:
 800a93c:	b538      	push	{r3, r4, r5, lr}
 800a93e:	4d07      	ldr	r5, [pc, #28]	; (800a95c <_read_r+0x20>)
 800a940:	4604      	mov	r4, r0
 800a942:	4608      	mov	r0, r1
 800a944:	4611      	mov	r1, r2
 800a946:	2200      	movs	r2, #0
 800a948:	602a      	str	r2, [r5, #0]
 800a94a:	461a      	mov	r2, r3
 800a94c:	f7f8 fb40 	bl	8002fd0 <_read>
 800a950:	1c43      	adds	r3, r0, #1
 800a952:	d102      	bne.n	800a95a <_read_r+0x1e>
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	b103      	cbz	r3, 800a95a <_read_r+0x1e>
 800a958:	6023      	str	r3, [r4, #0]
 800a95a:	bd38      	pop	{r3, r4, r5, pc}
 800a95c:	200004f4 	.word	0x200004f4

0800a960 <sqrt>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	ed2d 8b02 	vpush	{d8}
 800a966:	ec55 4b10 	vmov	r4, r5, d0
 800a96a:	f000 f825 	bl	800a9b8 <__ieee754_sqrt>
 800a96e:	4622      	mov	r2, r4
 800a970:	462b      	mov	r3, r5
 800a972:	4620      	mov	r0, r4
 800a974:	4629      	mov	r1, r5
 800a976:	eeb0 8a40 	vmov.f32	s16, s0
 800a97a:	eef0 8a60 	vmov.f32	s17, s1
 800a97e:	f7f6 f905 	bl	8000b8c <__aeabi_dcmpun>
 800a982:	b990      	cbnz	r0, 800a9aa <sqrt+0x4a>
 800a984:	2200      	movs	r2, #0
 800a986:	2300      	movs	r3, #0
 800a988:	4620      	mov	r0, r4
 800a98a:	4629      	mov	r1, r5
 800a98c:	f7f6 f8d6 	bl	8000b3c <__aeabi_dcmplt>
 800a990:	b158      	cbz	r0, 800a9aa <sqrt+0x4a>
 800a992:	f7fb fd77 	bl	8006484 <__errno>
 800a996:	2321      	movs	r3, #33	; 0x21
 800a998:	6003      	str	r3, [r0, #0]
 800a99a:	2200      	movs	r2, #0
 800a99c:	2300      	movs	r3, #0
 800a99e:	4610      	mov	r0, r2
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	f7f5 ff83 	bl	80008ac <__aeabi_ddiv>
 800a9a6:	ec41 0b18 	vmov	d8, r0, r1
 800a9aa:	eeb0 0a48 	vmov.f32	s0, s16
 800a9ae:	eef0 0a68 	vmov.f32	s1, s17
 800a9b2:	ecbd 8b02 	vpop	{d8}
 800a9b6:	bd38      	pop	{r3, r4, r5, pc}

0800a9b8 <__ieee754_sqrt>:
 800a9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9bc:	ec55 4b10 	vmov	r4, r5, d0
 800a9c0:	4e55      	ldr	r6, [pc, #340]	; (800ab18 <__ieee754_sqrt+0x160>)
 800a9c2:	43ae      	bics	r6, r5
 800a9c4:	ee10 0a10 	vmov	r0, s0
 800a9c8:	ee10 3a10 	vmov	r3, s0
 800a9cc:	462a      	mov	r2, r5
 800a9ce:	4629      	mov	r1, r5
 800a9d0:	d110      	bne.n	800a9f4 <__ieee754_sqrt+0x3c>
 800a9d2:	ee10 2a10 	vmov	r2, s0
 800a9d6:	462b      	mov	r3, r5
 800a9d8:	f7f5 fe3e 	bl	8000658 <__aeabi_dmul>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	460b      	mov	r3, r1
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	4629      	mov	r1, r5
 800a9e4:	f7f5 fc82 	bl	80002ec <__adddf3>
 800a9e8:	4604      	mov	r4, r0
 800a9ea:	460d      	mov	r5, r1
 800a9ec:	ec45 4b10 	vmov	d0, r4, r5
 800a9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f4:	2d00      	cmp	r5, #0
 800a9f6:	dc10      	bgt.n	800aa1a <__ieee754_sqrt+0x62>
 800a9f8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a9fc:	4330      	orrs	r0, r6
 800a9fe:	d0f5      	beq.n	800a9ec <__ieee754_sqrt+0x34>
 800aa00:	b15d      	cbz	r5, 800aa1a <__ieee754_sqrt+0x62>
 800aa02:	ee10 2a10 	vmov	r2, s0
 800aa06:	462b      	mov	r3, r5
 800aa08:	ee10 0a10 	vmov	r0, s0
 800aa0c:	f7f5 fc6c 	bl	80002e8 <__aeabi_dsub>
 800aa10:	4602      	mov	r2, r0
 800aa12:	460b      	mov	r3, r1
 800aa14:	f7f5 ff4a 	bl	80008ac <__aeabi_ddiv>
 800aa18:	e7e6      	b.n	800a9e8 <__ieee754_sqrt+0x30>
 800aa1a:	1512      	asrs	r2, r2, #20
 800aa1c:	d074      	beq.n	800ab08 <__ieee754_sqrt+0x150>
 800aa1e:	07d4      	lsls	r4, r2, #31
 800aa20:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800aa24:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800aa28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800aa2c:	bf5e      	ittt	pl
 800aa2e:	0fda      	lsrpl	r2, r3, #31
 800aa30:	005b      	lslpl	r3, r3, #1
 800aa32:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800aa36:	2400      	movs	r4, #0
 800aa38:	0fda      	lsrs	r2, r3, #31
 800aa3a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800aa3e:	107f      	asrs	r7, r7, #1
 800aa40:	005b      	lsls	r3, r3, #1
 800aa42:	2516      	movs	r5, #22
 800aa44:	4620      	mov	r0, r4
 800aa46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800aa4a:	1886      	adds	r6, r0, r2
 800aa4c:	428e      	cmp	r6, r1
 800aa4e:	bfde      	ittt	le
 800aa50:	1b89      	suble	r1, r1, r6
 800aa52:	18b0      	addle	r0, r6, r2
 800aa54:	18a4      	addle	r4, r4, r2
 800aa56:	0049      	lsls	r1, r1, #1
 800aa58:	3d01      	subs	r5, #1
 800aa5a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800aa5e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800aa62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa66:	d1f0      	bne.n	800aa4a <__ieee754_sqrt+0x92>
 800aa68:	462a      	mov	r2, r5
 800aa6a:	f04f 0e20 	mov.w	lr, #32
 800aa6e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aa72:	4281      	cmp	r1, r0
 800aa74:	eb06 0c05 	add.w	ip, r6, r5
 800aa78:	dc02      	bgt.n	800aa80 <__ieee754_sqrt+0xc8>
 800aa7a:	d113      	bne.n	800aaa4 <__ieee754_sqrt+0xec>
 800aa7c:	459c      	cmp	ip, r3
 800aa7e:	d811      	bhi.n	800aaa4 <__ieee754_sqrt+0xec>
 800aa80:	f1bc 0f00 	cmp.w	ip, #0
 800aa84:	eb0c 0506 	add.w	r5, ip, r6
 800aa88:	da43      	bge.n	800ab12 <__ieee754_sqrt+0x15a>
 800aa8a:	2d00      	cmp	r5, #0
 800aa8c:	db41      	blt.n	800ab12 <__ieee754_sqrt+0x15a>
 800aa8e:	f100 0801 	add.w	r8, r0, #1
 800aa92:	1a09      	subs	r1, r1, r0
 800aa94:	459c      	cmp	ip, r3
 800aa96:	bf88      	it	hi
 800aa98:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800aa9c:	eba3 030c 	sub.w	r3, r3, ip
 800aaa0:	4432      	add	r2, r6
 800aaa2:	4640      	mov	r0, r8
 800aaa4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800aaa8:	f1be 0e01 	subs.w	lr, lr, #1
 800aaac:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800aab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aab4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aab8:	d1db      	bne.n	800aa72 <__ieee754_sqrt+0xba>
 800aaba:	430b      	orrs	r3, r1
 800aabc:	d006      	beq.n	800aacc <__ieee754_sqrt+0x114>
 800aabe:	1c50      	adds	r0, r2, #1
 800aac0:	bf13      	iteet	ne
 800aac2:	3201      	addne	r2, #1
 800aac4:	3401      	addeq	r4, #1
 800aac6:	4672      	moveq	r2, lr
 800aac8:	f022 0201 	bicne.w	r2, r2, #1
 800aacc:	1063      	asrs	r3, r4, #1
 800aace:	0852      	lsrs	r2, r2, #1
 800aad0:	07e1      	lsls	r1, r4, #31
 800aad2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800aad6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800aada:	bf48      	it	mi
 800aadc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800aae0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800aae4:	4614      	mov	r4, r2
 800aae6:	e781      	b.n	800a9ec <__ieee754_sqrt+0x34>
 800aae8:	0ad9      	lsrs	r1, r3, #11
 800aaea:	3815      	subs	r0, #21
 800aaec:	055b      	lsls	r3, r3, #21
 800aaee:	2900      	cmp	r1, #0
 800aaf0:	d0fa      	beq.n	800aae8 <__ieee754_sqrt+0x130>
 800aaf2:	02cd      	lsls	r5, r1, #11
 800aaf4:	d50a      	bpl.n	800ab0c <__ieee754_sqrt+0x154>
 800aaf6:	f1c2 0420 	rsb	r4, r2, #32
 800aafa:	fa23 f404 	lsr.w	r4, r3, r4
 800aafe:	1e55      	subs	r5, r2, #1
 800ab00:	4093      	lsls	r3, r2
 800ab02:	4321      	orrs	r1, r4
 800ab04:	1b42      	subs	r2, r0, r5
 800ab06:	e78a      	b.n	800aa1e <__ieee754_sqrt+0x66>
 800ab08:	4610      	mov	r0, r2
 800ab0a:	e7f0      	b.n	800aaee <__ieee754_sqrt+0x136>
 800ab0c:	0049      	lsls	r1, r1, #1
 800ab0e:	3201      	adds	r2, #1
 800ab10:	e7ef      	b.n	800aaf2 <__ieee754_sqrt+0x13a>
 800ab12:	4680      	mov	r8, r0
 800ab14:	e7bd      	b.n	800aa92 <__ieee754_sqrt+0xda>
 800ab16:	bf00      	nop
 800ab18:	7ff00000 	.word	0x7ff00000

0800ab1c <_init>:
 800ab1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1e:	bf00      	nop
 800ab20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab22:	bc08      	pop	{r3}
 800ab24:	469e      	mov	lr, r3
 800ab26:	4770      	bx	lr

0800ab28 <_fini>:
 800ab28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab2a:	bf00      	nop
 800ab2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab2e:	bc08      	pop	{r3}
 800ab30:	469e      	mov	lr, r3
 800ab32:	4770      	bx	lr
