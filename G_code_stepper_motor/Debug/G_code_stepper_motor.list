
G_code_stepper_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800ab88  0800ab88  0001ab88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b110  0800b110  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  0800b110  0800b110  0001b110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b118  0800b118  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b118  0800b118  0001b118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b11c  0800b11c  0001b11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800b120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000234  0800b354  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  0800b354  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f18  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c27  00000000  00000000  0003417c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00036da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  00037ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000245c3  00000000  00000000  00038ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f50  00000000  00000000  0005d4ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4ea5  00000000  00000000  000723fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001472a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d68  00000000  00000000  001472f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000234 	.word	0x20000234
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ab6c 	.word	0x0800ab6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000238 	.word	0x20000238
 800020c:	0800ab6c 	.word	0x0800ab6c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <Setup_Absolute_position>:
 */

#include "GCode_helper.h"


void Setup_Absolute_position(char *tokens[] ){
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

	if((*tokens[1]) == 'Z'){
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3304      	adds	r3, #4
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b5a      	cmp	r3, #90	; 0x5a
 800106a:	d140      	bne.n	80010ee <Setup_Absolute_position+0x96>
	// Z directional motor
//	char *p;
	float steps =strtod(tokens[1]+1,NULL);  // strtol(tokens[1]+1, &p, 10);  //number start from next position of string
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3304      	adds	r3, #4
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f006 fd0c 	bl	8007a94 <strtod>
 800107c:	ec53 2b10 	vmov	r2, r3, d0
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fde0 	bl	8000c48 <__aeabi_d2f>
 8001088:	4603      	mov	r3, r0
 800108a:	617b      	str	r3, [r7, #20]

	/* Z motor Positioning */
	int32_t total_steps = (int32_t) (steps * steps_per_millimeters);
 800108c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001090:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80010f4 <Setup_Absolute_position+0x9c>
 8001094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109c:	ee17 3a90 	vmov	r3, s15
 80010a0:	613b      	str	r3, [r7, #16]
	moveTo(total_steps);
 80010a2:	6938      	ldr	r0, [r7, #16]
 80010a4:	f001 f8f4 	bl	8002290 <moveTo>



	if(*tokens[2] == 'F'){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3308      	adds	r3, #8
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b46      	cmp	r3, #70	; 0x46
 80010b2:	d11b      	bne.n	80010ec <Setup_Absolute_position+0x94>
	/* F speed controller */
	float speed = strtod(tokens[2]+1,NULL);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3308      	adds	r3, #8
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f006 fce8 	bl	8007a94 <strtod>
 80010c4:	ec53 2b10 	vmov	r2, r3, d0
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f7ff fdbc 	bl	8000c48 <__aeabi_d2f>
 80010d0:	4603      	mov	r3, r0
 80010d2:	60fb      	str	r3, [r7, #12]
	speed = speed * steps_per_millimeters;
 80010d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010d8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80010f4 <Setup_Absolute_position+0x9c>
 80010dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e0:	edc7 7a03 	vstr	s15, [r7, #12]
	/*Fan Speed controlling */
	setMaxSpeed(speed);
 80010e4:	ed97 0a03 	vldr	s0, [r7, #12]
 80010e8:	f001 fb7a 	bl	80027e0 <setMaxSpeed>

	}
	return;
 80010ec:	bf00      	nop
	}


}
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	47435000 	.word	0x47435000

080010f8 <Setup_Relative_position>:


void Setup_Relative_position(char *tokens[] ){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

	if((*tokens[1]) == 'Z'){
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3304      	adds	r3, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b5a      	cmp	r3, #90	; 0x5a
 800110a:	d140      	bne.n	800118e <Setup_Relative_position+0x96>
	// Z directional motor
//	char *p;
	float steps =strtod(tokens[1]+1,NULL);  // strtol(tokens[1]+1, &p, 10);  //number start from next position of string
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3304      	adds	r3, #4
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f006 fcbc 	bl	8007a94 <strtod>
 800111c:	ec53 2b10 	vmov	r2, r3, d0
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fd90 	bl	8000c48 <__aeabi_d2f>
 8001128:	4603      	mov	r3, r0
 800112a:	617b      	str	r3, [r7, #20]

	/* Z motor Positioning */
	int32_t total_steps = (int32_t) (steps * steps_per_millimeters);
 800112c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001130:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001198 <Setup_Relative_position+0xa0>
 8001134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800113c:	ee17 3a90 	vmov	r3, s15
 8001140:	613b      	str	r3, [r7, #16]
	move(total_steps);
 8001142:	6938      	ldr	r0, [r7, #16]
 8001144:	f001 f8cc 	bl	80022e0 <move>

	if(*tokens[2] == 'F'){
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3308      	adds	r3, #8
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b46      	cmp	r3, #70	; 0x46
 8001152:	d11c      	bne.n	800118e <Setup_Relative_position+0x96>
	/* F speed controller */
	float speed = strtod(tokens[2]+1,NULL);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3308      	adds	r3, #8
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f006 fc98 	bl	8007a94 <strtod>
 8001164:	ec53 2b10 	vmov	r2, r3, d0
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fd6c 	bl	8000c48 <__aeabi_d2f>
 8001170:	4603      	mov	r3, r0
 8001172:	60fb      	str	r3, [r7, #12]
	speed = speed * steps_per_millimeters;
 8001174:	edd7 7a03 	vldr	s15, [r7, #12]
 8001178:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001198 <Setup_Relative_position+0xa0>
 800117c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001180:	edc7 7a03 	vstr	s15, [r7, #12]

	/*Fan Speed controlling */
	setMaxSpeed(speed);
 8001184:	ed97 0a03 	vldr	s0, [r7, #12]
 8001188:	f001 fb2a 	bl	80027e0 <setMaxSpeed>

	}
}
	return;
 800118c:	bf00      	nop
 800118e:	bf00      	nop
}
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	47435000 	.word	0x47435000

0800119c <Homing_motor>:

void Homing_motor(char *tokens[] ){
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	setMaxSpeed(2*home_speed); //MOVING IN ccw
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <Homing_motor+0x50>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b2:	eeb0 0a67 	vmov.f32	s0, s15
 80011b6:	f001 fb13 	bl	80027e0 <setMaxSpeed>
	setSpeed(-1*home_speed); //MOVING IN ccw
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <Homing_motor+0x50>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	425b      	negs	r3, r3
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c8:	eeb0 0a67 	vmov.f32	s0, s15
 80011cc:	f001 fbec 	bl	80029a8 <setSpeed>


	while(!HOMED){
 80011d0:	e001      	b.n	80011d6 <Homing_motor+0x3a>
	runSpeed();
 80011d2:	f001 f933 	bl	800243c <runSpeed>
	while(!HOMED){
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <Homing_motor+0x54>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f9      	beq.n	80011d2 <Homing_motor+0x36>
	}
	setCurrentPosition(0);
 80011de:	2000      	movs	r0, #0
 80011e0:	f001 f982 	bl	80024e8 <setCurrentPosition>
	return;
 80011e4:	bf00      	nop
}
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2000004c 	.word	0x2000004c
 80011f0:	20000491 	.word	0x20000491

080011f4 <Homing_completion>:

void Homing_completion(void){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	//resetting position parameters
	setCurrentPosition(0);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f001 f975 	bl	80024e8 <setCurrentPosition>
	stop();
 80011fe:	f001 fce5 	bl	8002bcc <stop>
	//Resetting the encoder value to zero
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8001202:	4b03      	ldr	r3, [pc, #12]	; (8001210 <Homing_completion+0x1c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2200      	movs	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
	return;
 800120a:	bf00      	nop
}
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000334 	.word	0x20000334

08001214 <Run_Motor>:

void Run_Motor(void){
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	runToPosition();
 8001218:	f001 fccc 	bl	8002bb4 <runToPosition>
	return;
 800121c:	bf00      	nop
}
 800121e:	bd80      	pop	{r7, pc}

08001220 <dectoint>:
 * Convert binary values contaning arry to decimal values
 * Params:
 * y_1 =
 */
void dectoint(char *y_1, char *y_2)
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	*y_1 = ((arr1[0]*pow(2,7))+(arr1[1]*pow(2,6))+(arr1[2]*pow(2,5))+(arr1[3]*pow(2,4))+(arr1[4]*pow(2,3))+(arr1[5]*pow(2,2))+(arr1[6]*pow(2,1))+(arr1[7]*pow(2,0)));
 800122a:	4b9c      	ldr	r3, [pc, #624]	; (800149c <dectoint+0x27c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f9a8 	bl	8000584 <__aeabi_i2d>
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	4b99      	ldr	r3, [pc, #612]	; (80014a0 <dectoint+0x280>)
 800123a:	f7ff fa0d 	bl	8000658 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4614      	mov	r4, r2
 8001244:	461d      	mov	r5, r3
 8001246:	4b95      	ldr	r3, [pc, #596]	; (800149c <dectoint+0x27c>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f99a 	bl	8000584 <__aeabi_i2d>
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b93      	ldr	r3, [pc, #588]	; (80014a4 <dectoint+0x284>)
 8001256:	f7ff f9ff 	bl	8000658 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4620      	mov	r0, r4
 8001260:	4629      	mov	r1, r5
 8001262:	f7ff f843 	bl	80002ec <__adddf3>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4614      	mov	r4, r2
 800126c:	461d      	mov	r5, r3
 800126e:	4b8b      	ldr	r3, [pc, #556]	; (800149c <dectoint+0x27c>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f986 	bl	8000584 <__aeabi_i2d>
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	4b8a      	ldr	r3, [pc, #552]	; (80014a8 <dectoint+0x288>)
 800127e:	f7ff f9eb 	bl	8000658 <__aeabi_dmul>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4620      	mov	r0, r4
 8001288:	4629      	mov	r1, r5
 800128a:	f7ff f82f 	bl	80002ec <__adddf3>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4614      	mov	r4, r2
 8001294:	461d      	mov	r5, r3
 8001296:	4b81      	ldr	r3, [pc, #516]	; (800149c <dectoint+0x27c>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f972 	bl	8000584 <__aeabi_i2d>
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	4b81      	ldr	r3, [pc, #516]	; (80014ac <dectoint+0x28c>)
 80012a6:	f7ff f9d7 	bl	8000658 <__aeabi_dmul>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4620      	mov	r0, r4
 80012b0:	4629      	mov	r1, r5
 80012b2:	f7ff f81b 	bl	80002ec <__adddf3>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4614      	mov	r4, r2
 80012bc:	461d      	mov	r5, r3
 80012be:	4b77      	ldr	r3, [pc, #476]	; (800149c <dectoint+0x27c>)
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f95e 	bl	8000584 <__aeabi_i2d>
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	4b78      	ldr	r3, [pc, #480]	; (80014b0 <dectoint+0x290>)
 80012ce:	f7ff f9c3 	bl	8000658 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4620      	mov	r0, r4
 80012d8:	4629      	mov	r1, r5
 80012da:	f7ff f807 	bl	80002ec <__adddf3>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4614      	mov	r4, r2
 80012e4:	461d      	mov	r5, r3
 80012e6:	4b6d      	ldr	r3, [pc, #436]	; (800149c <dectoint+0x27c>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f94a 	bl	8000584 <__aeabi_i2d>
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b6f      	ldr	r3, [pc, #444]	; (80014b4 <dectoint+0x294>)
 80012f6:	f7ff f9af 	bl	8000658 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4620      	mov	r0, r4
 8001300:	4629      	mov	r1, r5
 8001302:	f7fe fff3 	bl	80002ec <__adddf3>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4614      	mov	r4, r2
 800130c:	461d      	mov	r5, r3
 800130e:	4b63      	ldr	r3, [pc, #396]	; (800149c <dectoint+0x27c>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f936 	bl	8000584 <__aeabi_i2d>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	f7fe ffe6 	bl	80002ec <__adddf3>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4620      	mov	r0, r4
 8001326:	4629      	mov	r1, r5
 8001328:	f7fe ffe0 	bl	80002ec <__adddf3>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4614      	mov	r4, r2
 8001332:	461d      	mov	r5, r3
 8001334:	4b59      	ldr	r3, [pc, #356]	; (800149c <dectoint+0x27c>)
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f923 	bl	8000584 <__aeabi_i2d>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4620      	mov	r0, r4
 8001344:	4629      	mov	r1, r5
 8001346:	f7fe ffd1 	bl	80002ec <__adddf3>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fc59 	bl	8000c08 <__aeabi_d2uiz>
 8001356:	4603      	mov	r3, r0
 8001358:	b2da      	uxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	701a      	strb	r2, [r3, #0]

	*y_2 = ((arr2[0]*pow(2,7))+(arr2[1]*pow(2,6))+(arr2[2]*pow(2,5))+(arr2[3]*pow(2,4))+(arr2[4]*pow(2,3))+(arr2[5]*pow(2,2))+(arr2[6]*pow(2,1))+(arr2[7]*pow(2,0)));
 800135e:	4b56      	ldr	r3, [pc, #344]	; (80014b8 <dectoint+0x298>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f90e 	bl	8000584 <__aeabi_i2d>
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	4b4c      	ldr	r3, [pc, #304]	; (80014a0 <dectoint+0x280>)
 800136e:	f7ff f973 	bl	8000658 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4614      	mov	r4, r2
 8001378:	461d      	mov	r5, r3
 800137a:	4b4f      	ldr	r3, [pc, #316]	; (80014b8 <dectoint+0x298>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f900 	bl	8000584 <__aeabi_i2d>
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	4b46      	ldr	r3, [pc, #280]	; (80014a4 <dectoint+0x284>)
 800138a:	f7ff f965 	bl	8000658 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4620      	mov	r0, r4
 8001394:	4629      	mov	r1, r5
 8001396:	f7fe ffa9 	bl	80002ec <__adddf3>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4614      	mov	r4, r2
 80013a0:	461d      	mov	r5, r3
 80013a2:	4b45      	ldr	r3, [pc, #276]	; (80014b8 <dectoint+0x298>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8ec 	bl	8000584 <__aeabi_i2d>
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b3d      	ldr	r3, [pc, #244]	; (80014a8 <dectoint+0x288>)
 80013b2:	f7ff f951 	bl	8000658 <__aeabi_dmul>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4620      	mov	r0, r4
 80013bc:	4629      	mov	r1, r5
 80013be:	f7fe ff95 	bl	80002ec <__adddf3>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4614      	mov	r4, r2
 80013c8:	461d      	mov	r5, r3
 80013ca:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <dectoint+0x298>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8d8 	bl	8000584 <__aeabi_i2d>
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	4b34      	ldr	r3, [pc, #208]	; (80014ac <dectoint+0x28c>)
 80013da:	f7ff f93d 	bl	8000658 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4620      	mov	r0, r4
 80013e4:	4629      	mov	r1, r5
 80013e6:	f7fe ff81 	bl	80002ec <__adddf3>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4614      	mov	r4, r2
 80013f0:	461d      	mov	r5, r3
 80013f2:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <dectoint+0x298>)
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f8c4 	bl	8000584 <__aeabi_i2d>
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	4b2b      	ldr	r3, [pc, #172]	; (80014b0 <dectoint+0x290>)
 8001402:	f7ff f929 	bl	8000658 <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4620      	mov	r0, r4
 800140c:	4629      	mov	r1, r5
 800140e:	f7fe ff6d 	bl	80002ec <__adddf3>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4614      	mov	r4, r2
 8001418:	461d      	mov	r5, r3
 800141a:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <dectoint+0x298>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f8b0 	bl	8000584 <__aeabi_i2d>
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <dectoint+0x294>)
 800142a:	f7ff f915 	bl	8000658 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4620      	mov	r0, r4
 8001434:	4629      	mov	r1, r5
 8001436:	f7fe ff59 	bl	80002ec <__adddf3>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4614      	mov	r4, r2
 8001440:	461d      	mov	r5, r3
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <dectoint+0x298>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f89c 	bl	8000584 <__aeabi_i2d>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	f7fe ff4c 	bl	80002ec <__adddf3>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4620      	mov	r0, r4
 800145a:	4629      	mov	r1, r5
 800145c:	f7fe ff46 	bl	80002ec <__adddf3>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4614      	mov	r4, r2
 8001466:	461d      	mov	r5, r3
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <dectoint+0x298>)
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f889 	bl	8000584 <__aeabi_i2d>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4620      	mov	r0, r4
 8001478:	4629      	mov	r1, r5
 800147a:	f7fe ff37 	bl	80002ec <__adddf3>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fbbf 	bl	8000c08 <__aeabi_d2uiz>
 800148a:	4603      	mov	r3, r0
 800148c:	b2da      	uxtb	r2, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	701a      	strb	r2, [r3, #0]

}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bdb0      	pop	{r4, r5, r7, pc}
 800149a:	bf00      	nop
 800149c:	20000294 	.word	0x20000294
 80014a0:	40600000 	.word	0x40600000
 80014a4:	40500000 	.word	0x40500000
 80014a8:	40400000 	.word	0x40400000
 80014ac:	40300000 	.word	0x40300000
 80014b0:	40200000 	.word	0x40200000
 80014b4:	40100000 	.word	0x40100000
 80014b8:	200002b4 	.word	0x200002b4

080014bc <split>:
 * y1 = empty char which going to carry left most 8 bits equivalent decimal value after the function execution.
 * y2 = empty char which going to carry right most 8 bits equivalent decimal value after the function execution.
 */

void split(char *y1, char *y2)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
	int k=0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
	int l=0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
	for(int i = 0; i<16; i++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	e025      	b.n	8001520 <split+0x64>
	{
		if(i>=0 && i<=7)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db0e      	blt.n	80014f8 <split+0x3c>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b07      	cmp	r3, #7
 80014de:	dc0b      	bgt.n	80014f8 <split+0x3c>
		{

			arr1[k] = arr[i];
 80014e0:	4a15      	ldr	r2, [pc, #84]	; (8001538 <split+0x7c>)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014e8:	4914      	ldr	r1, [pc, #80]	; (800153c <split+0x80>)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			k++;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3301      	adds	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	e010      	b.n	800151a <split+0x5e>
		}

		else if(i>=8 && i <=15)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b07      	cmp	r3, #7
 80014fc:	dd0d      	ble.n	800151a <split+0x5e>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2b0f      	cmp	r3, #15
 8001502:	dc0a      	bgt.n	800151a <split+0x5e>
		{

			arr2[l] = arr[i];
 8001504:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <split+0x7c>)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800150c:	490c      	ldr	r1, [pc, #48]	; (8001540 <split+0x84>)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			l++;
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	3301      	adds	r3, #1
 8001518:	613b      	str	r3, [r7, #16]
	for(int i = 0; i<16; i++)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3301      	adds	r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b0f      	cmp	r3, #15
 8001524:	ddd6      	ble.n	80014d4 <split+0x18>
		}
	}
	dectoint(y1,y2);// stores the equivalent decimal of binary number in arr1 and arr2 into y1 and y2
 8001526:	6839      	ldr	r1, [r7, #0]
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fe79 	bl	8001220 <dectoint>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000254 	.word	0x20000254
 800153c:	20000294 	.word	0x20000294
 8001540:	200002b4 	.word	0x200002b4

08001544 <dectobin>:
 * y1 = stores the left most 8 bits in decimal form from 16bit binary number
 * y2 = stores the right most 8 bits in decimal form from 16bit binary number
 *
 */
void dectobin(int y, char *y1, char *y2)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b098      	sub	sp, #96	; 0x60
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	65fb      	str	r3, [r7, #92]	; 0x5c
	int j = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	65bb      	str	r3, [r7, #88]	; 0x58

	int binaryNum[16]={0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2240      	movs	r2, #64	; 0x40
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f004 ffe1 	bl	8006528 <memset>
	while( y > 0)
 8001566:	e014      	b.n	8001592 <dectobin+0x4e>
	{
		binaryNum[i] = y % 2;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	bfb8      	it	lt
 8001572:	425b      	neglt	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	3360      	adds	r3, #96	; 0x60
 800157c:	443b      	add	r3, r7
 800157e:	f843 2c4c 	str.w	r2, [r3, #-76]
		y = y/2;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	0fda      	lsrs	r2, r3, #31
 8001586:	4413      	add	r3, r2
 8001588:	105b      	asrs	r3, r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
		i++;
 800158c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800158e:	3301      	adds	r3, #1
 8001590:	65fb      	str	r3, [r7, #92]	; 0x5c
	while( y > 0)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	dce7      	bgt.n	8001568 <dectobin+0x24>
	}

	int k=0;
 8001598:	2300      	movs	r3, #0
 800159a:	657b      	str	r3, [r7, #84]	; 0x54
	for(j= 15; j >= 0; j--)
 800159c:	230f      	movs	r3, #15
 800159e:	65bb      	str	r3, [r7, #88]	; 0x58
 80015a0:	e00f      	b.n	80015c2 <dectobin+0x7e>
	{
		arr[k] = binaryNum[j];
 80015a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	3360      	adds	r3, #96	; 0x60
 80015a8:	443b      	add	r3, r7
 80015aa:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 80015ae:	490a      	ldr	r1, [pc, #40]	; (80015d8 <dectobin+0x94>)
 80015b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		k++;
 80015b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b8:	3301      	adds	r3, #1
 80015ba:	657b      	str	r3, [r7, #84]	; 0x54
	for(j= 15; j >= 0; j--)
 80015bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015be:	3b01      	subs	r3, #1
 80015c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80015c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	daec      	bge.n	80015a2 <dectobin+0x5e>
	}
	split(y1,y2);
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	68b8      	ldr	r0, [r7, #8]
 80015cc:	f7ff ff76 	bl	80014bc <split>
}
 80015d0:	bf00      	nop
 80015d2:	3760      	adds	r7, #96	; 0x60
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000254 	.word	0x20000254

080015dc <send_function>:
 * channel = char which equal to binary between 00110000 to 00111111
 * y1 : 8 bit value that splits from left part of 16bit brightness value
 * y2 :  8 bit value that splits from right part of 16bit brightness value
 */
void send_function( char channel , char *y_1 , char *y_2)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(SPI_Selection_GPIO_Port , SPI_Selection_Pin, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f0:	4810      	ldr	r0, [pc, #64]	; (8001634 <send_function+0x58>)
 80015f2:	f002 f9d1 	bl	8003998 <HAL_GPIO_WritePin>
		x = channel;
 80015f6:	4a10      	ldr	r2, [pc, #64]	; (8001638 <send_function+0x5c>)
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	7013      	strb	r3, [r2, #0]

		HAL_SPI_Transmit(&hspi1,(uint8_t*) &x, sizeof(x), 100);
 80015fc:	2364      	movs	r3, #100	; 0x64
 80015fe:	2201      	movs	r2, #1
 8001600:	490d      	ldr	r1, [pc, #52]	; (8001638 <send_function+0x5c>)
 8001602:	480e      	ldr	r0, [pc, #56]	; (800163c <send_function+0x60>)
 8001604:	f003 f86b 	bl	80046de <HAL_SPI_Transmit>

	    HAL_SPI_Transmit(&hspi1,(uint8_t*) y_1, sizeof(*y_1), 100);
 8001608:	2364      	movs	r3, #100	; 0x64
 800160a:	2201      	movs	r2, #1
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	480b      	ldr	r0, [pc, #44]	; (800163c <send_function+0x60>)
 8001610:	f003 f865 	bl	80046de <HAL_SPI_Transmit>

	    HAL_SPI_Transmit(&hspi1,(uint8_t*) y_2, sizeof(*y_2), 100);
 8001614:	2364      	movs	r3, #100	; 0x64
 8001616:	2201      	movs	r2, #1
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4808      	ldr	r0, [pc, #32]	; (800163c <send_function+0x60>)
 800161c:	f003 f85f 	bl	80046de <HAL_SPI_Transmit>


	    HAL_GPIO_WritePin(SPI_Selection_GPIO_Port , SPI_Selection_Pin, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001626:	4803      	ldr	r0, [pc, #12]	; (8001634 <send_function+0x58>)
 8001628:	f002 f9b6 	bl	8003998 <HAL_GPIO_WritePin>
}
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40020000 	.word	0x40020000
 8001638:	2000000c 	.word	0x2000000c
 800163c:	200002dc 	.word	0x200002dc

08001640 <stop_function>:
 * Turn Off the LED channel that we provided as parameter
 * param:
 * channel = char which equal to binary between 00110000 to 00111111
 */
void stop_function( char channel)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]

		HAL_GPIO_WritePin(SPI_Selection_GPIO_Port , SPI_Selection_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001650:	4810      	ldr	r0, [pc, #64]	; (8001694 <stop_function+0x54>)
 8001652:	f002 f9a1 	bl	8003998 <HAL_GPIO_WritePin>
		x = channel;
 8001656:	4a10      	ldr	r2, [pc, #64]	; (8001698 <stop_function+0x58>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	7013      	strb	r3, [r2, #0]

		HAL_SPI_Transmit(&hspi1,(uint8_t*) &x, sizeof(x), 100);
 800165c:	2364      	movs	r3, #100	; 0x64
 800165e:	2201      	movs	r2, #1
 8001660:	490d      	ldr	r1, [pc, #52]	; (8001698 <stop_function+0x58>)
 8001662:	480e      	ldr	r0, [pc, #56]	; (800169c <stop_function+0x5c>)
 8001664:	f003 f83b 	bl	80046de <HAL_SPI_Transmit>

	    HAL_SPI_Transmit(&hspi1,&stop_led, sizeof(stop_led), 100);
 8001668:	2364      	movs	r3, #100	; 0x64
 800166a:	2201      	movs	r2, #1
 800166c:	490c      	ldr	r1, [pc, #48]	; (80016a0 <stop_function+0x60>)
 800166e:	480b      	ldr	r0, [pc, #44]	; (800169c <stop_function+0x5c>)
 8001670:	f003 f835 	bl	80046de <HAL_SPI_Transmit>

	    HAL_SPI_Transmit(&hspi1,&stop_led, sizeof(stop_led), 100);
 8001674:	2364      	movs	r3, #100	; 0x64
 8001676:	2201      	movs	r2, #1
 8001678:	4909      	ldr	r1, [pc, #36]	; (80016a0 <stop_function+0x60>)
 800167a:	4808      	ldr	r0, [pc, #32]	; (800169c <stop_function+0x5c>)
 800167c:	f003 f82f 	bl	80046de <HAL_SPI_Transmit>

	    HAL_GPIO_WritePin(SPI_Selection_GPIO_Port , SPI_Selection_Pin, GPIO_PIN_SET);
 8001680:	2201      	movs	r2, #1
 8001682:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001686:	4803      	ldr	r0, [pc, #12]	; (8001694 <stop_function+0x54>)
 8001688:	f002 f986 	bl	8003998 <HAL_GPIO_WritePin>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40020000 	.word	0x40020000
 8001698:	2000000c 	.word	0x2000000c
 800169c:	200002dc 	.word	0x200002dc
 80016a0:	200002da 	.word	0x200002da

080016a4 <UART_Command>:
 *      Author: Ajith Pinninti
 */

#include "UART_helper.h"

void UART_Command(char *tokens[]){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

		if(strcmp(tokens[0],"G90") == 0 ){
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	497f      	ldr	r1, [pc, #508]	; (80018b0 <UART_Command+0x20c>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fdac 	bl	8000210 <strcmp>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d121      	bne.n	8001702 <UART_Command+0x5e>
		//Absolute positioning
		Setup_Absolute_position(tokens);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fcca 	bl	8001058 <Setup_Absolute_position>

		//Run the Motors
		Run_Motor();
 80016c4:	f7ff fda6 	bl	8001214 <Run_Motor>

		//Execute Command make zero and Reset the buffer
		Exec_command = 0;
 80016c8:	4b7a      	ldr	r3, [pc, #488]	; (80018b4 <UART_Command+0x210>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
		memset(RxBuffer,0,sizeof(RxBuffer));
 80016ce:	2232      	movs	r2, #50	; 0x32
 80016d0:	2100      	movs	r1, #0
 80016d2:	4879      	ldr	r0, [pc, #484]	; (80018b8 <UART_Command+0x214>)
 80016d4:	f004 ff28 	bl	8006528 <memset>


		//sending the ready status
		memset(sending_data,0,sizeof(sending_data));
 80016d8:	2232      	movs	r2, #50	; 0x32
 80016da:	2100      	movs	r1, #0
 80016dc:	4877      	ldr	r0, [pc, #476]	; (80018bc <UART_Command+0x218>)
 80016de:	f004 ff23 	bl	8006528 <memset>
		sprintf(sending_data,"G90Completed \n");
 80016e2:	4977      	ldr	r1, [pc, #476]	; (80018c0 <UART_Command+0x21c>)
 80016e4:	4875      	ldr	r0, [pc, #468]	; (80018bc <UART_Command+0x218>)
 80016e6:	f005 fb91 	bl	8006e0c <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 80016ea:	4874      	ldr	r0, [pc, #464]	; (80018bc <UART_Command+0x218>)
 80016ec:	f7fe fd9a 	bl	8000224 <strlen>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016f8:	4970      	ldr	r1, [pc, #448]	; (80018bc <UART_Command+0x218>)
 80016fa:	4872      	ldr	r0, [pc, #456]	; (80018c4 <UART_Command+0x220>)
 80016fc:	f003 febf 	bl	800547e <HAL_UART_Transmit>
			Exec_command = 0;
			memset(RxBuffer,0,sizeof(RxBuffer));
		}


}
 8001700:	e0d1      	b.n	80018a6 <UART_Command+0x202>
		else if(strcmp(tokens[0],"G91") == 0){
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4970      	ldr	r1, [pc, #448]	; (80018c8 <UART_Command+0x224>)
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fd81 	bl	8000210 <strcmp>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d121      	bne.n	8001758 <UART_Command+0xb4>
		Setup_Relative_position(tokens);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fcef 	bl	80010f8 <Setup_Relative_position>
		Run_Motor();
 800171a:	f7ff fd7b 	bl	8001214 <Run_Motor>
		Exec_command = 0;
 800171e:	4b65      	ldr	r3, [pc, #404]	; (80018b4 <UART_Command+0x210>)
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
		memset(RxBuffer,0,sizeof(RxBuffer));
 8001724:	2232      	movs	r2, #50	; 0x32
 8001726:	2100      	movs	r1, #0
 8001728:	4863      	ldr	r0, [pc, #396]	; (80018b8 <UART_Command+0x214>)
 800172a:	f004 fefd 	bl	8006528 <memset>
		memset(sending_data,0,sizeof(sending_data));
 800172e:	2232      	movs	r2, #50	; 0x32
 8001730:	2100      	movs	r1, #0
 8001732:	4862      	ldr	r0, [pc, #392]	; (80018bc <UART_Command+0x218>)
 8001734:	f004 fef8 	bl	8006528 <memset>
		sprintf(sending_data,"G91Completed \n");
 8001738:	4964      	ldr	r1, [pc, #400]	; (80018cc <UART_Command+0x228>)
 800173a:	4860      	ldr	r0, [pc, #384]	; (80018bc <UART_Command+0x218>)
 800173c:	f005 fb66 	bl	8006e0c <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 8001740:	485e      	ldr	r0, [pc, #376]	; (80018bc <UART_Command+0x218>)
 8001742:	f7fe fd6f 	bl	8000224 <strlen>
 8001746:	4603      	mov	r3, r0
 8001748:	b29a      	uxth	r2, r3
 800174a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800174e:	495b      	ldr	r1, [pc, #364]	; (80018bc <UART_Command+0x218>)
 8001750:	485c      	ldr	r0, [pc, #368]	; (80018c4 <UART_Command+0x220>)
 8001752:	f003 fe94 	bl	800547e <HAL_UART_Transmit>
}
 8001756:	e0a6      	b.n	80018a6 <UART_Command+0x202>
		else if(strcmp(tokens[0],"HOME") == 0){
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	495c      	ldr	r1, [pc, #368]	; (80018d0 <UART_Command+0x22c>)
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fd56 	bl	8000210 <strcmp>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d11f      	bne.n	80017aa <UART_Command+0x106>
		HAL_NVIC_EnableIRQ(Z_END_STOP_EXTI_IRQn);
 800176a:	2017      	movs	r0, #23
 800176c:	f001 fec5 	bl	80034fa <HAL_NVIC_EnableIRQ>
		HOMED = false;
 8001770:	4b58      	ldr	r3, [pc, #352]	; (80018d4 <UART_Command+0x230>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
		Homing_motor(tokens);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fd10 	bl	800119c <Homing_motor>
		Homing_completion();
 800177c:	f7ff fd3a 	bl	80011f4 <Homing_completion>
		memset(sending_data,0,sizeof(sending_data));
 8001780:	2232      	movs	r2, #50	; 0x32
 8001782:	2100      	movs	r1, #0
 8001784:	484d      	ldr	r0, [pc, #308]	; (80018bc <UART_Command+0x218>)
 8001786:	f004 fecf 	bl	8006528 <memset>
		sprintf(sending_data,"Homed \n");
 800178a:	4953      	ldr	r1, [pc, #332]	; (80018d8 <UART_Command+0x234>)
 800178c:	484b      	ldr	r0, [pc, #300]	; (80018bc <UART_Command+0x218>)
 800178e:	f005 fb3d 	bl	8006e0c <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 8001792:	484a      	ldr	r0, [pc, #296]	; (80018bc <UART_Command+0x218>)
 8001794:	f7fe fd46 	bl	8000224 <strlen>
 8001798:	4603      	mov	r3, r0
 800179a:	b29a      	uxth	r2, r3
 800179c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017a0:	4946      	ldr	r1, [pc, #280]	; (80018bc <UART_Command+0x218>)
 80017a2:	4848      	ldr	r0, [pc, #288]	; (80018c4 <UART_Command+0x220>)
 80017a4:	f003 fe6b 	bl	800547e <HAL_UART_Transmit>
}
 80017a8:	e07d      	b.n	80018a6 <UART_Command+0x202>
		else if(strcmp(tokens[0],"MOTPOS") == 0){
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	494b      	ldr	r1, [pc, #300]	; (80018dc <UART_Command+0x238>)
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fd2d 	bl	8000210 <strcmp>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d12c      	bne.n	8001816 <UART_Command+0x172>
			memset(sending_data,0,sizeof(sending_data));
 80017bc:	2232      	movs	r2, #50	; 0x32
 80017be:	2100      	movs	r1, #0
 80017c0:	483e      	ldr	r0, [pc, #248]	; (80018bc <UART_Command+0x218>)
 80017c2:	f004 feb1 	bl	8006528 <memset>
			sprintf(sending_data,"%0.2f\n",(float) currentPosition()/steps_per_millimeters );
 80017c6:	f000 fe83 	bl	80024d0 <currentPosition>
 80017ca:	ee07 0a90 	vmov	s15, r0
 80017ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d2:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80018e0 <UART_Command+0x23c>
 80017d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017da:	ee16 0a90 	vmov	r0, s13
 80017de:	f7fe fee3 	bl	80005a8 <__aeabi_f2d>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	493f      	ldr	r1, [pc, #252]	; (80018e4 <UART_Command+0x240>)
 80017e8:	4834      	ldr	r0, [pc, #208]	; (80018bc <UART_Command+0x218>)
 80017ea:	f005 fb0f 	bl	8006e0c <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 80017ee:	4833      	ldr	r0, [pc, #204]	; (80018bc <UART_Command+0x218>)
 80017f0:	f7fe fd18 	bl	8000224 <strlen>
 80017f4:	4603      	mov	r3, r0
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017fc:	492f      	ldr	r1, [pc, #188]	; (80018bc <UART_Command+0x218>)
 80017fe:	4831      	ldr	r0, [pc, #196]	; (80018c4 <UART_Command+0x220>)
 8001800:	f003 fe3d 	bl	800547e <HAL_UART_Transmit>
			Exec_command = 0;
 8001804:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <UART_Command+0x210>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
			memset(RxBuffer,0,sizeof(RxBuffer));
 800180a:	2232      	movs	r2, #50	; 0x32
 800180c:	2100      	movs	r1, #0
 800180e:	482a      	ldr	r0, [pc, #168]	; (80018b8 <UART_Command+0x214>)
 8001810:	f004 fe8a 	bl	8006528 <memset>
}
 8001814:	e047      	b.n	80018a6 <UART_Command+0x202>
		else if(strcmp(tokens[0],"ENCZERO") == 0){
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4933      	ldr	r1, [pc, #204]	; (80018e8 <UART_Command+0x244>)
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fcf7 	bl	8000210 <strcmp>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10c      	bne.n	8001842 <UART_Command+0x19e>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8001828:	4b30      	ldr	r3, [pc, #192]	; (80018ec <UART_Command+0x248>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2200      	movs	r2, #0
 800182e:	625a      	str	r2, [r3, #36]	; 0x24
			Exec_command = 0;
 8001830:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <UART_Command+0x210>)
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
			memset(RxBuffer,0,sizeof(RxBuffer));
 8001836:	2232      	movs	r2, #50	; 0x32
 8001838:	2100      	movs	r1, #0
 800183a:	481f      	ldr	r0, [pc, #124]	; (80018b8 <UART_Command+0x214>)
 800183c:	f004 fe74 	bl	8006528 <memset>
}
 8001840:	e031      	b.n	80018a6 <UART_Command+0x202>
		else if(strcmp(tokens[0],"ENCVAL") == 0){
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	492a      	ldr	r1, [pc, #168]	; (80018f0 <UART_Command+0x24c>)
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fce1 	bl	8000210 <strcmp>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d120      	bne.n	8001896 <UART_Command+0x1f2>
			memset(sending_data,0,sizeof(sending_data));
 8001854:	2232      	movs	r2, #50	; 0x32
 8001856:	2100      	movs	r1, #0
 8001858:	4818      	ldr	r0, [pc, #96]	; (80018bc <UART_Command+0x218>)
 800185a:	f004 fe65 	bl	8006528 <memset>
			sprintf(sending_data,"%ld\n",__HAL_TIM_GET_COUNTER(&htim2) );
 800185e:	4b23      	ldr	r3, [pc, #140]	; (80018ec <UART_Command+0x248>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	461a      	mov	r2, r3
 8001866:	4923      	ldr	r1, [pc, #140]	; (80018f4 <UART_Command+0x250>)
 8001868:	4814      	ldr	r0, [pc, #80]	; (80018bc <UART_Command+0x218>)
 800186a:	f005 facf 	bl	8006e0c <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 800186e:	4813      	ldr	r0, [pc, #76]	; (80018bc <UART_Command+0x218>)
 8001870:	f7fe fcd8 	bl	8000224 <strlen>
 8001874:	4603      	mov	r3, r0
 8001876:	b29a      	uxth	r2, r3
 8001878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800187c:	490f      	ldr	r1, [pc, #60]	; (80018bc <UART_Command+0x218>)
 800187e:	4811      	ldr	r0, [pc, #68]	; (80018c4 <UART_Command+0x220>)
 8001880:	f003 fdfd 	bl	800547e <HAL_UART_Transmit>
			Exec_command = 0;
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <UART_Command+0x210>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
			memset(RxBuffer,0,sizeof(RxBuffer));
 800188a:	2232      	movs	r2, #50	; 0x32
 800188c:	2100      	movs	r1, #0
 800188e:	480a      	ldr	r0, [pc, #40]	; (80018b8 <UART_Command+0x214>)
 8001890:	f004 fe4a 	bl	8006528 <memset>
}
 8001894:	e007      	b.n	80018a6 <UART_Command+0x202>
			Exec_command = 0;
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <UART_Command+0x210>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
			memset(RxBuffer,0,sizeof(RxBuffer));
 800189c:	2232      	movs	r2, #50	; 0x32
 800189e:	2100      	movs	r1, #0
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <UART_Command+0x214>)
 80018a2:	f004 fe41 	bl	8006528 <memset>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	0800ab88 	.word	0x0800ab88
 80018b4:	20000483 	.word	0x20000483
 80018b8:	20000450 	.word	0x20000450
 80018bc:	20000010 	.word	0x20000010
 80018c0:	0800ab8c 	.word	0x0800ab8c
 80018c4:	2000040c 	.word	0x2000040c
 80018c8:	0800ab9c 	.word	0x0800ab9c
 80018cc:	0800aba0 	.word	0x0800aba0
 80018d0:	0800abb0 	.word	0x0800abb0
 80018d4:	20000491 	.word	0x20000491
 80018d8:	0800abb8 	.word	0x0800abb8
 80018dc:	0800abc0 	.word	0x0800abc0
 80018e0:	47435000 	.word	0x47435000
 80018e4:	0800abc8 	.word	0x0800abc8
 80018e8:	0800abd0 	.word	0x0800abd0
 80018ec:	20000334 	.word	0x20000334
 80018f0:	0800abd8 	.word	0x0800abd8
 80018f4:	0800abe0 	.word	0x0800abe0

080018f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80018fe:	f001 fc6f 	bl	80031e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001902:	f000 f8c3 	bl	8001a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001906:	f000 fa4d 	bl	8001da4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800190a:	f000 fa21 	bl	8001d50 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800190e:	f000 f9b3 	bl	8001c78 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001912:	f000 f9e7 	bl	8001ce4 <MX_TIM7_Init>
  MX_SPI1_Init();
 8001916:	f000 f925 	bl	8001b64 <MX_SPI1_Init>
  MX_TIM2_Init();
 800191a:	f000 f959 	bl	8001bd0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /****************************** Setting up IRQ ***********************/
	HAL_NVIC_DisableIRQ(Z_END_STOP_EXTI_IRQn);
 800191e:	2017      	movs	r0, #23
 8001920:	f001 fdf9 	bl	8003516 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(Z_reference_EXTI_IRQn);
 8001924:	2006      	movs	r0, #6
 8001926:	f001 fdf6 	bl	8003516 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(P_limit_EXTI_IRQn);
 800192a:	200a      	movs	r0, #10
 800192c:	f001 fdf3 	bl	8003516 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(Q_limit_EXTI_IRQn);
 8001930:	2017      	movs	r0, #23
 8001932:	f001 fdf0 	bl	8003516 <HAL_NVIC_DisableIRQ>


/*********************** LED SPI Intialization *******************/

	//initializing LED values
	dectobin(ch1_br, &ch1_buff1, &ch1_buff2);
 8001936:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <main+0x134>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a3d      	ldr	r2, [pc, #244]	; (8001a30 <main+0x138>)
 800193c:	493d      	ldr	r1, [pc, #244]	; (8001a34 <main+0x13c>)
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fe00 	bl	8001544 <dectobin>
	dectobin(ch2_br, &ch2_buff1, &ch2_buff2);
 8001944:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <main+0x140>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a3c      	ldr	r2, [pc, #240]	; (8001a3c <main+0x144>)
 800194a:	493d      	ldr	r1, [pc, #244]	; (8001a40 <main+0x148>)
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fdf9 	bl	8001544 <dectobin>
	dectobin(ch3_br, &ch3_buff1, &ch3_buff2);
 8001952:	4b3c      	ldr	r3, [pc, #240]	; (8001a44 <main+0x14c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a3c      	ldr	r2, [pc, #240]	; (8001a48 <main+0x150>)
 8001958:	493c      	ldr	r1, [pc, #240]	; (8001a4c <main+0x154>)
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fdf2 	bl	8001544 <dectobin>
	//setting up channel select pin to HIGH
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001960:	2201      	movs	r2, #1
 8001962:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001966:	483a      	ldr	r0, [pc, #232]	; (8001a50 <main+0x158>)
 8001968:	f002 f816 	bl	8003998 <HAL_GPIO_WritePin>



/************************** UART Initialisation *********************/
	// initiating interrupt for PC data receiving
	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 800196c:	2201      	movs	r2, #1
 800196e:	4939      	ldr	r1, [pc, #228]	; (8001a54 <main+0x15c>)
 8001970:	4839      	ldr	r0, [pc, #228]	; (8001a58 <main+0x160>)
 8001972:	f003 fe16 	bl	80055a2 <HAL_UART_Receive_IT>



/************************** Encoder Intialization *******************/

	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL); //starting encoder
 8001976:	213c      	movs	r1, #60	; 0x3c
 8001978:	4838      	ldr	r0, [pc, #224]	; (8001a5c <main+0x164>)
 800197a:	f003 fa15 	bl	8004da8 <HAL_TIM_Encoder_Start>



/*************************** Timer Intializations ****************/

  HAL_TIM_Base_Start(&htim6); //to calculate pulse time
 800197e:	4838      	ldr	r0, [pc, #224]	; (8001a60 <main+0x168>)
 8001980:	f003 f904 	bl	8004b8c <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim7); // for microseconds delay
 8001984:	4837      	ldr	r0, [pc, #220]	; (8001a64 <main+0x16c>)
 8001986:	f003 f901 	bl	8004b8c <HAL_TIM_Base_Start>


/*********************** Z motor initialization *********************/


	stepper_setup(STEP_GPIO_Port, STEP_Pin, DIR_GPIO_Port, DIR_Pin );
 800198a:	2301      	movs	r3, #1
 800198c:	4a36      	ldr	r2, [pc, #216]	; (8001a68 <main+0x170>)
 800198e:	2102      	movs	r1, #2
 8001990:	4835      	ldr	r0, [pc, #212]	; (8001a68 <main+0x170>)
 8001992:	f000 fcb7 	bl	8002304 <stepper_setup>

	//sample movement
	Total_Steps = (int32_t) ( steps_per_millimeters * targetPos );
 8001996:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <main+0x174>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001a70 <main+0x178>
 80019a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019a8:	ee17 2a90 	vmov	r2, s15
 80019ac:	4b31      	ldr	r3, [pc, #196]	; (8001a74 <main+0x17c>)
 80019ae:	601a      	str	r2, [r3, #0]
	setMaxSpeed(10*steps_per_millimeters);
 80019b0:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8001a78 <main+0x180>
 80019b4:	f000 ff14 	bl	80027e0 <setMaxSpeed>
	setAcceleration(Acceleration);
 80019b8:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <main+0x184>)
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	eeb0 0a67 	vmov.f32	s0, s15
 80019c2:	f000 ff71 	bl	80028a8 <setAcceleration>
	moveTo(Total_Steps);
 80019c6:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <main+0x17c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 fc60 	bl	8002290 <moveTo>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(Exec_command){
 80019d0:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <main+0x188>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0fb      	beq.n	80019d0 <main+0xd8>
	//			char str[] = "G91 Z30 F300 \r";
		int MAX_TOKENS = 3;
 80019d8:	2303      	movs	r3, #3
 80019da:	60fb      	str	r3, [r7, #12]
		char *token;
		char *tokens[3] = {0};
 80019dc:	463b      	mov	r3, r7
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
		int i = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]


		/* Split the string by the delimiter " " */
		token = strtok((char *)RxBuffer, " ");
 80019ea:	4926      	ldr	r1, [pc, #152]	; (8001a84 <main+0x18c>)
 80019ec:	4826      	ldr	r0, [pc, #152]	; (8001a88 <main+0x190>)
 80019ee:	f006 f85d 	bl	8007aac <strtok>
 80019f2:	6178      	str	r0, [r7, #20]

		while (token != NULL && i < MAX_TOKENS) {
 80019f4:	e00e      	b.n	8001a14 <main+0x11c>
			tokens[i] = token;
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	3318      	adds	r3, #24
 80019fc:	443b      	add	r3, r7
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	f843 2c18 	str.w	r2, [r3, #-24]
			i++;
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	3301      	adds	r3, #1
 8001a08:	613b      	str	r3, [r7, #16]
			token = strtok(NULL, " ");
 8001a0a:	491e      	ldr	r1, [pc, #120]	; (8001a84 <main+0x18c>)
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f006 f84d 	bl	8007aac <strtok>
 8001a12:	6178      	str	r0, [r7, #20]
		while (token != NULL && i < MAX_TOKENS) {
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <main+0x12a>
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	dbe9      	blt.n	80019f6 <main+0xfe>
		}

		//Excute the command
		UART_Command(tokens);
 8001a22:	463b      	mov	r3, r7
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fe3d 	bl	80016a4 <UART_Command>
	if(Exec_command){
 8001a2a:	e7d1      	b.n	80019d0 <main+0xd8>
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	200002d5 	.word	0x200002d5
 8001a34:	200002d4 	.word	0x200002d4
 8001a38:	20000004 	.word	0x20000004
 8001a3c:	200002d7 	.word	0x200002d7
 8001a40:	200002d6 	.word	0x200002d6
 8001a44:	20000008 	.word	0x20000008
 8001a48:	200002d9 	.word	0x200002d9
 8001a4c:	200002d8 	.word	0x200002d8
 8001a50:	40020000 	.word	0x40020000
 8001a54:	20000484 	.word	0x20000484
 8001a58:	2000040c 	.word	0x2000040c
 8001a5c:	20000334 	.word	0x20000334
 8001a60:	2000037c 	.word	0x2000037c
 8001a64:	200003c4 	.word	0x200003c4
 8001a68:	40020800 	.word	0x40020800
 8001a6c:	20000044 	.word	0x20000044
 8001a70:	47435000 	.word	0x47435000
 8001a74:	2000048c 	.word	0x2000048c
 8001a78:	48f42400 	.word	0x48f42400
 8001a7c:	20000050 	.word	0x20000050
 8001a80:	20000483 	.word	0x20000483
 8001a84:	0800abe8 	.word	0x0800abe8
 8001a88:	20000450 	.word	0x20000450

08001a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b094      	sub	sp, #80	; 0x50
 8001a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a92:	f107 031c 	add.w	r3, r7, #28
 8001a96:	2234      	movs	r2, #52	; 0x34
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f004 fd44 	bl	8006528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa0:	f107 0308 	add.w	r3, r7, #8
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	4b29      	ldr	r3, [pc, #164]	; (8001b5c <SystemClock_Config+0xd0>)
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	4a28      	ldr	r2, [pc, #160]	; (8001b5c <SystemClock_Config+0xd0>)
 8001aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abe:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac0:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <SystemClock_Config+0xd0>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001acc:	2300      	movs	r3, #0
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <SystemClock_Config+0xd4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a22      	ldr	r2, [pc, #136]	; (8001b60 <SystemClock_Config+0xd4>)
 8001ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <SystemClock_Config+0xd4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aec:	2301      	movs	r3, #1
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001af0:	2310      	movs	r3, #16
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af4:	2302      	movs	r3, #2
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001af8:	2300      	movs	r3, #0
 8001afa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001afc:	2308      	movs	r3, #8
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001b00:	23a0      	movs	r3, #160	; 0xa0
 8001b02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b04:	2302      	movs	r3, #2
 8001b06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 fabb 	bl	8004090 <HAL_RCC_OscConfig>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001b20:	f000 fb96 	bl	8002250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b24:	230f      	movs	r3, #15
 8001b26:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001b30:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b3c:	f107 0308 	add.w	r3, r7, #8
 8001b40:	2105      	movs	r1, #5
 8001b42:	4618      	mov	r0, r3
 8001b44:	f001 ff5a 	bl	80039fc <HAL_RCC_ClockConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001b4e:	f000 fb7f 	bl	8002250 <Error_Handler>
  }
}
 8001b52:	bf00      	nop
 8001b54:	3750      	adds	r7, #80	; 0x50
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40007000 	.word	0x40007000

08001b64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b6a:	4a18      	ldr	r2, [pc, #96]	; (8001bcc <MX_SPI1_Init+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b82:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba8:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001bb0:	220a      	movs	r2, #10
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bb4:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001bb6:	f002 fd09 	bl	80045cc <HAL_SPI_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bc0:	f000 fb46 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	200002dc 	.word	0x200002dc
 8001bcc:	40013000 	.word	0x40013000

08001bd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	; 0x30
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	2224      	movs	r2, #36	; 0x24
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f004 fca2 	bl	8006528 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <MX_TIM2_Init+0xa4>)
 8001bee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <MX_TIM2_Init+0xa4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <MX_TIM2_Init+0xa4>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c00:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <MX_TIM2_Init+0xa4>)
 8001c02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <MX_TIM2_Init+0xa4>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <MX_TIM2_Init+0xa4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c14:	2303      	movs	r3, #3
 8001c16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480d      	ldr	r0, [pc, #52]	; (8001c74 <MX_TIM2_Init+0xa4>)
 8001c40:	f003 f80c 	bl	8004c5c <HAL_TIM_Encoder_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c4a:	f000 fb01 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4806      	ldr	r0, [pc, #24]	; (8001c74 <MX_TIM2_Init+0xa4>)
 8001c5c:	f003 fb32 	bl	80052c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c66:	f000 faf3 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	3730      	adds	r7, #48	; 0x30
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000334 	.word	0x20000334

08001c78 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7e:	463b      	mov	r3, r7
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <MX_TIM6_Init+0x64>)
 8001c88:	4a15      	ldr	r2, [pc, #84]	; (8001ce0 <MX_TIM6_Init+0x68>)
 8001c8a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40-1;
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <MX_TIM6_Init+0x64>)
 8001c8e:	2227      	movs	r2, #39	; 0x27
 8001c90:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <MX_TIM6_Init+0x64>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <MX_TIM6_Init+0x64>)
 8001c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c9e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <MX_TIM6_Init+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ca6:	480d      	ldr	r0, [pc, #52]	; (8001cdc <MX_TIM6_Init+0x64>)
 8001ca8:	f002 ff20 	bl	8004aec <HAL_TIM_Base_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001cb2:	f000 facd 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001cbe:	463b      	mov	r3, r7
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4806      	ldr	r0, [pc, #24]	; (8001cdc <MX_TIM6_Init+0x64>)
 8001cc4:	f003 fafe 	bl	80052c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001cce:	f000 fabf 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000037c 	.word	0x2000037c
 8001ce0:	40001000 	.word	0x40001000

08001ce4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cea:	463b      	mov	r3, r7
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <MX_TIM7_Init+0x64>)
 8001cf4:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <MX_TIM7_Init+0x68>)
 8001cf6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40-1;
 8001cf8:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <MX_TIM7_Init+0x64>)
 8001cfa:	2227      	movs	r2, #39	; 0x27
 8001cfc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <MX_TIM7_Init+0x64>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001d04:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <MX_TIM7_Init+0x64>)
 8001d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d0a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <MX_TIM7_Init+0x64>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001d12:	480d      	ldr	r0, [pc, #52]	; (8001d48 <MX_TIM7_Init+0x64>)
 8001d14:	f002 feea 	bl	8004aec <HAL_TIM_Base_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001d1e:	f000 fa97 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d2a:	463b      	mov	r3, r7
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4806      	ldr	r0, [pc, #24]	; (8001d48 <MX_TIM7_Init+0x64>)
 8001d30:	f003 fac8 	bl	80052c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001d3a:	f000 fa89 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200003c4 	.word	0x200003c4
 8001d4c:	40001400 	.word	0x40001400

08001d50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <MX_USART2_UART_Init+0x4c>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <MX_USART2_UART_Init+0x50>)
 8001d58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <MX_USART2_UART_Init+0x4c>)
 8001d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <MX_USART2_UART_Init+0x4c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <MX_USART2_UART_Init+0x4c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <MX_USART2_UART_Init+0x4c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <MX_USART2_UART_Init+0x4c>)
 8001d76:	220c      	movs	r2, #12
 8001d78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <MX_USART2_UART_Init+0x4c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <MX_USART2_UART_Init+0x4c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d86:	4805      	ldr	r0, [pc, #20]	; (8001d9c <MX_USART2_UART_Init+0x4c>)
 8001d88:	f003 fb2c 	bl	80053e4 <HAL_UART_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d92:	f000 fa5d 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2000040c 	.word	0x2000040c
 8001da0:	40004400 	.word	0x40004400

08001da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	; 0x28
 8001da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b66      	ldr	r3, [pc, #408]	; (8001f58 <MX_GPIO_Init+0x1b4>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a65      	ldr	r2, [pc, #404]	; (8001f58 <MX_GPIO_Init+0x1b4>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b63      	ldr	r3, [pc, #396]	; (8001f58 <MX_GPIO_Init+0x1b4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b5f      	ldr	r3, [pc, #380]	; (8001f58 <MX_GPIO_Init+0x1b4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a5e      	ldr	r2, [pc, #376]	; (8001f58 <MX_GPIO_Init+0x1b4>)
 8001de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b5c      	ldr	r3, [pc, #368]	; (8001f58 <MX_GPIO_Init+0x1b4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b58      	ldr	r3, [pc, #352]	; (8001f58 <MX_GPIO_Init+0x1b4>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a57      	ldr	r2, [pc, #348]	; (8001f58 <MX_GPIO_Init+0x1b4>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b55      	ldr	r3, [pc, #340]	; (8001f58 <MX_GPIO_Init+0x1b4>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	4b51      	ldr	r3, [pc, #324]	; (8001f58 <MX_GPIO_Init+0x1b4>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a50      	ldr	r2, [pc, #320]	; (8001f58 <MX_GPIO_Init+0x1b4>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b4e      	ldr	r3, [pc, #312]	; (8001f58 <MX_GPIO_Init+0x1b4>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_Pin|STEP_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2103      	movs	r1, #3
 8001e2e:	484b      	ldr	r0, [pc, #300]	; (8001f5c <MX_GPIO_Init+0x1b8>)
 8001e30:	f001 fdb2 	bl	8003998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(End_stop_GPIO_Port, End_stop_Pin, GPIO_PIN_SET);
 8001e34:	2201      	movs	r2, #1
 8001e36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e3a:	4849      	ldr	r0, [pc, #292]	; (8001f60 <MX_GPIO_Init+0x1bc>)
 8001e3c:	f001 fdac 	bl	8003998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_Selection_GPIO_Port, SPI_Selection_Pin, GPIO_PIN_SET);
 8001e40:	2201      	movs	r2, #1
 8001e42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e46:	4847      	ldr	r0, [pc, #284]	; (8001f64 <MX_GPIO_Init+0x1c0>)
 8001e48:	f001 fda6 	bl	8003998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e52:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	4619      	mov	r1, r3
 8001e62:	483e      	ldr	r0, [pc, #248]	; (8001f5c <MX_GPIO_Init+0x1b8>)
 8001e64:	f001 fc04 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Pin STEP_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|STEP_Pin;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e74:	2303      	movs	r3, #3
 8001e76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4837      	ldr	r0, [pc, #220]	; (8001f5c <MX_GPIO_Init+0x1b8>)
 8001e80:	f001 fbf6 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z_reference_Pin P_limit_Pin Q_limit_Pin */
  GPIO_InitStruct.Pin = Z_reference_Pin|P_limit_Pin|Q_limit_Pin;
 8001e84:	2331      	movs	r3, #49	; 0x31
 8001e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	4831      	ldr	r0, [pc, #196]	; (8001f60 <MX_GPIO_Init+0x1bc>)
 8001e9a:	f001 fbe9 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pin : End_stop_Pin */
  GPIO_InitStruct.Pin = End_stop_Pin;
 8001e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(End_stop_GPIO_Port, &GPIO_InitStruct);
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	482a      	ldr	r0, [pc, #168]	; (8001f60 <MX_GPIO_Init+0x1bc>)
 8001eb8:	f001 fbda 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pin : Z_END_STOP_Pin */
  GPIO_InitStruct.Pin = Z_END_STOP_Pin;
 8001ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ec2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Z_END_STOP_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4824      	ldr	r0, [pc, #144]	; (8001f64 <MX_GPIO_Init+0x1c0>)
 8001ed4:	f001 fbcc 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_Selection_Pin */
  GPIO_InitStruct.Pin = SPI_Selection_Pin;
 8001ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_Selection_GPIO_Port, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	481c      	ldr	r0, [pc, #112]	; (8001f64 <MX_GPIO_Init+0x1c0>)
 8001ef2:	f001 fbbd 	bl	8003670 <HAL_GPIO_Init>

  /*Configure GPIO pin : Camera_input_Pin */
  GPIO_InitStruct.Pin = Camera_input_Pin;
 8001ef6:	2308      	movs	r3, #8
 8001ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001efa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Camera_input_GPIO_Port, &GPIO_InitStruct);
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4815      	ldr	r0, [pc, #84]	; (8001f60 <MX_GPIO_Init+0x1bc>)
 8001f0c:	f001 fbb0 	bl	8003670 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2100      	movs	r1, #0
 8001f14:	2006      	movs	r0, #6
 8001f16:	f001 fad4 	bl	80034c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f1a:	2006      	movs	r0, #6
 8001f1c:	f001 faed 	bl	80034fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2100      	movs	r1, #0
 8001f24:	2009      	movs	r0, #9
 8001f26:	f001 facc 	bl	80034c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001f2a:	2009      	movs	r0, #9
 8001f2c:	f001 fae5 	bl	80034fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001f30:	2200      	movs	r2, #0
 8001f32:	2100      	movs	r1, #0
 8001f34:	200a      	movs	r0, #10
 8001f36:	f001 fac4 	bl	80034c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001f3a:	200a      	movs	r0, #10
 8001f3c:	f001 fadd 	bl	80034fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f40:	2200      	movs	r2, #0
 8001f42:	2100      	movs	r1, #0
 8001f44:	2017      	movs	r0, #23
 8001f46:	f001 fabc 	bl	80034c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f4a:	2017      	movs	r0, #23
 8001f4c:	f001 fad5 	bl	80034fa <HAL_NVIC_EnableIRQ>

}
 8001f50:	bf00      	nop
 8001f52:	3728      	adds	r7, #40	; 0x28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020400 	.word	0x40020400
 8001f64:	40020000 	.word	0x40020000

08001f68 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == Z_END_STOP_Pin ){
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f78:	d13e      	bne.n	8001ff8 <HAL_GPIO_EXTI_Callback+0x90>
		 * Disable the interrupt for Z_END_STOP
		 *
		 */


		if(Home_Pass == 0){
 8001f7a:	4b60      	ldr	r3, [pc, #384]	; (80020fc <HAL_GPIO_EXTI_Callback+0x194>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d116      	bne.n	8001fb0 <HAL_GPIO_EXTI_Callback+0x48>
			// first pass
			Home_Pass = 1;
 8001f82:	4b5e      	ldr	r3, [pc, #376]	; (80020fc <HAL_GPIO_EXTI_Callback+0x194>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]

			Homing_completion();
 8001f88:	f7ff f934 	bl	80011f4 <Homing_completion>

			move((int32_t ) (steps_per_millimeters * 0.25));
 8001f8c:	f243 00d4 	movw	r0, #12500	; 0x30d4
 8001f90:	f000 f9a6 	bl	80022e0 <move>

			runToPosition();
 8001f94:	f000 fe0e 	bl	8002bb4 <runToPosition>
			//setting speed again to intiate the HOMING
			//otherwise _stepintervel became zero
			setSpeed(-1*home_speed); //MOVING IN ccw
 8001f98:	4b59      	ldr	r3, [pc, #356]	; (8002100 <HAL_GPIO_EXTI_Callback+0x198>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	425b      	negs	r3, r3
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8001faa:	f000 fcfd 	bl	80029a8 <setSpeed>
			return;
 8001fae:	e0a2      	b.n	80020f6 <HAL_GPIO_EXTI_Callback+0x18e>
		}
		else if(Home_Pass == 1){
 8001fb0:	4b52      	ldr	r3, [pc, #328]	; (80020fc <HAL_GPIO_EXTI_Callback+0x194>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d10d      	bne.n	8001fd4 <HAL_GPIO_EXTI_Callback+0x6c>

			HOMED = true;
 8001fb8:	4b52      	ldr	r3, [pc, #328]	; (8002104 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
			Home_Pass = 0;
 8001fbe:	4b4f      	ldr	r3, [pc, #316]	; (80020fc <HAL_GPIO_EXTI_Callback+0x194>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]

			move((int32_t ) (steps_per_millimeters * 0.25));
 8001fc4:	f243 00d4 	movw	r0, #12500	; 0x30d4
 8001fc8:	f000 f98a 	bl	80022e0 <move>
			runToPosition();
 8001fcc:	f000 fdf2 	bl	8002bb4 <runToPosition>
			Homing_completion();
 8001fd0:	f7ff f910 	bl	80011f4 <Homing_completion>

		}


		Exec_command = 0; //stop the motor
 8001fd4:	4b4c      	ldr	r3, [pc, #304]	; (8002108 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
		memset(RxBuffer,0,sizeof(RxBuffer));
 8001fda:	2232      	movs	r2, #50	; 0x32
 8001fdc:	2100      	movs	r1, #0
 8001fde:	484b      	ldr	r0, [pc, #300]	; (800210c <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001fe0:	f004 faa2 	bl	8006528 <memset>

		//homing configuration
		Homing_completion();
 8001fe4:	f7ff f906 	bl	80011f4 <Homing_completion>
		//disabling the Interrupt for End stop

		//Set encoder counting to zero
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8001fe8:	4b49      	ldr	r3, [pc, #292]	; (8002110 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2200      	movs	r2, #0
 8001fee:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_NVIC_DisableIRQ(Z_END_STOP_EXTI_IRQn);
 8001ff0:	2017      	movs	r0, #23
 8001ff2:	f001 fa90 	bl	8003516 <HAL_NVIC_DisableIRQ>


		return;
 8001ff6:	e07e      	b.n	80020f6 <HAL_GPIO_EXTI_Callback+0x18e>

		}
	else if(GPIO_Pin == Camera_input_Pin){
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d150      	bne.n	80020a0 <HAL_GPIO_EXTI_Callback+0x138>
		//Camera pulse detected

		//checking which operation have to do

		if(flag == 0){
 8001ffe:	4b45      	ldr	r3, [pc, #276]	; (8002114 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d118      	bne.n	8002038 <HAL_GPIO_EXTI_Callback+0xd0>
		// PC in homing mode so sending encoder data to PC
		// for every one camera click encoder will be send to PC through UART
		memset(sending_data,0,sizeof(sending_data));
 8002006:	2232      	movs	r2, #50	; 0x32
 8002008:	2100      	movs	r1, #0
 800200a:	4843      	ldr	r0, [pc, #268]	; (8002118 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800200c:	f004 fa8c 	bl	8006528 <memset>
		sprintf(sending_data,"%ld\n",(int32_t)__HAL_TIM_GET_COUNTER(&htim2) );
 8002010:	4b3f      	ldr	r3, [pc, #252]	; (8002110 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	461a      	mov	r2, r3
 8002018:	4940      	ldr	r1, [pc, #256]	; (800211c <HAL_GPIO_EXTI_Callback+0x1b4>)
 800201a:	483f      	ldr	r0, [pc, #252]	; (8002118 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800201c:	f004 fef6 	bl	8006e0c <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 8002020:	483d      	ldr	r0, [pc, #244]	; (8002118 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002022:	f7fe f8ff 	bl	8000224 <strlen>
 8002026:	4603      	mov	r3, r0
 8002028:	b29a      	uxth	r2, r3
 800202a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800202e:	493a      	ldr	r1, [pc, #232]	; (8002118 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002030:	483b      	ldr	r0, [pc, #236]	; (8002120 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8002032:	f003 fa24 	bl	800547e <HAL_UART_Transmit>
 8002036:	e05e      	b.n	80020f6 <HAL_GPIO_EXTI_Callback+0x18e>
		}

		else if(flag == 1){
 8002038:	4b36      	ldr	r3, [pc, #216]	; (8002114 <HAL_GPIO_EXTI_Callback+0x1ac>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d159      	bne.n	80020f4 <HAL_GPIO_EXTI_Callback+0x18c>
			//PC in data capturing mode so toggle the led
			 switch(count){
 8002040:	4b38      	ldr	r3, [pc, #224]	; (8002124 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d01f      	beq.n	8002088 <HAL_GPIO_EXTI_Callback+0x120>
 8002048:	2b02      	cmp	r3, #2
 800204a:	dc54      	bgt.n	80020f6 <HAL_GPIO_EXTI_Callback+0x18e>
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <HAL_GPIO_EXTI_Callback+0xee>
 8002050:	2b01      	cmp	r3, #1
 8002052:	d00a      	beq.n	800206a <HAL_GPIO_EXTI_Callback+0x102>
 8002054:	e04f      	b.n	80020f6 <HAL_GPIO_EXTI_Callback+0x18e>

			 case 0 :
				 // turning off all LEDs
				 stop_function(LED3);
 8002056:	2034      	movs	r0, #52	; 0x34
 8002058:	f7ff faf2 	bl	8001640 <stop_function>
				 // incrementing count to change the LED color in next time
				 count++;
 800205c:	4b31      	ldr	r3, [pc, #196]	; (8002124 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	3301      	adds	r3, #1
 8002062:	b2da      	uxtb	r2, r3
 8002064:	4b2f      	ldr	r3, [pc, #188]	; (8002124 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002066:	701a      	strb	r2, [r3, #0]
				 break;
 8002068:	e045      	b.n	80020f6 <HAL_GPIO_EXTI_Callback+0x18e>
			 case 1:
				 //turning on 2nd LED only
				 stop_function(LED1);
 800206a:	2031      	movs	r0, #49	; 0x31
 800206c:	f7ff fae8 	bl	8001640 <stop_function>
				 send_function(LED2,&ch2_buff1,&ch2_buff2);
 8002070:	4a2d      	ldr	r2, [pc, #180]	; (8002128 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002072:	492e      	ldr	r1, [pc, #184]	; (800212c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8002074:	2032      	movs	r0, #50	; 0x32
 8002076:	f7ff fab1 	bl	80015dc <send_function>
				 count++;// incrementing count to change the LED color in next time
 800207a:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4b28      	ldr	r3, [pc, #160]	; (8002124 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002084:	701a      	strb	r2, [r3, #0]
				 break;
 8002086:	e036      	b.n	80020f6 <HAL_GPIO_EXTI_Callback+0x18e>
			 case 2:
				 //turning on 3rd LED only
				 stop_function(LED2); // turn off LED 2
 8002088:	2032      	movs	r0, #50	; 0x32
 800208a:	f7ff fad9 	bl	8001640 <stop_function>
				 send_function(LED3,&ch3_buff1,&ch3_buff2);// turn on LED 3
 800208e:	4a28      	ldr	r2, [pc, #160]	; (8002130 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8002090:	4928      	ldr	r1, [pc, #160]	; (8002134 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8002092:	2034      	movs	r0, #52	; 0x34
 8002094:	f7ff faa2 	bl	80015dc <send_function>
				 count = 0;// set count to zero to Off the LED in next time
 8002098:	4b22      	ldr	r3, [pc, #136]	; (8002124 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
				 break;
 800209e:	e02a      	b.n	80020f6 <HAL_GPIO_EXTI_Callback+0x18e>

		}
	}


	else if( GPIO_Pin == Z_reference_Pin ){
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d113      	bne.n	80020ce <HAL_GPIO_EXTI_Callback+0x166>
	// Z_reference_detected.

		// pulse for end stop
		HAL_GPIO_WritePin(End_stop_GPIO_Port, End_stop_Pin, GPIO_PIN_RESET);
 80020a6:	2200      	movs	r2, #0
 80020a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020ac:	4822      	ldr	r0, [pc, #136]	; (8002138 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80020ae:	f001 fc73 	bl	8003998 <HAL_GPIO_WritePin>
		__delay_ms(100); // custom delay function
 80020b2:	2064      	movs	r0, #100	; 0x64
 80020b4:	f000 f8ac 	bl	8002210 <__delay_ms>
		HAL_GPIO_WritePin(End_stop_GPIO_Port, End_stop_Pin, GPIO_PIN_SET);
 80020b8:	2201      	movs	r2, #1
 80020ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020be:	481e      	ldr	r0, [pc, #120]	; (8002138 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80020c0:	f001 fc6a 	bl	8003998 <HAL_GPIO_WritePin>
		//homing completed

		//Set encoder counting to zero
		__HAL_TIM_SET_COUNTER(&htim2,0);
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2200      	movs	r2, #0
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24
 80020cc:	e013      	b.n	80020f6 <HAL_GPIO_EXTI_Callback+0x18e>
	}

	else if(GPIO_Pin == Q_limit_Pin){
 80020ce:	88fb      	ldrh	r3, [r7, #6]
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d110      	bne.n	80020f6 <HAL_GPIO_EXTI_Callback+0x18e>
	// Q_limit detected ( Lower Limit)
		//pulse for end stop
		HAL_GPIO_WritePin(End_stop_GPIO_Port, End_stop_Pin, GPIO_PIN_RESET);
 80020d4:	2200      	movs	r2, #0
 80020d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020da:	4817      	ldr	r0, [pc, #92]	; (8002138 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80020dc:	f001 fc5c 	bl	8003998 <HAL_GPIO_WritePin>
		__delay_ms(100);
 80020e0:	2064      	movs	r0, #100	; 0x64
 80020e2:	f000 f895 	bl	8002210 <__delay_ms>
		HAL_GPIO_WritePin(End_stop_GPIO_Port, End_stop_Pin, GPIO_PIN_SET);
 80020e6:	2201      	movs	r2, #1
 80020e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020ec:	4812      	ldr	r0, [pc, #72]	; (8002138 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80020ee:	f001 fc53 	bl	8003998 <HAL_GPIO_WritePin>
 80020f2:	e000      	b.n	80020f6 <HAL_GPIO_EXTI_Callback+0x18e>
		}
 80020f4:	bf00      	nop

	else if(GPIO_Pin == P_limit_Pin){
	// P_limit detected(Upper Limit)
	}

}
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000490 	.word	0x20000490
 8002100:	2000004c 	.word	0x2000004c
 8002104:	20000491 	.word	0x20000491
 8002108:	20000483 	.word	0x20000483
 800210c:	20000450 	.word	0x20000450
 8002110:	20000334 	.word	0x20000334
 8002114:	20000492 	.word	0x20000492
 8002118:	20000010 	.word	0x20000010
 800211c:	0800abec 	.word	0x0800abec
 8002120:	2000040c 	.word	0x2000040c
 8002124:	20000250 	.word	0x20000250
 8002128:	200002d7 	.word	0x200002d7
 800212c:	200002d6 	.word	0x200002d6
 8002130:	200002d9 	.word	0x200002d9
 8002134:	200002d8 	.word	0x200002d8
 8002138:	40020400 	.word	0x40020400

0800213c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

	if(huart == &huart2){
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a2a      	ldr	r2, [pc, #168]	; (80021f0 <HAL_UART_RxCpltCallback+0xb4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d14d      	bne.n	80021e8 <HAL_UART_RxCpltCallback+0xac>
    /* Receive one byte in the receive data register */
//    uint8_t rxByte = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);

    /* Check if the received character is a /r or buffer is full */
    if (rxByte == '\r' || RxIndex == 50 - 1) // 50 is buffer length
 800214c:	4b29      	ldr	r3, [pc, #164]	; (80021f4 <HAL_UART_RxCpltCallback+0xb8>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b0d      	cmp	r3, #13
 8002152:	d003      	beq.n	800215c <HAL_UART_RxCpltCallback+0x20>
 8002154:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <HAL_UART_RxCpltCallback+0xbc>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b31      	cmp	r3, #49	; 0x31
 800215a:	d111      	bne.n	8002180 <HAL_UART_RxCpltCallback+0x44>
    {
        /* Set flag to indicate command is complete */
        Exec_command = 1;
 800215c:	4b27      	ldr	r3, [pc, #156]	; (80021fc <HAL_UART_RxCpltCallback+0xc0>)
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]

        /* Add null character to terminate string */
        RxBuffer[RxIndex] = 0;
 8002162:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <HAL_UART_RxCpltCallback+0xbc>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	4b25      	ldr	r3, [pc, #148]	; (8002200 <HAL_UART_RxCpltCallback+0xc4>)
 800216a:	2100      	movs	r1, #0
 800216c:	5499      	strb	r1, [r3, r2]

        /* Resetting RxIndex to zero */
        RxIndex = 0;
 800216e:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <HAL_UART_RxCpltCallback+0xbc>)
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]

        /* Restart the UART Interrupt */
		HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8002174:	2201      	movs	r2, #1
 8002176:	491f      	ldr	r1, [pc, #124]	; (80021f4 <HAL_UART_RxCpltCallback+0xb8>)
 8002178:	481d      	ldr	r0, [pc, #116]	; (80021f0 <HAL_UART_RxCpltCallback+0xb4>)
 800217a:	f003 fa12 	bl	80055a2 <HAL_UART_Receive_IT>
 800217e:	e033      	b.n	80021e8 <HAL_UART_RxCpltCallback+0xac>
    }

    else
    {
    	/****** Special Character Checking ***********/
    	if(rxByte == 'e' ){
 8002180:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <HAL_UART_RxCpltCallback+0xb8>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b65      	cmp	r3, #101	; 0x65
 8002186:	d11d      	bne.n	80021c4 <HAL_UART_RxCpltCallback+0x88>
		//sending encoder value through UART

		memset(sending_data,0,sizeof(sending_data));
 8002188:	2232      	movs	r2, #50	; 0x32
 800218a:	2100      	movs	r1, #0
 800218c:	481d      	ldr	r0, [pc, #116]	; (8002204 <HAL_UART_RxCpltCallback+0xc8>)
 800218e:	f004 f9cb 	bl	8006528 <memset>
		sprintf(sending_data,"%ld\n",__HAL_TIM_GET_COUNTER(&htim2) );
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_UART_RxCpltCallback+0xcc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	461a      	mov	r2, r3
 800219a:	491c      	ldr	r1, [pc, #112]	; (800220c <HAL_UART_RxCpltCallback+0xd0>)
 800219c:	4819      	ldr	r0, [pc, #100]	; (8002204 <HAL_UART_RxCpltCallback+0xc8>)
 800219e:	f004 fe35 	bl	8006e0c <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 80021a2:	4818      	ldr	r0, [pc, #96]	; (8002204 <HAL_UART_RxCpltCallback+0xc8>)
 80021a4:	f7fe f83e 	bl	8000224 <strlen>
 80021a8:	4603      	mov	r3, r0
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021b0:	4914      	ldr	r1, [pc, #80]	; (8002204 <HAL_UART_RxCpltCallback+0xc8>)
 80021b2:	480f      	ldr	r0, [pc, #60]	; (80021f0 <HAL_UART_RxCpltCallback+0xb4>)
 80021b4:	f003 f963 	bl	800547e <HAL_UART_Transmit>


		 /* Restart the UART Interrupt */
		HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 80021b8:	2201      	movs	r2, #1
 80021ba:	490e      	ldr	r1, [pc, #56]	; (80021f4 <HAL_UART_RxCpltCallback+0xb8>)
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <HAL_UART_RxCpltCallback+0xb4>)
 80021be:	f003 f9f0 	bl	80055a2 <HAL_UART_Receive_IT>

		return;
 80021c2:	e011      	b.n	80021e8 <HAL_UART_RxCpltCallback+0xac>
    	}

        /* Add the character to the buffer */
        RxBuffer[RxIndex] = rxByte;
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <HAL_UART_RxCpltCallback+0xbc>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <HAL_UART_RxCpltCallback+0xb8>)
 80021cc:	7819      	ldrb	r1, [r3, #0]
 80021ce:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <HAL_UART_RxCpltCallback+0xc4>)
 80021d0:	5499      	strb	r1, [r3, r2]
        RxIndex++;
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_UART_RxCpltCallback+0xbc>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	3301      	adds	r3, #1
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <HAL_UART_RxCpltCallback+0xbc>)
 80021dc:	701a      	strb	r2, [r3, #0]

        /* Restart the UART Interrupt */
        HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 80021de:	2201      	movs	r2, #1
 80021e0:	4904      	ldr	r1, [pc, #16]	; (80021f4 <HAL_UART_RxCpltCallback+0xb8>)
 80021e2:	4803      	ldr	r0, [pc, #12]	; (80021f0 <HAL_UART_RxCpltCallback+0xb4>)
 80021e4:	f003 f9dd 	bl	80055a2 <HAL_UART_Receive_IT>

    }

	}
}
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	2000040c 	.word	0x2000040c
 80021f4:	20000484 	.word	0x20000484
 80021f8:	20000482 	.word	0x20000482
 80021fc:	20000483 	.word	0x20000483
 8002200:	20000450 	.word	0x20000450
 8002204:	20000010 	.word	0x20000010
 8002208:	20000334 	.word	0x20000334
 800220c:	0800abec 	.word	0x0800abec

08002210 <__delay_ms>:



void __delay_ms(int32_t k){
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	int32_t i,j;
	for(i=0;i<k;i++)
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	e00d      	b.n	800223a <__delay_ms+0x2a>
		for(j=0;j<3000;j++){}
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	e002      	b.n	800222a <__delay_ms+0x1a>
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	3301      	adds	r3, #1
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002230:	4293      	cmp	r3, r2
 8002232:	ddf7      	ble.n	8002224 <__delay_ms+0x14>
	for(i=0;i<k;i++)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	3301      	adds	r3, #1
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	429a      	cmp	r2, r3
 8002240:	dbed      	blt.n	800221e <__delay_ms+0xe>
}
 8002242:	bf00      	nop
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002254:	b672      	cpsid	i
}
 8002256:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  //sending the ready status
	memset(sending_data,0,sizeof(sending_data));
 8002258:	2232      	movs	r2, #50	; 0x32
 800225a:	2100      	movs	r1, #0
 800225c:	4809      	ldr	r0, [pc, #36]	; (8002284 <Error_Handler+0x34>)
 800225e:	f004 f963 	bl	8006528 <memset>
	sprintf(sending_data,"ERROR");
 8002262:	4909      	ldr	r1, [pc, #36]	; (8002288 <Error_Handler+0x38>)
 8002264:	4807      	ldr	r0, [pc, #28]	; (8002284 <Error_Handler+0x34>)
 8002266:	f004 fdd1 	bl	8006e0c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 800226a:	4806      	ldr	r0, [pc, #24]	; (8002284 <Error_Handler+0x34>)
 800226c:	f7fd ffda 	bl	8000224 <strlen>
 8002270:	4603      	mov	r3, r0
 8002272:	b29a      	uxth	r2, r3
 8002274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002278:	4902      	ldr	r1, [pc, #8]	; (8002284 <Error_Handler+0x34>)
 800227a:	4804      	ldr	r0, [pc, #16]	; (800228c <Error_Handler+0x3c>)
 800227c:	f003 f8ff 	bl	800547e <HAL_UART_Transmit>
	memset(sending_data,0,sizeof(sending_data));
 8002280:	e7ea      	b.n	8002258 <Error_Handler+0x8>
 8002282:	bf00      	nop
 8002284:	20000010 	.word	0x20000010
 8002288:	0800abf4 	.word	0x0800abf4
 800228c:	2000040c 	.word	0x2000040c

08002290 <moveTo>:




void moveTo(int32_t absolute)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	absolute  = (absolute<min_pos) ? min_pos :( (absolute<max_pos) ? absolute : max_pos );
 8002298:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <moveTo+0x44>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	429a      	cmp	r2, r3
 80022a0:	db06      	blt.n	80022b0 <moveTo+0x20>
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <moveTo+0x48>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4293      	cmp	r3, r2
 80022aa:	bfa8      	it	ge
 80022ac:	4613      	movge	r3, r2
 80022ae:	e001      	b.n	80022b4 <moveTo+0x24>
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <moveTo+0x44>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	607b      	str	r3, [r7, #4]
    if (_targetPos != absolute)
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <moveTo+0x4c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d004      	beq.n	80022ca <moveTo+0x3a>
    {
	_targetPos = absolute;
 80022c0:	4a06      	ldr	r2, [pc, #24]	; (80022dc <moveTo+0x4c>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6013      	str	r3, [r2, #0]
	computeNewSpeed();
 80022c6:	f000 f935 	bl	8002534 <computeNewSpeed>
	// compute new n?
    }
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000488 	.word	0x20000488
 80022d8:	20000048 	.word	0x20000048
 80022dc:	200004b0 	.word	0x200004b0

080022e0 <move>:

void move(int32_t relative)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
    moveTo(_currentPos + relative);
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <move+0x20>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ffcd 	bl	8002290 <moveTo>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200004ac 	.word	0x200004ac

08002304 <stepper_setup>:

void stepper_setup(GPIO_TypeDef*_step_port,uint16_t _step_pin, GPIO_TypeDef*  _dir_port,uint16_t _dir_pin ){
 8002304:	b480      	push	{r7}
 8002306:	b087      	sub	sp, #28
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	461a      	mov	r2, r3
 8002310:	460b      	mov	r3, r1
 8002312:	817b      	strh	r3, [r7, #10]
 8002314:	4613      	mov	r3, r2
 8002316:	813b      	strh	r3, [r7, #8]


	step_port = _step_port;
 8002318:	4a33      	ldr	r2, [pc, #204]	; (80023e8 <stepper_setup+0xe4>)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6013      	str	r3, [r2, #0]
	step_pin = _step_pin;
 800231e:	4a33      	ldr	r2, [pc, #204]	; (80023ec <stepper_setup+0xe8>)
 8002320:	897b      	ldrh	r3, [r7, #10]
 8002322:	8013      	strh	r3, [r2, #0]
	dir_port = _dir_port;
 8002324:	4a32      	ldr	r2, [pc, #200]	; (80023f0 <stepper_setup+0xec>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6013      	str	r3, [r2, #0]
	dir_pin = _dir_pin;
 800232a:	4a32      	ldr	r2, [pc, #200]	; (80023f4 <stepper_setup+0xf0>)
 800232c:	893b      	ldrh	r3, [r7, #8]
 800232e:	8013      	strh	r3, [r2, #0]


	_stepInterval = 0;
 8002330:	4b31      	ldr	r3, [pc, #196]	; (80023f8 <stepper_setup+0xf4>)
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
	_minPulseWidth = 1;
 8002336:	4b31      	ldr	r3, [pc, #196]	; (80023fc <stepper_setup+0xf8>)
 8002338:	2201      	movs	r2, #1
 800233a:	601a      	str	r2, [r3, #0]
	_currentPos = 0;
 800233c:	4b30      	ldr	r3, [pc, #192]	; (8002400 <stepper_setup+0xfc>)
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
	_targetPos = 0;
 8002342:	4b30      	ldr	r3, [pc, #192]	; (8002404 <stepper_setup+0x100>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
	_speed = 0.0;
 8002348:	4b2f      	ldr	r3, [pc, #188]	; (8002408 <stepper_setup+0x104>)
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
	_maxSpeed = 30.0;
 8002350:	4b2e      	ldr	r3, [pc, #184]	; (800240c <stepper_setup+0x108>)
 8002352:	4a2f      	ldr	r2, [pc, #188]	; (8002410 <stepper_setup+0x10c>)
 8002354:	601a      	str	r2, [r3, #0]
	_acceleration = 0.0;
 8002356:	4b2f      	ldr	r3, [pc, #188]	; (8002414 <stepper_setup+0x110>)
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
	_sqrt_twoa = 1.0;
 800235e:	4b2e      	ldr	r3, [pc, #184]	; (8002418 <stepper_setup+0x114>)
 8002360:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002364:	601a      	str	r2, [r3, #0]
	_stepInterval = 0;
 8002366:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <stepper_setup+0xf4>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
	_minPulseWidth = 1;
 800236c:	4b23      	ldr	r3, [pc, #140]	; (80023fc <stepper_setup+0xf8>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]
	_enablePin = 0xff;
 8002372:	4b2a      	ldr	r3, [pc, #168]	; (800241c <stepper_setup+0x118>)
 8002374:	22ff      	movs	r2, #255	; 0xff
 8002376:	701a      	strb	r2, [r3, #0]
	_lastStepTime = 0;
 8002378:	4b29      	ldr	r3, [pc, #164]	; (8002420 <stepper_setup+0x11c>)
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]




	// NEW
	_n = 0;
 800237e:	4b29      	ldr	r3, [pc, #164]	; (8002424 <stepper_setup+0x120>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
	_c0 = 0.0;
 8002384:	4b28      	ldr	r3, [pc, #160]	; (8002428 <stepper_setup+0x124>)
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
	_cn = 0.0;
 800238c:	4b27      	ldr	r3, [pc, #156]	; (800242c <stepper_setup+0x128>)
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
	_cmin = 1.0;
 8002394:	4b26      	ldr	r3, [pc, #152]	; (8002430 <stepper_setup+0x12c>)
 8002396:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800239a:	601a      	str	r2, [r3, #0]
	_direction = DIRECTION_CCW;
 800239c:	4b25      	ldr	r3, [pc, #148]	; (8002434 <stepper_setup+0x130>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]

	int i;
	for (i = 0; i < 4; i++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	e007      	b.n	80023b8 <stepper_setup+0xb4>
	_pinInverted[i] = 0;
 80023a8:	4a23      	ldr	r2, [pc, #140]	; (8002438 <stepper_setup+0x134>)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	4413      	add	r3, r2
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 4; i++)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	3301      	adds	r3, #1
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	ddf4      	ble.n	80023a8 <stepper_setup+0xa4>


	for (i = 0; i < 4; i++)
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e007      	b.n	80023d4 <stepper_setup+0xd0>
	_pinInverted[i] = 0;
 80023c4:	4a1c      	ldr	r2, [pc, #112]	; (8002438 <stepper_setup+0x134>)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	4413      	add	r3, r2
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 4; i++)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3301      	adds	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	ddf4      	ble.n	80023c4 <stepper_setup+0xc0>

}
 80023da:	bf00      	nop
 80023dc:	bf00      	nop
 80023de:	371c      	adds	r7, #28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	20000494 	.word	0x20000494
 80023ec:	20000498 	.word	0x20000498
 80023f0:	2000049c 	.word	0x2000049c
 80023f4:	200004a0 	.word	0x200004a0
 80023f8:	200004a4 	.word	0x200004a4
 80023fc:	200004c8 	.word	0x200004c8
 8002400:	200004ac 	.word	0x200004ac
 8002404:	200004b0 	.word	0x200004b0
 8002408:	200004b4 	.word	0x200004b4
 800240c:	200004b8 	.word	0x200004b8
 8002410:	41f00000 	.word	0x41f00000
 8002414:	200004bc 	.word	0x200004bc
 8002418:	200004c0 	.word	0x200004c0
 800241c:	200004cc 	.word	0x200004cc
 8002420:	200004c4 	.word	0x200004c4
 8002424:	200004d0 	.word	0x200004d0
 8002428:	200004d4 	.word	0x200004d4
 800242c:	200004d8 	.word	0x200004d8
 8002430:	200004dc 	.word	0x200004dc
 8002434:	200004a2 	.word	0x200004a2
 8002438:	200004a8 	.word	0x200004a8

0800243c <runSpeed>:


_Bool runSpeed()
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
    // Dont do anything unless we actually have a step interval
    if (!_stepInterval)
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <runSpeed+0x64>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <runSpeed+0x12>
	return false;
 800244a:	2300      	movs	r3, #0
 800244c:	e023      	b.n	8002496 <runSpeed+0x5a>

    uint32_t time =  __HAL_TIM_GET_COUNTER(&htim6);
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <runSpeed+0x68>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	607b      	str	r3, [r7, #4]
    if (time  >= _stepInterval)
 8002456:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <runSpeed+0x64>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	429a      	cmp	r2, r3
 800245e:	d319      	bcc.n	8002494 <runSpeed+0x58>
    {
	if (_direction == DIRECTION_CW)
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <runSpeed+0x6c>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <runSpeed+0x38>
	{
	    // Clockwise
	    _currentPos += 1;
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <runSpeed+0x70>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	3301      	adds	r3, #1
 800246e:	4a0f      	ldr	r2, [pc, #60]	; (80024ac <runSpeed+0x70>)
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e004      	b.n	800247e <runSpeed+0x42>
	}
	else
	{
	    // Anticlockwise
	    _currentPos -= 1;
 8002474:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <runSpeed+0x70>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	3b01      	subs	r3, #1
 800247a:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <runSpeed+0x70>)
 800247c:	6013      	str	r3, [r2, #0]
	}

	step(_currentPos);
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <runSpeed+0x70>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fb5a 	bl	8002b3c <step>

	__HAL_TIM_SET_COUNTER(&htim6,0); //resetting the timer
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <runSpeed+0x68>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2200      	movs	r2, #0
 800248e:	625a      	str	r2, [r3, #36]	; 0x24
	//_lastStepTime = time; // Caution: does not account for costs in step()

	return true;
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <runSpeed+0x5a>
    }
    else
    {
	return false;
 8002494:	2300      	movs	r3, #0
    }
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200004a4 	.word	0x200004a4
 80024a4:	2000037c 	.word	0x2000037c
 80024a8:	200004a2 	.word	0x200004a2
 80024ac:	200004ac 	.word	0x200004ac

080024b0 <distanceToGo>:

int32_t distanceToGo()
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
    return _targetPos - _currentPos;
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <distanceToGo+0x18>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <distanceToGo+0x1c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	1ad3      	subs	r3, r2, r3
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	200004b0 	.word	0x200004b0
 80024cc:	200004ac 	.word	0x200004ac

080024d0 <currentPosition>:
{
    return _targetPos;
}

int32_t currentPosition()
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
    return _currentPos;
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <currentPosition+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	200004ac 	.word	0x200004ac

080024e8 <setCurrentPosition>:

void setCurrentPosition(int32_t position)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
    _targetPos = _currentPos = position;
 80024f0:	4a0b      	ldr	r2, [pc, #44]	; (8002520 <setCurrentPosition+0x38>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <setCurrentPosition+0x38>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <setCurrentPosition+0x3c>)
 80024fc:	6013      	str	r3, [r2, #0]
    _n = 0;
 80024fe:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <setCurrentPosition+0x40>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
    _stepInterval = 0;
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <setCurrentPosition+0x44>)
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
    _speed = 0.0;
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <setCurrentPosition+0x48>)
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	200004ac 	.word	0x200004ac
 8002524:	200004b0 	.word	0x200004b0
 8002528:	200004d0 	.word	0x200004d0
 800252c:	200004a4 	.word	0x200004a4
 8002530:	200004b4 	.word	0x200004b4

08002534 <computeNewSpeed>:

uint32_t computeNewSpeed()
{
 8002534:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
    int32_t distanceTo = distanceToGo(); // +ve is clockwise from curent location
 800253c:	f7ff ffb8 	bl	80024b0 <distanceToGo>
 8002540:	6078      	str	r0, [r7, #4]

    int32_t stepsToStop = (int32_t)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
 8002542:	4b8c      	ldr	r3, [pc, #560]	; (8002774 <computeNewSpeed+0x240>)
 8002544:	ed93 7a00 	vldr	s14, [r3]
 8002548:	4b8a      	ldr	r3, [pc, #552]	; (8002774 <computeNewSpeed+0x240>)
 800254a:	edd3 7a00 	vldr	s15, [r3]
 800254e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002552:	ee17 0a90 	vmov	r0, s15
 8002556:	f7fe f827 	bl	80005a8 <__aeabi_f2d>
 800255a:	4604      	mov	r4, r0
 800255c:	460d      	mov	r5, r1
 800255e:	4b86      	ldr	r3, [pc, #536]	; (8002778 <computeNewSpeed+0x244>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe f820 	bl	80005a8 <__aeabi_f2d>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	f7fd febe 	bl	80002ec <__adddf3>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4620      	mov	r0, r4
 8002576:	4629      	mov	r1, r5
 8002578:	f7fe f998 	bl	80008ac <__aeabi_ddiv>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	f7fe fb18 	bl	8000bb8 <__aeabi_d2iz>
 8002588:	4603      	mov	r3, r0
 800258a:	603b      	str	r3, [r7, #0]

    if (distanceTo == 0 && stepsToStop <= 1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10f      	bne.n	80025b2 <computeNewSpeed+0x7e>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b01      	cmp	r3, #1
 8002596:	dc0c      	bgt.n	80025b2 <computeNewSpeed+0x7e>
    {
	// We are at the target and its time to stop
	_stepInterval = 0;
 8002598:	4b78      	ldr	r3, [pc, #480]	; (800277c <computeNewSpeed+0x248>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
	_speed = 0.0;
 800259e:	4b75      	ldr	r3, [pc, #468]	; (8002774 <computeNewSpeed+0x240>)
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
	_n = 0;
 80025a6:	4b76      	ldr	r3, [pc, #472]	; (8002780 <computeNewSpeed+0x24c>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
	return _stepInterval;
 80025ac:	4b73      	ldr	r3, [pc, #460]	; (800277c <computeNewSpeed+0x248>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	e0da      	b.n	8002768 <computeNewSpeed+0x234>
    }

    if (distanceTo > 0)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	dd25      	ble.n	8002604 <computeNewSpeed+0xd0>
    {
	// We are anti clockwise from the target
	// Need to go clockwise from here, maybe decelerate now
	if (_n > 0)
 80025b8:	4b71      	ldr	r3, [pc, #452]	; (8002780 <computeNewSpeed+0x24c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	dd0f      	ble.n	80025e0 <computeNewSpeed+0xac>
	{
	    // Currently accelerating, need to decel now? Or maybe going the wrong way?
	    if ((stepsToStop >= distanceTo) || _direction == DIRECTION_CCW)
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	da06      	bge.n	80025d6 <computeNewSpeed+0xa2>
 80025c8:	4b6e      	ldr	r3, [pc, #440]	; (8002784 <computeNewSpeed+0x250>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	f083 0301 	eor.w	r3, r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d040      	beq.n	8002658 <computeNewSpeed+0x124>
		_n = -stepsToStop; // Start deceleration
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	425b      	negs	r3, r3
 80025da:	4a69      	ldr	r2, [pc, #420]	; (8002780 <computeNewSpeed+0x24c>)
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e03b      	b.n	8002658 <computeNewSpeed+0x124>
	}
	else if (_n < 0)
 80025e0:	4b67      	ldr	r3, [pc, #412]	; (8002780 <computeNewSpeed+0x24c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	da37      	bge.n	8002658 <computeNewSpeed+0x124>
	{
	    // Currently decelerating, need to accel again?
	    if ((stepsToStop < distanceTo) && _direction == DIRECTION_CW)
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	da33      	bge.n	8002658 <computeNewSpeed+0x124>
 80025f0:	4b64      	ldr	r3, [pc, #400]	; (8002784 <computeNewSpeed+0x250>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d02f      	beq.n	8002658 <computeNewSpeed+0x124>
		_n = -_n; // Start accceleration
 80025f8:	4b61      	ldr	r3, [pc, #388]	; (8002780 <computeNewSpeed+0x24c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	425b      	negs	r3, r3
 80025fe:	4a60      	ldr	r2, [pc, #384]	; (8002780 <computeNewSpeed+0x24c>)
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e029      	b.n	8002658 <computeNewSpeed+0x124>
	}
    }
    else if (distanceTo < 0)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	da26      	bge.n	8002658 <computeNewSpeed+0x124>
    {
	// We are clockwise from the target
	// Need to go anticlockwise from here, maybe decelerate
	if (_n > 0)
 800260a:	4b5d      	ldr	r3, [pc, #372]	; (8002780 <computeNewSpeed+0x24c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	dd0d      	ble.n	800262e <computeNewSpeed+0xfa>
	{
	    // Currently accelerating, need to decel now? Or maybe going the wrong way?
	    if ((stepsToStop >= -distanceTo) || _direction == DIRECTION_CW)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	425b      	negs	r3, r3
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	da03      	bge.n	8002624 <computeNewSpeed+0xf0>
 800261c:	4b59      	ldr	r3, [pc, #356]	; (8002784 <computeNewSpeed+0x250>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d019      	beq.n	8002658 <computeNewSpeed+0x124>
		_n = -stepsToStop; // Start deceleration
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	425b      	negs	r3, r3
 8002628:	4a55      	ldr	r2, [pc, #340]	; (8002780 <computeNewSpeed+0x24c>)
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	e014      	b.n	8002658 <computeNewSpeed+0x124>
	}
	else if (_n < 0)
 800262e:	4b54      	ldr	r3, [pc, #336]	; (8002780 <computeNewSpeed+0x24c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	da10      	bge.n	8002658 <computeNewSpeed+0x124>
	{
	    // Currently decelerating, need to accel again?
	    if ((stepsToStop < -distanceTo) && _direction == DIRECTION_CCW)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	425b      	negs	r3, r3
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	da0b      	bge.n	8002658 <computeNewSpeed+0x124>
 8002640:	4b50      	ldr	r3, [pc, #320]	; (8002784 <computeNewSpeed+0x250>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	f083 0301 	eor.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d004      	beq.n	8002658 <computeNewSpeed+0x124>
		_n = -_n; // Start accceleration
 800264e:	4b4c      	ldr	r3, [pc, #304]	; (8002780 <computeNewSpeed+0x24c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	425b      	negs	r3, r3
 8002654:	4a4a      	ldr	r2, [pc, #296]	; (8002780 <computeNewSpeed+0x24c>)
 8002656:	6013      	str	r3, [r2, #0]
	}
    }

    // Need to accelerate or decelerate
    if (_n == 0)
 8002658:	4b49      	ldr	r3, [pc, #292]	; (8002780 <computeNewSpeed+0x24c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10c      	bne.n	800267a <computeNewSpeed+0x146>
    {
	// First step from stopped
	_cn = _c0;
 8002660:	4b49      	ldr	r3, [pc, #292]	; (8002788 <computeNewSpeed+0x254>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a49      	ldr	r2, [pc, #292]	; (800278c <computeNewSpeed+0x258>)
 8002666:	6013      	str	r3, [r2, #0]
	_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	bfcc      	ite	gt
 800266e:	2301      	movgt	r3, #1
 8002670:	2300      	movle	r3, #0
 8002672:	b2da      	uxtb	r2, r3
 8002674:	4b43      	ldr	r3, [pc, #268]	; (8002784 <computeNewSpeed+0x250>)
 8002676:	701a      	strb	r2, [r3, #0]
 8002678:	e04d      	b.n	8002716 <computeNewSpeed+0x1e2>
    }
    else
    {
	// Subsequent step. Works for accel (n is +_ve) and decel (n is -ve).
	_cn = _cn - ((2.0 * _cn) / ((4.0 * _n) + 1)); // Equation 13
 800267a:	4b44      	ldr	r3, [pc, #272]	; (800278c <computeNewSpeed+0x258>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7fd ff92 	bl	80005a8 <__aeabi_f2d>
 8002684:	4604      	mov	r4, r0
 8002686:	460d      	mov	r5, r1
 8002688:	4b40      	ldr	r3, [pc, #256]	; (800278c <computeNewSpeed+0x258>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fd ff8b 	bl	80005a8 <__aeabi_f2d>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	f7fd fe29 	bl	80002ec <__adddf3>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4690      	mov	r8, r2
 80026a0:	4699      	mov	r9, r3
 80026a2:	4b37      	ldr	r3, [pc, #220]	; (8002780 <computeNewSpeed+0x24c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fd ff6c 	bl	8000584 <__aeabi_i2d>
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	4b37      	ldr	r3, [pc, #220]	; (8002790 <computeNewSpeed+0x25c>)
 80026b2:	f7fd ffd1 	bl	8000658 <__aeabi_dmul>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	4b34      	ldr	r3, [pc, #208]	; (8002794 <computeNewSpeed+0x260>)
 80026c4:	f7fd fe12 	bl	80002ec <__adddf3>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4640      	mov	r0, r8
 80026ce:	4649      	mov	r1, r9
 80026d0:	f7fe f8ec 	bl	80008ac <__aeabi_ddiv>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4620      	mov	r0, r4
 80026da:	4629      	mov	r1, r5
 80026dc:	f7fd fe04 	bl	80002e8 <__aeabi_dsub>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	f7fe faae 	bl	8000c48 <__aeabi_d2f>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4a27      	ldr	r2, [pc, #156]	; (800278c <computeNewSpeed+0x258>)
 80026f0:	6013      	str	r3, [r2, #0]
	_cn = _cn >_cmin ? _cn:_cmin; // max(_cn,_cmin)
 80026f2:	4b26      	ldr	r3, [pc, #152]	; (800278c <computeNewSpeed+0x258>)
 80026f4:	ed93 7a00 	vldr	s14, [r3]
 80026f8:	4b27      	ldr	r3, [pc, #156]	; (8002798 <computeNewSpeed+0x264>)
 80026fa:	edd3 7a00 	vldr	s15, [r3]
 80026fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002706:	dd02      	ble.n	800270e <computeNewSpeed+0x1da>
 8002708:	4b20      	ldr	r3, [pc, #128]	; (800278c <computeNewSpeed+0x258>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	e001      	b.n	8002712 <computeNewSpeed+0x1de>
 800270e:	4b22      	ldr	r3, [pc, #136]	; (8002798 <computeNewSpeed+0x264>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1e      	ldr	r2, [pc, #120]	; (800278c <computeNewSpeed+0x258>)
 8002714:	6013      	str	r3, [r2, #0]
    }
    _n++;
 8002716:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <computeNewSpeed+0x24c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	3301      	adds	r3, #1
 800271c:	4a18      	ldr	r2, [pc, #96]	; (8002780 <computeNewSpeed+0x24c>)
 800271e:	6013      	str	r3, [r2, #0]
    _stepInterval = _cn;
 8002720:	4b1a      	ldr	r3, [pc, #104]	; (800278c <computeNewSpeed+0x258>)
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800272a:	ee17 2a90 	vmov	r2, s15
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <computeNewSpeed+0x248>)
 8002730:	601a      	str	r2, [r3, #0]
    _speed = 1000000.0 / _cn;
 8002732:	4b16      	ldr	r3, [pc, #88]	; (800278c <computeNewSpeed+0x258>)
 8002734:	ed93 7a00 	vldr	s14, [r3]
 8002738:	eddf 6a18 	vldr	s13, [pc, #96]	; 800279c <computeNewSpeed+0x268>
 800273c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <computeNewSpeed+0x240>)
 8002742:	edc3 7a00 	vstr	s15, [r3]
    if (_direction == DIRECTION_CCW)
 8002746:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <computeNewSpeed+0x250>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	f083 0301 	eor.w	r3, r3, #1
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <computeNewSpeed+0x230>
	_speed = -_speed;
 8002754:	4b07      	ldr	r3, [pc, #28]	; (8002774 <computeNewSpeed+0x240>)
 8002756:	edd3 7a00 	vldr	s15, [r3]
 800275a:	eef1 7a67 	vneg.f32	s15, s15
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <computeNewSpeed+0x240>)
 8002760:	edc3 7a00 	vstr	s15, [r3]
    Serial.println(_stepInterval);
    Serial.println(distanceTo);
    Serial.println(stepsToStop);
    Serial.println("-----");
#endif
    return _stepInterval;
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <computeNewSpeed+0x248>)
 8002766:	681b      	ldr	r3, [r3, #0]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002772:	bf00      	nop
 8002774:	200004b4 	.word	0x200004b4
 8002778:	200004bc 	.word	0x200004bc
 800277c:	200004a4 	.word	0x200004a4
 8002780:	200004d0 	.word	0x200004d0
 8002784:	200004a2 	.word	0x200004a2
 8002788:	200004d4 	.word	0x200004d4
 800278c:	200004d8 	.word	0x200004d8
 8002790:	40100000 	.word	0x40100000
 8002794:	3ff00000 	.word	0x3ff00000
 8002798:	200004dc 	.word	0x200004dc
 800279c:	49742400 	.word	0x49742400

080027a0 <run>:
// Run the motor to implement speed and acceleration in order to proceed to the target position
// You must call this at least once per step, preferably in your main loop
// If the motor is in the desired position, the cost is very small
// returns true if the motor is still running to the target position.
_Bool run()
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
    if (runSpeed())
 80027a4:	f7ff fe4a 	bl	800243c <runSpeed>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <run+0x12>
	computeNewSpeed();
 80027ae:	f7ff fec1 	bl	8002534 <computeNewSpeed>
    return _speed != 0.0 || distanceToGo() != 0;
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <run+0x3c>)
 80027b4:	edd3 7a00 	vldr	s15, [r3]
 80027b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c0:	d104      	bne.n	80027cc <run+0x2c>
 80027c2:	f7ff fe75 	bl	80024b0 <distanceToGo>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <run+0x30>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <run+0x32>
 80027d0:	2300      	movs	r3, #0
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	b2db      	uxtb	r3, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	200004b4 	.word	0x200004b4

080027e0 <setMaxSpeed>:


void setMaxSpeed(float speed)
{
 80027e0:	b5b0      	push	{r4, r5, r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	ed87 0a01 	vstr	s0, [r7, #4]
    if (speed < 0.0)
 80027ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80027ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f6:	d505      	bpl.n	8002804 <setMaxSpeed+0x24>
       speed = -speed;
 80027f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80027fc:	eef1 7a67 	vneg.f32	s15, s15
 8002800:	edc7 7a01 	vstr	s15, [r7, #4]
    if (_maxSpeed != speed)
 8002804:	4b22      	ldr	r3, [pc, #136]	; (8002890 <setMaxSpeed+0xb0>)
 8002806:	edd3 7a00 	vldr	s15, [r3]
 800280a:	ed97 7a01 	vldr	s14, [r7, #4]
 800280e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002816:	d037      	beq.n	8002888 <setMaxSpeed+0xa8>
    {
	_maxSpeed = speed;
 8002818:	4a1d      	ldr	r2, [pc, #116]	; (8002890 <setMaxSpeed+0xb0>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6013      	str	r3, [r2, #0]
	_cmin = 1000000.0 / speed;
 800281e:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002894 <setMaxSpeed+0xb4>
 8002822:	ed97 7a01 	vldr	s14, [r7, #4]
 8002826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800282a:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <setMaxSpeed+0xb8>)
 800282c:	edc3 7a00 	vstr	s15, [r3]
	// Recompute _n from current speed and adjust speed if accelerating or cruising
	if (_n > 0)
 8002830:	4b1a      	ldr	r3, [pc, #104]	; (800289c <setMaxSpeed+0xbc>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	dd27      	ble.n	8002888 <setMaxSpeed+0xa8>
	{
	    _n = (int32_t)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <setMaxSpeed+0xc0>)
 800283a:	ed93 7a00 	vldr	s14, [r3]
 800283e:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <setMaxSpeed+0xc0>)
 8002840:	edd3 7a00 	vldr	s15, [r3]
 8002844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002848:	ee17 0a90 	vmov	r0, s15
 800284c:	f7fd feac 	bl	80005a8 <__aeabi_f2d>
 8002850:	4604      	mov	r4, r0
 8002852:	460d      	mov	r5, r1
 8002854:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <setMaxSpeed+0xc4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fea5 	bl	80005a8 <__aeabi_f2d>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	f7fd fd43 	bl	80002ec <__adddf3>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4620      	mov	r0, r4
 800286c:	4629      	mov	r1, r5
 800286e:	f7fe f81d 	bl	80008ac <__aeabi_ddiv>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	f7fe f99d 	bl	8000bb8 <__aeabi_d2iz>
 800287e:	4603      	mov	r3, r0
 8002880:	4a06      	ldr	r2, [pc, #24]	; (800289c <setMaxSpeed+0xbc>)
 8002882:	6013      	str	r3, [r2, #0]
	    computeNewSpeed();
 8002884:	f7ff fe56 	bl	8002534 <computeNewSpeed>
	}
    }
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bdb0      	pop	{r4, r5, r7, pc}
 8002890:	200004b8 	.word	0x200004b8
 8002894:	49742400 	.word	0x49742400
 8002898:	200004dc 	.word	0x200004dc
 800289c:	200004d0 	.word	0x200004d0
 80028a0:	200004b4 	.word	0x200004b4
 80028a4:	200004bc 	.word	0x200004bc

080028a8 <setAcceleration>:
{
    return _maxSpeed;
}

void setAcceleration(float acceleration)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	ed87 0a01 	vstr	s0, [r7, #4]
    if (acceleration == 0.0)
 80028b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028be:	d05f      	beq.n	8002980 <setAcceleration+0xd8>
	return;
    if (acceleration < 0.0)
 80028c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80028c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028cc:	d505      	bpl.n	80028da <setAcceleration+0x32>
      acceleration = -acceleration;
 80028ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80028d2:	eef1 7a67 	vneg.f32	s15, s15
 80028d6:	edc7 7a01 	vstr	s15, [r7, #4]
    if (_acceleration != acceleration)
 80028da:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <setAcceleration+0xf0>)
 80028dc:	edd3 7a00 	vldr	s15, [r3]
 80028e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80028e4:	eeb4 7a67 	vcmp.f32	s14, s15
 80028e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ec:	d049      	beq.n	8002982 <setAcceleration+0xda>
    {
	// Recompute _n per Equation 17
	_n = _n * (_acceleration / acceleration);
 80028ee:	4b2b      	ldr	r3, [pc, #172]	; (800299c <setAcceleration+0xf4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028fa:	4b27      	ldr	r3, [pc, #156]	; (8002998 <setAcceleration+0xf0>)
 80028fc:	ed93 6a00 	vldr	s12, [r3]
 8002900:	edd7 6a01 	vldr	s13, [r7, #4]
 8002904:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002910:	ee17 2a90 	vmov	r2, s15
 8002914:	4b21      	ldr	r3, [pc, #132]	; (800299c <setAcceleration+0xf4>)
 8002916:	601a      	str	r2, [r3, #0]
	// New c0 per Equation 7, with correction per Equation 15
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7fd fe45 	bl	80005a8 <__aeabi_f2d>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	f04f 0000 	mov.w	r0, #0
 8002926:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800292a:	f7fd ffbf 	bl	80008ac <__aeabi_ddiv>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	ec43 2b17 	vmov	d7, r2, r3
 8002936:	eeb0 0a47 	vmov.f32	s0, s14
 800293a:	eef0 0a67 	vmov.f32	s1, s15
 800293e:	f008 f837 	bl	800a9b0 <sqrt>
 8002942:	ec51 0b10 	vmov	r0, r1, d0
 8002946:	a310      	add	r3, pc, #64	; (adr r3, 8002988 <setAcceleration+0xe0>)
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	f7fd fe84 	bl	8000658 <__aeabi_dmul>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	a30d      	add	r3, pc, #52	; (adr r3, 8002990 <setAcceleration+0xe8>)
 800295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295e:	f7fd fe7b 	bl	8000658 <__aeabi_dmul>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	f7fe f96d 	bl	8000c48 <__aeabi_d2f>
 800296e:	4603      	mov	r3, r0
 8002970:	4a0b      	ldr	r2, [pc, #44]	; (80029a0 <setAcceleration+0xf8>)
 8002972:	6013      	str	r3, [r2, #0]
	_acceleration = acceleration;
 8002974:	4a08      	ldr	r2, [pc, #32]	; (8002998 <setAcceleration+0xf0>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6013      	str	r3, [r2, #0]
	computeNewSpeed();
 800297a:	f7ff fddb 	bl	8002534 <computeNewSpeed>
 800297e:	e000      	b.n	8002982 <setAcceleration+0xda>
	return;
 8002980:	bf00      	nop
    }
}
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	c083126f 	.word	0xc083126f
 800298c:	3fe5a1ca 	.word	0x3fe5a1ca
 8002990:	00000000 	.word	0x00000000
 8002994:	412e8480 	.word	0x412e8480
 8002998:	200004bc 	.word	0x200004bc
 800299c:	200004d0 	.word	0x200004d0
 80029a0:	200004d4 	.word	0x200004d4
 80029a4:	00000000 	.word	0x00000000

080029a8 <setSpeed>:
{
    return _acceleration;
}

void setSpeed(float speed)
{
 80029a8:	b5b0      	push	{r4, r5, r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	ed87 0a01 	vstr	s0, [r7, #4]
    if (speed == _speed)
 80029b2:	4b33      	ldr	r3, [pc, #204]	; (8002a80 <setSpeed+0xd8>)
 80029b4:	edd3 7a00 	vldr	s15, [r3]
 80029b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80029bc:	eeb4 7a67 	vcmp.f32	s14, s15
 80029c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c4:	d054      	beq.n	8002a70 <setSpeed+0xc8>
        return;
    speed = (speed) > (-_maxSpeed) ? ( (speed < _maxSpeed)?(speed):(_maxSpeed) ) : (-_maxSpeed) ; //constrain(speed, -_maxSpeed, _maxSpeed);
 80029c6:	4b2f      	ldr	r3, [pc, #188]	; (8002a84 <setSpeed+0xdc>)
 80029c8:	edd3 7a00 	vldr	s15, [r3]
 80029cc:	eef1 7a67 	vneg.f32	s15, s15
 80029d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80029d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029dc:	dd10      	ble.n	8002a00 <setSpeed+0x58>
 80029de:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <setSpeed+0xdc>)
 80029e0:	edd3 7a00 	vldr	s15, [r3]
 80029e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80029e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f0:	d502      	bpl.n	80029f8 <setSpeed+0x50>
 80029f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80029f6:	e008      	b.n	8002a0a <setSpeed+0x62>
 80029f8:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <setSpeed+0xdc>)
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	e004      	b.n	8002a0a <setSpeed+0x62>
 8002a00:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <setSpeed+0xdc>)
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	eef1 7a67 	vneg.f32	s15, s15
 8002a0a:	edc7 7a01 	vstr	s15, [r7, #4]

    if (speed == 0.0)
 8002a0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1a:	d103      	bne.n	8002a24 <setSpeed+0x7c>
	_stepInterval = 0;
 8002a1c:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <setSpeed+0xe0>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e021      	b.n	8002a68 <setSpeed+0xc0>
    else
    {
	_stepInterval = fabs(1000000.0 / speed);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7fd fdbf 	bl	80005a8 <__aeabi_f2d>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	a112      	add	r1, pc, #72	; (adr r1, 8002a78 <setSpeed+0xd0>)
 8002a30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a34:	f7fd ff3a 	bl	80008ac <__aeabi_ddiv>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4614      	mov	r4, r2
 8002a3e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002a42:	4620      	mov	r0, r4
 8002a44:	4629      	mov	r1, r5
 8002a46:	f7fe f8df 	bl	8000c08 <__aeabi_d2uiz>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4a0e      	ldr	r2, [pc, #56]	; (8002a88 <setSpeed+0xe0>)
 8002a4e:	6013      	str	r3, [r2, #0]
	_direction = (speed > 0.0) ? DIRECTION_CW : DIRECTION_CCW;
 8002a50:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5c:	bfcc      	ite	gt
 8002a5e:	2301      	movgt	r3, #1
 8002a60:	2300      	movle	r3, #0
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <setSpeed+0xe4>)
 8002a66:	701a      	strb	r2, [r3, #0]
    }
    _speed = speed;
 8002a68:	4a05      	ldr	r2, [pc, #20]	; (8002a80 <setSpeed+0xd8>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e000      	b.n	8002a72 <setSpeed+0xca>
        return;
 8002a70:	bf00      	nop
    //added
//    computeNewSpeed();
}
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bdb0      	pop	{r4, r5, r7, pc}
 8002a78:	00000000 	.word	0x00000000
 8002a7c:	412e8480 	.word	0x412e8480
 8002a80:	200004b4 	.word	0x200004b4
 8002a84:	200004b8 	.word	0x200004b8
 8002a88:	200004a4 	.word	0x200004a4
 8002a8c:	200004a2 	.word	0x200004a2

08002a90 <setOutputPins>:

void setOutputPins(uint8_t mask)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
    uint8_t numpins = 2;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	73bb      	strb	r3, [r7, #14]

    uint8_t i;
    for (i = 0; i < numpins; i++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
 8002aa2:	e038      	b.n	8002b16 <setOutputPins+0x86>
    	if(i==1){ //step pin
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d119      	bne.n	8002ade <setOutputPins+0x4e>
    		HAL_GPIO_WritePin( step_port, step_pin, (mask & (1 << i)) ? ( 1  ^ _pinInverted[i]) : (0 ^ _pinInverted[i]) );
 8002aaa:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <setOutputPins+0x98>)
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	4b1f      	ldr	r3, [pc, #124]	; (8002b2c <setOutputPins+0x9c>)
 8002ab0:	8819      	ldrh	r1, [r3, #0]
 8002ab2:	79fa      	ldrb	r2, [r7, #7]
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	fa42 f303 	asr.w	r3, r2, r3
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <setOutputPins+0x40>
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <setOutputPins+0xa0>)
 8002ac6:	5cd3      	ldrb	r3, [r2, r3]
 8002ac8:	f083 0301 	eor.w	r3, r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	e002      	b.n	8002ad6 <setOutputPins+0x46>
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	4a17      	ldr	r2, [pc, #92]	; (8002b30 <setOutputPins+0xa0>)
 8002ad4:	5cd3      	ldrb	r3, [r2, r3]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f000 ff5e 	bl	8003998 <HAL_GPIO_WritePin>
 8002adc:	e018      	b.n	8002b10 <setOutputPins+0x80>
    	}
    	else{
    		HAL_GPIO_WritePin( dir_port, dir_pin, (mask & (1 << i)) ? ( 1  ^ _pinInverted[i]) : (0 ^ _pinInverted[i]) );
 8002ade:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <setOutputPins+0xa4>)
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <setOutputPins+0xa8>)
 8002ae4:	8819      	ldrh	r1, [r3, #0]
 8002ae6:	79fa      	ldrb	r2, [r7, #7]
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	fa42 f303 	asr.w	r3, r2, r3
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d006      	beq.n	8002b04 <setOutputPins+0x74>
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <setOutputPins+0xa0>)
 8002afa:	5cd3      	ldrb	r3, [r2, r3]
 8002afc:	f083 0301 	eor.w	r3, r3, #1
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	e002      	b.n	8002b0a <setOutputPins+0x7a>
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <setOutputPins+0xa0>)
 8002b08:	5cd3      	ldrb	r3, [r2, r3]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f000 ff44 	bl	8003998 <HAL_GPIO_WritePin>
    for (i = 0; i < numpins; i++)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	3301      	adds	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
 8002b16:	7bfa      	ldrb	r2, [r7, #15]
 8002b18:	7bbb      	ldrb	r3, [r7, #14]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d3c2      	bcc.n	8002aa4 <setOutputPins+0x14>
    	}
}
 8002b1e:	bf00      	nop
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000494 	.word	0x20000494
 8002b2c:	20000498 	.word	0x20000498
 8002b30:	200004a8 	.word	0x200004a8
 8002b34:	2000049c 	.word	0x2000049c
 8002b38:	200004a0 	.word	0x200004a0

08002b3c <step>:
float speed()
{
    return _speed;
}

void step(uint32_t step){
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]

	//making step with driver
	step1(step);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f805 	bl	8002b54 <step1>

}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <step1>:

// 1 pin step function (ie for stepper drivers)
// This is passed the current step number (0 to 7)
// Subclasses can override
void step1(uint32_t step)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
	(void)(step); // Unused

	// _pin[0] is step, _pin[1] is direction
	setOutputPins(_direction ? 0b10 : 0b00); // Set direction first else get rogue pulses
 8002b5c:	4b13      	ldr	r3, [pc, #76]	; (8002bac <step1+0x58>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <step1+0x14>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e000      	b.n	8002b6a <step1+0x16>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff ff90 	bl	8002a90 <setOutputPins>
	setOutputPins(_direction ? 0b11 : 0b01); // step HIGH
 8002b70:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <step1+0x58>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <step1+0x28>
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e000      	b.n	8002b7e <step1+0x2a>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff ff86 	bl	8002a90 <setOutputPins>
	// Caution 200ns setup time
	// Delay the minimum allowed pulse width

	delay_us(_minPulseWidth);
 8002b84:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <step1+0x5c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f868 	bl	8002c60 <delay_us>
	setOutputPins(_direction ? 0b10 : 0b00); // step LOW
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <step1+0x58>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <step1+0x48>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e000      	b.n	8002b9e <step1+0x4a>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff ff76 	bl	8002a90 <setOutputPins>
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	200004a2 	.word	0x200004a2
 8002bb0:	200004c8 	.word	0x200004c8

08002bb4 <runToPosition>:
    _pinInverted[1] = directionInvert;
    _enableInverted = enableInvert;
}

void runToPosition()
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
    while (run());
 8002bb8:	bf00      	nop
 8002bba:	f7ff fdf1 	bl	80027a0 <run>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1fa      	bne.n	8002bba <runToPosition+0x6>
//	YIELD; // Let system housekeeping occur
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <stop>:
    moveTo(position);
    runToPosition();
}

void stop()
{
 8002bcc:	b5b0      	push	{r4, r5, r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
    if (_speed != 0.0)
 8002bd2:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <stop+0x8c>)
 8002bd4:	edd3 7a00 	vldr	s15, [r3]
 8002bd8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be0:	d036      	beq.n	8002c50 <stop+0x84>
    {
	int32_t stepsToStop = (int32_t)((_speed * _speed) / (2.0 * _acceleration)) + 1; // Equation 16 (+integer rounding)
 8002be2:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <stop+0x8c>)
 8002be4:	ed93 7a00 	vldr	s14, [r3]
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <stop+0x8c>)
 8002bea:	edd3 7a00 	vldr	s15, [r3]
 8002bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf2:	ee17 0a90 	vmov	r0, s15
 8002bf6:	f7fd fcd7 	bl	80005a8 <__aeabi_f2d>
 8002bfa:	4604      	mov	r4, r0
 8002bfc:	460d      	mov	r5, r1
 8002bfe:	4b17      	ldr	r3, [pc, #92]	; (8002c5c <stop+0x90>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fcd0 	bl	80005a8 <__aeabi_f2d>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	f7fd fb6e 	bl	80002ec <__adddf3>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4620      	mov	r0, r4
 8002c16:	4629      	mov	r1, r5
 8002c18:	f7fd fe48 	bl	80008ac <__aeabi_ddiv>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4610      	mov	r0, r2
 8002c22:	4619      	mov	r1, r3
 8002c24:	f7fd ffc8 	bl	8000bb8 <__aeabi_d2iz>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	607b      	str	r3, [r7, #4]
	if (_speed > 0)
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <stop+0x8c>)
 8002c30:	edd3 7a00 	vldr	s15, [r3]
 8002c34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3c:	dd03      	ble.n	8002c46 <stop+0x7a>
	    move(stepsToStop);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff fb4e 	bl	80022e0 <move>
	else
	    move(-stepsToStop);
    }
}
 8002c44:	e004      	b.n	8002c50 <stop+0x84>
	    move(-stepsToStop);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	425b      	negs	r3, r3
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fb48 	bl	80022e0 <move>
}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bdb0      	pop	{r4, r5, r7, pc}
 8002c58:	200004b4 	.word	0x200004b4
 8002c5c:	200004bc 	.word	0x200004bc

08002c60 <delay_us>:
}



/*********** Helper Functions ************/
void delay_us (uint16_t us){
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	80fb      	strh	r3, [r7, #6]
//{	__HAL_TIM_DISABLE
//	HAL_TIM_Base_Stop(&htim7);
	__HAL_TIM_SET_COUNTER(&htim7,0x0000);  // set the counter value a 0
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <delay_us+0x30>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24
#if debug
	counter = __HAL_TIM_GET_COUNTER(&htim7);
#endif
//	HAL_TIM_Base_Start(&htim7);

	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 8002c72:	bf00      	nop
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <delay_us+0x30>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d3f9      	bcc.n	8002c74 <delay_us+0x14>
#if debug
	counter = __HAL_TIM_GET_COUNTER(&htim7);
#endif
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	200003c4 	.word	0x200003c4

08002c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_MspInit+0x4c>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	4a0f      	ldr	r2, [pc, #60]	; (8002ce0 <HAL_MspInit+0x4c>)
 8002ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8002caa:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <HAL_MspInit+0x4c>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <HAL_MspInit+0x4c>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a08      	ldr	r2, [pc, #32]	; (8002ce0 <HAL_MspInit+0x4c>)
 8002cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_MspInit+0x4c>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800

08002ce4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	; 0x28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cec:	f107 0314 	add.w	r3, r7, #20
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <HAL_SPI_MspInit+0x84>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d12b      	bne.n	8002d5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <HAL_SPI_MspInit+0x88>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	4a17      	ldr	r2, [pc, #92]	; (8002d6c <HAL_SPI_MspInit+0x88>)
 8002d10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d14:	6453      	str	r3, [r2, #68]	; 0x44
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <HAL_SPI_MspInit+0x88>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <HAL_SPI_MspInit+0x88>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	4a10      	ldr	r2, [pc, #64]	; (8002d6c <HAL_SPI_MspInit+0x88>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6313      	str	r3, [r2, #48]	; 0x30
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <HAL_SPI_MspInit+0x88>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_Clk_Pin|SPI_MOSI_Pin;
 8002d3e:	23a0      	movs	r3, #160	; 0xa0
 8002d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d42:	2302      	movs	r3, #2
 8002d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d4e:	2305      	movs	r3, #5
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d52:	f107 0314 	add.w	r3, r7, #20
 8002d56:	4619      	mov	r1, r3
 8002d58:	4805      	ldr	r0, [pc, #20]	; (8002d70 <HAL_SPI_MspInit+0x8c>)
 8002d5a:	f000 fc89 	bl	8003670 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d5e:	bf00      	nop
 8002d60:	3728      	adds	r7, #40	; 0x28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40013000 	.word	0x40013000
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40020000 	.word	0x40020000

08002d74 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	; 0x28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7c:	f107 0314 	add.w	r3, r7, #20
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d94:	d133      	bne.n	8002dfe <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <HAL_TIM_Encoder_MspInit+0x94>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	4a1a      	ldr	r2, [pc, #104]	; (8002e08 <HAL_TIM_Encoder_MspInit+0x94>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6413      	str	r3, [r2, #64]	; 0x40
 8002da6:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <HAL_TIM_Encoder_MspInit+0x94>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <HAL_TIM_Encoder_MspInit+0x94>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <HAL_TIM_Encoder_MspInit+0x94>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc2:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <HAL_TIM_Encoder_MspInit+0x94>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A_signal_Pin|B_signal_Pin;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002dde:	2301      	movs	r3, #1
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de2:	f107 0314 	add.w	r3, r7, #20
 8002de6:	4619      	mov	r1, r3
 8002de8:	4808      	ldr	r0, [pc, #32]	; (8002e0c <HAL_TIM_Encoder_MspInit+0x98>)
 8002dea:	f000 fc41 	bl	8003670 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002dee:	2200      	movs	r2, #0
 8002df0:	2100      	movs	r1, #0
 8002df2:	201c      	movs	r0, #28
 8002df4:	f000 fb65 	bl	80034c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002df8:	201c      	movs	r0, #28
 8002dfa:	f000 fb7e 	bl	80034fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002dfe:	bf00      	nop
 8002e00:	3728      	adds	r7, #40	; 0x28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40020000 	.word	0x40020000

08002e10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a15      	ldr	r2, [pc, #84]	; (8002e74 <HAL_TIM_Base_MspInit+0x64>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d10e      	bne.n	8002e40 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <HAL_TIM_Base_MspInit+0x68>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	4a13      	ldr	r2, [pc, #76]	; (8002e78 <HAL_TIM_Base_MspInit+0x68>)
 8002e2c:	f043 0310 	orr.w	r3, r3, #16
 8002e30:	6413      	str	r3, [r2, #64]	; 0x40
 8002e32:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <HAL_TIM_Base_MspInit+0x68>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002e3e:	e012      	b.n	8002e66 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM7)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <HAL_TIM_Base_MspInit+0x6c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d10d      	bne.n	8002e66 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <HAL_TIM_Base_MspInit+0x68>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	4a09      	ldr	r2, [pc, #36]	; (8002e78 <HAL_TIM_Base_MspInit+0x68>)
 8002e54:	f043 0320 	orr.w	r3, r3, #32
 8002e58:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5a:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <HAL_TIM_Base_MspInit+0x68>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]
}
 8002e66:	bf00      	nop
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40001000 	.word	0x40001000
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40001400 	.word	0x40001400

08002e80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08a      	sub	sp, #40	; 0x28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e88:	f107 0314 	add.w	r3, r7, #20
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1d      	ldr	r2, [pc, #116]	; (8002f14 <HAL_UART_MspInit+0x94>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d133      	bne.n	8002f0a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <HAL_UART_MspInit+0x98>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a1b      	ldr	r2, [pc, #108]	; (8002f18 <HAL_UART_MspInit+0x98>)
 8002eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <HAL_UART_MspInit+0x98>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <HAL_UART_MspInit+0x98>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <HAL_UART_MspInit+0x98>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <HAL_UART_MspInit+0x98>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002eda:	230c      	movs	r3, #12
 8002edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002eea:	2307      	movs	r3, #7
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eee:	f107 0314 	add.w	r3, r7, #20
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4809      	ldr	r0, [pc, #36]	; (8002f1c <HAL_UART_MspInit+0x9c>)
 8002ef6:	f000 fbbb 	bl	8003670 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002efa:	2200      	movs	r2, #0
 8002efc:	2100      	movs	r1, #0
 8002efe:	2026      	movs	r0, #38	; 0x26
 8002f00:	f000 fadf 	bl	80034c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f04:	2026      	movs	r0, #38	; 0x26
 8002f06:	f000 faf8 	bl	80034fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f0a:	bf00      	nop
 8002f0c:	3728      	adds	r7, #40	; 0x28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40004400 	.word	0x40004400
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40020000 	.word	0x40020000

08002f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f24:	e7fe      	b.n	8002f24 <NMI_Handler+0x4>

08002f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f2a:	e7fe      	b.n	8002f2a <HardFault_Handler+0x4>

08002f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f30:	e7fe      	b.n	8002f30 <MemManage_Handler+0x4>

08002f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f36:	e7fe      	b.n	8002f36 <BusFault_Handler+0x4>

08002f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f3c:	e7fe      	b.n	8002f3c <UsageFault_Handler+0x4>

08002f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f6c:	f000 f98a 	bl	8003284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f70:	bf00      	nop
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Z_reference_Pin);
 8002f78:	2001      	movs	r0, #1
 8002f7a:	f000 fd27 	bl	80039cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Camera_input_Pin);
 8002f86:	2008      	movs	r0, #8
 8002f88:	f000 fd20 	bl	80039cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002f8c:	bf00      	nop
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(P_limit_Pin);
 8002f94:	2010      	movs	r0, #16
 8002f96:	f000 fd19 	bl	80039cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Q_limit_Pin);
 8002fa2:	2020      	movs	r0, #32
 8002fa4:	f000 fd12 	bl	80039cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Z_END_STOP_Pin);
 8002fa8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002fac:	f000 fd0e 	bl	80039cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fb8:	4802      	ldr	r0, [pc, #8]	; (8002fc4 <TIM2_IRQHandler+0x10>)
 8002fba:	f001 ff83 	bl	8004ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000334 	.word	0x20000334

08002fc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002fcc:	4802      	ldr	r0, [pc, #8]	; (8002fd8 <USART2_IRQHandler+0x10>)
 8002fce:	f002 fb19 	bl	8005604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	2000040c 	.word	0x2000040c

08002fdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
	return 1;
 8002fe0:	2301      	movs	r3, #1
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <_kill>:

int _kill(int pid, int sig)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ff6:	f003 fa6d 	bl	80064d4 <__errno>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2216      	movs	r2, #22
 8002ffe:	601a      	str	r2, [r3, #0]
	return -1;
 8003000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <_exit>:

void _exit (int status)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003014:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff ffe7 	bl	8002fec <_kill>
	while (1) {}		/* Make sure we hang here */
 800301e:	e7fe      	b.n	800301e <_exit+0x12>

08003020 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	e00a      	b.n	8003048 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003032:	f3af 8000 	nop.w
 8003036:	4601      	mov	r1, r0
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	60ba      	str	r2, [r7, #8]
 800303e:	b2ca      	uxtb	r2, r1
 8003040:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	3301      	adds	r3, #1
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	429a      	cmp	r2, r3
 800304e:	dbf0      	blt.n	8003032 <_read+0x12>
	}

return len;
 8003050:	687b      	ldr	r3, [r7, #4]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	e009      	b.n	8003080 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	60ba      	str	r2, [r7, #8]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	3301      	adds	r3, #1
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	429a      	cmp	r2, r3
 8003086:	dbf1      	blt.n	800306c <_write+0x12>
	}
	return len;
 8003088:	687b      	ldr	r3, [r7, #4]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <_close>:

int _close(int file)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
	return -1;
 800309a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800309e:	4618      	mov	r0, r3
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030ba:	605a      	str	r2, [r3, #4]
	return 0;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <_isatty>:

int _isatty(int file)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
	return 1;
 80030d2:	2301      	movs	r3, #1
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
	return 0;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
	...

080030fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003104:	4a14      	ldr	r2, [pc, #80]	; (8003158 <_sbrk+0x5c>)
 8003106:	4b15      	ldr	r3, [pc, #84]	; (800315c <_sbrk+0x60>)
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003110:	4b13      	ldr	r3, [pc, #76]	; (8003160 <_sbrk+0x64>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d102      	bne.n	800311e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003118:	4b11      	ldr	r3, [pc, #68]	; (8003160 <_sbrk+0x64>)
 800311a:	4a12      	ldr	r2, [pc, #72]	; (8003164 <_sbrk+0x68>)
 800311c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <_sbrk+0x64>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	429a      	cmp	r2, r3
 800312a:	d207      	bcs.n	800313c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800312c:	f003 f9d2 	bl	80064d4 <__errno>
 8003130:	4603      	mov	r3, r0
 8003132:	220c      	movs	r2, #12
 8003134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800313a:	e009      	b.n	8003150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800313c:	4b08      	ldr	r3, [pc, #32]	; (8003160 <_sbrk+0x64>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003142:	4b07      	ldr	r3, [pc, #28]	; (8003160 <_sbrk+0x64>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	4a05      	ldr	r2, [pc, #20]	; (8003160 <_sbrk+0x64>)
 800314c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800314e:	68fb      	ldr	r3, [r7, #12]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20020000 	.word	0x20020000
 800315c:	00000400 	.word	0x00000400
 8003160:	200004e0 	.word	0x200004e0
 8003164:	200004f8 	.word	0x200004f8

08003168 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <SystemInit+0x20>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003172:	4a05      	ldr	r2, [pc, #20]	; (8003188 <SystemInit+0x20>)
 8003174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800317c:	bf00      	nop
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800318c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003190:	480d      	ldr	r0, [pc, #52]	; (80031c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003192:	490e      	ldr	r1, [pc, #56]	; (80031cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003194:	4a0e      	ldr	r2, [pc, #56]	; (80031d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003198:	e002      	b.n	80031a0 <LoopCopyDataInit>

0800319a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800319a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800319c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800319e:	3304      	adds	r3, #4

080031a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031a4:	d3f9      	bcc.n	800319a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031a6:	4a0b      	ldr	r2, [pc, #44]	; (80031d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031a8:	4c0b      	ldr	r4, [pc, #44]	; (80031d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031ac:	e001      	b.n	80031b2 <LoopFillZerobss>

080031ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031b0:	3204      	adds	r2, #4

080031b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031b4:	d3fb      	bcc.n	80031ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031b6:	f7ff ffd7 	bl	8003168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031ba:	f003 f991 	bl	80064e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031be:	f7fe fb9b 	bl	80018f8 <main>
  bx  lr    
 80031c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031cc:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 80031d0:	0800b120 	.word	0x0800b120
  ldr r2, =_sbss
 80031d4:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 80031d8:	200004f8 	.word	0x200004f8

080031dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031dc:	e7fe      	b.n	80031dc <ADC_IRQHandler>
	...

080031e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031e4:	4b0e      	ldr	r3, [pc, #56]	; (8003220 <HAL_Init+0x40>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a0d      	ldr	r2, [pc, #52]	; (8003220 <HAL_Init+0x40>)
 80031ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_Init+0x40>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0a      	ldr	r2, [pc, #40]	; (8003220 <HAL_Init+0x40>)
 80031f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031fc:	4b08      	ldr	r3, [pc, #32]	; (8003220 <HAL_Init+0x40>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a07      	ldr	r2, [pc, #28]	; (8003220 <HAL_Init+0x40>)
 8003202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003206:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003208:	2003      	movs	r0, #3
 800320a:	f000 f94f 	bl	80034ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800320e:	2000      	movs	r0, #0
 8003210:	f000 f808 	bl	8003224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003214:	f7ff fd3e 	bl	8002c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40023c00 	.word	0x40023c00

08003224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800322c:	4b12      	ldr	r3, [pc, #72]	; (8003278 <HAL_InitTick+0x54>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	4b12      	ldr	r3, [pc, #72]	; (800327c <HAL_InitTick+0x58>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	4619      	mov	r1, r3
 8003236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800323a:	fbb3 f3f1 	udiv	r3, r3, r1
 800323e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f975 	bl	8003532 <HAL_SYSTICK_Config>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e00e      	b.n	8003270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b0f      	cmp	r3, #15
 8003256:	d80a      	bhi.n	800326e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003258:	2200      	movs	r2, #0
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003260:	f000 f92f 	bl	80034c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003264:	4a06      	ldr	r2, [pc, #24]	; (8003280 <HAL_InitTick+0x5c>)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	e000      	b.n	8003270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	20000054 	.word	0x20000054
 800327c:	2000005c 	.word	0x2000005c
 8003280:	20000058 	.word	0x20000058

08003284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_IncTick+0x20>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_IncTick+0x24>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4413      	add	r3, r2
 8003294:	4a04      	ldr	r2, [pc, #16]	; (80032a8 <HAL_IncTick+0x24>)
 8003296:	6013      	str	r3, [r2, #0]
}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	2000005c 	.word	0x2000005c
 80032a8:	200004e4 	.word	0x200004e4

080032ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return uwTick;
 80032b0:	4b03      	ldr	r3, [pc, #12]	; (80032c0 <HAL_GetTick+0x14>)
 80032b2:	681b      	ldr	r3, [r3, #0]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	200004e4 	.word	0x200004e4

080032c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d4:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <__NVIC_SetPriorityGrouping+0x44>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032e0:	4013      	ands	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032f6:	4a04      	ldr	r2, [pc, #16]	; (8003308 <__NVIC_SetPriorityGrouping+0x44>)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	60d3      	str	r3, [r2, #12]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <__NVIC_GetPriorityGrouping+0x18>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	f003 0307 	and.w	r3, r3, #7
}
 800331a:	4618      	mov	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	e000ed00 	.word	0xe000ed00

08003328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	2b00      	cmp	r3, #0
 8003338:	db0b      	blt.n	8003352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	f003 021f 	and.w	r2, r3, #31
 8003340:	4907      	ldr	r1, [pc, #28]	; (8003360 <__NVIC_EnableIRQ+0x38>)
 8003342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	2001      	movs	r0, #1
 800334a:	fa00 f202 	lsl.w	r2, r0, r2
 800334e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	e000e100 	.word	0xe000e100

08003364 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	2b00      	cmp	r3, #0
 8003374:	db12      	blt.n	800339c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	f003 021f 	and.w	r2, r3, #31
 800337c:	490a      	ldr	r1, [pc, #40]	; (80033a8 <__NVIC_DisableIRQ+0x44>)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	2001      	movs	r0, #1
 8003386:	fa00 f202 	lsl.w	r2, r0, r2
 800338a:	3320      	adds	r3, #32
 800338c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003390:	f3bf 8f4f 	dsb	sy
}
 8003394:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003396:	f3bf 8f6f 	isb	sy
}
 800339a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000e100 	.word	0xe000e100

080033ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	6039      	str	r1, [r7, #0]
 80033b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	db0a      	blt.n	80033d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	490c      	ldr	r1, [pc, #48]	; (80033f8 <__NVIC_SetPriority+0x4c>)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	0112      	lsls	r2, r2, #4
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	440b      	add	r3, r1
 80033d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033d4:	e00a      	b.n	80033ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	4908      	ldr	r1, [pc, #32]	; (80033fc <__NVIC_SetPriority+0x50>)
 80033dc:	79fb      	ldrb	r3, [r7, #7]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	3b04      	subs	r3, #4
 80033e4:	0112      	lsls	r2, r2, #4
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	440b      	add	r3, r1
 80033ea:	761a      	strb	r2, [r3, #24]
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000e100 	.word	0xe000e100
 80033fc:	e000ed00 	.word	0xe000ed00

08003400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	; 0x24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f1c3 0307 	rsb	r3, r3, #7
 800341a:	2b04      	cmp	r3, #4
 800341c:	bf28      	it	cs
 800341e:	2304      	movcs	r3, #4
 8003420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3304      	adds	r3, #4
 8003426:	2b06      	cmp	r3, #6
 8003428:	d902      	bls.n	8003430 <NVIC_EncodePriority+0x30>
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3b03      	subs	r3, #3
 800342e:	e000      	b.n	8003432 <NVIC_EncodePriority+0x32>
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43da      	mvns	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	401a      	ands	r2, r3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003448:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	fa01 f303 	lsl.w	r3, r1, r3
 8003452:	43d9      	mvns	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003458:	4313      	orrs	r3, r2
         );
}
 800345a:	4618      	mov	r0, r3
 800345c:	3724      	adds	r7, #36	; 0x24
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003478:	d301      	bcc.n	800347e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800347a:	2301      	movs	r3, #1
 800347c:	e00f      	b.n	800349e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800347e:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <SysTick_Config+0x40>)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3b01      	subs	r3, #1
 8003484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003486:	210f      	movs	r1, #15
 8003488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800348c:	f7ff ff8e 	bl	80033ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003490:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <SysTick_Config+0x40>)
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003496:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <SysTick_Config+0x40>)
 8003498:	2207      	movs	r2, #7
 800349a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	e000e010 	.word	0xe000e010

080034ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ff05 	bl	80032c4 <__NVIC_SetPriorityGrouping>
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	4603      	mov	r3, r0
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034d4:	f7ff ff1a 	bl	800330c <__NVIC_GetPriorityGrouping>
 80034d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	6978      	ldr	r0, [r7, #20]
 80034e0:	f7ff ff8e 	bl	8003400 <NVIC_EncodePriority>
 80034e4:	4602      	mov	r2, r0
 80034e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ea:	4611      	mov	r1, r2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff ff5d 	bl	80033ac <__NVIC_SetPriority>
}
 80034f2:	bf00      	nop
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	4603      	mov	r3, r0
 8003502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff ff0d 	bl	8003328 <__NVIC_EnableIRQ>
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	4603      	mov	r3, r0
 800351e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ff1d 	bl	8003364 <__NVIC_DisableIRQ>
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ff94 	bl	8003468 <SysTick_Config>
 8003540:	4603      	mov	r3, r0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003558:	f7ff fea8 	bl	80032ac <HAL_GetTick>
 800355c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d008      	beq.n	800357c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2280      	movs	r2, #128	; 0x80
 800356e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e052      	b.n	8003622 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0216 	bic.w	r2, r2, #22
 800358a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800359a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d103      	bne.n	80035ac <HAL_DMA_Abort+0x62>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d007      	beq.n	80035bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0208 	bic.w	r2, r2, #8
 80035ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035cc:	e013      	b.n	80035f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035ce:	f7ff fe6d 	bl	80032ac <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b05      	cmp	r3, #5
 80035da:	d90c      	bls.n	80035f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2203      	movs	r2, #3
 80035e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e015      	b.n	8003622 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1e4      	bne.n	80035ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003608:	223f      	movs	r2, #63	; 0x3f
 800360a:	409a      	lsls	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d004      	beq.n	8003648 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2280      	movs	r2, #128	; 0x80
 8003642:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e00c      	b.n	8003662 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2205      	movs	r2, #5
 800364c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003670:	b480      	push	{r7}
 8003672:	b089      	sub	sp, #36	; 0x24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	e165      	b.n	8003958 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800368c:	2201      	movs	r2, #1
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4013      	ands	r3, r2
 800369e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	f040 8154 	bne.w	8003952 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d005      	beq.n	80036c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d130      	bne.n	8003724 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	2203      	movs	r2, #3
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43db      	mvns	r3, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4013      	ands	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036f8:	2201      	movs	r2, #1
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	091b      	lsrs	r3, r3, #4
 800370e:	f003 0201 	and.w	r2, r3, #1
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	2b03      	cmp	r3, #3
 800372e:	d017      	beq.n	8003760 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	2203      	movs	r2, #3
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d123      	bne.n	80037b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	08da      	lsrs	r2, r3, #3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3208      	adds	r2, #8
 8003774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003778:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	220f      	movs	r2, #15
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	08da      	lsrs	r2, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3208      	adds	r2, #8
 80037ae:	69b9      	ldr	r1, [r7, #24]
 80037b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	2203      	movs	r2, #3
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 0203 	and.w	r2, r3, #3
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80ae 	beq.w	8003952 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	4b5d      	ldr	r3, [pc, #372]	; (8003970 <HAL_GPIO_Init+0x300>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	4a5c      	ldr	r2, [pc, #368]	; (8003970 <HAL_GPIO_Init+0x300>)
 8003800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003804:	6453      	str	r3, [r2, #68]	; 0x44
 8003806:	4b5a      	ldr	r3, [pc, #360]	; (8003970 <HAL_GPIO_Init+0x300>)
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003812:	4a58      	ldr	r2, [pc, #352]	; (8003974 <HAL_GPIO_Init+0x304>)
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	089b      	lsrs	r3, r3, #2
 8003818:	3302      	adds	r3, #2
 800381a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	220f      	movs	r2, #15
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a4f      	ldr	r2, [pc, #316]	; (8003978 <HAL_GPIO_Init+0x308>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d025      	beq.n	800388a <HAL_GPIO_Init+0x21a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a4e      	ldr	r2, [pc, #312]	; (800397c <HAL_GPIO_Init+0x30c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01f      	beq.n	8003886 <HAL_GPIO_Init+0x216>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a4d      	ldr	r2, [pc, #308]	; (8003980 <HAL_GPIO_Init+0x310>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d019      	beq.n	8003882 <HAL_GPIO_Init+0x212>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a4c      	ldr	r2, [pc, #304]	; (8003984 <HAL_GPIO_Init+0x314>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <HAL_GPIO_Init+0x20e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a4b      	ldr	r2, [pc, #300]	; (8003988 <HAL_GPIO_Init+0x318>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00d      	beq.n	800387a <HAL_GPIO_Init+0x20a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a4a      	ldr	r2, [pc, #296]	; (800398c <HAL_GPIO_Init+0x31c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d007      	beq.n	8003876 <HAL_GPIO_Init+0x206>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a49      	ldr	r2, [pc, #292]	; (8003990 <HAL_GPIO_Init+0x320>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <HAL_GPIO_Init+0x202>
 800386e:	2306      	movs	r3, #6
 8003870:	e00c      	b.n	800388c <HAL_GPIO_Init+0x21c>
 8003872:	2307      	movs	r3, #7
 8003874:	e00a      	b.n	800388c <HAL_GPIO_Init+0x21c>
 8003876:	2305      	movs	r3, #5
 8003878:	e008      	b.n	800388c <HAL_GPIO_Init+0x21c>
 800387a:	2304      	movs	r3, #4
 800387c:	e006      	b.n	800388c <HAL_GPIO_Init+0x21c>
 800387e:	2303      	movs	r3, #3
 8003880:	e004      	b.n	800388c <HAL_GPIO_Init+0x21c>
 8003882:	2302      	movs	r3, #2
 8003884:	e002      	b.n	800388c <HAL_GPIO_Init+0x21c>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <HAL_GPIO_Init+0x21c>
 800388a:	2300      	movs	r3, #0
 800388c:	69fa      	ldr	r2, [r7, #28]
 800388e:	f002 0203 	and.w	r2, r2, #3
 8003892:	0092      	lsls	r2, r2, #2
 8003894:	4093      	lsls	r3, r2
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800389c:	4935      	ldr	r1, [pc, #212]	; (8003974 <HAL_GPIO_Init+0x304>)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	089b      	lsrs	r3, r3, #2
 80038a2:	3302      	adds	r3, #2
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038aa:	4b3a      	ldr	r3, [pc, #232]	; (8003994 <HAL_GPIO_Init+0x324>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	43db      	mvns	r3, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4013      	ands	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ce:	4a31      	ldr	r2, [pc, #196]	; (8003994 <HAL_GPIO_Init+0x324>)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038d4:	4b2f      	ldr	r3, [pc, #188]	; (8003994 <HAL_GPIO_Init+0x324>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038f8:	4a26      	ldr	r2, [pc, #152]	; (8003994 <HAL_GPIO_Init+0x324>)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038fe:	4b25      	ldr	r3, [pc, #148]	; (8003994 <HAL_GPIO_Init+0x324>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003922:	4a1c      	ldr	r2, [pc, #112]	; (8003994 <HAL_GPIO_Init+0x324>)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003928:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <HAL_GPIO_Init+0x324>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800394c:	4a11      	ldr	r2, [pc, #68]	; (8003994 <HAL_GPIO_Init+0x324>)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3301      	adds	r3, #1
 8003956:	61fb      	str	r3, [r7, #28]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	2b0f      	cmp	r3, #15
 800395c:	f67f ae96 	bls.w	800368c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	3724      	adds	r7, #36	; 0x24
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
 8003974:	40013800 	.word	0x40013800
 8003978:	40020000 	.word	0x40020000
 800397c:	40020400 	.word	0x40020400
 8003980:	40020800 	.word	0x40020800
 8003984:	40020c00 	.word	0x40020c00
 8003988:	40021000 	.word	0x40021000
 800398c:	40021400 	.word	0x40021400
 8003990:	40021800 	.word	0x40021800
 8003994:	40013c00 	.word	0x40013c00

08003998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	807b      	strh	r3, [r7, #2]
 80039a4:	4613      	mov	r3, r2
 80039a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039a8:	787b      	ldrb	r3, [r7, #1]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ae:	887a      	ldrh	r2, [r7, #2]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039b4:	e003      	b.n	80039be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039b6:	887b      	ldrh	r3, [r7, #2]
 80039b8:	041a      	lsls	r2, r3, #16
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	619a      	str	r2, [r3, #24]
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039d6:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039d8:	695a      	ldr	r2, [r3, #20]
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	4013      	ands	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d006      	beq.n	80039f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039e2:	4a05      	ldr	r2, [pc, #20]	; (80039f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039e8:	88fb      	ldrh	r3, [r7, #6]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe fabc 	bl	8001f68 <HAL_GPIO_EXTI_Callback>
  }
}
 80039f0:	bf00      	nop
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40013c00 	.word	0x40013c00

080039fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0cc      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a10:	4b68      	ldr	r3, [pc, #416]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d90c      	bls.n	8003a38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1e:	4b65      	ldr	r3, [pc, #404]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a26:	4b63      	ldr	r3, [pc, #396]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0b8      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d020      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a50:	4b59      	ldr	r3, [pc, #356]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4a58      	ldr	r2, [pc, #352]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a68:	4b53      	ldr	r3, [pc, #332]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	4a52      	ldr	r2, [pc, #328]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a74:	4b50      	ldr	r3, [pc, #320]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	494d      	ldr	r1, [pc, #308]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d044      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9a:	4b47      	ldr	r3, [pc, #284]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d119      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e07f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d003      	beq.n	8003aba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aba:	4b3f      	ldr	r3, [pc, #252]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e06f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aca:	4b3b      	ldr	r3, [pc, #236]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e067      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ada:	4b37      	ldr	r3, [pc, #220]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f023 0203 	bic.w	r2, r3, #3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4934      	ldr	r1, [pc, #208]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aec:	f7ff fbde 	bl	80032ac <HAL_GetTick>
 8003af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af4:	f7ff fbda 	bl	80032ac <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e04f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 020c 	and.w	r2, r3, #12
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d1eb      	bne.n	8003af4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b1c:	4b25      	ldr	r3, [pc, #148]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d20c      	bcs.n	8003b44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2a:	4b22      	ldr	r3, [pc, #136]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e032      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b50:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4916      	ldr	r1, [pc, #88]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b6e:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	490e      	ldr	r1, [pc, #56]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b82:	f000 f855 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 8003b86:	4602      	mov	r2, r0
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	490a      	ldr	r1, [pc, #40]	; (8003bbc <HAL_RCC_ClockConfig+0x1c0>)
 8003b94:	5ccb      	ldrb	r3, [r1, r3]
 8003b96:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9a:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b9e:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff fb3e 	bl	8003224 <HAL_InitTick>

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023c00 	.word	0x40023c00
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	0800abfc 	.word	0x0800abfc
 8003bc0:	20000054 	.word	0x20000054
 8003bc4:	20000058 	.word	0x20000058

08003bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bcc:	4b03      	ldr	r3, [pc, #12]	; (8003bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bce:	681b      	ldr	r3, [r3, #0]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20000054 	.word	0x20000054

08003be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003be4:	f7ff fff0 	bl	8003bc8 <HAL_RCC_GetHCLKFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	0a9b      	lsrs	r3, r3, #10
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	4903      	ldr	r1, [pc, #12]	; (8003c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40023800 	.word	0x40023800
 8003c04:	0800ac0c 	.word	0x0800ac0c

08003c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c0c:	f7ff ffdc 	bl	8003bc8 <HAL_RCC_GetHCLKFreq>
 8003c10:	4602      	mov	r2, r0
 8003c12:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	0b5b      	lsrs	r3, r3, #13
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	4903      	ldr	r1, [pc, #12]	; (8003c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c1e:	5ccb      	ldrb	r3, [r1, r3]
 8003c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	0800ac0c 	.word	0x0800ac0c

08003c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c34:	b0ae      	sub	sp, #184	; 0xb8
 8003c36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c56:	4bcb      	ldr	r3, [pc, #812]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b0c      	cmp	r3, #12
 8003c60:	f200 8206 	bhi.w	8004070 <HAL_RCC_GetSysClockFreq+0x440>
 8003c64:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003ca1 	.word	0x08003ca1
 8003c70:	08004071 	.word	0x08004071
 8003c74:	08004071 	.word	0x08004071
 8003c78:	08004071 	.word	0x08004071
 8003c7c:	08003ca9 	.word	0x08003ca9
 8003c80:	08004071 	.word	0x08004071
 8003c84:	08004071 	.word	0x08004071
 8003c88:	08004071 	.word	0x08004071
 8003c8c:	08003cb1 	.word	0x08003cb1
 8003c90:	08004071 	.word	0x08004071
 8003c94:	08004071 	.word	0x08004071
 8003c98:	08004071 	.word	0x08004071
 8003c9c:	08003ea1 	.word	0x08003ea1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ca0:	4bb9      	ldr	r3, [pc, #740]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003ca6:	e1e7      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ca8:	4bb8      	ldr	r3, [pc, #736]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003caa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cae:	e1e3      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cb0:	4bb4      	ldr	r3, [pc, #720]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cbc:	4bb1      	ldr	r3, [pc, #708]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d071      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc8:	4bae      	ldr	r3, [pc, #696]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	099b      	lsrs	r3, r3, #6
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cd4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cee:	4622      	mov	r2, r4
 8003cf0:	462b      	mov	r3, r5
 8003cf2:	f04f 0000 	mov.w	r0, #0
 8003cf6:	f04f 0100 	mov.w	r1, #0
 8003cfa:	0159      	lsls	r1, r3, #5
 8003cfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d00:	0150      	lsls	r0, r2, #5
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4621      	mov	r1, r4
 8003d08:	1a51      	subs	r1, r2, r1
 8003d0a:	6439      	str	r1, [r7, #64]	; 0x40
 8003d0c:	4629      	mov	r1, r5
 8003d0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d12:	647b      	str	r3, [r7, #68]	; 0x44
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003d20:	4649      	mov	r1, r9
 8003d22:	018b      	lsls	r3, r1, #6
 8003d24:	4641      	mov	r1, r8
 8003d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d2a:	4641      	mov	r1, r8
 8003d2c:	018a      	lsls	r2, r1, #6
 8003d2e:	4641      	mov	r1, r8
 8003d30:	1a51      	subs	r1, r2, r1
 8003d32:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d34:	4649      	mov	r1, r9
 8003d36:	eb63 0301 	sbc.w	r3, r3, r1
 8003d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003d48:	4649      	mov	r1, r9
 8003d4a:	00cb      	lsls	r3, r1, #3
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d52:	4641      	mov	r1, r8
 8003d54:	00ca      	lsls	r2, r1, #3
 8003d56:	4610      	mov	r0, r2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4622      	mov	r2, r4
 8003d5e:	189b      	adds	r3, r3, r2
 8003d60:	633b      	str	r3, [r7, #48]	; 0x30
 8003d62:	462b      	mov	r3, r5
 8003d64:	460a      	mov	r2, r1
 8003d66:	eb42 0303 	adc.w	r3, r2, r3
 8003d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d78:	4629      	mov	r1, r5
 8003d7a:	024b      	lsls	r3, r1, #9
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d82:	4621      	mov	r1, r4
 8003d84:	024a      	lsls	r2, r1, #9
 8003d86:	4610      	mov	r0, r2
 8003d88:	4619      	mov	r1, r3
 8003d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d98:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003d9c:	f7fc ffa4 	bl	8000ce8 <__aeabi_uldivmod>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4613      	mov	r3, r2
 8003da6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003daa:	e067      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dac:	4b75      	ldr	r3, [pc, #468]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	099b      	lsrs	r3, r3, #6
 8003db2:	2200      	movs	r2, #0
 8003db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003db8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003dca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003dce:	4622      	mov	r2, r4
 8003dd0:	462b      	mov	r3, r5
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f04f 0100 	mov.w	r1, #0
 8003dda:	0159      	lsls	r1, r3, #5
 8003ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003de0:	0150      	lsls	r0, r2, #5
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4621      	mov	r1, r4
 8003de8:	1a51      	subs	r1, r2, r1
 8003dea:	62b9      	str	r1, [r7, #40]	; 0x28
 8003dec:	4629      	mov	r1, r5
 8003dee:	eb63 0301 	sbc.w	r3, r3, r1
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003e00:	4649      	mov	r1, r9
 8003e02:	018b      	lsls	r3, r1, #6
 8003e04:	4641      	mov	r1, r8
 8003e06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	018a      	lsls	r2, r1, #6
 8003e0e:	4641      	mov	r1, r8
 8003e10:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e14:	4649      	mov	r1, r9
 8003e16:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e26:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e2e:	4692      	mov	sl, r2
 8003e30:	469b      	mov	fp, r3
 8003e32:	4623      	mov	r3, r4
 8003e34:	eb1a 0303 	adds.w	r3, sl, r3
 8003e38:	623b      	str	r3, [r7, #32]
 8003e3a:	462b      	mov	r3, r5
 8003e3c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e4e:	4629      	mov	r1, r5
 8003e50:	028b      	lsls	r3, r1, #10
 8003e52:	4621      	mov	r1, r4
 8003e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e58:	4621      	mov	r1, r4
 8003e5a:	028a      	lsls	r2, r1, #10
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e64:	2200      	movs	r2, #0
 8003e66:	673b      	str	r3, [r7, #112]	; 0x70
 8003e68:	677a      	str	r2, [r7, #116]	; 0x74
 8003e6a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003e6e:	f7fc ff3b 	bl	8000ce8 <__aeabi_uldivmod>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4613      	mov	r3, r2
 8003e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e7c:	4b41      	ldr	r3, [pc, #260]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	0c1b      	lsrs	r3, r3, #16
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	3301      	adds	r3, #1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003e8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e9e:	e0eb      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ea0:	4b38      	ldr	r3, [pc, #224]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eac:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d06b      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb8:	4b32      	ldr	r3, [pc, #200]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	099b      	lsrs	r3, r3, #6
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ec2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eca:	663b      	str	r3, [r7, #96]	; 0x60
 8003ecc:	2300      	movs	r3, #0
 8003ece:	667b      	str	r3, [r7, #100]	; 0x64
 8003ed0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ed4:	4622      	mov	r2, r4
 8003ed6:	462b      	mov	r3, r5
 8003ed8:	f04f 0000 	mov.w	r0, #0
 8003edc:	f04f 0100 	mov.w	r1, #0
 8003ee0:	0159      	lsls	r1, r3, #5
 8003ee2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ee6:	0150      	lsls	r0, r2, #5
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4621      	mov	r1, r4
 8003eee:	1a51      	subs	r1, r2, r1
 8003ef0:	61b9      	str	r1, [r7, #24]
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	eb63 0301 	sbc.w	r3, r3, r1
 8003ef8:	61fb      	str	r3, [r7, #28]
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003f06:	4659      	mov	r1, fp
 8003f08:	018b      	lsls	r3, r1, #6
 8003f0a:	4651      	mov	r1, sl
 8003f0c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f10:	4651      	mov	r1, sl
 8003f12:	018a      	lsls	r2, r1, #6
 8003f14:	4651      	mov	r1, sl
 8003f16:	ebb2 0801 	subs.w	r8, r2, r1
 8003f1a:	4659      	mov	r1, fp
 8003f1c:	eb63 0901 	sbc.w	r9, r3, r1
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f34:	4690      	mov	r8, r2
 8003f36:	4699      	mov	r9, r3
 8003f38:	4623      	mov	r3, r4
 8003f3a:	eb18 0303 	adds.w	r3, r8, r3
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	462b      	mov	r3, r5
 8003f42:	eb49 0303 	adc.w	r3, r9, r3
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f54:	4629      	mov	r1, r5
 8003f56:	024b      	lsls	r3, r1, #9
 8003f58:	4621      	mov	r1, r4
 8003f5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f5e:	4621      	mov	r1, r4
 8003f60:	024a      	lsls	r2, r1, #9
 8003f62:	4610      	mov	r0, r2
 8003f64:	4619      	mov	r1, r3
 8003f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f6e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f74:	f7fc feb8 	bl	8000ce8 <__aeabi_uldivmod>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f82:	e065      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x420>
 8003f84:	40023800 	.word	0x40023800
 8003f88:	00f42400 	.word	0x00f42400
 8003f8c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f90:	4b3d      	ldr	r3, [pc, #244]	; (8004088 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	099b      	lsrs	r3, r3, #6
 8003f96:	2200      	movs	r2, #0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fa0:	653b      	str	r3, [r7, #80]	; 0x50
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	657b      	str	r3, [r7, #84]	; 0x54
 8003fa6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003faa:	4642      	mov	r2, r8
 8003fac:	464b      	mov	r3, r9
 8003fae:	f04f 0000 	mov.w	r0, #0
 8003fb2:	f04f 0100 	mov.w	r1, #0
 8003fb6:	0159      	lsls	r1, r3, #5
 8003fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fbc:	0150      	lsls	r0, r2, #5
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4641      	mov	r1, r8
 8003fc4:	1a51      	subs	r1, r2, r1
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	4649      	mov	r1, r9
 8003fca:	eb63 0301 	sbc.w	r3, r3, r1
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003fdc:	4659      	mov	r1, fp
 8003fde:	018b      	lsls	r3, r1, #6
 8003fe0:	4651      	mov	r1, sl
 8003fe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fe6:	4651      	mov	r1, sl
 8003fe8:	018a      	lsls	r2, r1, #6
 8003fea:	4651      	mov	r1, sl
 8003fec:	1a54      	subs	r4, r2, r1
 8003fee:	4659      	mov	r1, fp
 8003ff0:	eb63 0501 	sbc.w	r5, r3, r1
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	00eb      	lsls	r3, r5, #3
 8003ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004002:	00e2      	lsls	r2, r4, #3
 8004004:	4614      	mov	r4, r2
 8004006:	461d      	mov	r5, r3
 8004008:	4643      	mov	r3, r8
 800400a:	18e3      	adds	r3, r4, r3
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	464b      	mov	r3, r9
 8004010:	eb45 0303 	adc.w	r3, r5, r3
 8004014:	607b      	str	r3, [r7, #4]
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004022:	4629      	mov	r1, r5
 8004024:	028b      	lsls	r3, r1, #10
 8004026:	4621      	mov	r1, r4
 8004028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800402c:	4621      	mov	r1, r4
 800402e:	028a      	lsls	r2, r1, #10
 8004030:	4610      	mov	r0, r2
 8004032:	4619      	mov	r1, r3
 8004034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004038:	2200      	movs	r2, #0
 800403a:	64bb      	str	r3, [r7, #72]	; 0x48
 800403c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800403e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004042:	f7fc fe51 	bl	8000ce8 <__aeabi_uldivmod>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4613      	mov	r3, r2
 800404c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004050:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <HAL_RCC_GetSysClockFreq+0x458>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	0f1b      	lsrs	r3, r3, #28
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800405e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004062:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004066:	fbb2 f3f3 	udiv	r3, r2, r3
 800406a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800406e:	e003      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004070:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004072:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004076:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004078:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800407c:	4618      	mov	r0, r3
 800407e:	37b8      	adds	r7, #184	; 0xb8
 8004080:	46bd      	mov	sp, r7
 8004082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004086:	bf00      	nop
 8004088:	40023800 	.word	0x40023800
 800408c:	00f42400 	.word	0x00f42400

08004090 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e28d      	b.n	80045be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 8083 	beq.w	80041b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040b0:	4b94      	ldr	r3, [pc, #592]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 030c 	and.w	r3, r3, #12
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d019      	beq.n	80040f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040bc:	4b91      	ldr	r3, [pc, #580]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d106      	bne.n	80040d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040c8:	4b8e      	ldr	r3, [pc, #568]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040d4:	d00c      	beq.n	80040f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040d6:	4b8b      	ldr	r3, [pc, #556]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040de:	2b0c      	cmp	r3, #12
 80040e0:	d112      	bne.n	8004108 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040e2:	4b88      	ldr	r3, [pc, #544]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ee:	d10b      	bne.n	8004108 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f0:	4b84      	ldr	r3, [pc, #528]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d05b      	beq.n	80041b4 <HAL_RCC_OscConfig+0x124>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d157      	bne.n	80041b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e25a      	b.n	80045be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004110:	d106      	bne.n	8004120 <HAL_RCC_OscConfig+0x90>
 8004112:	4b7c      	ldr	r3, [pc, #496]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a7b      	ldr	r2, [pc, #492]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 8004118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e01d      	b.n	800415c <HAL_RCC_OscConfig+0xcc>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004128:	d10c      	bne.n	8004144 <HAL_RCC_OscConfig+0xb4>
 800412a:	4b76      	ldr	r3, [pc, #472]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a75      	ldr	r2, [pc, #468]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 8004130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	4b73      	ldr	r3, [pc, #460]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a72      	ldr	r2, [pc, #456]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 800413c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e00b      	b.n	800415c <HAL_RCC_OscConfig+0xcc>
 8004144:	4b6f      	ldr	r3, [pc, #444]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a6e      	ldr	r2, [pc, #440]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 800414a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	4b6c      	ldr	r3, [pc, #432]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a6b      	ldr	r2, [pc, #428]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 8004156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800415a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d013      	beq.n	800418c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7ff f8a2 	bl	80032ac <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800416c:	f7ff f89e 	bl	80032ac <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	; 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e21f      	b.n	80045be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417e:	4b61      	ldr	r3, [pc, #388]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0xdc>
 800418a:	e014      	b.n	80041b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7ff f88e 	bl	80032ac <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004194:	f7ff f88a 	bl	80032ac <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	; 0x64
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e20b      	b.n	80045be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041a6:	4b57      	ldr	r3, [pc, #348]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x104>
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d06f      	beq.n	80042a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041c2:	4b50      	ldr	r3, [pc, #320]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d017      	beq.n	80041fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041ce:	4b4d      	ldr	r3, [pc, #308]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d105      	bne.n	80041e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041da:	4b4a      	ldr	r3, [pc, #296]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00b      	beq.n	80041fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041e6:	4b47      	ldr	r3, [pc, #284]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041ee:	2b0c      	cmp	r3, #12
 80041f0:	d11c      	bne.n	800422c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041f2:	4b44      	ldr	r3, [pc, #272]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d116      	bne.n	800422c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fe:	4b41      	ldr	r3, [pc, #260]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d005      	beq.n	8004216 <HAL_RCC_OscConfig+0x186>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d001      	beq.n	8004216 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e1d3      	b.n	80045be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004216:	4b3b      	ldr	r3, [pc, #236]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4937      	ldr	r1, [pc, #220]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 8004226:	4313      	orrs	r3, r2
 8004228:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422a:	e03a      	b.n	80042a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d020      	beq.n	8004276 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004234:	4b34      	ldr	r3, [pc, #208]	; (8004308 <HAL_RCC_OscConfig+0x278>)
 8004236:	2201      	movs	r2, #1
 8004238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423a:	f7ff f837 	bl	80032ac <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004242:	f7ff f833 	bl	80032ac <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e1b4      	b.n	80045be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004254:	4b2b      	ldr	r3, [pc, #172]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0f0      	beq.n	8004242 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004260:	4b28      	ldr	r3, [pc, #160]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4925      	ldr	r1, [pc, #148]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 8004270:	4313      	orrs	r3, r2
 8004272:	600b      	str	r3, [r1, #0]
 8004274:	e015      	b.n	80042a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004276:	4b24      	ldr	r3, [pc, #144]	; (8004308 <HAL_RCC_OscConfig+0x278>)
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427c:	f7ff f816 	bl	80032ac <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004284:	f7ff f812 	bl	80032ac <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e193      	b.n	80045be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004296:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d036      	beq.n	800431c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d016      	beq.n	80042e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042b6:	4b15      	ldr	r3, [pc, #84]	; (800430c <HAL_RCC_OscConfig+0x27c>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042bc:	f7fe fff6 	bl	80032ac <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c4:	f7fe fff2 	bl	80032ac <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e173      	b.n	80045be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d6:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <HAL_RCC_OscConfig+0x274>)
 80042d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0x234>
 80042e2:	e01b      	b.n	800431c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042e4:	4b09      	ldr	r3, [pc, #36]	; (800430c <HAL_RCC_OscConfig+0x27c>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ea:	f7fe ffdf 	bl	80032ac <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f0:	e00e      	b.n	8004310 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042f2:	f7fe ffdb 	bl	80032ac <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d907      	bls.n	8004310 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e15c      	b.n	80045be <HAL_RCC_OscConfig+0x52e>
 8004304:	40023800 	.word	0x40023800
 8004308:	42470000 	.word	0x42470000
 800430c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004310:	4b8a      	ldr	r3, [pc, #552]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 8004312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1ea      	bne.n	80042f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 8097 	beq.w	8004458 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800432a:	2300      	movs	r3, #0
 800432c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800432e:	4b83      	ldr	r3, [pc, #524]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10f      	bne.n	800435a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	4b7f      	ldr	r3, [pc, #508]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	4a7e      	ldr	r2, [pc, #504]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 8004344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004348:	6413      	str	r3, [r2, #64]	; 0x40
 800434a:	4b7c      	ldr	r3, [pc, #496]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004356:	2301      	movs	r3, #1
 8004358:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435a:	4b79      	ldr	r3, [pc, #484]	; (8004540 <HAL_RCC_OscConfig+0x4b0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	2b00      	cmp	r3, #0
 8004364:	d118      	bne.n	8004398 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004366:	4b76      	ldr	r3, [pc, #472]	; (8004540 <HAL_RCC_OscConfig+0x4b0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a75      	ldr	r2, [pc, #468]	; (8004540 <HAL_RCC_OscConfig+0x4b0>)
 800436c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004372:	f7fe ff9b 	bl	80032ac <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800437a:	f7fe ff97 	bl	80032ac <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e118      	b.n	80045be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438c:	4b6c      	ldr	r3, [pc, #432]	; (8004540 <HAL_RCC_OscConfig+0x4b0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d106      	bne.n	80043ae <HAL_RCC_OscConfig+0x31e>
 80043a0:	4b66      	ldr	r3, [pc, #408]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	4a65      	ldr	r2, [pc, #404]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	6713      	str	r3, [r2, #112]	; 0x70
 80043ac:	e01c      	b.n	80043e8 <HAL_RCC_OscConfig+0x358>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b05      	cmp	r3, #5
 80043b4:	d10c      	bne.n	80043d0 <HAL_RCC_OscConfig+0x340>
 80043b6:	4b61      	ldr	r3, [pc, #388]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ba:	4a60      	ldr	r2, [pc, #384]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 80043bc:	f043 0304 	orr.w	r3, r3, #4
 80043c0:	6713      	str	r3, [r2, #112]	; 0x70
 80043c2:	4b5e      	ldr	r3, [pc, #376]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	4a5d      	ldr	r2, [pc, #372]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 80043c8:	f043 0301 	orr.w	r3, r3, #1
 80043cc:	6713      	str	r3, [r2, #112]	; 0x70
 80043ce:	e00b      	b.n	80043e8 <HAL_RCC_OscConfig+0x358>
 80043d0:	4b5a      	ldr	r3, [pc, #360]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 80043d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d4:	4a59      	ldr	r2, [pc, #356]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	6713      	str	r3, [r2, #112]	; 0x70
 80043dc:	4b57      	ldr	r3, [pc, #348]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 80043de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e0:	4a56      	ldr	r2, [pc, #344]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 80043e2:	f023 0304 	bic.w	r3, r3, #4
 80043e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d015      	beq.n	800441c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f0:	f7fe ff5c 	bl	80032ac <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f6:	e00a      	b.n	800440e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043f8:	f7fe ff58 	bl	80032ac <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	f241 3288 	movw	r2, #5000	; 0x1388
 8004406:	4293      	cmp	r3, r2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e0d7      	b.n	80045be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800440e:	4b4b      	ldr	r3, [pc, #300]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 8004410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0ee      	beq.n	80043f8 <HAL_RCC_OscConfig+0x368>
 800441a:	e014      	b.n	8004446 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441c:	f7fe ff46 	bl	80032ac <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004422:	e00a      	b.n	800443a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004424:	f7fe ff42 	bl	80032ac <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004432:	4293      	cmp	r3, r2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e0c1      	b.n	80045be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800443a:	4b40      	ldr	r3, [pc, #256]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1ee      	bne.n	8004424 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004446:	7dfb      	ldrb	r3, [r7, #23]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d105      	bne.n	8004458 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800444c:	4b3b      	ldr	r3, [pc, #236]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	4a3a      	ldr	r2, [pc, #232]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 8004452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004456:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 80ad 	beq.w	80045bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004462:	4b36      	ldr	r3, [pc, #216]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 030c 	and.w	r3, r3, #12
 800446a:	2b08      	cmp	r3, #8
 800446c:	d060      	beq.n	8004530 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d145      	bne.n	8004502 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004476:	4b33      	ldr	r3, [pc, #204]	; (8004544 <HAL_RCC_OscConfig+0x4b4>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fe ff16 	bl	80032ac <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004484:	f7fe ff12 	bl	80032ac <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e093      	b.n	80045be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004496:	4b29      	ldr	r3, [pc, #164]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69da      	ldr	r2, [r3, #28]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	019b      	lsls	r3, r3, #6
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b8:	085b      	lsrs	r3, r3, #1
 80044ba:	3b01      	subs	r3, #1
 80044bc:	041b      	lsls	r3, r3, #16
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	061b      	lsls	r3, r3, #24
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	071b      	lsls	r3, r3, #28
 80044ce:	491b      	ldr	r1, [pc, #108]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d4:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <HAL_RCC_OscConfig+0x4b4>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044da:	f7fe fee7 	bl	80032ac <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e2:	f7fe fee3 	bl	80032ac <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e064      	b.n	80045be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f4:	4b11      	ldr	r3, [pc, #68]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f0      	beq.n	80044e2 <HAL_RCC_OscConfig+0x452>
 8004500:	e05c      	b.n	80045bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004502:	4b10      	ldr	r3, [pc, #64]	; (8004544 <HAL_RCC_OscConfig+0x4b4>)
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004508:	f7fe fed0 	bl	80032ac <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004510:	f7fe fecc 	bl	80032ac <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e04d      	b.n	80045be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <HAL_RCC_OscConfig+0x4ac>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f0      	bne.n	8004510 <HAL_RCC_OscConfig+0x480>
 800452e:	e045      	b.n	80045bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d107      	bne.n	8004548 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e040      	b.n	80045be <HAL_RCC_OscConfig+0x52e>
 800453c:	40023800 	.word	0x40023800
 8004540:	40007000 	.word	0x40007000
 8004544:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004548:	4b1f      	ldr	r3, [pc, #124]	; (80045c8 <HAL_RCC_OscConfig+0x538>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d030      	beq.n	80045b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004560:	429a      	cmp	r2, r3
 8004562:	d129      	bne.n	80045b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456e:	429a      	cmp	r2, r3
 8004570:	d122      	bne.n	80045b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004578:	4013      	ands	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800457e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004580:	4293      	cmp	r3, r2
 8004582:	d119      	bne.n	80045b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458e:	085b      	lsrs	r3, r3, #1
 8004590:	3b01      	subs	r3, #1
 8004592:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004594:	429a      	cmp	r2, r3
 8004596:	d10f      	bne.n	80045b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d107      	bne.n	80045b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d001      	beq.n	80045bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40023800 	.word	0x40023800

080045cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e07b      	b.n	80046d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d108      	bne.n	80045f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ee:	d009      	beq.n	8004604 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	61da      	str	r2, [r3, #28]
 80045f6:	e005      	b.n	8004604 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fe fb60 	bl	8002ce4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800463a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004688:	ea42 0103 	orr.w	r1, r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004690:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	0c1b      	lsrs	r3, r3, #16
 80046a2:	f003 0104 	and.w	r1, r3, #4
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	f003 0210 	and.w	r2, r3, #16
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b088      	sub	sp, #32
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	603b      	str	r3, [r7, #0]
 80046ea:	4613      	mov	r3, r2
 80046ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_SPI_Transmit+0x22>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e126      	b.n	800494e <HAL_SPI_Transmit+0x270>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004708:	f7fe fdd0 	bl	80032ac <HAL_GetTick>
 800470c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800470e:	88fb      	ldrh	r3, [r7, #6]
 8004710:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b01      	cmp	r3, #1
 800471c:	d002      	beq.n	8004724 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800471e:	2302      	movs	r3, #2
 8004720:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004722:	e10b      	b.n	800493c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <HAL_SPI_Transmit+0x52>
 800472a:	88fb      	ldrh	r3, [r7, #6]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d102      	bne.n	8004736 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004734:	e102      	b.n	800493c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2203      	movs	r2, #3
 800473a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	88fa      	ldrh	r2, [r7, #6]
 800474e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	88fa      	ldrh	r2, [r7, #6]
 8004754:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800477c:	d10f      	bne.n	800479e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800478c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800479c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a8:	2b40      	cmp	r3, #64	; 0x40
 80047aa:	d007      	beq.n	80047bc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047c4:	d14b      	bne.n	800485e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <HAL_SPI_Transmit+0xf6>
 80047ce:	8afb      	ldrh	r3, [r7, #22]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d13e      	bne.n	8004852 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	881a      	ldrh	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	1c9a      	adds	r2, r3, #2
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047f8:	e02b      	b.n	8004852 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b02      	cmp	r3, #2
 8004806:	d112      	bne.n	800482e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	881a      	ldrh	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	1c9a      	adds	r2, r3, #2
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	86da      	strh	r2, [r3, #54]	; 0x36
 800482c:	e011      	b.n	8004852 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800482e:	f7fe fd3d 	bl	80032ac <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d803      	bhi.n	8004846 <HAL_SPI_Transmit+0x168>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004844:	d102      	bne.n	800484c <HAL_SPI_Transmit+0x16e>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d102      	bne.n	8004852 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004850:	e074      	b.n	800493c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1ce      	bne.n	80047fa <HAL_SPI_Transmit+0x11c>
 800485c:	e04c      	b.n	80048f8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <HAL_SPI_Transmit+0x18e>
 8004866:	8afb      	ldrh	r3, [r7, #22]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d140      	bne.n	80048ee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	330c      	adds	r3, #12
 8004876:	7812      	ldrb	r2, [r2, #0]
 8004878:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004892:	e02c      	b.n	80048ee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d113      	bne.n	80048ca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	330c      	adds	r3, #12
 80048ac:	7812      	ldrb	r2, [r2, #0]
 80048ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80048c8:	e011      	b.n	80048ee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048ca:	f7fe fcef 	bl	80032ac <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d803      	bhi.n	80048e2 <HAL_SPI_Transmit+0x204>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048e0:	d102      	bne.n	80048e8 <HAL_SPI_Transmit+0x20a>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d102      	bne.n	80048ee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048ec:	e026      	b.n	800493c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1cd      	bne.n	8004894 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	6839      	ldr	r1, [r7, #0]
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f8b3 	bl	8004a68 <SPI_EndRxTxTransaction>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2220      	movs	r2, #32
 800490c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10a      	bne.n	800492c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004916:	2300      	movs	r3, #0
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	77fb      	strb	r3, [r7, #31]
 8004938:	e000      	b.n	800493c <HAL_SPI_Transmit+0x25e>
  }

error:
 800493a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800494c:	7ffb      	ldrb	r3, [r7, #31]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	603b      	str	r3, [r7, #0]
 8004964:	4613      	mov	r3, r2
 8004966:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004968:	f7fe fca0 	bl	80032ac <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	1a9b      	subs	r3, r3, r2
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	4413      	add	r3, r2
 8004976:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004978:	f7fe fc98 	bl	80032ac <HAL_GetTick>
 800497c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800497e:	4b39      	ldr	r3, [pc, #228]	; (8004a64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	015b      	lsls	r3, r3, #5
 8004984:	0d1b      	lsrs	r3, r3, #20
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	fb02 f303 	mul.w	r3, r2, r3
 800498c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800498e:	e054      	b.n	8004a3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004996:	d050      	beq.n	8004a3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004998:	f7fe fc88 	bl	80032ac <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d902      	bls.n	80049ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d13d      	bne.n	8004a2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049c6:	d111      	bne.n	80049ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049d0:	d004      	beq.n	80049dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049da:	d107      	bne.n	80049ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049f4:	d10f      	bne.n	8004a16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e017      	b.n	8004a5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4013      	ands	r3, r2
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	bf0c      	ite	eq
 8004a4a:	2301      	moveq	r3, #1
 8004a4c:	2300      	movne	r3, #0
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d19b      	bne.n	8004990 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000054 	.word	0x20000054

08004a68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <SPI_EndRxTxTransaction+0x7c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a1b      	ldr	r2, [pc, #108]	; (8004ae8 <SPI_EndRxTxTransaction+0x80>)
 8004a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7e:	0d5b      	lsrs	r3, r3, #21
 8004a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a84:	fb02 f303 	mul.w	r3, r2, r3
 8004a88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a92:	d112      	bne.n	8004aba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2180      	movs	r1, #128	; 0x80
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f7ff ff5a 	bl	8004958 <SPI_WaitFlagStateUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d016      	beq.n	8004ad8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aae:	f043 0220 	orr.w	r2, r3, #32
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e00f      	b.n	8004ada <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad0:	2b80      	cmp	r3, #128	; 0x80
 8004ad2:	d0f2      	beq.n	8004aba <SPI_EndRxTxTransaction+0x52>
 8004ad4:	e000      	b.n	8004ad8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004ad6:	bf00      	nop
  }

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000054 	.word	0x20000054
 8004ae8:	165e9f81 	.word	0x165e9f81

08004aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e041      	b.n	8004b82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fe f97c 	bl	8002e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3304      	adds	r3, #4
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	f000 fb04 	bl	8005138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d001      	beq.n	8004ba4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e046      	b.n	8004c32 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a23      	ldr	r2, [pc, #140]	; (8004c40 <HAL_TIM_Base_Start+0xb4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d022      	beq.n	8004bfc <HAL_TIM_Base_Start+0x70>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bbe:	d01d      	beq.n	8004bfc <HAL_TIM_Base_Start+0x70>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1f      	ldr	r2, [pc, #124]	; (8004c44 <HAL_TIM_Base_Start+0xb8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d018      	beq.n	8004bfc <HAL_TIM_Base_Start+0x70>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1e      	ldr	r2, [pc, #120]	; (8004c48 <HAL_TIM_Base_Start+0xbc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d013      	beq.n	8004bfc <HAL_TIM_Base_Start+0x70>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <HAL_TIM_Base_Start+0xc0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00e      	beq.n	8004bfc <HAL_TIM_Base_Start+0x70>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <HAL_TIM_Base_Start+0xc4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d009      	beq.n	8004bfc <HAL_TIM_Base_Start+0x70>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a19      	ldr	r2, [pc, #100]	; (8004c54 <HAL_TIM_Base_Start+0xc8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <HAL_TIM_Base_Start+0x70>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a18      	ldr	r2, [pc, #96]	; (8004c58 <HAL_TIM_Base_Start+0xcc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d111      	bne.n	8004c20 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b06      	cmp	r3, #6
 8004c0c:	d010      	beq.n	8004c30 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0201 	orr.w	r2, r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1e:	e007      	b.n	8004c30 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40010000 	.word	0x40010000
 8004c44:	40000400 	.word	0x40000400
 8004c48:	40000800 	.word	0x40000800
 8004c4c:	40000c00 	.word	0x40000c00
 8004c50:	40010400 	.word	0x40010400
 8004c54:	40014000 	.word	0x40014000
 8004c58:	40001800 	.word	0x40001800

08004c5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e097      	b.n	8004da0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7fe f875 	bl	8002d74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ca0:	f023 0307 	bic.w	r3, r3, #7
 8004ca4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	3304      	adds	r3, #4
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	f000 fa41 	bl	8005138 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cde:	f023 0303 	bic.w	r3, r3, #3
 8004ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004cfc:	f023 030c 	bic.w	r3, r3, #12
 8004d00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	021b      	lsls	r3, r3, #8
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	011a      	lsls	r2, r3, #4
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	031b      	lsls	r3, r3, #12
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004d3a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004d42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004db8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dc0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dc8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004dd0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d110      	bne.n	8004dfa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d102      	bne.n	8004de4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dde:	7b7b      	ldrb	r3, [r7, #13]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d001      	beq.n	8004de8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e069      	b.n	8004ebc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df8:	e031      	b.n	8004e5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d110      	bne.n	8004e22 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e00:	7bbb      	ldrb	r3, [r7, #14]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d102      	bne.n	8004e0c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e06:	7b3b      	ldrb	r3, [r7, #12]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d001      	beq.n	8004e10 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e055      	b.n	8004ebc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e20:	e01d      	b.n	8004e5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d108      	bne.n	8004e3a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e28:	7bbb      	ldrb	r3, [r7, #14]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d105      	bne.n	8004e3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e2e:	7b7b      	ldrb	r3, [r7, #13]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d102      	bne.n	8004e3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e34:	7b3b      	ldrb	r3, [r7, #12]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d001      	beq.n	8004e3e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e03e      	b.n	8004ebc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2202      	movs	r2, #2
 8004e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2202      	movs	r2, #2
 8004e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_TIM_Encoder_Start+0xc4>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d008      	beq.n	8004e7c <HAL_TIM_Encoder_Start+0xd4>
 8004e6a:	e00f      	b.n	8004e8c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2201      	movs	r2, #1
 8004e72:	2100      	movs	r1, #0
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 f9ff 	bl	8005278 <TIM_CCxChannelCmd>
      break;
 8004e7a:	e016      	b.n	8004eaa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2201      	movs	r2, #1
 8004e82:	2104      	movs	r1, #4
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 f9f7 	bl	8005278 <TIM_CCxChannelCmd>
      break;
 8004e8a:	e00e      	b.n	8004eaa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2201      	movs	r2, #1
 8004e92:	2100      	movs	r1, #0
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 f9ef 	bl	8005278 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	2104      	movs	r1, #4
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 f9e8 	bl	8005278 <TIM_CCxChannelCmd>
      break;
 8004ea8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0201 	orr.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d122      	bne.n	8004f20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d11b      	bne.n	8004f20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0202 	mvn.w	r2, #2
 8004ef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f8f8 	bl	80050fc <HAL_TIM_IC_CaptureCallback>
 8004f0c:	e005      	b.n	8004f1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f8ea 	bl	80050e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f8fb 	bl	8005110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d122      	bne.n	8004f74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d11b      	bne.n	8004f74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f06f 0204 	mvn.w	r2, #4
 8004f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f8ce 	bl	80050fc <HAL_TIM_IC_CaptureCallback>
 8004f60:	e005      	b.n	8004f6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f8c0 	bl	80050e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f8d1 	bl	8005110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d122      	bne.n	8004fc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d11b      	bne.n	8004fc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f06f 0208 	mvn.w	r2, #8
 8004f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2204      	movs	r2, #4
 8004f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f8a4 	bl	80050fc <HAL_TIM_IC_CaptureCallback>
 8004fb4:	e005      	b.n	8004fc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f896 	bl	80050e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f8a7 	bl	8005110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	2b10      	cmp	r3, #16
 8004fd4:	d122      	bne.n	800501c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f003 0310 	and.w	r3, r3, #16
 8004fe0:	2b10      	cmp	r3, #16
 8004fe2:	d11b      	bne.n	800501c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f06f 0210 	mvn.w	r2, #16
 8004fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2208      	movs	r2, #8
 8004ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f87a 	bl	80050fc <HAL_TIM_IC_CaptureCallback>
 8005008:	e005      	b.n	8005016 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f86c 	bl	80050e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f87d 	bl	8005110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b01      	cmp	r3, #1
 8005028:	d10e      	bne.n	8005048 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b01      	cmp	r3, #1
 8005036:	d107      	bne.n	8005048 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0201 	mvn.w	r2, #1
 8005040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f846 	bl	80050d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005052:	2b80      	cmp	r3, #128	; 0x80
 8005054:	d10e      	bne.n	8005074 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005060:	2b80      	cmp	r3, #128	; 0x80
 8005062:	d107      	bne.n	8005074 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800506c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f9ae 	bl	80053d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507e:	2b40      	cmp	r3, #64	; 0x40
 8005080:	d10e      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508c:	2b40      	cmp	r3, #64	; 0x40
 800508e:	d107      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f842 	bl	8005124 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	d10e      	bne.n	80050cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	d107      	bne.n	80050cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0220 	mvn.w	r2, #32
 80050c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f978 	bl	80053bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050cc:	bf00      	nop
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a40      	ldr	r2, [pc, #256]	; (800524c <TIM_Base_SetConfig+0x114>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d013      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005156:	d00f      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a3d      	ldr	r2, [pc, #244]	; (8005250 <TIM_Base_SetConfig+0x118>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00b      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a3c      	ldr	r2, [pc, #240]	; (8005254 <TIM_Base_SetConfig+0x11c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d007      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a3b      	ldr	r2, [pc, #236]	; (8005258 <TIM_Base_SetConfig+0x120>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d003      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a3a      	ldr	r2, [pc, #232]	; (800525c <TIM_Base_SetConfig+0x124>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d108      	bne.n	800518a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a2f      	ldr	r2, [pc, #188]	; (800524c <TIM_Base_SetConfig+0x114>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d02b      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005198:	d027      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a2c      	ldr	r2, [pc, #176]	; (8005250 <TIM_Base_SetConfig+0x118>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d023      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a2b      	ldr	r2, [pc, #172]	; (8005254 <TIM_Base_SetConfig+0x11c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d01f      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a2a      	ldr	r2, [pc, #168]	; (8005258 <TIM_Base_SetConfig+0x120>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d01b      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a29      	ldr	r2, [pc, #164]	; (800525c <TIM_Base_SetConfig+0x124>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d017      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a28      	ldr	r2, [pc, #160]	; (8005260 <TIM_Base_SetConfig+0x128>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a27      	ldr	r2, [pc, #156]	; (8005264 <TIM_Base_SetConfig+0x12c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00f      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a26      	ldr	r2, [pc, #152]	; (8005268 <TIM_Base_SetConfig+0x130>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00b      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a25      	ldr	r2, [pc, #148]	; (800526c <TIM_Base_SetConfig+0x134>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d007      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a24      	ldr	r2, [pc, #144]	; (8005270 <TIM_Base_SetConfig+0x138>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d003      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a23      	ldr	r2, [pc, #140]	; (8005274 <TIM_Base_SetConfig+0x13c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d108      	bne.n	80051fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a0a      	ldr	r2, [pc, #40]	; (800524c <TIM_Base_SetConfig+0x114>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d003      	beq.n	8005230 <TIM_Base_SetConfig+0xf8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a0c      	ldr	r2, [pc, #48]	; (800525c <TIM_Base_SetConfig+0x124>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d103      	bne.n	8005238 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	615a      	str	r2, [r3, #20]
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40010000 	.word	0x40010000
 8005250:	40000400 	.word	0x40000400
 8005254:	40000800 	.word	0x40000800
 8005258:	40000c00 	.word	0x40000c00
 800525c:	40010400 	.word	0x40010400
 8005260:	40014000 	.word	0x40014000
 8005264:	40014400 	.word	0x40014400
 8005268:	40014800 	.word	0x40014800
 800526c:	40001800 	.word	0x40001800
 8005270:	40001c00 	.word	0x40001c00
 8005274:	40002000 	.word	0x40002000

08005278 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f003 031f 	and.w	r3, r3, #31
 800528a:	2201      	movs	r2, #1
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a1a      	ldr	r2, [r3, #32]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	43db      	mvns	r3, r3
 800529a:	401a      	ands	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a1a      	ldr	r2, [r3, #32]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f003 031f 	and.w	r3, r3, #31
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	fa01 f303 	lsl.w	r3, r1, r3
 80052b0:	431a      	orrs	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	621a      	str	r2, [r3, #32]
}
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
	...

080052c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d8:	2302      	movs	r3, #2
 80052da:	e05a      	b.n	8005392 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a21      	ldr	r2, [pc, #132]	; (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d022      	beq.n	8005366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005328:	d01d      	beq.n	8005366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d018      	beq.n	8005366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1b      	ldr	r2, [pc, #108]	; (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d013      	beq.n	8005366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a1a      	ldr	r2, [pc, #104]	; (80053ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00e      	beq.n	8005366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a18      	ldr	r2, [pc, #96]	; (80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d009      	beq.n	8005366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a17      	ldr	r2, [pc, #92]	; (80053b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d004      	beq.n	8005366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a15      	ldr	r2, [pc, #84]	; (80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d10c      	bne.n	8005380 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800536c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	4313      	orrs	r3, r2
 8005376:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40010000 	.word	0x40010000
 80053a4:	40000400 	.word	0x40000400
 80053a8:	40000800 	.word	0x40000800
 80053ac:	40000c00 	.word	0x40000c00
 80053b0:	40010400 	.word	0x40010400
 80053b4:	40014000 	.word	0x40014000
 80053b8:	40001800 	.word	0x40001800

080053bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e03f      	b.n	8005476 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fd fd38 	bl	8002e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2224      	movs	r2, #36	; 0x24
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005426:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 fddf 	bl	8005fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800543c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695a      	ldr	r2, [r3, #20]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800544c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68da      	ldr	r2, [r3, #12]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800545c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b08a      	sub	sp, #40	; 0x28
 8005482:	af02      	add	r7, sp, #8
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	4613      	mov	r3, r2
 800548c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b20      	cmp	r3, #32
 800549c:	d17c      	bne.n	8005598 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <HAL_UART_Transmit+0x2c>
 80054a4:	88fb      	ldrh	r3, [r7, #6]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e075      	b.n	800559a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_UART_Transmit+0x3e>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e06e      	b.n	800559a <HAL_UART_Transmit+0x11c>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2221      	movs	r2, #33	; 0x21
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054d2:	f7fd feeb 	bl	80032ac <HAL_GetTick>
 80054d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	88fa      	ldrh	r2, [r7, #6]
 80054dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	88fa      	ldrh	r2, [r7, #6]
 80054e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ec:	d108      	bne.n	8005500 <HAL_UART_Transmit+0x82>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d104      	bne.n	8005500 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	61bb      	str	r3, [r7, #24]
 80054fe:	e003      	b.n	8005508 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005504:	2300      	movs	r3, #0
 8005506:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005510:	e02a      	b.n	8005568 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2200      	movs	r2, #0
 800551a:	2180      	movs	r1, #128	; 0x80
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 fb1f 	bl	8005b60 <UART_WaitOnFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e036      	b.n	800559a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10b      	bne.n	800554a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005540:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	3302      	adds	r3, #2
 8005546:	61bb      	str	r3, [r7, #24]
 8005548:	e007      	b.n	800555a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	781a      	ldrb	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	3301      	adds	r3, #1
 8005558:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800555e:	b29b      	uxth	r3, r3
 8005560:	3b01      	subs	r3, #1
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1cf      	bne.n	8005512 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2200      	movs	r2, #0
 800557a:	2140      	movs	r1, #64	; 0x40
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 faef 	bl	8005b60 <UART_WaitOnFlagUntilTimeout>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e006      	b.n	800559a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	e000      	b.n	800559a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005598:	2302      	movs	r3, #2
  }
}
 800559a:	4618      	mov	r0, r3
 800559c:	3720      	adds	r7, #32
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	4613      	mov	r3, r2
 80055ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d11d      	bne.n	80055f8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <HAL_UART_Receive_IT+0x26>
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e016      	b.n	80055fa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_UART_Receive_IT+0x38>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e00f      	b.n	80055fa <HAL_UART_Receive_IT+0x58>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055e8:	88fb      	ldrh	r3, [r7, #6]
 80055ea:	461a      	mov	r2, r3
 80055ec:	68b9      	ldr	r1, [r7, #8]
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 fb24 	bl	8005c3c <UART_Start_Receive_IT>
 80055f4:	4603      	mov	r3, r0
 80055f6:	e000      	b.n	80055fa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80055f8:	2302      	movs	r3, #2
  }
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b0ba      	sub	sp, #232	; 0xe8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800562a:	2300      	movs	r3, #0
 800562c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005630:	2300      	movs	r3, #0
 8005632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005642:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10f      	bne.n	800566a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800564a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	d009      	beq.n	800566a <HAL_UART_IRQHandler+0x66>
 8005656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fc07 	bl	8005e76 <UART_Receive_IT>
      return;
 8005668:	e256      	b.n	8005b18 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800566a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 80de 	beq.w	8005830 <HAL_UART_IRQHandler+0x22c>
 8005674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d106      	bne.n	800568e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005684:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 80d1 	beq.w	8005830 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800568e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00b      	beq.n	80056b2 <HAL_UART_IRQHandler+0xae>
 800569a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800569e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d005      	beq.n	80056b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	f043 0201 	orr.w	r2, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00b      	beq.n	80056d6 <HAL_UART_IRQHandler+0xd2>
 80056be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d005      	beq.n	80056d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f043 0202 	orr.w	r2, r3, #2
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00b      	beq.n	80056fa <HAL_UART_IRQHandler+0xf6>
 80056e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f043 0204 	orr.w	r2, r3, #4
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fe:	f003 0308 	and.w	r3, r3, #8
 8005702:	2b00      	cmp	r3, #0
 8005704:	d011      	beq.n	800572a <HAL_UART_IRQHandler+0x126>
 8005706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800570a:	f003 0320 	and.w	r3, r3, #32
 800570e:	2b00      	cmp	r3, #0
 8005710:	d105      	bne.n	800571e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d005      	beq.n	800572a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	f043 0208 	orr.w	r2, r3, #8
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 81ed 	beq.w	8005b0e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005738:	f003 0320 	and.w	r3, r3, #32
 800573c:	2b00      	cmp	r3, #0
 800573e:	d008      	beq.n	8005752 <HAL_UART_IRQHandler+0x14e>
 8005740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005744:	f003 0320 	and.w	r3, r3, #32
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fb92 	bl	8005e76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575c:	2b40      	cmp	r3, #64	; 0x40
 800575e:	bf0c      	ite	eq
 8005760:	2301      	moveq	r3, #1
 8005762:	2300      	movne	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d103      	bne.n	800577e <HAL_UART_IRQHandler+0x17a>
 8005776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800577a:	2b00      	cmp	r3, #0
 800577c:	d04f      	beq.n	800581e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fa9a 	bl	8005cb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578e:	2b40      	cmp	r3, #64	; 0x40
 8005790:	d141      	bne.n	8005816 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3314      	adds	r3, #20
 8005798:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3314      	adds	r3, #20
 80057ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057ce:	e841 2300 	strex	r3, r2, [r1]
 80057d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1d9      	bne.n	8005792 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d013      	beq.n	800580e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ea:	4a7d      	ldr	r2, [pc, #500]	; (80059e0 <HAL_UART_IRQHandler+0x3dc>)
 80057ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fd ff19 	bl	800362a <HAL_DMA_Abort_IT>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d016      	beq.n	800582c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005808:	4610      	mov	r0, r2
 800580a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800580c:	e00e      	b.n	800582c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f990 	bl	8005b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005814:	e00a      	b.n	800582c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f98c 	bl	8005b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800581c:	e006      	b.n	800582c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f988 	bl	8005b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800582a:	e170      	b.n	8005b0e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800582c:	bf00      	nop
    return;
 800582e:	e16e      	b.n	8005b0e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005834:	2b01      	cmp	r3, #1
 8005836:	f040 814a 	bne.w	8005ace <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800583a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800583e:	f003 0310 	and.w	r3, r3, #16
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 8143 	beq.w	8005ace <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800584c:	f003 0310 	and.w	r3, r3, #16
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 813c 	beq.w	8005ace <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005856:	2300      	movs	r3, #0
 8005858:	60bb      	str	r3, [r7, #8]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	60bb      	str	r3, [r7, #8]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	60bb      	str	r3, [r7, #8]
 800586a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005876:	2b40      	cmp	r3, #64	; 0x40
 8005878:	f040 80b4 	bne.w	80059e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005888:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8140 	beq.w	8005b12 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800589a:	429a      	cmp	r2, r3
 800589c:	f080 8139 	bcs.w	8005b12 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058b2:	f000 8088 	beq.w	80059c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	330c      	adds	r3, #12
 80058bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058c4:	e853 3f00 	ldrex	r3, [r3]
 80058c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	330c      	adds	r3, #12
 80058de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80058e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1d9      	bne.n	80058b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3314      	adds	r3, #20
 8005908:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005914:	f023 0301 	bic.w	r3, r3, #1
 8005918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3314      	adds	r3, #20
 8005922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005926:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800592a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800592e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1e1      	bne.n	8005902 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3314      	adds	r3, #20
 8005944:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800594e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3314      	adds	r3, #20
 800595e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005962:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005964:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005968:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e3      	bne.n	800593e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	330c      	adds	r3, #12
 800598a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800598e:	e853 3f00 	ldrex	r3, [r3]
 8005992:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005996:	f023 0310 	bic.w	r3, r3, #16
 800599a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	330c      	adds	r3, #12
 80059a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80059a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80059aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059b0:	e841 2300 	strex	r3, r2, [r1]
 80059b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e3      	bne.n	8005984 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fd fdc2 	bl	800354a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	4619      	mov	r1, r3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f8b6 	bl	8005b48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059dc:	e099      	b.n	8005b12 <HAL_UART_IRQHandler+0x50e>
 80059de:	bf00      	nop
 80059e0:	08005d7f 	.word	0x08005d7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 808b 	beq.w	8005b16 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 8086 	beq.w	8005b16 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	330c      	adds	r3, #12
 8005a10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	330c      	adds	r3, #12
 8005a2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a2e:	647a      	str	r2, [r7, #68]	; 0x44
 8005a30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1e3      	bne.n	8005a0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3314      	adds	r3, #20
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	e853 3f00 	ldrex	r3, [r3]
 8005a50:	623b      	str	r3, [r7, #32]
   return(result);
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	f023 0301 	bic.w	r3, r3, #1
 8005a58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3314      	adds	r3, #20
 8005a62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a66:	633a      	str	r2, [r7, #48]	; 0x30
 8005a68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e3      	bne.n	8005a42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	330c      	adds	r3, #12
 8005a8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	e853 3f00 	ldrex	r3, [r3]
 8005a96:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0310 	bic.w	r3, r3, #16
 8005a9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	330c      	adds	r3, #12
 8005aa8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005aac:	61fa      	str	r2, [r7, #28]
 8005aae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab0:	69b9      	ldr	r1, [r7, #24]
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	e841 2300 	strex	r3, r2, [r1]
 8005ab8:	617b      	str	r3, [r7, #20]
   return(result);
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1e3      	bne.n	8005a88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ac0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f83e 	bl	8005b48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005acc:	e023      	b.n	8005b16 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d009      	beq.n	8005aee <HAL_UART_IRQHandler+0x4ea>
 8005ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f95d 	bl	8005da6 <UART_Transmit_IT>
    return;
 8005aec:	e014      	b.n	8005b18 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00e      	beq.n	8005b18 <HAL_UART_IRQHandler+0x514>
 8005afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d008      	beq.n	8005b18 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f99d 	bl	8005e46 <UART_EndTransmit_IT>
    return;
 8005b0c:	e004      	b.n	8005b18 <HAL_UART_IRQHandler+0x514>
    return;
 8005b0e:	bf00      	nop
 8005b10:	e002      	b.n	8005b18 <HAL_UART_IRQHandler+0x514>
      return;
 8005b12:	bf00      	nop
 8005b14:	e000      	b.n	8005b18 <HAL_UART_IRQHandler+0x514>
      return;
 8005b16:	bf00      	nop
  }
}
 8005b18:	37e8      	adds	r7, #232	; 0xe8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop

08005b20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b090      	sub	sp, #64	; 0x40
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	603b      	str	r3, [r7, #0]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b70:	e050      	b.n	8005c14 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b78:	d04c      	beq.n	8005c14 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d007      	beq.n	8005b90 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b80:	f7fd fb94 	bl	80032ac <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d241      	bcs.n	8005c14 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	330c      	adds	r3, #12
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	e853 3f00 	ldrex	r3, [r3]
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	330c      	adds	r3, #12
 8005bae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bb0:	637a      	str	r2, [r7, #52]	; 0x34
 8005bb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bb8:	e841 2300 	strex	r3, r2, [r1]
 8005bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1e5      	bne.n	8005b90 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3314      	adds	r3, #20
 8005bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f023 0301 	bic.w	r3, r3, #1
 8005bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3314      	adds	r3, #20
 8005be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be4:	623a      	str	r2, [r7, #32]
 8005be6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	69f9      	ldr	r1, [r7, #28]
 8005bea:	6a3a      	ldr	r2, [r7, #32]
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e5      	bne.n	8005bc4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e00f      	b.n	8005c34 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	bf0c      	ite	eq
 8005c24:	2301      	moveq	r3, #1
 8005c26:	2300      	movne	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	79fb      	ldrb	r3, [r7, #7]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d09f      	beq.n	8005b72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3740      	adds	r7, #64	; 0x40
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	4613      	mov	r3, r2
 8005c48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	88fa      	ldrh	r2, [r7, #6]
 8005c54:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	88fa      	ldrh	r2, [r7, #6]
 8005c5a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2222      	movs	r2, #34	; 0x22
 8005c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d007      	beq.n	8005c8a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695a      	ldr	r2, [r3, #20]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0201 	orr.w	r2, r2, #1
 8005c98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0220 	orr.w	r2, r2, #32
 8005ca8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b095      	sub	sp, #84	; 0x54
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	330c      	adds	r3, #12
 8005cc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	330c      	adds	r3, #12
 8005cde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ce0:	643a      	str	r2, [r7, #64]	; 0x40
 8005ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ce6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e5      	bne.n	8005cc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3314      	adds	r3, #20
 8005cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f023 0301 	bic.w	r3, r3, #1
 8005d0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3314      	adds	r3, #20
 8005d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d1c:	e841 2300 	strex	r3, r2, [r1]
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e5      	bne.n	8005cf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d119      	bne.n	8005d64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	330c      	adds	r3, #12
 8005d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f023 0310 	bic.w	r3, r3, #16
 8005d46:	647b      	str	r3, [r7, #68]	; 0x44
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	330c      	adds	r3, #12
 8005d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d50:	61ba      	str	r2, [r7, #24]
 8005d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	6979      	ldr	r1, [r7, #20]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e5      	bne.n	8005d30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d72:	bf00      	nop
 8005d74:	3754      	adds	r7, #84	; 0x54
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f7ff fecb 	bl	8005b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d9e:	bf00      	nop
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b085      	sub	sp, #20
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b21      	cmp	r3, #33	; 0x21
 8005db8:	d13e      	bne.n	8005e38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc2:	d114      	bne.n	8005dee <UART_Transmit_IT+0x48>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d110      	bne.n	8005dee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005de0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	1c9a      	adds	r2, r3, #2
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	621a      	str	r2, [r3, #32]
 8005dec:	e008      	b.n	8005e00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	1c59      	adds	r1, r3, #1
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6211      	str	r1, [r2, #32]
 8005df8:	781a      	ldrb	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10f      	bne.n	8005e34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	e000      	b.n	8005e3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e38:	2302      	movs	r3, #2
  }
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff fe5a 	bl	8005b20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b08c      	sub	sp, #48	; 0x30
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b22      	cmp	r3, #34	; 0x22
 8005e88:	f040 80ab 	bne.w	8005fe2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e94:	d117      	bne.n	8005ec6 <UART_Receive_IT+0x50>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d113      	bne.n	8005ec6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebe:	1c9a      	adds	r2, r3, #2
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	629a      	str	r2, [r3, #40]	; 0x28
 8005ec4:	e026      	b.n	8005f14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed8:	d007      	beq.n	8005eea <UART_Receive_IT+0x74>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10a      	bne.n	8005ef8 <UART_Receive_IT+0x82>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d106      	bne.n	8005ef8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	e008      	b.n	8005f0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	4619      	mov	r1, r3
 8005f22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d15a      	bne.n	8005fde <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0220 	bic.w	r2, r2, #32
 8005f36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	695a      	ldr	r2, [r3, #20]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0201 	bic.w	r2, r2, #1
 8005f56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d135      	bne.n	8005fd4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	330c      	adds	r3, #12
 8005f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f023 0310 	bic.w	r3, r3, #16
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	330c      	adds	r3, #12
 8005f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f8e:	623a      	str	r2, [r7, #32]
 8005f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f92:	69f9      	ldr	r1, [r7, #28]
 8005f94:	6a3a      	ldr	r2, [r7, #32]
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e5      	bne.n	8005f6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0310 	and.w	r3, r3, #16
 8005fac:	2b10      	cmp	r3, #16
 8005fae:	d10a      	bne.n	8005fc6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7ff fdbb 	bl	8005b48 <HAL_UARTEx_RxEventCallback>
 8005fd2:	e002      	b.n	8005fda <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7fc f8b1 	bl	800213c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e002      	b.n	8005fe4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e000      	b.n	8005fe4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005fe2:	2302      	movs	r3, #2
  }
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3730      	adds	r7, #48	; 0x30
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ff0:	b0c0      	sub	sp, #256	; 0x100
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006008:	68d9      	ldr	r1, [r3, #12]
 800600a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	ea40 0301 	orr.w	r3, r0, r1
 8006014:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	431a      	orrs	r2, r3
 8006024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	431a      	orrs	r2, r3
 800602c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	4313      	orrs	r3, r2
 8006034:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006044:	f021 010c 	bic.w	r1, r1, #12
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006052:	430b      	orrs	r3, r1
 8006054:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006066:	6999      	ldr	r1, [r3, #24]
 8006068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	ea40 0301 	orr.w	r3, r0, r1
 8006072:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	4b8f      	ldr	r3, [pc, #572]	; (80062b8 <UART_SetConfig+0x2cc>)
 800607c:	429a      	cmp	r2, r3
 800607e:	d005      	beq.n	800608c <UART_SetConfig+0xa0>
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	4b8d      	ldr	r3, [pc, #564]	; (80062bc <UART_SetConfig+0x2d0>)
 8006088:	429a      	cmp	r2, r3
 800608a:	d104      	bne.n	8006096 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800608c:	f7fd fdbc 	bl	8003c08 <HAL_RCC_GetPCLK2Freq>
 8006090:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006094:	e003      	b.n	800609e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006096:	f7fd fda3 	bl	8003be0 <HAL_RCC_GetPCLK1Freq>
 800609a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800609e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a8:	f040 810c 	bne.w	80062c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060b0:	2200      	movs	r2, #0
 80060b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060be:	4622      	mov	r2, r4
 80060c0:	462b      	mov	r3, r5
 80060c2:	1891      	adds	r1, r2, r2
 80060c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80060c6:	415b      	adcs	r3, r3
 80060c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060ce:	4621      	mov	r1, r4
 80060d0:	eb12 0801 	adds.w	r8, r2, r1
 80060d4:	4629      	mov	r1, r5
 80060d6:	eb43 0901 	adc.w	r9, r3, r1
 80060da:	f04f 0200 	mov.w	r2, #0
 80060de:	f04f 0300 	mov.w	r3, #0
 80060e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060ee:	4690      	mov	r8, r2
 80060f0:	4699      	mov	r9, r3
 80060f2:	4623      	mov	r3, r4
 80060f4:	eb18 0303 	adds.w	r3, r8, r3
 80060f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060fc:	462b      	mov	r3, r5
 80060fe:	eb49 0303 	adc.w	r3, r9, r3
 8006102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006112:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006116:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800611a:	460b      	mov	r3, r1
 800611c:	18db      	adds	r3, r3, r3
 800611e:	653b      	str	r3, [r7, #80]	; 0x50
 8006120:	4613      	mov	r3, r2
 8006122:	eb42 0303 	adc.w	r3, r2, r3
 8006126:	657b      	str	r3, [r7, #84]	; 0x54
 8006128:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800612c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006130:	f7fa fdda 	bl	8000ce8 <__aeabi_uldivmod>
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	4b61      	ldr	r3, [pc, #388]	; (80062c0 <UART_SetConfig+0x2d4>)
 800613a:	fba3 2302 	umull	r2, r3, r3, r2
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	011c      	lsls	r4, r3, #4
 8006142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006146:	2200      	movs	r2, #0
 8006148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800614c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006150:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006154:	4642      	mov	r2, r8
 8006156:	464b      	mov	r3, r9
 8006158:	1891      	adds	r1, r2, r2
 800615a:	64b9      	str	r1, [r7, #72]	; 0x48
 800615c:	415b      	adcs	r3, r3
 800615e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006160:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006164:	4641      	mov	r1, r8
 8006166:	eb12 0a01 	adds.w	sl, r2, r1
 800616a:	4649      	mov	r1, r9
 800616c:	eb43 0b01 	adc.w	fp, r3, r1
 8006170:	f04f 0200 	mov.w	r2, #0
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800617c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006180:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006184:	4692      	mov	sl, r2
 8006186:	469b      	mov	fp, r3
 8006188:	4643      	mov	r3, r8
 800618a:	eb1a 0303 	adds.w	r3, sl, r3
 800618e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006192:	464b      	mov	r3, r9
 8006194:	eb4b 0303 	adc.w	r3, fp, r3
 8006198:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80061ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061b0:	460b      	mov	r3, r1
 80061b2:	18db      	adds	r3, r3, r3
 80061b4:	643b      	str	r3, [r7, #64]	; 0x40
 80061b6:	4613      	mov	r3, r2
 80061b8:	eb42 0303 	adc.w	r3, r2, r3
 80061bc:	647b      	str	r3, [r7, #68]	; 0x44
 80061be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061c6:	f7fa fd8f 	bl	8000ce8 <__aeabi_uldivmod>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4611      	mov	r1, r2
 80061d0:	4b3b      	ldr	r3, [pc, #236]	; (80062c0 <UART_SetConfig+0x2d4>)
 80061d2:	fba3 2301 	umull	r2, r3, r3, r1
 80061d6:	095b      	lsrs	r3, r3, #5
 80061d8:	2264      	movs	r2, #100	; 0x64
 80061da:	fb02 f303 	mul.w	r3, r2, r3
 80061de:	1acb      	subs	r3, r1, r3
 80061e0:	00db      	lsls	r3, r3, #3
 80061e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061e6:	4b36      	ldr	r3, [pc, #216]	; (80062c0 <UART_SetConfig+0x2d4>)
 80061e8:	fba3 2302 	umull	r2, r3, r3, r2
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061f4:	441c      	add	r4, r3
 80061f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006200:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006204:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006208:	4642      	mov	r2, r8
 800620a:	464b      	mov	r3, r9
 800620c:	1891      	adds	r1, r2, r2
 800620e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006210:	415b      	adcs	r3, r3
 8006212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006214:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006218:	4641      	mov	r1, r8
 800621a:	1851      	adds	r1, r2, r1
 800621c:	6339      	str	r1, [r7, #48]	; 0x30
 800621e:	4649      	mov	r1, r9
 8006220:	414b      	adcs	r3, r1
 8006222:	637b      	str	r3, [r7, #52]	; 0x34
 8006224:	f04f 0200 	mov.w	r2, #0
 8006228:	f04f 0300 	mov.w	r3, #0
 800622c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006230:	4659      	mov	r1, fp
 8006232:	00cb      	lsls	r3, r1, #3
 8006234:	4651      	mov	r1, sl
 8006236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800623a:	4651      	mov	r1, sl
 800623c:	00ca      	lsls	r2, r1, #3
 800623e:	4610      	mov	r0, r2
 8006240:	4619      	mov	r1, r3
 8006242:	4603      	mov	r3, r0
 8006244:	4642      	mov	r2, r8
 8006246:	189b      	adds	r3, r3, r2
 8006248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800624c:	464b      	mov	r3, r9
 800624e:	460a      	mov	r2, r1
 8006250:	eb42 0303 	adc.w	r3, r2, r3
 8006254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006264:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800626c:	460b      	mov	r3, r1
 800626e:	18db      	adds	r3, r3, r3
 8006270:	62bb      	str	r3, [r7, #40]	; 0x28
 8006272:	4613      	mov	r3, r2
 8006274:	eb42 0303 	adc.w	r3, r2, r3
 8006278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800627a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800627e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006282:	f7fa fd31 	bl	8000ce8 <__aeabi_uldivmod>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4b0d      	ldr	r3, [pc, #52]	; (80062c0 <UART_SetConfig+0x2d4>)
 800628c:	fba3 1302 	umull	r1, r3, r3, r2
 8006290:	095b      	lsrs	r3, r3, #5
 8006292:	2164      	movs	r1, #100	; 0x64
 8006294:	fb01 f303 	mul.w	r3, r1, r3
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	3332      	adds	r3, #50	; 0x32
 800629e:	4a08      	ldr	r2, [pc, #32]	; (80062c0 <UART_SetConfig+0x2d4>)
 80062a0:	fba2 2303 	umull	r2, r3, r2, r3
 80062a4:	095b      	lsrs	r3, r3, #5
 80062a6:	f003 0207 	and.w	r2, r3, #7
 80062aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4422      	add	r2, r4
 80062b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062b4:	e105      	b.n	80064c2 <UART_SetConfig+0x4d6>
 80062b6:	bf00      	nop
 80062b8:	40011000 	.word	0x40011000
 80062bc:	40011400 	.word	0x40011400
 80062c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062c8:	2200      	movs	r2, #0
 80062ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062d6:	4642      	mov	r2, r8
 80062d8:	464b      	mov	r3, r9
 80062da:	1891      	adds	r1, r2, r2
 80062dc:	6239      	str	r1, [r7, #32]
 80062de:	415b      	adcs	r3, r3
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
 80062e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062e6:	4641      	mov	r1, r8
 80062e8:	1854      	adds	r4, r2, r1
 80062ea:	4649      	mov	r1, r9
 80062ec:	eb43 0501 	adc.w	r5, r3, r1
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	00eb      	lsls	r3, r5, #3
 80062fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062fe:	00e2      	lsls	r2, r4, #3
 8006300:	4614      	mov	r4, r2
 8006302:	461d      	mov	r5, r3
 8006304:	4643      	mov	r3, r8
 8006306:	18e3      	adds	r3, r4, r3
 8006308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800630c:	464b      	mov	r3, r9
 800630e:	eb45 0303 	adc.w	r3, r5, r3
 8006312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006322:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006326:	f04f 0200 	mov.w	r2, #0
 800632a:	f04f 0300 	mov.w	r3, #0
 800632e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006332:	4629      	mov	r1, r5
 8006334:	008b      	lsls	r3, r1, #2
 8006336:	4621      	mov	r1, r4
 8006338:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800633c:	4621      	mov	r1, r4
 800633e:	008a      	lsls	r2, r1, #2
 8006340:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006344:	f7fa fcd0 	bl	8000ce8 <__aeabi_uldivmod>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4b60      	ldr	r3, [pc, #384]	; (80064d0 <UART_SetConfig+0x4e4>)
 800634e:	fba3 2302 	umull	r2, r3, r3, r2
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	011c      	lsls	r4, r3, #4
 8006356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800635a:	2200      	movs	r2, #0
 800635c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006360:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006364:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006368:	4642      	mov	r2, r8
 800636a:	464b      	mov	r3, r9
 800636c:	1891      	adds	r1, r2, r2
 800636e:	61b9      	str	r1, [r7, #24]
 8006370:	415b      	adcs	r3, r3
 8006372:	61fb      	str	r3, [r7, #28]
 8006374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006378:	4641      	mov	r1, r8
 800637a:	1851      	adds	r1, r2, r1
 800637c:	6139      	str	r1, [r7, #16]
 800637e:	4649      	mov	r1, r9
 8006380:	414b      	adcs	r3, r1
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006390:	4659      	mov	r1, fp
 8006392:	00cb      	lsls	r3, r1, #3
 8006394:	4651      	mov	r1, sl
 8006396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800639a:	4651      	mov	r1, sl
 800639c:	00ca      	lsls	r2, r1, #3
 800639e:	4610      	mov	r0, r2
 80063a0:	4619      	mov	r1, r3
 80063a2:	4603      	mov	r3, r0
 80063a4:	4642      	mov	r2, r8
 80063a6:	189b      	adds	r3, r3, r2
 80063a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063ac:	464b      	mov	r3, r9
 80063ae:	460a      	mov	r2, r1
 80063b0:	eb42 0303 	adc.w	r3, r2, r3
 80063b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80063c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	f04f 0300 	mov.w	r3, #0
 80063cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063d0:	4649      	mov	r1, r9
 80063d2:	008b      	lsls	r3, r1, #2
 80063d4:	4641      	mov	r1, r8
 80063d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063da:	4641      	mov	r1, r8
 80063dc:	008a      	lsls	r2, r1, #2
 80063de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063e2:	f7fa fc81 	bl	8000ce8 <__aeabi_uldivmod>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4b39      	ldr	r3, [pc, #228]	; (80064d0 <UART_SetConfig+0x4e4>)
 80063ec:	fba3 1302 	umull	r1, r3, r3, r2
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	2164      	movs	r1, #100	; 0x64
 80063f4:	fb01 f303 	mul.w	r3, r1, r3
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	3332      	adds	r3, #50	; 0x32
 80063fe:	4a34      	ldr	r2, [pc, #208]	; (80064d0 <UART_SetConfig+0x4e4>)
 8006400:	fba2 2303 	umull	r2, r3, r2, r3
 8006404:	095b      	lsrs	r3, r3, #5
 8006406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800640a:	441c      	add	r4, r3
 800640c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006410:	2200      	movs	r2, #0
 8006412:	673b      	str	r3, [r7, #112]	; 0x70
 8006414:	677a      	str	r2, [r7, #116]	; 0x74
 8006416:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800641a:	4642      	mov	r2, r8
 800641c:	464b      	mov	r3, r9
 800641e:	1891      	adds	r1, r2, r2
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	415b      	adcs	r3, r3
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800642a:	4641      	mov	r1, r8
 800642c:	1851      	adds	r1, r2, r1
 800642e:	6039      	str	r1, [r7, #0]
 8006430:	4649      	mov	r1, r9
 8006432:	414b      	adcs	r3, r1
 8006434:	607b      	str	r3, [r7, #4]
 8006436:	f04f 0200 	mov.w	r2, #0
 800643a:	f04f 0300 	mov.w	r3, #0
 800643e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006442:	4659      	mov	r1, fp
 8006444:	00cb      	lsls	r3, r1, #3
 8006446:	4651      	mov	r1, sl
 8006448:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800644c:	4651      	mov	r1, sl
 800644e:	00ca      	lsls	r2, r1, #3
 8006450:	4610      	mov	r0, r2
 8006452:	4619      	mov	r1, r3
 8006454:	4603      	mov	r3, r0
 8006456:	4642      	mov	r2, r8
 8006458:	189b      	adds	r3, r3, r2
 800645a:	66bb      	str	r3, [r7, #104]	; 0x68
 800645c:	464b      	mov	r3, r9
 800645e:	460a      	mov	r2, r1
 8006460:	eb42 0303 	adc.w	r3, r2, r3
 8006464:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	663b      	str	r3, [r7, #96]	; 0x60
 8006470:	667a      	str	r2, [r7, #100]	; 0x64
 8006472:	f04f 0200 	mov.w	r2, #0
 8006476:	f04f 0300 	mov.w	r3, #0
 800647a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800647e:	4649      	mov	r1, r9
 8006480:	008b      	lsls	r3, r1, #2
 8006482:	4641      	mov	r1, r8
 8006484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006488:	4641      	mov	r1, r8
 800648a:	008a      	lsls	r2, r1, #2
 800648c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006490:	f7fa fc2a 	bl	8000ce8 <__aeabi_uldivmod>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <UART_SetConfig+0x4e4>)
 800649a:	fba3 1302 	umull	r1, r3, r3, r2
 800649e:	095b      	lsrs	r3, r3, #5
 80064a0:	2164      	movs	r1, #100	; 0x64
 80064a2:	fb01 f303 	mul.w	r3, r1, r3
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	011b      	lsls	r3, r3, #4
 80064aa:	3332      	adds	r3, #50	; 0x32
 80064ac:	4a08      	ldr	r2, [pc, #32]	; (80064d0 <UART_SetConfig+0x4e4>)
 80064ae:	fba2 2303 	umull	r2, r3, r2, r3
 80064b2:	095b      	lsrs	r3, r3, #5
 80064b4:	f003 020f 	and.w	r2, r3, #15
 80064b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4422      	add	r2, r4
 80064c0:	609a      	str	r2, [r3, #8]
}
 80064c2:	bf00      	nop
 80064c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064c8:	46bd      	mov	sp, r7
 80064ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064ce:	bf00      	nop
 80064d0:	51eb851f 	.word	0x51eb851f

080064d4 <__errno>:
 80064d4:	4b01      	ldr	r3, [pc, #4]	; (80064dc <__errno+0x8>)
 80064d6:	6818      	ldr	r0, [r3, #0]
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	20000060 	.word	0x20000060

080064e0 <__libc_init_array>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	4d0d      	ldr	r5, [pc, #52]	; (8006518 <__libc_init_array+0x38>)
 80064e4:	4c0d      	ldr	r4, [pc, #52]	; (800651c <__libc_init_array+0x3c>)
 80064e6:	1b64      	subs	r4, r4, r5
 80064e8:	10a4      	asrs	r4, r4, #2
 80064ea:	2600      	movs	r6, #0
 80064ec:	42a6      	cmp	r6, r4
 80064ee:	d109      	bne.n	8006504 <__libc_init_array+0x24>
 80064f0:	4d0b      	ldr	r5, [pc, #44]	; (8006520 <__libc_init_array+0x40>)
 80064f2:	4c0c      	ldr	r4, [pc, #48]	; (8006524 <__libc_init_array+0x44>)
 80064f4:	f004 fb3a 	bl	800ab6c <_init>
 80064f8:	1b64      	subs	r4, r4, r5
 80064fa:	10a4      	asrs	r4, r4, #2
 80064fc:	2600      	movs	r6, #0
 80064fe:	42a6      	cmp	r6, r4
 8006500:	d105      	bne.n	800650e <__libc_init_array+0x2e>
 8006502:	bd70      	pop	{r4, r5, r6, pc}
 8006504:	f855 3b04 	ldr.w	r3, [r5], #4
 8006508:	4798      	blx	r3
 800650a:	3601      	adds	r6, #1
 800650c:	e7ee      	b.n	80064ec <__libc_init_array+0xc>
 800650e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006512:	4798      	blx	r3
 8006514:	3601      	adds	r6, #1
 8006516:	e7f2      	b.n	80064fe <__libc_init_array+0x1e>
 8006518:	0800b118 	.word	0x0800b118
 800651c:	0800b118 	.word	0x0800b118
 8006520:	0800b118 	.word	0x0800b118
 8006524:	0800b11c 	.word	0x0800b11c

08006528 <memset>:
 8006528:	4402      	add	r2, r0
 800652a:	4603      	mov	r3, r0
 800652c:	4293      	cmp	r3, r2
 800652e:	d100      	bne.n	8006532 <memset+0xa>
 8006530:	4770      	bx	lr
 8006532:	f803 1b01 	strb.w	r1, [r3], #1
 8006536:	e7f9      	b.n	800652c <memset+0x4>

08006538 <__cvt>:
 8006538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800653c:	ec55 4b10 	vmov	r4, r5, d0
 8006540:	2d00      	cmp	r5, #0
 8006542:	460e      	mov	r6, r1
 8006544:	4619      	mov	r1, r3
 8006546:	462b      	mov	r3, r5
 8006548:	bfbb      	ittet	lt
 800654a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800654e:	461d      	movlt	r5, r3
 8006550:	2300      	movge	r3, #0
 8006552:	232d      	movlt	r3, #45	; 0x2d
 8006554:	700b      	strb	r3, [r1, #0]
 8006556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006558:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800655c:	4691      	mov	r9, r2
 800655e:	f023 0820 	bic.w	r8, r3, #32
 8006562:	bfbc      	itt	lt
 8006564:	4622      	movlt	r2, r4
 8006566:	4614      	movlt	r4, r2
 8006568:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800656c:	d005      	beq.n	800657a <__cvt+0x42>
 800656e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006572:	d100      	bne.n	8006576 <__cvt+0x3e>
 8006574:	3601      	adds	r6, #1
 8006576:	2102      	movs	r1, #2
 8006578:	e000      	b.n	800657c <__cvt+0x44>
 800657a:	2103      	movs	r1, #3
 800657c:	ab03      	add	r3, sp, #12
 800657e:	9301      	str	r3, [sp, #4]
 8006580:	ab02      	add	r3, sp, #8
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	ec45 4b10 	vmov	d0, r4, r5
 8006588:	4653      	mov	r3, sl
 800658a:	4632      	mov	r2, r6
 800658c:	f001 fb94 	bl	8007cb8 <_dtoa_r>
 8006590:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006594:	4607      	mov	r7, r0
 8006596:	d102      	bne.n	800659e <__cvt+0x66>
 8006598:	f019 0f01 	tst.w	r9, #1
 800659c:	d022      	beq.n	80065e4 <__cvt+0xac>
 800659e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065a2:	eb07 0906 	add.w	r9, r7, r6
 80065a6:	d110      	bne.n	80065ca <__cvt+0x92>
 80065a8:	783b      	ldrb	r3, [r7, #0]
 80065aa:	2b30      	cmp	r3, #48	; 0x30
 80065ac:	d10a      	bne.n	80065c4 <__cvt+0x8c>
 80065ae:	2200      	movs	r2, #0
 80065b0:	2300      	movs	r3, #0
 80065b2:	4620      	mov	r0, r4
 80065b4:	4629      	mov	r1, r5
 80065b6:	f7fa fab7 	bl	8000b28 <__aeabi_dcmpeq>
 80065ba:	b918      	cbnz	r0, 80065c4 <__cvt+0x8c>
 80065bc:	f1c6 0601 	rsb	r6, r6, #1
 80065c0:	f8ca 6000 	str.w	r6, [sl]
 80065c4:	f8da 3000 	ldr.w	r3, [sl]
 80065c8:	4499      	add	r9, r3
 80065ca:	2200      	movs	r2, #0
 80065cc:	2300      	movs	r3, #0
 80065ce:	4620      	mov	r0, r4
 80065d0:	4629      	mov	r1, r5
 80065d2:	f7fa faa9 	bl	8000b28 <__aeabi_dcmpeq>
 80065d6:	b108      	cbz	r0, 80065dc <__cvt+0xa4>
 80065d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80065dc:	2230      	movs	r2, #48	; 0x30
 80065de:	9b03      	ldr	r3, [sp, #12]
 80065e0:	454b      	cmp	r3, r9
 80065e2:	d307      	bcc.n	80065f4 <__cvt+0xbc>
 80065e4:	9b03      	ldr	r3, [sp, #12]
 80065e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065e8:	1bdb      	subs	r3, r3, r7
 80065ea:	4638      	mov	r0, r7
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	b004      	add	sp, #16
 80065f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f4:	1c59      	adds	r1, r3, #1
 80065f6:	9103      	str	r1, [sp, #12]
 80065f8:	701a      	strb	r2, [r3, #0]
 80065fa:	e7f0      	b.n	80065de <__cvt+0xa6>

080065fc <__exponent>:
 80065fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065fe:	4603      	mov	r3, r0
 8006600:	2900      	cmp	r1, #0
 8006602:	bfb8      	it	lt
 8006604:	4249      	neglt	r1, r1
 8006606:	f803 2b02 	strb.w	r2, [r3], #2
 800660a:	bfb4      	ite	lt
 800660c:	222d      	movlt	r2, #45	; 0x2d
 800660e:	222b      	movge	r2, #43	; 0x2b
 8006610:	2909      	cmp	r1, #9
 8006612:	7042      	strb	r2, [r0, #1]
 8006614:	dd2a      	ble.n	800666c <__exponent+0x70>
 8006616:	f10d 0407 	add.w	r4, sp, #7
 800661a:	46a4      	mov	ip, r4
 800661c:	270a      	movs	r7, #10
 800661e:	46a6      	mov	lr, r4
 8006620:	460a      	mov	r2, r1
 8006622:	fb91 f6f7 	sdiv	r6, r1, r7
 8006626:	fb07 1516 	mls	r5, r7, r6, r1
 800662a:	3530      	adds	r5, #48	; 0x30
 800662c:	2a63      	cmp	r2, #99	; 0x63
 800662e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006632:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006636:	4631      	mov	r1, r6
 8006638:	dcf1      	bgt.n	800661e <__exponent+0x22>
 800663a:	3130      	adds	r1, #48	; 0x30
 800663c:	f1ae 0502 	sub.w	r5, lr, #2
 8006640:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006644:	1c44      	adds	r4, r0, #1
 8006646:	4629      	mov	r1, r5
 8006648:	4561      	cmp	r1, ip
 800664a:	d30a      	bcc.n	8006662 <__exponent+0x66>
 800664c:	f10d 0209 	add.w	r2, sp, #9
 8006650:	eba2 020e 	sub.w	r2, r2, lr
 8006654:	4565      	cmp	r5, ip
 8006656:	bf88      	it	hi
 8006658:	2200      	movhi	r2, #0
 800665a:	4413      	add	r3, r2
 800665c:	1a18      	subs	r0, r3, r0
 800665e:	b003      	add	sp, #12
 8006660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006666:	f804 2f01 	strb.w	r2, [r4, #1]!
 800666a:	e7ed      	b.n	8006648 <__exponent+0x4c>
 800666c:	2330      	movs	r3, #48	; 0x30
 800666e:	3130      	adds	r1, #48	; 0x30
 8006670:	7083      	strb	r3, [r0, #2]
 8006672:	70c1      	strb	r1, [r0, #3]
 8006674:	1d03      	adds	r3, r0, #4
 8006676:	e7f1      	b.n	800665c <__exponent+0x60>

08006678 <_printf_float>:
 8006678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	ed2d 8b02 	vpush	{d8}
 8006680:	b08d      	sub	sp, #52	; 0x34
 8006682:	460c      	mov	r4, r1
 8006684:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006688:	4616      	mov	r6, r2
 800668a:	461f      	mov	r7, r3
 800668c:	4605      	mov	r5, r0
 800668e:	f002 fc83 	bl	8008f98 <_localeconv_r>
 8006692:	f8d0 a000 	ldr.w	sl, [r0]
 8006696:	4650      	mov	r0, sl
 8006698:	f7f9 fdc4 	bl	8000224 <strlen>
 800669c:	2300      	movs	r3, #0
 800669e:	930a      	str	r3, [sp, #40]	; 0x28
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	9305      	str	r3, [sp, #20]
 80066a4:	f8d8 3000 	ldr.w	r3, [r8]
 80066a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80066ac:	3307      	adds	r3, #7
 80066ae:	f023 0307 	bic.w	r3, r3, #7
 80066b2:	f103 0208 	add.w	r2, r3, #8
 80066b6:	f8c8 2000 	str.w	r2, [r8]
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066ca:	9307      	str	r3, [sp, #28]
 80066cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80066d0:	ee08 0a10 	vmov	s16, r0
 80066d4:	4b9f      	ldr	r3, [pc, #636]	; (8006954 <_printf_float+0x2dc>)
 80066d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066de:	f7fa fa55 	bl	8000b8c <__aeabi_dcmpun>
 80066e2:	bb88      	cbnz	r0, 8006748 <_printf_float+0xd0>
 80066e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066e8:	4b9a      	ldr	r3, [pc, #616]	; (8006954 <_printf_float+0x2dc>)
 80066ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066ee:	f7fa fa2f 	bl	8000b50 <__aeabi_dcmple>
 80066f2:	bb48      	cbnz	r0, 8006748 <_printf_float+0xd0>
 80066f4:	2200      	movs	r2, #0
 80066f6:	2300      	movs	r3, #0
 80066f8:	4640      	mov	r0, r8
 80066fa:	4649      	mov	r1, r9
 80066fc:	f7fa fa1e 	bl	8000b3c <__aeabi_dcmplt>
 8006700:	b110      	cbz	r0, 8006708 <_printf_float+0x90>
 8006702:	232d      	movs	r3, #45	; 0x2d
 8006704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006708:	4b93      	ldr	r3, [pc, #588]	; (8006958 <_printf_float+0x2e0>)
 800670a:	4894      	ldr	r0, [pc, #592]	; (800695c <_printf_float+0x2e4>)
 800670c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006710:	bf94      	ite	ls
 8006712:	4698      	movls	r8, r3
 8006714:	4680      	movhi	r8, r0
 8006716:	2303      	movs	r3, #3
 8006718:	6123      	str	r3, [r4, #16]
 800671a:	9b05      	ldr	r3, [sp, #20]
 800671c:	f023 0204 	bic.w	r2, r3, #4
 8006720:	6022      	str	r2, [r4, #0]
 8006722:	f04f 0900 	mov.w	r9, #0
 8006726:	9700      	str	r7, [sp, #0]
 8006728:	4633      	mov	r3, r6
 800672a:	aa0b      	add	r2, sp, #44	; 0x2c
 800672c:	4621      	mov	r1, r4
 800672e:	4628      	mov	r0, r5
 8006730:	f000 f9d8 	bl	8006ae4 <_printf_common>
 8006734:	3001      	adds	r0, #1
 8006736:	f040 8090 	bne.w	800685a <_printf_float+0x1e2>
 800673a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800673e:	b00d      	add	sp, #52	; 0x34
 8006740:	ecbd 8b02 	vpop	{d8}
 8006744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006748:	4642      	mov	r2, r8
 800674a:	464b      	mov	r3, r9
 800674c:	4640      	mov	r0, r8
 800674e:	4649      	mov	r1, r9
 8006750:	f7fa fa1c 	bl	8000b8c <__aeabi_dcmpun>
 8006754:	b140      	cbz	r0, 8006768 <_printf_float+0xf0>
 8006756:	464b      	mov	r3, r9
 8006758:	2b00      	cmp	r3, #0
 800675a:	bfbc      	itt	lt
 800675c:	232d      	movlt	r3, #45	; 0x2d
 800675e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006762:	487f      	ldr	r0, [pc, #508]	; (8006960 <_printf_float+0x2e8>)
 8006764:	4b7f      	ldr	r3, [pc, #508]	; (8006964 <_printf_float+0x2ec>)
 8006766:	e7d1      	b.n	800670c <_printf_float+0x94>
 8006768:	6863      	ldr	r3, [r4, #4]
 800676a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800676e:	9206      	str	r2, [sp, #24]
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	d13f      	bne.n	80067f4 <_printf_float+0x17c>
 8006774:	2306      	movs	r3, #6
 8006776:	6063      	str	r3, [r4, #4]
 8006778:	9b05      	ldr	r3, [sp, #20]
 800677a:	6861      	ldr	r1, [r4, #4]
 800677c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006780:	2300      	movs	r3, #0
 8006782:	9303      	str	r3, [sp, #12]
 8006784:	ab0a      	add	r3, sp, #40	; 0x28
 8006786:	e9cd b301 	strd	fp, r3, [sp, #4]
 800678a:	ab09      	add	r3, sp, #36	; 0x24
 800678c:	ec49 8b10 	vmov	d0, r8, r9
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	6022      	str	r2, [r4, #0]
 8006794:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006798:	4628      	mov	r0, r5
 800679a:	f7ff fecd 	bl	8006538 <__cvt>
 800679e:	9b06      	ldr	r3, [sp, #24]
 80067a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067a2:	2b47      	cmp	r3, #71	; 0x47
 80067a4:	4680      	mov	r8, r0
 80067a6:	d108      	bne.n	80067ba <_printf_float+0x142>
 80067a8:	1cc8      	adds	r0, r1, #3
 80067aa:	db02      	blt.n	80067b2 <_printf_float+0x13a>
 80067ac:	6863      	ldr	r3, [r4, #4]
 80067ae:	4299      	cmp	r1, r3
 80067b0:	dd41      	ble.n	8006836 <_printf_float+0x1be>
 80067b2:	f1ab 0b02 	sub.w	fp, fp, #2
 80067b6:	fa5f fb8b 	uxtb.w	fp, fp
 80067ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067be:	d820      	bhi.n	8006802 <_printf_float+0x18a>
 80067c0:	3901      	subs	r1, #1
 80067c2:	465a      	mov	r2, fp
 80067c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067c8:	9109      	str	r1, [sp, #36]	; 0x24
 80067ca:	f7ff ff17 	bl	80065fc <__exponent>
 80067ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067d0:	1813      	adds	r3, r2, r0
 80067d2:	2a01      	cmp	r2, #1
 80067d4:	4681      	mov	r9, r0
 80067d6:	6123      	str	r3, [r4, #16]
 80067d8:	dc02      	bgt.n	80067e0 <_printf_float+0x168>
 80067da:	6822      	ldr	r2, [r4, #0]
 80067dc:	07d2      	lsls	r2, r2, #31
 80067de:	d501      	bpl.n	80067e4 <_printf_float+0x16c>
 80067e0:	3301      	adds	r3, #1
 80067e2:	6123      	str	r3, [r4, #16]
 80067e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d09c      	beq.n	8006726 <_printf_float+0xae>
 80067ec:	232d      	movs	r3, #45	; 0x2d
 80067ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067f2:	e798      	b.n	8006726 <_printf_float+0xae>
 80067f4:	9a06      	ldr	r2, [sp, #24]
 80067f6:	2a47      	cmp	r2, #71	; 0x47
 80067f8:	d1be      	bne.n	8006778 <_printf_float+0x100>
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1bc      	bne.n	8006778 <_printf_float+0x100>
 80067fe:	2301      	movs	r3, #1
 8006800:	e7b9      	b.n	8006776 <_printf_float+0xfe>
 8006802:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006806:	d118      	bne.n	800683a <_printf_float+0x1c2>
 8006808:	2900      	cmp	r1, #0
 800680a:	6863      	ldr	r3, [r4, #4]
 800680c:	dd0b      	ble.n	8006826 <_printf_float+0x1ae>
 800680e:	6121      	str	r1, [r4, #16]
 8006810:	b913      	cbnz	r3, 8006818 <_printf_float+0x1a0>
 8006812:	6822      	ldr	r2, [r4, #0]
 8006814:	07d0      	lsls	r0, r2, #31
 8006816:	d502      	bpl.n	800681e <_printf_float+0x1a6>
 8006818:	3301      	adds	r3, #1
 800681a:	440b      	add	r3, r1
 800681c:	6123      	str	r3, [r4, #16]
 800681e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006820:	f04f 0900 	mov.w	r9, #0
 8006824:	e7de      	b.n	80067e4 <_printf_float+0x16c>
 8006826:	b913      	cbnz	r3, 800682e <_printf_float+0x1b6>
 8006828:	6822      	ldr	r2, [r4, #0]
 800682a:	07d2      	lsls	r2, r2, #31
 800682c:	d501      	bpl.n	8006832 <_printf_float+0x1ba>
 800682e:	3302      	adds	r3, #2
 8006830:	e7f4      	b.n	800681c <_printf_float+0x1a4>
 8006832:	2301      	movs	r3, #1
 8006834:	e7f2      	b.n	800681c <_printf_float+0x1a4>
 8006836:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800683a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800683c:	4299      	cmp	r1, r3
 800683e:	db05      	blt.n	800684c <_printf_float+0x1d4>
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	6121      	str	r1, [r4, #16]
 8006844:	07d8      	lsls	r0, r3, #31
 8006846:	d5ea      	bpl.n	800681e <_printf_float+0x1a6>
 8006848:	1c4b      	adds	r3, r1, #1
 800684a:	e7e7      	b.n	800681c <_printf_float+0x1a4>
 800684c:	2900      	cmp	r1, #0
 800684e:	bfd4      	ite	le
 8006850:	f1c1 0202 	rsble	r2, r1, #2
 8006854:	2201      	movgt	r2, #1
 8006856:	4413      	add	r3, r2
 8006858:	e7e0      	b.n	800681c <_printf_float+0x1a4>
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	055a      	lsls	r2, r3, #21
 800685e:	d407      	bmi.n	8006870 <_printf_float+0x1f8>
 8006860:	6923      	ldr	r3, [r4, #16]
 8006862:	4642      	mov	r2, r8
 8006864:	4631      	mov	r1, r6
 8006866:	4628      	mov	r0, r5
 8006868:	47b8      	blx	r7
 800686a:	3001      	adds	r0, #1
 800686c:	d12c      	bne.n	80068c8 <_printf_float+0x250>
 800686e:	e764      	b.n	800673a <_printf_float+0xc2>
 8006870:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006874:	f240 80e0 	bls.w	8006a38 <_printf_float+0x3c0>
 8006878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800687c:	2200      	movs	r2, #0
 800687e:	2300      	movs	r3, #0
 8006880:	f7fa f952 	bl	8000b28 <__aeabi_dcmpeq>
 8006884:	2800      	cmp	r0, #0
 8006886:	d034      	beq.n	80068f2 <_printf_float+0x27a>
 8006888:	4a37      	ldr	r2, [pc, #220]	; (8006968 <_printf_float+0x2f0>)
 800688a:	2301      	movs	r3, #1
 800688c:	4631      	mov	r1, r6
 800688e:	4628      	mov	r0, r5
 8006890:	47b8      	blx	r7
 8006892:	3001      	adds	r0, #1
 8006894:	f43f af51 	beq.w	800673a <_printf_float+0xc2>
 8006898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800689c:	429a      	cmp	r2, r3
 800689e:	db02      	blt.n	80068a6 <_printf_float+0x22e>
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	07d8      	lsls	r0, r3, #31
 80068a4:	d510      	bpl.n	80068c8 <_printf_float+0x250>
 80068a6:	ee18 3a10 	vmov	r3, s16
 80068aa:	4652      	mov	r2, sl
 80068ac:	4631      	mov	r1, r6
 80068ae:	4628      	mov	r0, r5
 80068b0:	47b8      	blx	r7
 80068b2:	3001      	adds	r0, #1
 80068b4:	f43f af41 	beq.w	800673a <_printf_float+0xc2>
 80068b8:	f04f 0800 	mov.w	r8, #0
 80068bc:	f104 091a 	add.w	r9, r4, #26
 80068c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c2:	3b01      	subs	r3, #1
 80068c4:	4543      	cmp	r3, r8
 80068c6:	dc09      	bgt.n	80068dc <_printf_float+0x264>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	079b      	lsls	r3, r3, #30
 80068cc:	f100 8105 	bmi.w	8006ada <_printf_float+0x462>
 80068d0:	68e0      	ldr	r0, [r4, #12]
 80068d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068d4:	4298      	cmp	r0, r3
 80068d6:	bfb8      	it	lt
 80068d8:	4618      	movlt	r0, r3
 80068da:	e730      	b.n	800673e <_printf_float+0xc6>
 80068dc:	2301      	movs	r3, #1
 80068de:	464a      	mov	r2, r9
 80068e0:	4631      	mov	r1, r6
 80068e2:	4628      	mov	r0, r5
 80068e4:	47b8      	blx	r7
 80068e6:	3001      	adds	r0, #1
 80068e8:	f43f af27 	beq.w	800673a <_printf_float+0xc2>
 80068ec:	f108 0801 	add.w	r8, r8, #1
 80068f0:	e7e6      	b.n	80068c0 <_printf_float+0x248>
 80068f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	dc39      	bgt.n	800696c <_printf_float+0x2f4>
 80068f8:	4a1b      	ldr	r2, [pc, #108]	; (8006968 <_printf_float+0x2f0>)
 80068fa:	2301      	movs	r3, #1
 80068fc:	4631      	mov	r1, r6
 80068fe:	4628      	mov	r0, r5
 8006900:	47b8      	blx	r7
 8006902:	3001      	adds	r0, #1
 8006904:	f43f af19 	beq.w	800673a <_printf_float+0xc2>
 8006908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800690c:	4313      	orrs	r3, r2
 800690e:	d102      	bne.n	8006916 <_printf_float+0x29e>
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	07d9      	lsls	r1, r3, #31
 8006914:	d5d8      	bpl.n	80068c8 <_printf_float+0x250>
 8006916:	ee18 3a10 	vmov	r3, s16
 800691a:	4652      	mov	r2, sl
 800691c:	4631      	mov	r1, r6
 800691e:	4628      	mov	r0, r5
 8006920:	47b8      	blx	r7
 8006922:	3001      	adds	r0, #1
 8006924:	f43f af09 	beq.w	800673a <_printf_float+0xc2>
 8006928:	f04f 0900 	mov.w	r9, #0
 800692c:	f104 0a1a 	add.w	sl, r4, #26
 8006930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006932:	425b      	negs	r3, r3
 8006934:	454b      	cmp	r3, r9
 8006936:	dc01      	bgt.n	800693c <_printf_float+0x2c4>
 8006938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800693a:	e792      	b.n	8006862 <_printf_float+0x1ea>
 800693c:	2301      	movs	r3, #1
 800693e:	4652      	mov	r2, sl
 8006940:	4631      	mov	r1, r6
 8006942:	4628      	mov	r0, r5
 8006944:	47b8      	blx	r7
 8006946:	3001      	adds	r0, #1
 8006948:	f43f aef7 	beq.w	800673a <_printf_float+0xc2>
 800694c:	f109 0901 	add.w	r9, r9, #1
 8006950:	e7ee      	b.n	8006930 <_printf_float+0x2b8>
 8006952:	bf00      	nop
 8006954:	7fefffff 	.word	0x7fefffff
 8006958:	0800ac18 	.word	0x0800ac18
 800695c:	0800ac1c 	.word	0x0800ac1c
 8006960:	0800ac24 	.word	0x0800ac24
 8006964:	0800ac20 	.word	0x0800ac20
 8006968:	0800ac28 	.word	0x0800ac28
 800696c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800696e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006970:	429a      	cmp	r2, r3
 8006972:	bfa8      	it	ge
 8006974:	461a      	movge	r2, r3
 8006976:	2a00      	cmp	r2, #0
 8006978:	4691      	mov	r9, r2
 800697a:	dc37      	bgt.n	80069ec <_printf_float+0x374>
 800697c:	f04f 0b00 	mov.w	fp, #0
 8006980:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006984:	f104 021a 	add.w	r2, r4, #26
 8006988:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800698a:	9305      	str	r3, [sp, #20]
 800698c:	eba3 0309 	sub.w	r3, r3, r9
 8006990:	455b      	cmp	r3, fp
 8006992:	dc33      	bgt.n	80069fc <_printf_float+0x384>
 8006994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006998:	429a      	cmp	r2, r3
 800699a:	db3b      	blt.n	8006a14 <_printf_float+0x39c>
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	07da      	lsls	r2, r3, #31
 80069a0:	d438      	bmi.n	8006a14 <_printf_float+0x39c>
 80069a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069a4:	9a05      	ldr	r2, [sp, #20]
 80069a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069a8:	1a9a      	subs	r2, r3, r2
 80069aa:	eba3 0901 	sub.w	r9, r3, r1
 80069ae:	4591      	cmp	r9, r2
 80069b0:	bfa8      	it	ge
 80069b2:	4691      	movge	r9, r2
 80069b4:	f1b9 0f00 	cmp.w	r9, #0
 80069b8:	dc35      	bgt.n	8006a26 <_printf_float+0x3ae>
 80069ba:	f04f 0800 	mov.w	r8, #0
 80069be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069c2:	f104 0a1a 	add.w	sl, r4, #26
 80069c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069ca:	1a9b      	subs	r3, r3, r2
 80069cc:	eba3 0309 	sub.w	r3, r3, r9
 80069d0:	4543      	cmp	r3, r8
 80069d2:	f77f af79 	ble.w	80068c8 <_printf_float+0x250>
 80069d6:	2301      	movs	r3, #1
 80069d8:	4652      	mov	r2, sl
 80069da:	4631      	mov	r1, r6
 80069dc:	4628      	mov	r0, r5
 80069de:	47b8      	blx	r7
 80069e0:	3001      	adds	r0, #1
 80069e2:	f43f aeaa 	beq.w	800673a <_printf_float+0xc2>
 80069e6:	f108 0801 	add.w	r8, r8, #1
 80069ea:	e7ec      	b.n	80069c6 <_printf_float+0x34e>
 80069ec:	4613      	mov	r3, r2
 80069ee:	4631      	mov	r1, r6
 80069f0:	4642      	mov	r2, r8
 80069f2:	4628      	mov	r0, r5
 80069f4:	47b8      	blx	r7
 80069f6:	3001      	adds	r0, #1
 80069f8:	d1c0      	bne.n	800697c <_printf_float+0x304>
 80069fa:	e69e      	b.n	800673a <_printf_float+0xc2>
 80069fc:	2301      	movs	r3, #1
 80069fe:	4631      	mov	r1, r6
 8006a00:	4628      	mov	r0, r5
 8006a02:	9205      	str	r2, [sp, #20]
 8006a04:	47b8      	blx	r7
 8006a06:	3001      	adds	r0, #1
 8006a08:	f43f ae97 	beq.w	800673a <_printf_float+0xc2>
 8006a0c:	9a05      	ldr	r2, [sp, #20]
 8006a0e:	f10b 0b01 	add.w	fp, fp, #1
 8006a12:	e7b9      	b.n	8006988 <_printf_float+0x310>
 8006a14:	ee18 3a10 	vmov	r3, s16
 8006a18:	4652      	mov	r2, sl
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	47b8      	blx	r7
 8006a20:	3001      	adds	r0, #1
 8006a22:	d1be      	bne.n	80069a2 <_printf_float+0x32a>
 8006a24:	e689      	b.n	800673a <_printf_float+0xc2>
 8006a26:	9a05      	ldr	r2, [sp, #20]
 8006a28:	464b      	mov	r3, r9
 8006a2a:	4442      	add	r2, r8
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b8      	blx	r7
 8006a32:	3001      	adds	r0, #1
 8006a34:	d1c1      	bne.n	80069ba <_printf_float+0x342>
 8006a36:	e680      	b.n	800673a <_printf_float+0xc2>
 8006a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a3a:	2a01      	cmp	r2, #1
 8006a3c:	dc01      	bgt.n	8006a42 <_printf_float+0x3ca>
 8006a3e:	07db      	lsls	r3, r3, #31
 8006a40:	d538      	bpl.n	8006ab4 <_printf_float+0x43c>
 8006a42:	2301      	movs	r3, #1
 8006a44:	4642      	mov	r2, r8
 8006a46:	4631      	mov	r1, r6
 8006a48:	4628      	mov	r0, r5
 8006a4a:	47b8      	blx	r7
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	f43f ae74 	beq.w	800673a <_printf_float+0xc2>
 8006a52:	ee18 3a10 	vmov	r3, s16
 8006a56:	4652      	mov	r2, sl
 8006a58:	4631      	mov	r1, r6
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	47b8      	blx	r7
 8006a5e:	3001      	adds	r0, #1
 8006a60:	f43f ae6b 	beq.w	800673a <_printf_float+0xc2>
 8006a64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f7fa f85c 	bl	8000b28 <__aeabi_dcmpeq>
 8006a70:	b9d8      	cbnz	r0, 8006aaa <_printf_float+0x432>
 8006a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a74:	f108 0201 	add.w	r2, r8, #1
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	4631      	mov	r1, r6
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	47b8      	blx	r7
 8006a80:	3001      	adds	r0, #1
 8006a82:	d10e      	bne.n	8006aa2 <_printf_float+0x42a>
 8006a84:	e659      	b.n	800673a <_printf_float+0xc2>
 8006a86:	2301      	movs	r3, #1
 8006a88:	4652      	mov	r2, sl
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b8      	blx	r7
 8006a90:	3001      	adds	r0, #1
 8006a92:	f43f ae52 	beq.w	800673a <_printf_float+0xc2>
 8006a96:	f108 0801 	add.w	r8, r8, #1
 8006a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	4543      	cmp	r3, r8
 8006aa0:	dcf1      	bgt.n	8006a86 <_printf_float+0x40e>
 8006aa2:	464b      	mov	r3, r9
 8006aa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006aa8:	e6dc      	b.n	8006864 <_printf_float+0x1ec>
 8006aaa:	f04f 0800 	mov.w	r8, #0
 8006aae:	f104 0a1a 	add.w	sl, r4, #26
 8006ab2:	e7f2      	b.n	8006a9a <_printf_float+0x422>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	4642      	mov	r2, r8
 8006ab8:	e7df      	b.n	8006a7a <_printf_float+0x402>
 8006aba:	2301      	movs	r3, #1
 8006abc:	464a      	mov	r2, r9
 8006abe:	4631      	mov	r1, r6
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	47b8      	blx	r7
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	f43f ae38 	beq.w	800673a <_printf_float+0xc2>
 8006aca:	f108 0801 	add.w	r8, r8, #1
 8006ace:	68e3      	ldr	r3, [r4, #12]
 8006ad0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ad2:	1a5b      	subs	r3, r3, r1
 8006ad4:	4543      	cmp	r3, r8
 8006ad6:	dcf0      	bgt.n	8006aba <_printf_float+0x442>
 8006ad8:	e6fa      	b.n	80068d0 <_printf_float+0x258>
 8006ada:	f04f 0800 	mov.w	r8, #0
 8006ade:	f104 0919 	add.w	r9, r4, #25
 8006ae2:	e7f4      	b.n	8006ace <_printf_float+0x456>

08006ae4 <_printf_common>:
 8006ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae8:	4616      	mov	r6, r2
 8006aea:	4699      	mov	r9, r3
 8006aec:	688a      	ldr	r2, [r1, #8]
 8006aee:	690b      	ldr	r3, [r1, #16]
 8006af0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006af4:	4293      	cmp	r3, r2
 8006af6:	bfb8      	it	lt
 8006af8:	4613      	movlt	r3, r2
 8006afa:	6033      	str	r3, [r6, #0]
 8006afc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b00:	4607      	mov	r7, r0
 8006b02:	460c      	mov	r4, r1
 8006b04:	b10a      	cbz	r2, 8006b0a <_printf_common+0x26>
 8006b06:	3301      	adds	r3, #1
 8006b08:	6033      	str	r3, [r6, #0]
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	0699      	lsls	r1, r3, #26
 8006b0e:	bf42      	ittt	mi
 8006b10:	6833      	ldrmi	r3, [r6, #0]
 8006b12:	3302      	addmi	r3, #2
 8006b14:	6033      	strmi	r3, [r6, #0]
 8006b16:	6825      	ldr	r5, [r4, #0]
 8006b18:	f015 0506 	ands.w	r5, r5, #6
 8006b1c:	d106      	bne.n	8006b2c <_printf_common+0x48>
 8006b1e:	f104 0a19 	add.w	sl, r4, #25
 8006b22:	68e3      	ldr	r3, [r4, #12]
 8006b24:	6832      	ldr	r2, [r6, #0]
 8006b26:	1a9b      	subs	r3, r3, r2
 8006b28:	42ab      	cmp	r3, r5
 8006b2a:	dc26      	bgt.n	8006b7a <_printf_common+0x96>
 8006b2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b30:	1e13      	subs	r3, r2, #0
 8006b32:	6822      	ldr	r2, [r4, #0]
 8006b34:	bf18      	it	ne
 8006b36:	2301      	movne	r3, #1
 8006b38:	0692      	lsls	r2, r2, #26
 8006b3a:	d42b      	bmi.n	8006b94 <_printf_common+0xb0>
 8006b3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b40:	4649      	mov	r1, r9
 8006b42:	4638      	mov	r0, r7
 8006b44:	47c0      	blx	r8
 8006b46:	3001      	adds	r0, #1
 8006b48:	d01e      	beq.n	8006b88 <_printf_common+0xa4>
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	68e5      	ldr	r5, [r4, #12]
 8006b4e:	6832      	ldr	r2, [r6, #0]
 8006b50:	f003 0306 	and.w	r3, r3, #6
 8006b54:	2b04      	cmp	r3, #4
 8006b56:	bf08      	it	eq
 8006b58:	1aad      	subeq	r5, r5, r2
 8006b5a:	68a3      	ldr	r3, [r4, #8]
 8006b5c:	6922      	ldr	r2, [r4, #16]
 8006b5e:	bf0c      	ite	eq
 8006b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b64:	2500      	movne	r5, #0
 8006b66:	4293      	cmp	r3, r2
 8006b68:	bfc4      	itt	gt
 8006b6a:	1a9b      	subgt	r3, r3, r2
 8006b6c:	18ed      	addgt	r5, r5, r3
 8006b6e:	2600      	movs	r6, #0
 8006b70:	341a      	adds	r4, #26
 8006b72:	42b5      	cmp	r5, r6
 8006b74:	d11a      	bne.n	8006bac <_printf_common+0xc8>
 8006b76:	2000      	movs	r0, #0
 8006b78:	e008      	b.n	8006b8c <_printf_common+0xa8>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	4652      	mov	r2, sl
 8006b7e:	4649      	mov	r1, r9
 8006b80:	4638      	mov	r0, r7
 8006b82:	47c0      	blx	r8
 8006b84:	3001      	adds	r0, #1
 8006b86:	d103      	bne.n	8006b90 <_printf_common+0xac>
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b90:	3501      	adds	r5, #1
 8006b92:	e7c6      	b.n	8006b22 <_printf_common+0x3e>
 8006b94:	18e1      	adds	r1, r4, r3
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	2030      	movs	r0, #48	; 0x30
 8006b9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b9e:	4422      	add	r2, r4
 8006ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ba4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ba8:	3302      	adds	r3, #2
 8006baa:	e7c7      	b.n	8006b3c <_printf_common+0x58>
 8006bac:	2301      	movs	r3, #1
 8006bae:	4622      	mov	r2, r4
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	47c0      	blx	r8
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	d0e6      	beq.n	8006b88 <_printf_common+0xa4>
 8006bba:	3601      	adds	r6, #1
 8006bbc:	e7d9      	b.n	8006b72 <_printf_common+0x8e>
	...

08006bc0 <_printf_i>:
 8006bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc4:	7e0f      	ldrb	r7, [r1, #24]
 8006bc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bc8:	2f78      	cmp	r7, #120	; 0x78
 8006bca:	4691      	mov	r9, r2
 8006bcc:	4680      	mov	r8, r0
 8006bce:	460c      	mov	r4, r1
 8006bd0:	469a      	mov	sl, r3
 8006bd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bd6:	d807      	bhi.n	8006be8 <_printf_i+0x28>
 8006bd8:	2f62      	cmp	r7, #98	; 0x62
 8006bda:	d80a      	bhi.n	8006bf2 <_printf_i+0x32>
 8006bdc:	2f00      	cmp	r7, #0
 8006bde:	f000 80d8 	beq.w	8006d92 <_printf_i+0x1d2>
 8006be2:	2f58      	cmp	r7, #88	; 0x58
 8006be4:	f000 80a3 	beq.w	8006d2e <_printf_i+0x16e>
 8006be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bf0:	e03a      	b.n	8006c68 <_printf_i+0xa8>
 8006bf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bf6:	2b15      	cmp	r3, #21
 8006bf8:	d8f6      	bhi.n	8006be8 <_printf_i+0x28>
 8006bfa:	a101      	add	r1, pc, #4	; (adr r1, 8006c00 <_printf_i+0x40>)
 8006bfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c00:	08006c59 	.word	0x08006c59
 8006c04:	08006c6d 	.word	0x08006c6d
 8006c08:	08006be9 	.word	0x08006be9
 8006c0c:	08006be9 	.word	0x08006be9
 8006c10:	08006be9 	.word	0x08006be9
 8006c14:	08006be9 	.word	0x08006be9
 8006c18:	08006c6d 	.word	0x08006c6d
 8006c1c:	08006be9 	.word	0x08006be9
 8006c20:	08006be9 	.word	0x08006be9
 8006c24:	08006be9 	.word	0x08006be9
 8006c28:	08006be9 	.word	0x08006be9
 8006c2c:	08006d79 	.word	0x08006d79
 8006c30:	08006c9d 	.word	0x08006c9d
 8006c34:	08006d5b 	.word	0x08006d5b
 8006c38:	08006be9 	.word	0x08006be9
 8006c3c:	08006be9 	.word	0x08006be9
 8006c40:	08006d9b 	.word	0x08006d9b
 8006c44:	08006be9 	.word	0x08006be9
 8006c48:	08006c9d 	.word	0x08006c9d
 8006c4c:	08006be9 	.word	0x08006be9
 8006c50:	08006be9 	.word	0x08006be9
 8006c54:	08006d63 	.word	0x08006d63
 8006c58:	682b      	ldr	r3, [r5, #0]
 8006c5a:	1d1a      	adds	r2, r3, #4
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	602a      	str	r2, [r5, #0]
 8006c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e0a3      	b.n	8006db4 <_printf_i+0x1f4>
 8006c6c:	6820      	ldr	r0, [r4, #0]
 8006c6e:	6829      	ldr	r1, [r5, #0]
 8006c70:	0606      	lsls	r6, r0, #24
 8006c72:	f101 0304 	add.w	r3, r1, #4
 8006c76:	d50a      	bpl.n	8006c8e <_printf_i+0xce>
 8006c78:	680e      	ldr	r6, [r1, #0]
 8006c7a:	602b      	str	r3, [r5, #0]
 8006c7c:	2e00      	cmp	r6, #0
 8006c7e:	da03      	bge.n	8006c88 <_printf_i+0xc8>
 8006c80:	232d      	movs	r3, #45	; 0x2d
 8006c82:	4276      	negs	r6, r6
 8006c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c88:	485e      	ldr	r0, [pc, #376]	; (8006e04 <_printf_i+0x244>)
 8006c8a:	230a      	movs	r3, #10
 8006c8c:	e019      	b.n	8006cc2 <_printf_i+0x102>
 8006c8e:	680e      	ldr	r6, [r1, #0]
 8006c90:	602b      	str	r3, [r5, #0]
 8006c92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c96:	bf18      	it	ne
 8006c98:	b236      	sxthne	r6, r6
 8006c9a:	e7ef      	b.n	8006c7c <_printf_i+0xbc>
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	6820      	ldr	r0, [r4, #0]
 8006ca0:	1d19      	adds	r1, r3, #4
 8006ca2:	6029      	str	r1, [r5, #0]
 8006ca4:	0601      	lsls	r1, r0, #24
 8006ca6:	d501      	bpl.n	8006cac <_printf_i+0xec>
 8006ca8:	681e      	ldr	r6, [r3, #0]
 8006caa:	e002      	b.n	8006cb2 <_printf_i+0xf2>
 8006cac:	0646      	lsls	r6, r0, #25
 8006cae:	d5fb      	bpl.n	8006ca8 <_printf_i+0xe8>
 8006cb0:	881e      	ldrh	r6, [r3, #0]
 8006cb2:	4854      	ldr	r0, [pc, #336]	; (8006e04 <_printf_i+0x244>)
 8006cb4:	2f6f      	cmp	r7, #111	; 0x6f
 8006cb6:	bf0c      	ite	eq
 8006cb8:	2308      	moveq	r3, #8
 8006cba:	230a      	movne	r3, #10
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cc2:	6865      	ldr	r5, [r4, #4]
 8006cc4:	60a5      	str	r5, [r4, #8]
 8006cc6:	2d00      	cmp	r5, #0
 8006cc8:	bfa2      	ittt	ge
 8006cca:	6821      	ldrge	r1, [r4, #0]
 8006ccc:	f021 0104 	bicge.w	r1, r1, #4
 8006cd0:	6021      	strge	r1, [r4, #0]
 8006cd2:	b90e      	cbnz	r6, 8006cd8 <_printf_i+0x118>
 8006cd4:	2d00      	cmp	r5, #0
 8006cd6:	d04d      	beq.n	8006d74 <_printf_i+0x1b4>
 8006cd8:	4615      	mov	r5, r2
 8006cda:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cde:	fb03 6711 	mls	r7, r3, r1, r6
 8006ce2:	5dc7      	ldrb	r7, [r0, r7]
 8006ce4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ce8:	4637      	mov	r7, r6
 8006cea:	42bb      	cmp	r3, r7
 8006cec:	460e      	mov	r6, r1
 8006cee:	d9f4      	bls.n	8006cda <_printf_i+0x11a>
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	d10b      	bne.n	8006d0c <_printf_i+0x14c>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	07de      	lsls	r6, r3, #31
 8006cf8:	d508      	bpl.n	8006d0c <_printf_i+0x14c>
 8006cfa:	6923      	ldr	r3, [r4, #16]
 8006cfc:	6861      	ldr	r1, [r4, #4]
 8006cfe:	4299      	cmp	r1, r3
 8006d00:	bfde      	ittt	le
 8006d02:	2330      	movle	r3, #48	; 0x30
 8006d04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d08:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006d0c:	1b52      	subs	r2, r2, r5
 8006d0e:	6122      	str	r2, [r4, #16]
 8006d10:	f8cd a000 	str.w	sl, [sp]
 8006d14:	464b      	mov	r3, r9
 8006d16:	aa03      	add	r2, sp, #12
 8006d18:	4621      	mov	r1, r4
 8006d1a:	4640      	mov	r0, r8
 8006d1c:	f7ff fee2 	bl	8006ae4 <_printf_common>
 8006d20:	3001      	adds	r0, #1
 8006d22:	d14c      	bne.n	8006dbe <_printf_i+0x1fe>
 8006d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d28:	b004      	add	sp, #16
 8006d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d2e:	4835      	ldr	r0, [pc, #212]	; (8006e04 <_printf_i+0x244>)
 8006d30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d34:	6829      	ldr	r1, [r5, #0]
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d3c:	6029      	str	r1, [r5, #0]
 8006d3e:	061d      	lsls	r5, r3, #24
 8006d40:	d514      	bpl.n	8006d6c <_printf_i+0x1ac>
 8006d42:	07df      	lsls	r7, r3, #31
 8006d44:	bf44      	itt	mi
 8006d46:	f043 0320 	orrmi.w	r3, r3, #32
 8006d4a:	6023      	strmi	r3, [r4, #0]
 8006d4c:	b91e      	cbnz	r6, 8006d56 <_printf_i+0x196>
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	f023 0320 	bic.w	r3, r3, #32
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	2310      	movs	r3, #16
 8006d58:	e7b0      	b.n	8006cbc <_printf_i+0xfc>
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	f043 0320 	orr.w	r3, r3, #32
 8006d60:	6023      	str	r3, [r4, #0]
 8006d62:	2378      	movs	r3, #120	; 0x78
 8006d64:	4828      	ldr	r0, [pc, #160]	; (8006e08 <_printf_i+0x248>)
 8006d66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d6a:	e7e3      	b.n	8006d34 <_printf_i+0x174>
 8006d6c:	0659      	lsls	r1, r3, #25
 8006d6e:	bf48      	it	mi
 8006d70:	b2b6      	uxthmi	r6, r6
 8006d72:	e7e6      	b.n	8006d42 <_printf_i+0x182>
 8006d74:	4615      	mov	r5, r2
 8006d76:	e7bb      	b.n	8006cf0 <_printf_i+0x130>
 8006d78:	682b      	ldr	r3, [r5, #0]
 8006d7a:	6826      	ldr	r6, [r4, #0]
 8006d7c:	6961      	ldr	r1, [r4, #20]
 8006d7e:	1d18      	adds	r0, r3, #4
 8006d80:	6028      	str	r0, [r5, #0]
 8006d82:	0635      	lsls	r5, r6, #24
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	d501      	bpl.n	8006d8c <_printf_i+0x1cc>
 8006d88:	6019      	str	r1, [r3, #0]
 8006d8a:	e002      	b.n	8006d92 <_printf_i+0x1d2>
 8006d8c:	0670      	lsls	r0, r6, #25
 8006d8e:	d5fb      	bpl.n	8006d88 <_printf_i+0x1c8>
 8006d90:	8019      	strh	r1, [r3, #0]
 8006d92:	2300      	movs	r3, #0
 8006d94:	6123      	str	r3, [r4, #16]
 8006d96:	4615      	mov	r5, r2
 8006d98:	e7ba      	b.n	8006d10 <_printf_i+0x150>
 8006d9a:	682b      	ldr	r3, [r5, #0]
 8006d9c:	1d1a      	adds	r2, r3, #4
 8006d9e:	602a      	str	r2, [r5, #0]
 8006da0:	681d      	ldr	r5, [r3, #0]
 8006da2:	6862      	ldr	r2, [r4, #4]
 8006da4:	2100      	movs	r1, #0
 8006da6:	4628      	mov	r0, r5
 8006da8:	f7f9 fa4a 	bl	8000240 <memchr>
 8006dac:	b108      	cbz	r0, 8006db2 <_printf_i+0x1f2>
 8006dae:	1b40      	subs	r0, r0, r5
 8006db0:	6060      	str	r0, [r4, #4]
 8006db2:	6863      	ldr	r3, [r4, #4]
 8006db4:	6123      	str	r3, [r4, #16]
 8006db6:	2300      	movs	r3, #0
 8006db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dbc:	e7a8      	b.n	8006d10 <_printf_i+0x150>
 8006dbe:	6923      	ldr	r3, [r4, #16]
 8006dc0:	462a      	mov	r2, r5
 8006dc2:	4649      	mov	r1, r9
 8006dc4:	4640      	mov	r0, r8
 8006dc6:	47d0      	blx	sl
 8006dc8:	3001      	adds	r0, #1
 8006dca:	d0ab      	beq.n	8006d24 <_printf_i+0x164>
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	079b      	lsls	r3, r3, #30
 8006dd0:	d413      	bmi.n	8006dfa <_printf_i+0x23a>
 8006dd2:	68e0      	ldr	r0, [r4, #12]
 8006dd4:	9b03      	ldr	r3, [sp, #12]
 8006dd6:	4298      	cmp	r0, r3
 8006dd8:	bfb8      	it	lt
 8006dda:	4618      	movlt	r0, r3
 8006ddc:	e7a4      	b.n	8006d28 <_printf_i+0x168>
 8006dde:	2301      	movs	r3, #1
 8006de0:	4632      	mov	r2, r6
 8006de2:	4649      	mov	r1, r9
 8006de4:	4640      	mov	r0, r8
 8006de6:	47d0      	blx	sl
 8006de8:	3001      	adds	r0, #1
 8006dea:	d09b      	beq.n	8006d24 <_printf_i+0x164>
 8006dec:	3501      	adds	r5, #1
 8006dee:	68e3      	ldr	r3, [r4, #12]
 8006df0:	9903      	ldr	r1, [sp, #12]
 8006df2:	1a5b      	subs	r3, r3, r1
 8006df4:	42ab      	cmp	r3, r5
 8006df6:	dcf2      	bgt.n	8006dde <_printf_i+0x21e>
 8006df8:	e7eb      	b.n	8006dd2 <_printf_i+0x212>
 8006dfa:	2500      	movs	r5, #0
 8006dfc:	f104 0619 	add.w	r6, r4, #25
 8006e00:	e7f5      	b.n	8006dee <_printf_i+0x22e>
 8006e02:	bf00      	nop
 8006e04:	0800ac2a 	.word	0x0800ac2a
 8006e08:	0800ac3b 	.word	0x0800ac3b

08006e0c <siprintf>:
 8006e0c:	b40e      	push	{r1, r2, r3}
 8006e0e:	b500      	push	{lr}
 8006e10:	b09c      	sub	sp, #112	; 0x70
 8006e12:	ab1d      	add	r3, sp, #116	; 0x74
 8006e14:	9002      	str	r0, [sp, #8]
 8006e16:	9006      	str	r0, [sp, #24]
 8006e18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e1c:	4809      	ldr	r0, [pc, #36]	; (8006e44 <siprintf+0x38>)
 8006e1e:	9107      	str	r1, [sp, #28]
 8006e20:	9104      	str	r1, [sp, #16]
 8006e22:	4909      	ldr	r1, [pc, #36]	; (8006e48 <siprintf+0x3c>)
 8006e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e28:	9105      	str	r1, [sp, #20]
 8006e2a:	6800      	ldr	r0, [r0, #0]
 8006e2c:	9301      	str	r3, [sp, #4]
 8006e2e:	a902      	add	r1, sp, #8
 8006e30:	f002 fef2 	bl	8009c18 <_svfiprintf_r>
 8006e34:	9b02      	ldr	r3, [sp, #8]
 8006e36:	2200      	movs	r2, #0
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	b01c      	add	sp, #112	; 0x70
 8006e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e40:	b003      	add	sp, #12
 8006e42:	4770      	bx	lr
 8006e44:	20000060 	.word	0x20000060
 8006e48:	ffff0208 	.word	0xffff0208

08006e4c <sulp>:
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	4604      	mov	r4, r0
 8006e50:	460d      	mov	r5, r1
 8006e52:	ec45 4b10 	vmov	d0, r4, r5
 8006e56:	4616      	mov	r6, r2
 8006e58:	f002 fc3c 	bl	80096d4 <__ulp>
 8006e5c:	ec51 0b10 	vmov	r0, r1, d0
 8006e60:	b17e      	cbz	r6, 8006e82 <sulp+0x36>
 8006e62:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006e66:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	dd09      	ble.n	8006e82 <sulp+0x36>
 8006e6e:	051b      	lsls	r3, r3, #20
 8006e70:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006e74:	2400      	movs	r4, #0
 8006e76:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006e7a:	4622      	mov	r2, r4
 8006e7c:	462b      	mov	r3, r5
 8006e7e:	f7f9 fbeb 	bl	8000658 <__aeabi_dmul>
 8006e82:	bd70      	pop	{r4, r5, r6, pc}
 8006e84:	0000      	movs	r0, r0
	...

08006e88 <_strtod_l>:
 8006e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8c:	ed2d 8b02 	vpush	{d8}
 8006e90:	b09d      	sub	sp, #116	; 0x74
 8006e92:	461f      	mov	r7, r3
 8006e94:	2300      	movs	r3, #0
 8006e96:	9318      	str	r3, [sp, #96]	; 0x60
 8006e98:	4ba2      	ldr	r3, [pc, #648]	; (8007124 <_strtod_l+0x29c>)
 8006e9a:	9213      	str	r2, [sp, #76]	; 0x4c
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	9305      	str	r3, [sp, #20]
 8006ea0:	4604      	mov	r4, r0
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	4688      	mov	r8, r1
 8006ea6:	f7f9 f9bd 	bl	8000224 <strlen>
 8006eaa:	f04f 0a00 	mov.w	sl, #0
 8006eae:	4605      	mov	r5, r0
 8006eb0:	f04f 0b00 	mov.w	fp, #0
 8006eb4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eba:	781a      	ldrb	r2, [r3, #0]
 8006ebc:	2a2b      	cmp	r2, #43	; 0x2b
 8006ebe:	d04e      	beq.n	8006f5e <_strtod_l+0xd6>
 8006ec0:	d83b      	bhi.n	8006f3a <_strtod_l+0xb2>
 8006ec2:	2a0d      	cmp	r2, #13
 8006ec4:	d834      	bhi.n	8006f30 <_strtod_l+0xa8>
 8006ec6:	2a08      	cmp	r2, #8
 8006ec8:	d834      	bhi.n	8006f34 <_strtod_l+0xac>
 8006eca:	2a00      	cmp	r2, #0
 8006ecc:	d03e      	beq.n	8006f4c <_strtod_l+0xc4>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8006ed2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006ed4:	7833      	ldrb	r3, [r6, #0]
 8006ed6:	2b30      	cmp	r3, #48	; 0x30
 8006ed8:	f040 80b0 	bne.w	800703c <_strtod_l+0x1b4>
 8006edc:	7873      	ldrb	r3, [r6, #1]
 8006ede:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ee2:	2b58      	cmp	r3, #88	; 0x58
 8006ee4:	d168      	bne.n	8006fb8 <_strtod_l+0x130>
 8006ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	ab18      	add	r3, sp, #96	; 0x60
 8006eec:	9702      	str	r7, [sp, #8]
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	4a8d      	ldr	r2, [pc, #564]	; (8007128 <_strtod_l+0x2a0>)
 8006ef2:	ab19      	add	r3, sp, #100	; 0x64
 8006ef4:	a917      	add	r1, sp, #92	; 0x5c
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	f001 fd46 	bl	8008988 <__gethex>
 8006efc:	f010 0707 	ands.w	r7, r0, #7
 8006f00:	4605      	mov	r5, r0
 8006f02:	d005      	beq.n	8006f10 <_strtod_l+0x88>
 8006f04:	2f06      	cmp	r7, #6
 8006f06:	d12c      	bne.n	8006f62 <_strtod_l+0xda>
 8006f08:	3601      	adds	r6, #1
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	9617      	str	r6, [sp, #92]	; 0x5c
 8006f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8006f10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f040 8590 	bne.w	8007a38 <_strtod_l+0xbb0>
 8006f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f1a:	b1eb      	cbz	r3, 8006f58 <_strtod_l+0xd0>
 8006f1c:	4652      	mov	r2, sl
 8006f1e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f22:	ec43 2b10 	vmov	d0, r2, r3
 8006f26:	b01d      	add	sp, #116	; 0x74
 8006f28:	ecbd 8b02 	vpop	{d8}
 8006f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f30:	2a20      	cmp	r2, #32
 8006f32:	d1cc      	bne.n	8006ece <_strtod_l+0x46>
 8006f34:	3301      	adds	r3, #1
 8006f36:	9317      	str	r3, [sp, #92]	; 0x5c
 8006f38:	e7be      	b.n	8006eb8 <_strtod_l+0x30>
 8006f3a:	2a2d      	cmp	r2, #45	; 0x2d
 8006f3c:	d1c7      	bne.n	8006ece <_strtod_l+0x46>
 8006f3e:	2201      	movs	r2, #1
 8006f40:	920a      	str	r2, [sp, #40]	; 0x28
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f46:	785b      	ldrb	r3, [r3, #1]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1c2      	bne.n	8006ed2 <_strtod_l+0x4a>
 8006f4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f4e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f040 856e 	bne.w	8007a34 <_strtod_l+0xbac>
 8006f58:	4652      	mov	r2, sl
 8006f5a:	465b      	mov	r3, fp
 8006f5c:	e7e1      	b.n	8006f22 <_strtod_l+0x9a>
 8006f5e:	2200      	movs	r2, #0
 8006f60:	e7ee      	b.n	8006f40 <_strtod_l+0xb8>
 8006f62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006f64:	b13a      	cbz	r2, 8006f76 <_strtod_l+0xee>
 8006f66:	2135      	movs	r1, #53	; 0x35
 8006f68:	a81a      	add	r0, sp, #104	; 0x68
 8006f6a:	f002 fcbe 	bl	80098ea <__copybits>
 8006f6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f70:	4620      	mov	r0, r4
 8006f72:	f002 f87d 	bl	8009070 <_Bfree>
 8006f76:	3f01      	subs	r7, #1
 8006f78:	2f04      	cmp	r7, #4
 8006f7a:	d806      	bhi.n	8006f8a <_strtod_l+0x102>
 8006f7c:	e8df f007 	tbb	[pc, r7]
 8006f80:	1714030a 	.word	0x1714030a
 8006f84:	0a          	.byte	0x0a
 8006f85:	00          	.byte	0x00
 8006f86:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006f8a:	0728      	lsls	r0, r5, #28
 8006f8c:	d5c0      	bpl.n	8006f10 <_strtod_l+0x88>
 8006f8e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006f92:	e7bd      	b.n	8006f10 <_strtod_l+0x88>
 8006f94:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006f98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006fa2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006fa6:	e7f0      	b.n	8006f8a <_strtod_l+0x102>
 8006fa8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800712c <_strtod_l+0x2a4>
 8006fac:	e7ed      	b.n	8006f8a <_strtod_l+0x102>
 8006fae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006fb2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006fb6:	e7e8      	b.n	8006f8a <_strtod_l+0x102>
 8006fb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006fbe:	785b      	ldrb	r3, [r3, #1]
 8006fc0:	2b30      	cmp	r3, #48	; 0x30
 8006fc2:	d0f9      	beq.n	8006fb8 <_strtod_l+0x130>
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0a3      	beq.n	8006f10 <_strtod_l+0x88>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	f04f 0900 	mov.w	r9, #0
 8006fce:	9304      	str	r3, [sp, #16]
 8006fd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fd2:	9308      	str	r3, [sp, #32]
 8006fd4:	f8cd 901c 	str.w	r9, [sp, #28]
 8006fd8:	464f      	mov	r7, r9
 8006fda:	220a      	movs	r2, #10
 8006fdc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006fde:	7806      	ldrb	r6, [r0, #0]
 8006fe0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006fe4:	b2d9      	uxtb	r1, r3
 8006fe6:	2909      	cmp	r1, #9
 8006fe8:	d92a      	bls.n	8007040 <_strtod_l+0x1b8>
 8006fea:	9905      	ldr	r1, [sp, #20]
 8006fec:	462a      	mov	r2, r5
 8006fee:	f003 f887 	bl	800a100 <strncmp>
 8006ff2:	b398      	cbz	r0, 800705c <_strtod_l+0x1d4>
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	4632      	mov	r2, r6
 8006ff8:	463d      	mov	r5, r7
 8006ffa:	9005      	str	r0, [sp, #20]
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2a65      	cmp	r2, #101	; 0x65
 8007000:	d001      	beq.n	8007006 <_strtod_l+0x17e>
 8007002:	2a45      	cmp	r2, #69	; 0x45
 8007004:	d118      	bne.n	8007038 <_strtod_l+0x1b0>
 8007006:	b91d      	cbnz	r5, 8007010 <_strtod_l+0x188>
 8007008:	9a04      	ldr	r2, [sp, #16]
 800700a:	4302      	orrs	r2, r0
 800700c:	d09e      	beq.n	8006f4c <_strtod_l+0xc4>
 800700e:	2500      	movs	r5, #0
 8007010:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007014:	f108 0201 	add.w	r2, r8, #1
 8007018:	9217      	str	r2, [sp, #92]	; 0x5c
 800701a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800701e:	2a2b      	cmp	r2, #43	; 0x2b
 8007020:	d075      	beq.n	800710e <_strtod_l+0x286>
 8007022:	2a2d      	cmp	r2, #45	; 0x2d
 8007024:	d07b      	beq.n	800711e <_strtod_l+0x296>
 8007026:	f04f 0c00 	mov.w	ip, #0
 800702a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800702e:	2909      	cmp	r1, #9
 8007030:	f240 8082 	bls.w	8007138 <_strtod_l+0x2b0>
 8007034:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007038:	2600      	movs	r6, #0
 800703a:	e09d      	b.n	8007178 <_strtod_l+0x2f0>
 800703c:	2300      	movs	r3, #0
 800703e:	e7c4      	b.n	8006fca <_strtod_l+0x142>
 8007040:	2f08      	cmp	r7, #8
 8007042:	bfd8      	it	le
 8007044:	9907      	ldrle	r1, [sp, #28]
 8007046:	f100 0001 	add.w	r0, r0, #1
 800704a:	bfda      	itte	le
 800704c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007050:	9307      	strle	r3, [sp, #28]
 8007052:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007056:	3701      	adds	r7, #1
 8007058:	9017      	str	r0, [sp, #92]	; 0x5c
 800705a:	e7bf      	b.n	8006fdc <_strtod_l+0x154>
 800705c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800705e:	195a      	adds	r2, r3, r5
 8007060:	9217      	str	r2, [sp, #92]	; 0x5c
 8007062:	5d5a      	ldrb	r2, [r3, r5]
 8007064:	2f00      	cmp	r7, #0
 8007066:	d037      	beq.n	80070d8 <_strtod_l+0x250>
 8007068:	9005      	str	r0, [sp, #20]
 800706a:	463d      	mov	r5, r7
 800706c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007070:	2b09      	cmp	r3, #9
 8007072:	d912      	bls.n	800709a <_strtod_l+0x212>
 8007074:	2301      	movs	r3, #1
 8007076:	e7c2      	b.n	8006ffe <_strtod_l+0x176>
 8007078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	9217      	str	r2, [sp, #92]	; 0x5c
 800707e:	785a      	ldrb	r2, [r3, #1]
 8007080:	3001      	adds	r0, #1
 8007082:	2a30      	cmp	r2, #48	; 0x30
 8007084:	d0f8      	beq.n	8007078 <_strtod_l+0x1f0>
 8007086:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800708a:	2b08      	cmp	r3, #8
 800708c:	f200 84d9 	bhi.w	8007a42 <_strtod_l+0xbba>
 8007090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007092:	9005      	str	r0, [sp, #20]
 8007094:	2000      	movs	r0, #0
 8007096:	9308      	str	r3, [sp, #32]
 8007098:	4605      	mov	r5, r0
 800709a:	3a30      	subs	r2, #48	; 0x30
 800709c:	f100 0301 	add.w	r3, r0, #1
 80070a0:	d014      	beq.n	80070cc <_strtod_l+0x244>
 80070a2:	9905      	ldr	r1, [sp, #20]
 80070a4:	4419      	add	r1, r3
 80070a6:	9105      	str	r1, [sp, #20]
 80070a8:	462b      	mov	r3, r5
 80070aa:	eb00 0e05 	add.w	lr, r0, r5
 80070ae:	210a      	movs	r1, #10
 80070b0:	4573      	cmp	r3, lr
 80070b2:	d113      	bne.n	80070dc <_strtod_l+0x254>
 80070b4:	182b      	adds	r3, r5, r0
 80070b6:	2b08      	cmp	r3, #8
 80070b8:	f105 0501 	add.w	r5, r5, #1
 80070bc:	4405      	add	r5, r0
 80070be:	dc1c      	bgt.n	80070fa <_strtod_l+0x272>
 80070c0:	9907      	ldr	r1, [sp, #28]
 80070c2:	230a      	movs	r3, #10
 80070c4:	fb03 2301 	mla	r3, r3, r1, r2
 80070c8:	9307      	str	r3, [sp, #28]
 80070ca:	2300      	movs	r3, #0
 80070cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070ce:	1c51      	adds	r1, r2, #1
 80070d0:	9117      	str	r1, [sp, #92]	; 0x5c
 80070d2:	7852      	ldrb	r2, [r2, #1]
 80070d4:	4618      	mov	r0, r3
 80070d6:	e7c9      	b.n	800706c <_strtod_l+0x1e4>
 80070d8:	4638      	mov	r0, r7
 80070da:	e7d2      	b.n	8007082 <_strtod_l+0x1fa>
 80070dc:	2b08      	cmp	r3, #8
 80070de:	dc04      	bgt.n	80070ea <_strtod_l+0x262>
 80070e0:	9e07      	ldr	r6, [sp, #28]
 80070e2:	434e      	muls	r6, r1
 80070e4:	9607      	str	r6, [sp, #28]
 80070e6:	3301      	adds	r3, #1
 80070e8:	e7e2      	b.n	80070b0 <_strtod_l+0x228>
 80070ea:	f103 0c01 	add.w	ip, r3, #1
 80070ee:	f1bc 0f10 	cmp.w	ip, #16
 80070f2:	bfd8      	it	le
 80070f4:	fb01 f909 	mulle.w	r9, r1, r9
 80070f8:	e7f5      	b.n	80070e6 <_strtod_l+0x25e>
 80070fa:	2d10      	cmp	r5, #16
 80070fc:	bfdc      	itt	le
 80070fe:	230a      	movle	r3, #10
 8007100:	fb03 2909 	mlale	r9, r3, r9, r2
 8007104:	e7e1      	b.n	80070ca <_strtod_l+0x242>
 8007106:	2300      	movs	r3, #0
 8007108:	9305      	str	r3, [sp, #20]
 800710a:	2301      	movs	r3, #1
 800710c:	e77c      	b.n	8007008 <_strtod_l+0x180>
 800710e:	f04f 0c00 	mov.w	ip, #0
 8007112:	f108 0202 	add.w	r2, r8, #2
 8007116:	9217      	str	r2, [sp, #92]	; 0x5c
 8007118:	f898 2002 	ldrb.w	r2, [r8, #2]
 800711c:	e785      	b.n	800702a <_strtod_l+0x1a2>
 800711e:	f04f 0c01 	mov.w	ip, #1
 8007122:	e7f6      	b.n	8007112 <_strtod_l+0x28a>
 8007124:	0800ae30 	.word	0x0800ae30
 8007128:	0800ac4c 	.word	0x0800ac4c
 800712c:	7ff00000 	.word	0x7ff00000
 8007130:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007132:	1c51      	adds	r1, r2, #1
 8007134:	9117      	str	r1, [sp, #92]	; 0x5c
 8007136:	7852      	ldrb	r2, [r2, #1]
 8007138:	2a30      	cmp	r2, #48	; 0x30
 800713a:	d0f9      	beq.n	8007130 <_strtod_l+0x2a8>
 800713c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007140:	2908      	cmp	r1, #8
 8007142:	f63f af79 	bhi.w	8007038 <_strtod_l+0x1b0>
 8007146:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800714a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800714c:	9206      	str	r2, [sp, #24]
 800714e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007150:	1c51      	adds	r1, r2, #1
 8007152:	9117      	str	r1, [sp, #92]	; 0x5c
 8007154:	7852      	ldrb	r2, [r2, #1]
 8007156:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800715a:	2e09      	cmp	r6, #9
 800715c:	d937      	bls.n	80071ce <_strtod_l+0x346>
 800715e:	9e06      	ldr	r6, [sp, #24]
 8007160:	1b89      	subs	r1, r1, r6
 8007162:	2908      	cmp	r1, #8
 8007164:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007168:	dc02      	bgt.n	8007170 <_strtod_l+0x2e8>
 800716a:	4576      	cmp	r6, lr
 800716c:	bfa8      	it	ge
 800716e:	4676      	movge	r6, lr
 8007170:	f1bc 0f00 	cmp.w	ip, #0
 8007174:	d000      	beq.n	8007178 <_strtod_l+0x2f0>
 8007176:	4276      	negs	r6, r6
 8007178:	2d00      	cmp	r5, #0
 800717a:	d14d      	bne.n	8007218 <_strtod_l+0x390>
 800717c:	9904      	ldr	r1, [sp, #16]
 800717e:	4301      	orrs	r1, r0
 8007180:	f47f aec6 	bne.w	8006f10 <_strtod_l+0x88>
 8007184:	2b00      	cmp	r3, #0
 8007186:	f47f aee1 	bne.w	8006f4c <_strtod_l+0xc4>
 800718a:	2a69      	cmp	r2, #105	; 0x69
 800718c:	d027      	beq.n	80071de <_strtod_l+0x356>
 800718e:	dc24      	bgt.n	80071da <_strtod_l+0x352>
 8007190:	2a49      	cmp	r2, #73	; 0x49
 8007192:	d024      	beq.n	80071de <_strtod_l+0x356>
 8007194:	2a4e      	cmp	r2, #78	; 0x4e
 8007196:	f47f aed9 	bne.w	8006f4c <_strtod_l+0xc4>
 800719a:	499f      	ldr	r1, [pc, #636]	; (8007418 <_strtod_l+0x590>)
 800719c:	a817      	add	r0, sp, #92	; 0x5c
 800719e:	f001 fe4b 	bl	8008e38 <__match>
 80071a2:	2800      	cmp	r0, #0
 80071a4:	f43f aed2 	beq.w	8006f4c <_strtod_l+0xc4>
 80071a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	2b28      	cmp	r3, #40	; 0x28
 80071ae:	d12d      	bne.n	800720c <_strtod_l+0x384>
 80071b0:	499a      	ldr	r1, [pc, #616]	; (800741c <_strtod_l+0x594>)
 80071b2:	aa1a      	add	r2, sp, #104	; 0x68
 80071b4:	a817      	add	r0, sp, #92	; 0x5c
 80071b6:	f001 fe53 	bl	8008e60 <__hexnan>
 80071ba:	2805      	cmp	r0, #5
 80071bc:	d126      	bne.n	800720c <_strtod_l+0x384>
 80071be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071c0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80071c4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80071c8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80071cc:	e6a0      	b.n	8006f10 <_strtod_l+0x88>
 80071ce:	210a      	movs	r1, #10
 80071d0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80071d4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80071d8:	e7b9      	b.n	800714e <_strtod_l+0x2c6>
 80071da:	2a6e      	cmp	r2, #110	; 0x6e
 80071dc:	e7db      	b.n	8007196 <_strtod_l+0x30e>
 80071de:	4990      	ldr	r1, [pc, #576]	; (8007420 <_strtod_l+0x598>)
 80071e0:	a817      	add	r0, sp, #92	; 0x5c
 80071e2:	f001 fe29 	bl	8008e38 <__match>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	f43f aeb0 	beq.w	8006f4c <_strtod_l+0xc4>
 80071ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071ee:	498d      	ldr	r1, [pc, #564]	; (8007424 <_strtod_l+0x59c>)
 80071f0:	3b01      	subs	r3, #1
 80071f2:	a817      	add	r0, sp, #92	; 0x5c
 80071f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80071f6:	f001 fe1f 	bl	8008e38 <__match>
 80071fa:	b910      	cbnz	r0, 8007202 <_strtod_l+0x37a>
 80071fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071fe:	3301      	adds	r3, #1
 8007200:	9317      	str	r3, [sp, #92]	; 0x5c
 8007202:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007434 <_strtod_l+0x5ac>
 8007206:	f04f 0a00 	mov.w	sl, #0
 800720a:	e681      	b.n	8006f10 <_strtod_l+0x88>
 800720c:	4886      	ldr	r0, [pc, #536]	; (8007428 <_strtod_l+0x5a0>)
 800720e:	f002 ff5f 	bl	800a0d0 <nan>
 8007212:	ec5b ab10 	vmov	sl, fp, d0
 8007216:	e67b      	b.n	8006f10 <_strtod_l+0x88>
 8007218:	9b05      	ldr	r3, [sp, #20]
 800721a:	9807      	ldr	r0, [sp, #28]
 800721c:	1af3      	subs	r3, r6, r3
 800721e:	2f00      	cmp	r7, #0
 8007220:	bf08      	it	eq
 8007222:	462f      	moveq	r7, r5
 8007224:	2d10      	cmp	r5, #16
 8007226:	9306      	str	r3, [sp, #24]
 8007228:	46a8      	mov	r8, r5
 800722a:	bfa8      	it	ge
 800722c:	f04f 0810 	movge.w	r8, #16
 8007230:	f7f9 f998 	bl	8000564 <__aeabi_ui2d>
 8007234:	2d09      	cmp	r5, #9
 8007236:	4682      	mov	sl, r0
 8007238:	468b      	mov	fp, r1
 800723a:	dd13      	ble.n	8007264 <_strtod_l+0x3dc>
 800723c:	4b7b      	ldr	r3, [pc, #492]	; (800742c <_strtod_l+0x5a4>)
 800723e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007242:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007246:	f7f9 fa07 	bl	8000658 <__aeabi_dmul>
 800724a:	4682      	mov	sl, r0
 800724c:	4648      	mov	r0, r9
 800724e:	468b      	mov	fp, r1
 8007250:	f7f9 f988 	bl	8000564 <__aeabi_ui2d>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4650      	mov	r0, sl
 800725a:	4659      	mov	r1, fp
 800725c:	f7f9 f846 	bl	80002ec <__adddf3>
 8007260:	4682      	mov	sl, r0
 8007262:	468b      	mov	fp, r1
 8007264:	2d0f      	cmp	r5, #15
 8007266:	dc38      	bgt.n	80072da <_strtod_l+0x452>
 8007268:	9b06      	ldr	r3, [sp, #24]
 800726a:	2b00      	cmp	r3, #0
 800726c:	f43f ae50 	beq.w	8006f10 <_strtod_l+0x88>
 8007270:	dd24      	ble.n	80072bc <_strtod_l+0x434>
 8007272:	2b16      	cmp	r3, #22
 8007274:	dc0b      	bgt.n	800728e <_strtod_l+0x406>
 8007276:	496d      	ldr	r1, [pc, #436]	; (800742c <_strtod_l+0x5a4>)
 8007278:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800727c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007280:	4652      	mov	r2, sl
 8007282:	465b      	mov	r3, fp
 8007284:	f7f9 f9e8 	bl	8000658 <__aeabi_dmul>
 8007288:	4682      	mov	sl, r0
 800728a:	468b      	mov	fp, r1
 800728c:	e640      	b.n	8006f10 <_strtod_l+0x88>
 800728e:	9a06      	ldr	r2, [sp, #24]
 8007290:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007294:	4293      	cmp	r3, r2
 8007296:	db20      	blt.n	80072da <_strtod_l+0x452>
 8007298:	4c64      	ldr	r4, [pc, #400]	; (800742c <_strtod_l+0x5a4>)
 800729a:	f1c5 050f 	rsb	r5, r5, #15
 800729e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80072a2:	4652      	mov	r2, sl
 80072a4:	465b      	mov	r3, fp
 80072a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072aa:	f7f9 f9d5 	bl	8000658 <__aeabi_dmul>
 80072ae:	9b06      	ldr	r3, [sp, #24]
 80072b0:	1b5d      	subs	r5, r3, r5
 80072b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80072b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80072ba:	e7e3      	b.n	8007284 <_strtod_l+0x3fc>
 80072bc:	9b06      	ldr	r3, [sp, #24]
 80072be:	3316      	adds	r3, #22
 80072c0:	db0b      	blt.n	80072da <_strtod_l+0x452>
 80072c2:	9b05      	ldr	r3, [sp, #20]
 80072c4:	1b9e      	subs	r6, r3, r6
 80072c6:	4b59      	ldr	r3, [pc, #356]	; (800742c <_strtod_l+0x5a4>)
 80072c8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80072cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072d0:	4650      	mov	r0, sl
 80072d2:	4659      	mov	r1, fp
 80072d4:	f7f9 faea 	bl	80008ac <__aeabi_ddiv>
 80072d8:	e7d6      	b.n	8007288 <_strtod_l+0x400>
 80072da:	9b06      	ldr	r3, [sp, #24]
 80072dc:	eba5 0808 	sub.w	r8, r5, r8
 80072e0:	4498      	add	r8, r3
 80072e2:	f1b8 0f00 	cmp.w	r8, #0
 80072e6:	dd74      	ble.n	80073d2 <_strtod_l+0x54a>
 80072e8:	f018 030f 	ands.w	r3, r8, #15
 80072ec:	d00a      	beq.n	8007304 <_strtod_l+0x47c>
 80072ee:	494f      	ldr	r1, [pc, #316]	; (800742c <_strtod_l+0x5a4>)
 80072f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80072f4:	4652      	mov	r2, sl
 80072f6:	465b      	mov	r3, fp
 80072f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072fc:	f7f9 f9ac 	bl	8000658 <__aeabi_dmul>
 8007300:	4682      	mov	sl, r0
 8007302:	468b      	mov	fp, r1
 8007304:	f038 080f 	bics.w	r8, r8, #15
 8007308:	d04f      	beq.n	80073aa <_strtod_l+0x522>
 800730a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800730e:	dd22      	ble.n	8007356 <_strtod_l+0x4ce>
 8007310:	2500      	movs	r5, #0
 8007312:	462e      	mov	r6, r5
 8007314:	9507      	str	r5, [sp, #28]
 8007316:	9505      	str	r5, [sp, #20]
 8007318:	2322      	movs	r3, #34	; 0x22
 800731a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007434 <_strtod_l+0x5ac>
 800731e:	6023      	str	r3, [r4, #0]
 8007320:	f04f 0a00 	mov.w	sl, #0
 8007324:	9b07      	ldr	r3, [sp, #28]
 8007326:	2b00      	cmp	r3, #0
 8007328:	f43f adf2 	beq.w	8006f10 <_strtod_l+0x88>
 800732c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800732e:	4620      	mov	r0, r4
 8007330:	f001 fe9e 	bl	8009070 <_Bfree>
 8007334:	9905      	ldr	r1, [sp, #20]
 8007336:	4620      	mov	r0, r4
 8007338:	f001 fe9a 	bl	8009070 <_Bfree>
 800733c:	4631      	mov	r1, r6
 800733e:	4620      	mov	r0, r4
 8007340:	f001 fe96 	bl	8009070 <_Bfree>
 8007344:	9907      	ldr	r1, [sp, #28]
 8007346:	4620      	mov	r0, r4
 8007348:	f001 fe92 	bl	8009070 <_Bfree>
 800734c:	4629      	mov	r1, r5
 800734e:	4620      	mov	r0, r4
 8007350:	f001 fe8e 	bl	8009070 <_Bfree>
 8007354:	e5dc      	b.n	8006f10 <_strtod_l+0x88>
 8007356:	4b36      	ldr	r3, [pc, #216]	; (8007430 <_strtod_l+0x5a8>)
 8007358:	9304      	str	r3, [sp, #16]
 800735a:	2300      	movs	r3, #0
 800735c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007360:	4650      	mov	r0, sl
 8007362:	4659      	mov	r1, fp
 8007364:	4699      	mov	r9, r3
 8007366:	f1b8 0f01 	cmp.w	r8, #1
 800736a:	dc21      	bgt.n	80073b0 <_strtod_l+0x528>
 800736c:	b10b      	cbz	r3, 8007372 <_strtod_l+0x4ea>
 800736e:	4682      	mov	sl, r0
 8007370:	468b      	mov	fp, r1
 8007372:	4b2f      	ldr	r3, [pc, #188]	; (8007430 <_strtod_l+0x5a8>)
 8007374:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007378:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800737c:	4652      	mov	r2, sl
 800737e:	465b      	mov	r3, fp
 8007380:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007384:	f7f9 f968 	bl	8000658 <__aeabi_dmul>
 8007388:	4b2a      	ldr	r3, [pc, #168]	; (8007434 <_strtod_l+0x5ac>)
 800738a:	460a      	mov	r2, r1
 800738c:	400b      	ands	r3, r1
 800738e:	492a      	ldr	r1, [pc, #168]	; (8007438 <_strtod_l+0x5b0>)
 8007390:	428b      	cmp	r3, r1
 8007392:	4682      	mov	sl, r0
 8007394:	d8bc      	bhi.n	8007310 <_strtod_l+0x488>
 8007396:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800739a:	428b      	cmp	r3, r1
 800739c:	bf86      	itte	hi
 800739e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800743c <_strtod_l+0x5b4>
 80073a2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80073a6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80073aa:	2300      	movs	r3, #0
 80073ac:	9304      	str	r3, [sp, #16]
 80073ae:	e084      	b.n	80074ba <_strtod_l+0x632>
 80073b0:	f018 0f01 	tst.w	r8, #1
 80073b4:	d005      	beq.n	80073c2 <_strtod_l+0x53a>
 80073b6:	9b04      	ldr	r3, [sp, #16]
 80073b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073bc:	f7f9 f94c 	bl	8000658 <__aeabi_dmul>
 80073c0:	2301      	movs	r3, #1
 80073c2:	9a04      	ldr	r2, [sp, #16]
 80073c4:	3208      	adds	r2, #8
 80073c6:	f109 0901 	add.w	r9, r9, #1
 80073ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80073ce:	9204      	str	r2, [sp, #16]
 80073d0:	e7c9      	b.n	8007366 <_strtod_l+0x4de>
 80073d2:	d0ea      	beq.n	80073aa <_strtod_l+0x522>
 80073d4:	f1c8 0800 	rsb	r8, r8, #0
 80073d8:	f018 020f 	ands.w	r2, r8, #15
 80073dc:	d00a      	beq.n	80073f4 <_strtod_l+0x56c>
 80073de:	4b13      	ldr	r3, [pc, #76]	; (800742c <_strtod_l+0x5a4>)
 80073e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073e4:	4650      	mov	r0, sl
 80073e6:	4659      	mov	r1, fp
 80073e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ec:	f7f9 fa5e 	bl	80008ac <__aeabi_ddiv>
 80073f0:	4682      	mov	sl, r0
 80073f2:	468b      	mov	fp, r1
 80073f4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80073f8:	d0d7      	beq.n	80073aa <_strtod_l+0x522>
 80073fa:	f1b8 0f1f 	cmp.w	r8, #31
 80073fe:	dd1f      	ble.n	8007440 <_strtod_l+0x5b8>
 8007400:	2500      	movs	r5, #0
 8007402:	462e      	mov	r6, r5
 8007404:	9507      	str	r5, [sp, #28]
 8007406:	9505      	str	r5, [sp, #20]
 8007408:	2322      	movs	r3, #34	; 0x22
 800740a:	f04f 0a00 	mov.w	sl, #0
 800740e:	f04f 0b00 	mov.w	fp, #0
 8007412:	6023      	str	r3, [r4, #0]
 8007414:	e786      	b.n	8007324 <_strtod_l+0x49c>
 8007416:	bf00      	nop
 8007418:	0800ac25 	.word	0x0800ac25
 800741c:	0800ac60 	.word	0x0800ac60
 8007420:	0800ac1d 	.word	0x0800ac1d
 8007424:	0800ad53 	.word	0x0800ad53
 8007428:	0800ad4f 	.word	0x0800ad4f
 800742c:	0800aec8 	.word	0x0800aec8
 8007430:	0800aea0 	.word	0x0800aea0
 8007434:	7ff00000 	.word	0x7ff00000
 8007438:	7ca00000 	.word	0x7ca00000
 800743c:	7fefffff 	.word	0x7fefffff
 8007440:	f018 0310 	ands.w	r3, r8, #16
 8007444:	bf18      	it	ne
 8007446:	236a      	movne	r3, #106	; 0x6a
 8007448:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80077f8 <_strtod_l+0x970>
 800744c:	9304      	str	r3, [sp, #16]
 800744e:	4650      	mov	r0, sl
 8007450:	4659      	mov	r1, fp
 8007452:	2300      	movs	r3, #0
 8007454:	f018 0f01 	tst.w	r8, #1
 8007458:	d004      	beq.n	8007464 <_strtod_l+0x5dc>
 800745a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800745e:	f7f9 f8fb 	bl	8000658 <__aeabi_dmul>
 8007462:	2301      	movs	r3, #1
 8007464:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007468:	f109 0908 	add.w	r9, r9, #8
 800746c:	d1f2      	bne.n	8007454 <_strtod_l+0x5cc>
 800746e:	b10b      	cbz	r3, 8007474 <_strtod_l+0x5ec>
 8007470:	4682      	mov	sl, r0
 8007472:	468b      	mov	fp, r1
 8007474:	9b04      	ldr	r3, [sp, #16]
 8007476:	b1c3      	cbz	r3, 80074aa <_strtod_l+0x622>
 8007478:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800747c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007480:	2b00      	cmp	r3, #0
 8007482:	4659      	mov	r1, fp
 8007484:	dd11      	ble.n	80074aa <_strtod_l+0x622>
 8007486:	2b1f      	cmp	r3, #31
 8007488:	f340 8124 	ble.w	80076d4 <_strtod_l+0x84c>
 800748c:	2b34      	cmp	r3, #52	; 0x34
 800748e:	bfde      	ittt	le
 8007490:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007494:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007498:	fa03 f202 	lslle.w	r2, r3, r2
 800749c:	f04f 0a00 	mov.w	sl, #0
 80074a0:	bfcc      	ite	gt
 80074a2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80074a6:	ea02 0b01 	andle.w	fp, r2, r1
 80074aa:	2200      	movs	r2, #0
 80074ac:	2300      	movs	r3, #0
 80074ae:	4650      	mov	r0, sl
 80074b0:	4659      	mov	r1, fp
 80074b2:	f7f9 fb39 	bl	8000b28 <__aeabi_dcmpeq>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d1a2      	bne.n	8007400 <_strtod_l+0x578>
 80074ba:	9b07      	ldr	r3, [sp, #28]
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	9908      	ldr	r1, [sp, #32]
 80074c0:	462b      	mov	r3, r5
 80074c2:	463a      	mov	r2, r7
 80074c4:	4620      	mov	r0, r4
 80074c6:	f001 fe3b 	bl	8009140 <__s2b>
 80074ca:	9007      	str	r0, [sp, #28]
 80074cc:	2800      	cmp	r0, #0
 80074ce:	f43f af1f 	beq.w	8007310 <_strtod_l+0x488>
 80074d2:	9b05      	ldr	r3, [sp, #20]
 80074d4:	1b9e      	subs	r6, r3, r6
 80074d6:	9b06      	ldr	r3, [sp, #24]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	bfb4      	ite	lt
 80074dc:	4633      	movlt	r3, r6
 80074de:	2300      	movge	r3, #0
 80074e0:	930c      	str	r3, [sp, #48]	; 0x30
 80074e2:	9b06      	ldr	r3, [sp, #24]
 80074e4:	2500      	movs	r5, #0
 80074e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80074ea:	9312      	str	r3, [sp, #72]	; 0x48
 80074ec:	462e      	mov	r6, r5
 80074ee:	9b07      	ldr	r3, [sp, #28]
 80074f0:	4620      	mov	r0, r4
 80074f2:	6859      	ldr	r1, [r3, #4]
 80074f4:	f001 fd7c 	bl	8008ff0 <_Balloc>
 80074f8:	9005      	str	r0, [sp, #20]
 80074fa:	2800      	cmp	r0, #0
 80074fc:	f43f af0c 	beq.w	8007318 <_strtod_l+0x490>
 8007500:	9b07      	ldr	r3, [sp, #28]
 8007502:	691a      	ldr	r2, [r3, #16]
 8007504:	3202      	adds	r2, #2
 8007506:	f103 010c 	add.w	r1, r3, #12
 800750a:	0092      	lsls	r2, r2, #2
 800750c:	300c      	adds	r0, #12
 800750e:	f001 fd61 	bl	8008fd4 <memcpy>
 8007512:	ec4b ab10 	vmov	d0, sl, fp
 8007516:	aa1a      	add	r2, sp, #104	; 0x68
 8007518:	a919      	add	r1, sp, #100	; 0x64
 800751a:	4620      	mov	r0, r4
 800751c:	f002 f956 	bl	80097cc <__d2b>
 8007520:	ec4b ab18 	vmov	d8, sl, fp
 8007524:	9018      	str	r0, [sp, #96]	; 0x60
 8007526:	2800      	cmp	r0, #0
 8007528:	f43f aef6 	beq.w	8007318 <_strtod_l+0x490>
 800752c:	2101      	movs	r1, #1
 800752e:	4620      	mov	r0, r4
 8007530:	f001 fea0 	bl	8009274 <__i2b>
 8007534:	4606      	mov	r6, r0
 8007536:	2800      	cmp	r0, #0
 8007538:	f43f aeee 	beq.w	8007318 <_strtod_l+0x490>
 800753c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800753e:	9904      	ldr	r1, [sp, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	bfab      	itete	ge
 8007544:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007546:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007548:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800754a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800754e:	bfac      	ite	ge
 8007550:	eb03 0902 	addge.w	r9, r3, r2
 8007554:	1ad7      	sublt	r7, r2, r3
 8007556:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007558:	eba3 0801 	sub.w	r8, r3, r1
 800755c:	4490      	add	r8, r2
 800755e:	4ba1      	ldr	r3, [pc, #644]	; (80077e4 <_strtod_l+0x95c>)
 8007560:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007564:	4598      	cmp	r8, r3
 8007566:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800756a:	f280 80c7 	bge.w	80076fc <_strtod_l+0x874>
 800756e:	eba3 0308 	sub.w	r3, r3, r8
 8007572:	2b1f      	cmp	r3, #31
 8007574:	eba2 0203 	sub.w	r2, r2, r3
 8007578:	f04f 0101 	mov.w	r1, #1
 800757c:	f300 80b1 	bgt.w	80076e2 <_strtod_l+0x85a>
 8007580:	fa01 f303 	lsl.w	r3, r1, r3
 8007584:	930d      	str	r3, [sp, #52]	; 0x34
 8007586:	2300      	movs	r3, #0
 8007588:	9308      	str	r3, [sp, #32]
 800758a:	eb09 0802 	add.w	r8, r9, r2
 800758e:	9b04      	ldr	r3, [sp, #16]
 8007590:	45c1      	cmp	r9, r8
 8007592:	4417      	add	r7, r2
 8007594:	441f      	add	r7, r3
 8007596:	464b      	mov	r3, r9
 8007598:	bfa8      	it	ge
 800759a:	4643      	movge	r3, r8
 800759c:	42bb      	cmp	r3, r7
 800759e:	bfa8      	it	ge
 80075a0:	463b      	movge	r3, r7
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	bfc2      	ittt	gt
 80075a6:	eba8 0803 	subgt.w	r8, r8, r3
 80075aa:	1aff      	subgt	r7, r7, r3
 80075ac:	eba9 0903 	subgt.w	r9, r9, r3
 80075b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	dd17      	ble.n	80075e6 <_strtod_l+0x75e>
 80075b6:	4631      	mov	r1, r6
 80075b8:	461a      	mov	r2, r3
 80075ba:	4620      	mov	r0, r4
 80075bc:	f001 ff1a 	bl	80093f4 <__pow5mult>
 80075c0:	4606      	mov	r6, r0
 80075c2:	2800      	cmp	r0, #0
 80075c4:	f43f aea8 	beq.w	8007318 <_strtod_l+0x490>
 80075c8:	4601      	mov	r1, r0
 80075ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80075cc:	4620      	mov	r0, r4
 80075ce:	f001 fe67 	bl	80092a0 <__multiply>
 80075d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80075d4:	2800      	cmp	r0, #0
 80075d6:	f43f ae9f 	beq.w	8007318 <_strtod_l+0x490>
 80075da:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075dc:	4620      	mov	r0, r4
 80075de:	f001 fd47 	bl	8009070 <_Bfree>
 80075e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075e4:	9318      	str	r3, [sp, #96]	; 0x60
 80075e6:	f1b8 0f00 	cmp.w	r8, #0
 80075ea:	f300 808c 	bgt.w	8007706 <_strtod_l+0x87e>
 80075ee:	9b06      	ldr	r3, [sp, #24]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	dd08      	ble.n	8007606 <_strtod_l+0x77e>
 80075f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075f6:	9905      	ldr	r1, [sp, #20]
 80075f8:	4620      	mov	r0, r4
 80075fa:	f001 fefb 	bl	80093f4 <__pow5mult>
 80075fe:	9005      	str	r0, [sp, #20]
 8007600:	2800      	cmp	r0, #0
 8007602:	f43f ae89 	beq.w	8007318 <_strtod_l+0x490>
 8007606:	2f00      	cmp	r7, #0
 8007608:	dd08      	ble.n	800761c <_strtod_l+0x794>
 800760a:	9905      	ldr	r1, [sp, #20]
 800760c:	463a      	mov	r2, r7
 800760e:	4620      	mov	r0, r4
 8007610:	f001 ff4a 	bl	80094a8 <__lshift>
 8007614:	9005      	str	r0, [sp, #20]
 8007616:	2800      	cmp	r0, #0
 8007618:	f43f ae7e 	beq.w	8007318 <_strtod_l+0x490>
 800761c:	f1b9 0f00 	cmp.w	r9, #0
 8007620:	dd08      	ble.n	8007634 <_strtod_l+0x7ac>
 8007622:	4631      	mov	r1, r6
 8007624:	464a      	mov	r2, r9
 8007626:	4620      	mov	r0, r4
 8007628:	f001 ff3e 	bl	80094a8 <__lshift>
 800762c:	4606      	mov	r6, r0
 800762e:	2800      	cmp	r0, #0
 8007630:	f43f ae72 	beq.w	8007318 <_strtod_l+0x490>
 8007634:	9a05      	ldr	r2, [sp, #20]
 8007636:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007638:	4620      	mov	r0, r4
 800763a:	f001 ffc1 	bl	80095c0 <__mdiff>
 800763e:	4605      	mov	r5, r0
 8007640:	2800      	cmp	r0, #0
 8007642:	f43f ae69 	beq.w	8007318 <_strtod_l+0x490>
 8007646:	68c3      	ldr	r3, [r0, #12]
 8007648:	930b      	str	r3, [sp, #44]	; 0x2c
 800764a:	2300      	movs	r3, #0
 800764c:	60c3      	str	r3, [r0, #12]
 800764e:	4631      	mov	r1, r6
 8007650:	f001 ff9a 	bl	8009588 <__mcmp>
 8007654:	2800      	cmp	r0, #0
 8007656:	da60      	bge.n	800771a <_strtod_l+0x892>
 8007658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800765a:	ea53 030a 	orrs.w	r3, r3, sl
 800765e:	f040 8082 	bne.w	8007766 <_strtod_l+0x8de>
 8007662:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007666:	2b00      	cmp	r3, #0
 8007668:	d17d      	bne.n	8007766 <_strtod_l+0x8de>
 800766a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800766e:	0d1b      	lsrs	r3, r3, #20
 8007670:	051b      	lsls	r3, r3, #20
 8007672:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007676:	d976      	bls.n	8007766 <_strtod_l+0x8de>
 8007678:	696b      	ldr	r3, [r5, #20]
 800767a:	b913      	cbnz	r3, 8007682 <_strtod_l+0x7fa>
 800767c:	692b      	ldr	r3, [r5, #16]
 800767e:	2b01      	cmp	r3, #1
 8007680:	dd71      	ble.n	8007766 <_strtod_l+0x8de>
 8007682:	4629      	mov	r1, r5
 8007684:	2201      	movs	r2, #1
 8007686:	4620      	mov	r0, r4
 8007688:	f001 ff0e 	bl	80094a8 <__lshift>
 800768c:	4631      	mov	r1, r6
 800768e:	4605      	mov	r5, r0
 8007690:	f001 ff7a 	bl	8009588 <__mcmp>
 8007694:	2800      	cmp	r0, #0
 8007696:	dd66      	ble.n	8007766 <_strtod_l+0x8de>
 8007698:	9904      	ldr	r1, [sp, #16]
 800769a:	4a53      	ldr	r2, [pc, #332]	; (80077e8 <_strtod_l+0x960>)
 800769c:	465b      	mov	r3, fp
 800769e:	2900      	cmp	r1, #0
 80076a0:	f000 8081 	beq.w	80077a6 <_strtod_l+0x91e>
 80076a4:	ea02 010b 	and.w	r1, r2, fp
 80076a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80076ac:	dc7b      	bgt.n	80077a6 <_strtod_l+0x91e>
 80076ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80076b2:	f77f aea9 	ble.w	8007408 <_strtod_l+0x580>
 80076b6:	4b4d      	ldr	r3, [pc, #308]	; (80077ec <_strtod_l+0x964>)
 80076b8:	4650      	mov	r0, sl
 80076ba:	4659      	mov	r1, fp
 80076bc:	2200      	movs	r2, #0
 80076be:	f7f8 ffcb 	bl	8000658 <__aeabi_dmul>
 80076c2:	460b      	mov	r3, r1
 80076c4:	4303      	orrs	r3, r0
 80076c6:	bf08      	it	eq
 80076c8:	2322      	moveq	r3, #34	; 0x22
 80076ca:	4682      	mov	sl, r0
 80076cc:	468b      	mov	fp, r1
 80076ce:	bf08      	it	eq
 80076d0:	6023      	streq	r3, [r4, #0]
 80076d2:	e62b      	b.n	800732c <_strtod_l+0x4a4>
 80076d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076d8:	fa02 f303 	lsl.w	r3, r2, r3
 80076dc:	ea03 0a0a 	and.w	sl, r3, sl
 80076e0:	e6e3      	b.n	80074aa <_strtod_l+0x622>
 80076e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80076e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80076ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80076ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80076f2:	fa01 f308 	lsl.w	r3, r1, r8
 80076f6:	9308      	str	r3, [sp, #32]
 80076f8:	910d      	str	r1, [sp, #52]	; 0x34
 80076fa:	e746      	b.n	800758a <_strtod_l+0x702>
 80076fc:	2300      	movs	r3, #0
 80076fe:	9308      	str	r3, [sp, #32]
 8007700:	2301      	movs	r3, #1
 8007702:	930d      	str	r3, [sp, #52]	; 0x34
 8007704:	e741      	b.n	800758a <_strtod_l+0x702>
 8007706:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007708:	4642      	mov	r2, r8
 800770a:	4620      	mov	r0, r4
 800770c:	f001 fecc 	bl	80094a8 <__lshift>
 8007710:	9018      	str	r0, [sp, #96]	; 0x60
 8007712:	2800      	cmp	r0, #0
 8007714:	f47f af6b 	bne.w	80075ee <_strtod_l+0x766>
 8007718:	e5fe      	b.n	8007318 <_strtod_l+0x490>
 800771a:	465f      	mov	r7, fp
 800771c:	d16e      	bne.n	80077fc <_strtod_l+0x974>
 800771e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007720:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007724:	b342      	cbz	r2, 8007778 <_strtod_l+0x8f0>
 8007726:	4a32      	ldr	r2, [pc, #200]	; (80077f0 <_strtod_l+0x968>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d128      	bne.n	800777e <_strtod_l+0x8f6>
 800772c:	9b04      	ldr	r3, [sp, #16]
 800772e:	4651      	mov	r1, sl
 8007730:	b1eb      	cbz	r3, 800776e <_strtod_l+0x8e6>
 8007732:	4b2d      	ldr	r3, [pc, #180]	; (80077e8 <_strtod_l+0x960>)
 8007734:	403b      	ands	r3, r7
 8007736:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800773a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800773e:	d819      	bhi.n	8007774 <_strtod_l+0x8ec>
 8007740:	0d1b      	lsrs	r3, r3, #20
 8007742:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007746:	fa02 f303 	lsl.w	r3, r2, r3
 800774a:	4299      	cmp	r1, r3
 800774c:	d117      	bne.n	800777e <_strtod_l+0x8f6>
 800774e:	4b29      	ldr	r3, [pc, #164]	; (80077f4 <_strtod_l+0x96c>)
 8007750:	429f      	cmp	r7, r3
 8007752:	d102      	bne.n	800775a <_strtod_l+0x8d2>
 8007754:	3101      	adds	r1, #1
 8007756:	f43f addf 	beq.w	8007318 <_strtod_l+0x490>
 800775a:	4b23      	ldr	r3, [pc, #140]	; (80077e8 <_strtod_l+0x960>)
 800775c:	403b      	ands	r3, r7
 800775e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007762:	f04f 0a00 	mov.w	sl, #0
 8007766:	9b04      	ldr	r3, [sp, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1a4      	bne.n	80076b6 <_strtod_l+0x82e>
 800776c:	e5de      	b.n	800732c <_strtod_l+0x4a4>
 800776e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007772:	e7ea      	b.n	800774a <_strtod_l+0x8c2>
 8007774:	4613      	mov	r3, r2
 8007776:	e7e8      	b.n	800774a <_strtod_l+0x8c2>
 8007778:	ea53 030a 	orrs.w	r3, r3, sl
 800777c:	d08c      	beq.n	8007698 <_strtod_l+0x810>
 800777e:	9b08      	ldr	r3, [sp, #32]
 8007780:	b1db      	cbz	r3, 80077ba <_strtod_l+0x932>
 8007782:	423b      	tst	r3, r7
 8007784:	d0ef      	beq.n	8007766 <_strtod_l+0x8de>
 8007786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007788:	9a04      	ldr	r2, [sp, #16]
 800778a:	4650      	mov	r0, sl
 800778c:	4659      	mov	r1, fp
 800778e:	b1c3      	cbz	r3, 80077c2 <_strtod_l+0x93a>
 8007790:	f7ff fb5c 	bl	8006e4c <sulp>
 8007794:	4602      	mov	r2, r0
 8007796:	460b      	mov	r3, r1
 8007798:	ec51 0b18 	vmov	r0, r1, d8
 800779c:	f7f8 fda6 	bl	80002ec <__adddf3>
 80077a0:	4682      	mov	sl, r0
 80077a2:	468b      	mov	fp, r1
 80077a4:	e7df      	b.n	8007766 <_strtod_l+0x8de>
 80077a6:	4013      	ands	r3, r2
 80077a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80077ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80077b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80077b4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80077b8:	e7d5      	b.n	8007766 <_strtod_l+0x8de>
 80077ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077bc:	ea13 0f0a 	tst.w	r3, sl
 80077c0:	e7e0      	b.n	8007784 <_strtod_l+0x8fc>
 80077c2:	f7ff fb43 	bl	8006e4c <sulp>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	ec51 0b18 	vmov	r0, r1, d8
 80077ce:	f7f8 fd8b 	bl	80002e8 <__aeabi_dsub>
 80077d2:	2200      	movs	r2, #0
 80077d4:	2300      	movs	r3, #0
 80077d6:	4682      	mov	sl, r0
 80077d8:	468b      	mov	fp, r1
 80077da:	f7f9 f9a5 	bl	8000b28 <__aeabi_dcmpeq>
 80077de:	2800      	cmp	r0, #0
 80077e0:	d0c1      	beq.n	8007766 <_strtod_l+0x8de>
 80077e2:	e611      	b.n	8007408 <_strtod_l+0x580>
 80077e4:	fffffc02 	.word	0xfffffc02
 80077e8:	7ff00000 	.word	0x7ff00000
 80077ec:	39500000 	.word	0x39500000
 80077f0:	000fffff 	.word	0x000fffff
 80077f4:	7fefffff 	.word	0x7fefffff
 80077f8:	0800ac78 	.word	0x0800ac78
 80077fc:	4631      	mov	r1, r6
 80077fe:	4628      	mov	r0, r5
 8007800:	f002 f840 	bl	8009884 <__ratio>
 8007804:	ec59 8b10 	vmov	r8, r9, d0
 8007808:	ee10 0a10 	vmov	r0, s0
 800780c:	2200      	movs	r2, #0
 800780e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007812:	4649      	mov	r1, r9
 8007814:	f7f9 f99c 	bl	8000b50 <__aeabi_dcmple>
 8007818:	2800      	cmp	r0, #0
 800781a:	d07a      	beq.n	8007912 <_strtod_l+0xa8a>
 800781c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800781e:	2b00      	cmp	r3, #0
 8007820:	d04a      	beq.n	80078b8 <_strtod_l+0xa30>
 8007822:	4b95      	ldr	r3, [pc, #596]	; (8007a78 <_strtod_l+0xbf0>)
 8007824:	2200      	movs	r2, #0
 8007826:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800782a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007a78 <_strtod_l+0xbf0>
 800782e:	f04f 0800 	mov.w	r8, #0
 8007832:	4b92      	ldr	r3, [pc, #584]	; (8007a7c <_strtod_l+0xbf4>)
 8007834:	403b      	ands	r3, r7
 8007836:	930d      	str	r3, [sp, #52]	; 0x34
 8007838:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800783a:	4b91      	ldr	r3, [pc, #580]	; (8007a80 <_strtod_l+0xbf8>)
 800783c:	429a      	cmp	r2, r3
 800783e:	f040 80b0 	bne.w	80079a2 <_strtod_l+0xb1a>
 8007842:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007846:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800784a:	ec4b ab10 	vmov	d0, sl, fp
 800784e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007852:	f001 ff3f 	bl	80096d4 <__ulp>
 8007856:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800785a:	ec53 2b10 	vmov	r2, r3, d0
 800785e:	f7f8 fefb 	bl	8000658 <__aeabi_dmul>
 8007862:	4652      	mov	r2, sl
 8007864:	465b      	mov	r3, fp
 8007866:	f7f8 fd41 	bl	80002ec <__adddf3>
 800786a:	460b      	mov	r3, r1
 800786c:	4983      	ldr	r1, [pc, #524]	; (8007a7c <_strtod_l+0xbf4>)
 800786e:	4a85      	ldr	r2, [pc, #532]	; (8007a84 <_strtod_l+0xbfc>)
 8007870:	4019      	ands	r1, r3
 8007872:	4291      	cmp	r1, r2
 8007874:	4682      	mov	sl, r0
 8007876:	d960      	bls.n	800793a <_strtod_l+0xab2>
 8007878:	ee18 3a90 	vmov	r3, s17
 800787c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007880:	4293      	cmp	r3, r2
 8007882:	d104      	bne.n	800788e <_strtod_l+0xa06>
 8007884:	ee18 3a10 	vmov	r3, s16
 8007888:	3301      	adds	r3, #1
 800788a:	f43f ad45 	beq.w	8007318 <_strtod_l+0x490>
 800788e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007a90 <_strtod_l+0xc08>
 8007892:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007896:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007898:	4620      	mov	r0, r4
 800789a:	f001 fbe9 	bl	8009070 <_Bfree>
 800789e:	9905      	ldr	r1, [sp, #20]
 80078a0:	4620      	mov	r0, r4
 80078a2:	f001 fbe5 	bl	8009070 <_Bfree>
 80078a6:	4631      	mov	r1, r6
 80078a8:	4620      	mov	r0, r4
 80078aa:	f001 fbe1 	bl	8009070 <_Bfree>
 80078ae:	4629      	mov	r1, r5
 80078b0:	4620      	mov	r0, r4
 80078b2:	f001 fbdd 	bl	8009070 <_Bfree>
 80078b6:	e61a      	b.n	80074ee <_strtod_l+0x666>
 80078b8:	f1ba 0f00 	cmp.w	sl, #0
 80078bc:	d11b      	bne.n	80078f6 <_strtod_l+0xa6e>
 80078be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078c2:	b9f3      	cbnz	r3, 8007902 <_strtod_l+0xa7a>
 80078c4:	4b6c      	ldr	r3, [pc, #432]	; (8007a78 <_strtod_l+0xbf0>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	4640      	mov	r0, r8
 80078ca:	4649      	mov	r1, r9
 80078cc:	f7f9 f936 	bl	8000b3c <__aeabi_dcmplt>
 80078d0:	b9d0      	cbnz	r0, 8007908 <_strtod_l+0xa80>
 80078d2:	4640      	mov	r0, r8
 80078d4:	4649      	mov	r1, r9
 80078d6:	4b6c      	ldr	r3, [pc, #432]	; (8007a88 <_strtod_l+0xc00>)
 80078d8:	2200      	movs	r2, #0
 80078da:	f7f8 febd 	bl	8000658 <__aeabi_dmul>
 80078de:	4680      	mov	r8, r0
 80078e0:	4689      	mov	r9, r1
 80078e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80078e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80078ea:	9315      	str	r3, [sp, #84]	; 0x54
 80078ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80078f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80078f4:	e79d      	b.n	8007832 <_strtod_l+0x9aa>
 80078f6:	f1ba 0f01 	cmp.w	sl, #1
 80078fa:	d102      	bne.n	8007902 <_strtod_l+0xa7a>
 80078fc:	2f00      	cmp	r7, #0
 80078fe:	f43f ad83 	beq.w	8007408 <_strtod_l+0x580>
 8007902:	4b62      	ldr	r3, [pc, #392]	; (8007a8c <_strtod_l+0xc04>)
 8007904:	2200      	movs	r2, #0
 8007906:	e78e      	b.n	8007826 <_strtod_l+0x99e>
 8007908:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007a88 <_strtod_l+0xc00>
 800790c:	f04f 0800 	mov.w	r8, #0
 8007910:	e7e7      	b.n	80078e2 <_strtod_l+0xa5a>
 8007912:	4b5d      	ldr	r3, [pc, #372]	; (8007a88 <_strtod_l+0xc00>)
 8007914:	4640      	mov	r0, r8
 8007916:	4649      	mov	r1, r9
 8007918:	2200      	movs	r2, #0
 800791a:	f7f8 fe9d 	bl	8000658 <__aeabi_dmul>
 800791e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007920:	4680      	mov	r8, r0
 8007922:	4689      	mov	r9, r1
 8007924:	b933      	cbnz	r3, 8007934 <_strtod_l+0xaac>
 8007926:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800792a:	900e      	str	r0, [sp, #56]	; 0x38
 800792c:	930f      	str	r3, [sp, #60]	; 0x3c
 800792e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007932:	e7dd      	b.n	80078f0 <_strtod_l+0xa68>
 8007934:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007938:	e7f9      	b.n	800792e <_strtod_l+0xaa6>
 800793a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800793e:	9b04      	ldr	r3, [sp, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1a8      	bne.n	8007896 <_strtod_l+0xa0e>
 8007944:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800794a:	0d1b      	lsrs	r3, r3, #20
 800794c:	051b      	lsls	r3, r3, #20
 800794e:	429a      	cmp	r2, r3
 8007950:	d1a1      	bne.n	8007896 <_strtod_l+0xa0e>
 8007952:	4640      	mov	r0, r8
 8007954:	4649      	mov	r1, r9
 8007956:	f7f9 f9df 	bl	8000d18 <__aeabi_d2lz>
 800795a:	f7f8 fe4f 	bl	80005fc <__aeabi_l2d>
 800795e:	4602      	mov	r2, r0
 8007960:	460b      	mov	r3, r1
 8007962:	4640      	mov	r0, r8
 8007964:	4649      	mov	r1, r9
 8007966:	f7f8 fcbf 	bl	80002e8 <__aeabi_dsub>
 800796a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800796c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007970:	ea43 030a 	orr.w	r3, r3, sl
 8007974:	4313      	orrs	r3, r2
 8007976:	4680      	mov	r8, r0
 8007978:	4689      	mov	r9, r1
 800797a:	d055      	beq.n	8007a28 <_strtod_l+0xba0>
 800797c:	a336      	add	r3, pc, #216	; (adr r3, 8007a58 <_strtod_l+0xbd0>)
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	f7f9 f8db 	bl	8000b3c <__aeabi_dcmplt>
 8007986:	2800      	cmp	r0, #0
 8007988:	f47f acd0 	bne.w	800732c <_strtod_l+0x4a4>
 800798c:	a334      	add	r3, pc, #208	; (adr r3, 8007a60 <_strtod_l+0xbd8>)
 800798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007992:	4640      	mov	r0, r8
 8007994:	4649      	mov	r1, r9
 8007996:	f7f9 f8ef 	bl	8000b78 <__aeabi_dcmpgt>
 800799a:	2800      	cmp	r0, #0
 800799c:	f43f af7b 	beq.w	8007896 <_strtod_l+0xa0e>
 80079a0:	e4c4      	b.n	800732c <_strtod_l+0x4a4>
 80079a2:	9b04      	ldr	r3, [sp, #16]
 80079a4:	b333      	cbz	r3, 80079f4 <_strtod_l+0xb6c>
 80079a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80079ac:	d822      	bhi.n	80079f4 <_strtod_l+0xb6c>
 80079ae:	a32e      	add	r3, pc, #184	; (adr r3, 8007a68 <_strtod_l+0xbe0>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	4640      	mov	r0, r8
 80079b6:	4649      	mov	r1, r9
 80079b8:	f7f9 f8ca 	bl	8000b50 <__aeabi_dcmple>
 80079bc:	b1a0      	cbz	r0, 80079e8 <_strtod_l+0xb60>
 80079be:	4649      	mov	r1, r9
 80079c0:	4640      	mov	r0, r8
 80079c2:	f7f9 f921 	bl	8000c08 <__aeabi_d2uiz>
 80079c6:	2801      	cmp	r0, #1
 80079c8:	bf38      	it	cc
 80079ca:	2001      	movcc	r0, #1
 80079cc:	f7f8 fdca 	bl	8000564 <__aeabi_ui2d>
 80079d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079d2:	4680      	mov	r8, r0
 80079d4:	4689      	mov	r9, r1
 80079d6:	bb23      	cbnz	r3, 8007a22 <_strtod_l+0xb9a>
 80079d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079dc:	9010      	str	r0, [sp, #64]	; 0x40
 80079de:	9311      	str	r3, [sp, #68]	; 0x44
 80079e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80079e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80079f0:	1a9b      	subs	r3, r3, r2
 80079f2:	9309      	str	r3, [sp, #36]	; 0x24
 80079f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079f8:	eeb0 0a48 	vmov.f32	s0, s16
 80079fc:	eef0 0a68 	vmov.f32	s1, s17
 8007a00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a04:	f001 fe66 	bl	80096d4 <__ulp>
 8007a08:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a0c:	ec53 2b10 	vmov	r2, r3, d0
 8007a10:	f7f8 fe22 	bl	8000658 <__aeabi_dmul>
 8007a14:	ec53 2b18 	vmov	r2, r3, d8
 8007a18:	f7f8 fc68 	bl	80002ec <__adddf3>
 8007a1c:	4682      	mov	sl, r0
 8007a1e:	468b      	mov	fp, r1
 8007a20:	e78d      	b.n	800793e <_strtod_l+0xab6>
 8007a22:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007a26:	e7db      	b.n	80079e0 <_strtod_l+0xb58>
 8007a28:	a311      	add	r3, pc, #68	; (adr r3, 8007a70 <_strtod_l+0xbe8>)
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	f7f9 f885 	bl	8000b3c <__aeabi_dcmplt>
 8007a32:	e7b2      	b.n	800799a <_strtod_l+0xb12>
 8007a34:	2300      	movs	r3, #0
 8007a36:	930a      	str	r3, [sp, #40]	; 0x28
 8007a38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	f7ff ba6b 	b.w	8006f18 <_strtod_l+0x90>
 8007a42:	2a65      	cmp	r2, #101	; 0x65
 8007a44:	f43f ab5f 	beq.w	8007106 <_strtod_l+0x27e>
 8007a48:	2a45      	cmp	r2, #69	; 0x45
 8007a4a:	f43f ab5c 	beq.w	8007106 <_strtod_l+0x27e>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	f7ff bb94 	b.w	800717c <_strtod_l+0x2f4>
 8007a54:	f3af 8000 	nop.w
 8007a58:	94a03595 	.word	0x94a03595
 8007a5c:	3fdfffff 	.word	0x3fdfffff
 8007a60:	35afe535 	.word	0x35afe535
 8007a64:	3fe00000 	.word	0x3fe00000
 8007a68:	ffc00000 	.word	0xffc00000
 8007a6c:	41dfffff 	.word	0x41dfffff
 8007a70:	94a03595 	.word	0x94a03595
 8007a74:	3fcfffff 	.word	0x3fcfffff
 8007a78:	3ff00000 	.word	0x3ff00000
 8007a7c:	7ff00000 	.word	0x7ff00000
 8007a80:	7fe00000 	.word	0x7fe00000
 8007a84:	7c9fffff 	.word	0x7c9fffff
 8007a88:	3fe00000 	.word	0x3fe00000
 8007a8c:	bff00000 	.word	0xbff00000
 8007a90:	7fefffff 	.word	0x7fefffff

08007a94 <strtod>:
 8007a94:	460a      	mov	r2, r1
 8007a96:	4601      	mov	r1, r0
 8007a98:	4802      	ldr	r0, [pc, #8]	; (8007aa4 <strtod+0x10>)
 8007a9a:	4b03      	ldr	r3, [pc, #12]	; (8007aa8 <strtod+0x14>)
 8007a9c:	6800      	ldr	r0, [r0, #0]
 8007a9e:	f7ff b9f3 	b.w	8006e88 <_strtod_l>
 8007aa2:	bf00      	nop
 8007aa4:	20000060 	.word	0x20000060
 8007aa8:	200000c8 	.word	0x200000c8

08007aac <strtok>:
 8007aac:	4b16      	ldr	r3, [pc, #88]	; (8007b08 <strtok+0x5c>)
 8007aae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ab0:	681e      	ldr	r6, [r3, #0]
 8007ab2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007ab4:	4605      	mov	r5, r0
 8007ab6:	b9fc      	cbnz	r4, 8007af8 <strtok+0x4c>
 8007ab8:	2050      	movs	r0, #80	; 0x50
 8007aba:	9101      	str	r1, [sp, #4]
 8007abc:	f001 fa70 	bl	8008fa0 <malloc>
 8007ac0:	9901      	ldr	r1, [sp, #4]
 8007ac2:	65b0      	str	r0, [r6, #88]	; 0x58
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	b920      	cbnz	r0, 8007ad2 <strtok+0x26>
 8007ac8:	4b10      	ldr	r3, [pc, #64]	; (8007b0c <strtok+0x60>)
 8007aca:	4811      	ldr	r0, [pc, #68]	; (8007b10 <strtok+0x64>)
 8007acc:	2157      	movs	r1, #87	; 0x57
 8007ace:	f000 f849 	bl	8007b64 <__assert_func>
 8007ad2:	e9c0 4400 	strd	r4, r4, [r0]
 8007ad6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007ada:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007ade:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007ae2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007ae6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007aea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007aee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007af2:	6184      	str	r4, [r0, #24]
 8007af4:	7704      	strb	r4, [r0, #28]
 8007af6:	6244      	str	r4, [r0, #36]	; 0x24
 8007af8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8007afa:	2301      	movs	r3, #1
 8007afc:	4628      	mov	r0, r5
 8007afe:	b002      	add	sp, #8
 8007b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b04:	f000 b806 	b.w	8007b14 <__strtok_r>
 8007b08:	20000060 	.word	0x20000060
 8007b0c:	0800aca0 	.word	0x0800aca0
 8007b10:	0800acb7 	.word	0x0800acb7

08007b14 <__strtok_r>:
 8007b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b16:	b908      	cbnz	r0, 8007b1c <__strtok_r+0x8>
 8007b18:	6810      	ldr	r0, [r2, #0]
 8007b1a:	b188      	cbz	r0, 8007b40 <__strtok_r+0x2c>
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007b24:	460f      	mov	r7, r1
 8007b26:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007b2a:	b91e      	cbnz	r6, 8007b34 <__strtok_r+0x20>
 8007b2c:	b965      	cbnz	r5, 8007b48 <__strtok_r+0x34>
 8007b2e:	6015      	str	r5, [r2, #0]
 8007b30:	4628      	mov	r0, r5
 8007b32:	e005      	b.n	8007b40 <__strtok_r+0x2c>
 8007b34:	42b5      	cmp	r5, r6
 8007b36:	d1f6      	bne.n	8007b26 <__strtok_r+0x12>
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1f0      	bne.n	8007b1e <__strtok_r+0xa>
 8007b3c:	6014      	str	r4, [r2, #0]
 8007b3e:	7003      	strb	r3, [r0, #0]
 8007b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b42:	461c      	mov	r4, r3
 8007b44:	e00c      	b.n	8007b60 <__strtok_r+0x4c>
 8007b46:	b915      	cbnz	r5, 8007b4e <__strtok_r+0x3a>
 8007b48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b4c:	460e      	mov	r6, r1
 8007b4e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007b52:	42ab      	cmp	r3, r5
 8007b54:	d1f7      	bne.n	8007b46 <__strtok_r+0x32>
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0f3      	beq.n	8007b42 <__strtok_r+0x2e>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007b60:	6014      	str	r4, [r2, #0]
 8007b62:	e7ed      	b.n	8007b40 <__strtok_r+0x2c>

08007b64 <__assert_func>:
 8007b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b66:	4614      	mov	r4, r2
 8007b68:	461a      	mov	r2, r3
 8007b6a:	4b09      	ldr	r3, [pc, #36]	; (8007b90 <__assert_func+0x2c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4605      	mov	r5, r0
 8007b70:	68d8      	ldr	r0, [r3, #12]
 8007b72:	b14c      	cbz	r4, 8007b88 <__assert_func+0x24>
 8007b74:	4b07      	ldr	r3, [pc, #28]	; (8007b94 <__assert_func+0x30>)
 8007b76:	9100      	str	r1, [sp, #0]
 8007b78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b7c:	4906      	ldr	r1, [pc, #24]	; (8007b98 <__assert_func+0x34>)
 8007b7e:	462b      	mov	r3, r5
 8007b80:	f000 fe88 	bl	8008894 <fiprintf>
 8007b84:	f002 fb9e 	bl	800a2c4 <abort>
 8007b88:	4b04      	ldr	r3, [pc, #16]	; (8007b9c <__assert_func+0x38>)
 8007b8a:	461c      	mov	r4, r3
 8007b8c:	e7f3      	b.n	8007b76 <__assert_func+0x12>
 8007b8e:	bf00      	nop
 8007b90:	20000060 	.word	0x20000060
 8007b94:	0800ad14 	.word	0x0800ad14
 8007b98:	0800ad21 	.word	0x0800ad21
 8007b9c:	0800ad4f 	.word	0x0800ad4f

08007ba0 <quorem>:
 8007ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba4:	6903      	ldr	r3, [r0, #16]
 8007ba6:	690c      	ldr	r4, [r1, #16]
 8007ba8:	42a3      	cmp	r3, r4
 8007baa:	4607      	mov	r7, r0
 8007bac:	f2c0 8081 	blt.w	8007cb2 <quorem+0x112>
 8007bb0:	3c01      	subs	r4, #1
 8007bb2:	f101 0814 	add.w	r8, r1, #20
 8007bb6:	f100 0514 	add.w	r5, r0, #20
 8007bba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bbe:	9301      	str	r3, [sp, #4]
 8007bc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bd8:	d331      	bcc.n	8007c3e <quorem+0x9e>
 8007bda:	f04f 0e00 	mov.w	lr, #0
 8007bde:	4640      	mov	r0, r8
 8007be0:	46ac      	mov	ip, r5
 8007be2:	46f2      	mov	sl, lr
 8007be4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007be8:	b293      	uxth	r3, r2
 8007bea:	fb06 e303 	mla	r3, r6, r3, lr
 8007bee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	ebaa 0303 	sub.w	r3, sl, r3
 8007bf8:	f8dc a000 	ldr.w	sl, [ip]
 8007bfc:	0c12      	lsrs	r2, r2, #16
 8007bfe:	fa13 f38a 	uxtah	r3, r3, sl
 8007c02:	fb06 e202 	mla	r2, r6, r2, lr
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	9b00      	ldr	r3, [sp, #0]
 8007c0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c0e:	b292      	uxth	r2, r2
 8007c10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c18:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c1c:	4581      	cmp	r9, r0
 8007c1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c22:	f84c 3b04 	str.w	r3, [ip], #4
 8007c26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c2a:	d2db      	bcs.n	8007be4 <quorem+0x44>
 8007c2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c30:	b92b      	cbnz	r3, 8007c3e <quorem+0x9e>
 8007c32:	9b01      	ldr	r3, [sp, #4]
 8007c34:	3b04      	subs	r3, #4
 8007c36:	429d      	cmp	r5, r3
 8007c38:	461a      	mov	r2, r3
 8007c3a:	d32e      	bcc.n	8007c9a <quorem+0xfa>
 8007c3c:	613c      	str	r4, [r7, #16]
 8007c3e:	4638      	mov	r0, r7
 8007c40:	f001 fca2 	bl	8009588 <__mcmp>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	db24      	blt.n	8007c92 <quorem+0xf2>
 8007c48:	3601      	adds	r6, #1
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f04f 0c00 	mov.w	ip, #0
 8007c50:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c54:	f8d0 e000 	ldr.w	lr, [r0]
 8007c58:	b293      	uxth	r3, r2
 8007c5a:	ebac 0303 	sub.w	r3, ip, r3
 8007c5e:	0c12      	lsrs	r2, r2, #16
 8007c60:	fa13 f38e 	uxtah	r3, r3, lr
 8007c64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c72:	45c1      	cmp	r9, r8
 8007c74:	f840 3b04 	str.w	r3, [r0], #4
 8007c78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c7c:	d2e8      	bcs.n	8007c50 <quorem+0xb0>
 8007c7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c86:	b922      	cbnz	r2, 8007c92 <quorem+0xf2>
 8007c88:	3b04      	subs	r3, #4
 8007c8a:	429d      	cmp	r5, r3
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	d30a      	bcc.n	8007ca6 <quorem+0x106>
 8007c90:	613c      	str	r4, [r7, #16]
 8007c92:	4630      	mov	r0, r6
 8007c94:	b003      	add	sp, #12
 8007c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c9a:	6812      	ldr	r2, [r2, #0]
 8007c9c:	3b04      	subs	r3, #4
 8007c9e:	2a00      	cmp	r2, #0
 8007ca0:	d1cc      	bne.n	8007c3c <quorem+0x9c>
 8007ca2:	3c01      	subs	r4, #1
 8007ca4:	e7c7      	b.n	8007c36 <quorem+0x96>
 8007ca6:	6812      	ldr	r2, [r2, #0]
 8007ca8:	3b04      	subs	r3, #4
 8007caa:	2a00      	cmp	r2, #0
 8007cac:	d1f0      	bne.n	8007c90 <quorem+0xf0>
 8007cae:	3c01      	subs	r4, #1
 8007cb0:	e7eb      	b.n	8007c8a <quorem+0xea>
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	e7ee      	b.n	8007c94 <quorem+0xf4>
	...

08007cb8 <_dtoa_r>:
 8007cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	ed2d 8b04 	vpush	{d8-d9}
 8007cc0:	ec57 6b10 	vmov	r6, r7, d0
 8007cc4:	b093      	sub	sp, #76	; 0x4c
 8007cc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007cc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007ccc:	9106      	str	r1, [sp, #24]
 8007cce:	ee10 aa10 	vmov	sl, s0
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	9209      	str	r2, [sp, #36]	; 0x24
 8007cd6:	930c      	str	r3, [sp, #48]	; 0x30
 8007cd8:	46bb      	mov	fp, r7
 8007cda:	b975      	cbnz	r5, 8007cfa <_dtoa_r+0x42>
 8007cdc:	2010      	movs	r0, #16
 8007cde:	f001 f95f 	bl	8008fa0 <malloc>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	6260      	str	r0, [r4, #36]	; 0x24
 8007ce6:	b920      	cbnz	r0, 8007cf2 <_dtoa_r+0x3a>
 8007ce8:	4ba7      	ldr	r3, [pc, #668]	; (8007f88 <_dtoa_r+0x2d0>)
 8007cea:	21ea      	movs	r1, #234	; 0xea
 8007cec:	48a7      	ldr	r0, [pc, #668]	; (8007f8c <_dtoa_r+0x2d4>)
 8007cee:	f7ff ff39 	bl	8007b64 <__assert_func>
 8007cf2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007cf6:	6005      	str	r5, [r0, #0]
 8007cf8:	60c5      	str	r5, [r0, #12]
 8007cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cfc:	6819      	ldr	r1, [r3, #0]
 8007cfe:	b151      	cbz	r1, 8007d16 <_dtoa_r+0x5e>
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	604a      	str	r2, [r1, #4]
 8007d04:	2301      	movs	r3, #1
 8007d06:	4093      	lsls	r3, r2
 8007d08:	608b      	str	r3, [r1, #8]
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	f001 f9b0 	bl	8009070 <_Bfree>
 8007d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d12:	2200      	movs	r2, #0
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	1e3b      	subs	r3, r7, #0
 8007d18:	bfaa      	itet	ge
 8007d1a:	2300      	movge	r3, #0
 8007d1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007d20:	f8c8 3000 	strge.w	r3, [r8]
 8007d24:	4b9a      	ldr	r3, [pc, #616]	; (8007f90 <_dtoa_r+0x2d8>)
 8007d26:	bfbc      	itt	lt
 8007d28:	2201      	movlt	r2, #1
 8007d2a:	f8c8 2000 	strlt.w	r2, [r8]
 8007d2e:	ea33 030b 	bics.w	r3, r3, fp
 8007d32:	d11b      	bne.n	8007d6c <_dtoa_r+0xb4>
 8007d34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d36:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d40:	4333      	orrs	r3, r6
 8007d42:	f000 8592 	beq.w	800886a <_dtoa_r+0xbb2>
 8007d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d48:	b963      	cbnz	r3, 8007d64 <_dtoa_r+0xac>
 8007d4a:	4b92      	ldr	r3, [pc, #584]	; (8007f94 <_dtoa_r+0x2dc>)
 8007d4c:	e022      	b.n	8007d94 <_dtoa_r+0xdc>
 8007d4e:	4b92      	ldr	r3, [pc, #584]	; (8007f98 <_dtoa_r+0x2e0>)
 8007d50:	9301      	str	r3, [sp, #4]
 8007d52:	3308      	adds	r3, #8
 8007d54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	9801      	ldr	r0, [sp, #4]
 8007d5a:	b013      	add	sp, #76	; 0x4c
 8007d5c:	ecbd 8b04 	vpop	{d8-d9}
 8007d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d64:	4b8b      	ldr	r3, [pc, #556]	; (8007f94 <_dtoa_r+0x2dc>)
 8007d66:	9301      	str	r3, [sp, #4]
 8007d68:	3303      	adds	r3, #3
 8007d6a:	e7f3      	b.n	8007d54 <_dtoa_r+0x9c>
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2300      	movs	r3, #0
 8007d70:	4650      	mov	r0, sl
 8007d72:	4659      	mov	r1, fp
 8007d74:	f7f8 fed8 	bl	8000b28 <__aeabi_dcmpeq>
 8007d78:	ec4b ab19 	vmov	d9, sl, fp
 8007d7c:	4680      	mov	r8, r0
 8007d7e:	b158      	cbz	r0, 8007d98 <_dtoa_r+0xe0>
 8007d80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d82:	2301      	movs	r3, #1
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 856b 	beq.w	8008864 <_dtoa_r+0xbac>
 8007d8e:	4883      	ldr	r0, [pc, #524]	; (8007f9c <_dtoa_r+0x2e4>)
 8007d90:	6018      	str	r0, [r3, #0]
 8007d92:	1e43      	subs	r3, r0, #1
 8007d94:	9301      	str	r3, [sp, #4]
 8007d96:	e7df      	b.n	8007d58 <_dtoa_r+0xa0>
 8007d98:	ec4b ab10 	vmov	d0, sl, fp
 8007d9c:	aa10      	add	r2, sp, #64	; 0x40
 8007d9e:	a911      	add	r1, sp, #68	; 0x44
 8007da0:	4620      	mov	r0, r4
 8007da2:	f001 fd13 	bl	80097cc <__d2b>
 8007da6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007daa:	ee08 0a10 	vmov	s16, r0
 8007dae:	2d00      	cmp	r5, #0
 8007db0:	f000 8084 	beq.w	8007ebc <_dtoa_r+0x204>
 8007db4:	ee19 3a90 	vmov	r3, s19
 8007db8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007dc0:	4656      	mov	r6, sl
 8007dc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007dc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007dca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007dce:	4b74      	ldr	r3, [pc, #464]	; (8007fa0 <_dtoa_r+0x2e8>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	f7f8 fa87 	bl	80002e8 <__aeabi_dsub>
 8007dda:	a365      	add	r3, pc, #404	; (adr r3, 8007f70 <_dtoa_r+0x2b8>)
 8007ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de0:	f7f8 fc3a 	bl	8000658 <__aeabi_dmul>
 8007de4:	a364      	add	r3, pc, #400	; (adr r3, 8007f78 <_dtoa_r+0x2c0>)
 8007de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dea:	f7f8 fa7f 	bl	80002ec <__adddf3>
 8007dee:	4606      	mov	r6, r0
 8007df0:	4628      	mov	r0, r5
 8007df2:	460f      	mov	r7, r1
 8007df4:	f7f8 fbc6 	bl	8000584 <__aeabi_i2d>
 8007df8:	a361      	add	r3, pc, #388	; (adr r3, 8007f80 <_dtoa_r+0x2c8>)
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f7f8 fc2b 	bl	8000658 <__aeabi_dmul>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	4630      	mov	r0, r6
 8007e08:	4639      	mov	r1, r7
 8007e0a:	f7f8 fa6f 	bl	80002ec <__adddf3>
 8007e0e:	4606      	mov	r6, r0
 8007e10:	460f      	mov	r7, r1
 8007e12:	f7f8 fed1 	bl	8000bb8 <__aeabi_d2iz>
 8007e16:	2200      	movs	r2, #0
 8007e18:	9000      	str	r0, [sp, #0]
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	4639      	mov	r1, r7
 8007e20:	f7f8 fe8c 	bl	8000b3c <__aeabi_dcmplt>
 8007e24:	b150      	cbz	r0, 8007e3c <_dtoa_r+0x184>
 8007e26:	9800      	ldr	r0, [sp, #0]
 8007e28:	f7f8 fbac 	bl	8000584 <__aeabi_i2d>
 8007e2c:	4632      	mov	r2, r6
 8007e2e:	463b      	mov	r3, r7
 8007e30:	f7f8 fe7a 	bl	8000b28 <__aeabi_dcmpeq>
 8007e34:	b910      	cbnz	r0, 8007e3c <_dtoa_r+0x184>
 8007e36:	9b00      	ldr	r3, [sp, #0]
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	9b00      	ldr	r3, [sp, #0]
 8007e3e:	2b16      	cmp	r3, #22
 8007e40:	d85a      	bhi.n	8007ef8 <_dtoa_r+0x240>
 8007e42:	9a00      	ldr	r2, [sp, #0]
 8007e44:	4b57      	ldr	r3, [pc, #348]	; (8007fa4 <_dtoa_r+0x2ec>)
 8007e46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4e:	ec51 0b19 	vmov	r0, r1, d9
 8007e52:	f7f8 fe73 	bl	8000b3c <__aeabi_dcmplt>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d050      	beq.n	8007efc <_dtoa_r+0x244>
 8007e5a:	9b00      	ldr	r3, [sp, #0]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	2300      	movs	r3, #0
 8007e62:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e66:	1b5d      	subs	r5, r3, r5
 8007e68:	1e6b      	subs	r3, r5, #1
 8007e6a:	9305      	str	r3, [sp, #20]
 8007e6c:	bf45      	ittet	mi
 8007e6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007e72:	9304      	strmi	r3, [sp, #16]
 8007e74:	2300      	movpl	r3, #0
 8007e76:	2300      	movmi	r3, #0
 8007e78:	bf4c      	ite	mi
 8007e7a:	9305      	strmi	r3, [sp, #20]
 8007e7c:	9304      	strpl	r3, [sp, #16]
 8007e7e:	9b00      	ldr	r3, [sp, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	db3d      	blt.n	8007f00 <_dtoa_r+0x248>
 8007e84:	9b05      	ldr	r3, [sp, #20]
 8007e86:	9a00      	ldr	r2, [sp, #0]
 8007e88:	920a      	str	r2, [sp, #40]	; 0x28
 8007e8a:	4413      	add	r3, r2
 8007e8c:	9305      	str	r3, [sp, #20]
 8007e8e:	2300      	movs	r3, #0
 8007e90:	9307      	str	r3, [sp, #28]
 8007e92:	9b06      	ldr	r3, [sp, #24]
 8007e94:	2b09      	cmp	r3, #9
 8007e96:	f200 8089 	bhi.w	8007fac <_dtoa_r+0x2f4>
 8007e9a:	2b05      	cmp	r3, #5
 8007e9c:	bfc4      	itt	gt
 8007e9e:	3b04      	subgt	r3, #4
 8007ea0:	9306      	strgt	r3, [sp, #24]
 8007ea2:	9b06      	ldr	r3, [sp, #24]
 8007ea4:	f1a3 0302 	sub.w	r3, r3, #2
 8007ea8:	bfcc      	ite	gt
 8007eaa:	2500      	movgt	r5, #0
 8007eac:	2501      	movle	r5, #1
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	f200 8087 	bhi.w	8007fc2 <_dtoa_r+0x30a>
 8007eb4:	e8df f003 	tbb	[pc, r3]
 8007eb8:	59383a2d 	.word	0x59383a2d
 8007ebc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007ec0:	441d      	add	r5, r3
 8007ec2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ec6:	2b20      	cmp	r3, #32
 8007ec8:	bfc1      	itttt	gt
 8007eca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ece:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007ed2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007ed6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007eda:	bfda      	itte	le
 8007edc:	f1c3 0320 	rsble	r3, r3, #32
 8007ee0:	fa06 f003 	lslle.w	r0, r6, r3
 8007ee4:	4318      	orrgt	r0, r3
 8007ee6:	f7f8 fb3d 	bl	8000564 <__aeabi_ui2d>
 8007eea:	2301      	movs	r3, #1
 8007eec:	4606      	mov	r6, r0
 8007eee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007ef2:	3d01      	subs	r5, #1
 8007ef4:	930e      	str	r3, [sp, #56]	; 0x38
 8007ef6:	e76a      	b.n	8007dce <_dtoa_r+0x116>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e7b2      	b.n	8007e62 <_dtoa_r+0x1aa>
 8007efc:	900b      	str	r0, [sp, #44]	; 0x2c
 8007efe:	e7b1      	b.n	8007e64 <_dtoa_r+0x1ac>
 8007f00:	9b04      	ldr	r3, [sp, #16]
 8007f02:	9a00      	ldr	r2, [sp, #0]
 8007f04:	1a9b      	subs	r3, r3, r2
 8007f06:	9304      	str	r3, [sp, #16]
 8007f08:	4253      	negs	r3, r2
 8007f0a:	9307      	str	r3, [sp, #28]
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f10:	e7bf      	b.n	8007e92 <_dtoa_r+0x1da>
 8007f12:	2300      	movs	r3, #0
 8007f14:	9308      	str	r3, [sp, #32]
 8007f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	dc55      	bgt.n	8007fc8 <_dtoa_r+0x310>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f22:	461a      	mov	r2, r3
 8007f24:	9209      	str	r2, [sp, #36]	; 0x24
 8007f26:	e00c      	b.n	8007f42 <_dtoa_r+0x28a>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e7f3      	b.n	8007f14 <_dtoa_r+0x25c>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f30:	9308      	str	r3, [sp, #32]
 8007f32:	9b00      	ldr	r3, [sp, #0]
 8007f34:	4413      	add	r3, r2
 8007f36:	9302      	str	r3, [sp, #8]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	9303      	str	r3, [sp, #12]
 8007f3e:	bfb8      	it	lt
 8007f40:	2301      	movlt	r3, #1
 8007f42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007f44:	2200      	movs	r2, #0
 8007f46:	6042      	str	r2, [r0, #4]
 8007f48:	2204      	movs	r2, #4
 8007f4a:	f102 0614 	add.w	r6, r2, #20
 8007f4e:	429e      	cmp	r6, r3
 8007f50:	6841      	ldr	r1, [r0, #4]
 8007f52:	d93d      	bls.n	8007fd0 <_dtoa_r+0x318>
 8007f54:	4620      	mov	r0, r4
 8007f56:	f001 f84b 	bl	8008ff0 <_Balloc>
 8007f5a:	9001      	str	r0, [sp, #4]
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d13b      	bne.n	8007fd8 <_dtoa_r+0x320>
 8007f60:	4b11      	ldr	r3, [pc, #68]	; (8007fa8 <_dtoa_r+0x2f0>)
 8007f62:	4602      	mov	r2, r0
 8007f64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f68:	e6c0      	b.n	8007cec <_dtoa_r+0x34>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e7df      	b.n	8007f2e <_dtoa_r+0x276>
 8007f6e:	bf00      	nop
 8007f70:	636f4361 	.word	0x636f4361
 8007f74:	3fd287a7 	.word	0x3fd287a7
 8007f78:	8b60c8b3 	.word	0x8b60c8b3
 8007f7c:	3fc68a28 	.word	0x3fc68a28
 8007f80:	509f79fb 	.word	0x509f79fb
 8007f84:	3fd34413 	.word	0x3fd34413
 8007f88:	0800aca0 	.word	0x0800aca0
 8007f8c:	0800ad5d 	.word	0x0800ad5d
 8007f90:	7ff00000 	.word	0x7ff00000
 8007f94:	0800ad59 	.word	0x0800ad59
 8007f98:	0800ad50 	.word	0x0800ad50
 8007f9c:	0800ac29 	.word	0x0800ac29
 8007fa0:	3ff80000 	.word	0x3ff80000
 8007fa4:	0800aec8 	.word	0x0800aec8
 8007fa8:	0800adb8 	.word	0x0800adb8
 8007fac:	2501      	movs	r5, #1
 8007fae:	2300      	movs	r3, #0
 8007fb0:	9306      	str	r3, [sp, #24]
 8007fb2:	9508      	str	r5, [sp, #32]
 8007fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2312      	movs	r3, #18
 8007fc0:	e7b0      	b.n	8007f24 <_dtoa_r+0x26c>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	9308      	str	r3, [sp, #32]
 8007fc6:	e7f5      	b.n	8007fb4 <_dtoa_r+0x2fc>
 8007fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fce:	e7b8      	b.n	8007f42 <_dtoa_r+0x28a>
 8007fd0:	3101      	adds	r1, #1
 8007fd2:	6041      	str	r1, [r0, #4]
 8007fd4:	0052      	lsls	r2, r2, #1
 8007fd6:	e7b8      	b.n	8007f4a <_dtoa_r+0x292>
 8007fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fda:	9a01      	ldr	r2, [sp, #4]
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	9b03      	ldr	r3, [sp, #12]
 8007fe0:	2b0e      	cmp	r3, #14
 8007fe2:	f200 809d 	bhi.w	8008120 <_dtoa_r+0x468>
 8007fe6:	2d00      	cmp	r5, #0
 8007fe8:	f000 809a 	beq.w	8008120 <_dtoa_r+0x468>
 8007fec:	9b00      	ldr	r3, [sp, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	dd32      	ble.n	8008058 <_dtoa_r+0x3a0>
 8007ff2:	4ab7      	ldr	r2, [pc, #732]	; (80082d0 <_dtoa_r+0x618>)
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ffc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008000:	9b00      	ldr	r3, [sp, #0]
 8008002:	05d8      	lsls	r0, r3, #23
 8008004:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008008:	d516      	bpl.n	8008038 <_dtoa_r+0x380>
 800800a:	4bb2      	ldr	r3, [pc, #712]	; (80082d4 <_dtoa_r+0x61c>)
 800800c:	ec51 0b19 	vmov	r0, r1, d9
 8008010:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008014:	f7f8 fc4a 	bl	80008ac <__aeabi_ddiv>
 8008018:	f007 070f 	and.w	r7, r7, #15
 800801c:	4682      	mov	sl, r0
 800801e:	468b      	mov	fp, r1
 8008020:	2503      	movs	r5, #3
 8008022:	4eac      	ldr	r6, [pc, #688]	; (80082d4 <_dtoa_r+0x61c>)
 8008024:	b957      	cbnz	r7, 800803c <_dtoa_r+0x384>
 8008026:	4642      	mov	r2, r8
 8008028:	464b      	mov	r3, r9
 800802a:	4650      	mov	r0, sl
 800802c:	4659      	mov	r1, fp
 800802e:	f7f8 fc3d 	bl	80008ac <__aeabi_ddiv>
 8008032:	4682      	mov	sl, r0
 8008034:	468b      	mov	fp, r1
 8008036:	e028      	b.n	800808a <_dtoa_r+0x3d2>
 8008038:	2502      	movs	r5, #2
 800803a:	e7f2      	b.n	8008022 <_dtoa_r+0x36a>
 800803c:	07f9      	lsls	r1, r7, #31
 800803e:	d508      	bpl.n	8008052 <_dtoa_r+0x39a>
 8008040:	4640      	mov	r0, r8
 8008042:	4649      	mov	r1, r9
 8008044:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008048:	f7f8 fb06 	bl	8000658 <__aeabi_dmul>
 800804c:	3501      	adds	r5, #1
 800804e:	4680      	mov	r8, r0
 8008050:	4689      	mov	r9, r1
 8008052:	107f      	asrs	r7, r7, #1
 8008054:	3608      	adds	r6, #8
 8008056:	e7e5      	b.n	8008024 <_dtoa_r+0x36c>
 8008058:	f000 809b 	beq.w	8008192 <_dtoa_r+0x4da>
 800805c:	9b00      	ldr	r3, [sp, #0]
 800805e:	4f9d      	ldr	r7, [pc, #628]	; (80082d4 <_dtoa_r+0x61c>)
 8008060:	425e      	negs	r6, r3
 8008062:	4b9b      	ldr	r3, [pc, #620]	; (80082d0 <_dtoa_r+0x618>)
 8008064:	f006 020f 	and.w	r2, r6, #15
 8008068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	ec51 0b19 	vmov	r0, r1, d9
 8008074:	f7f8 faf0 	bl	8000658 <__aeabi_dmul>
 8008078:	1136      	asrs	r6, r6, #4
 800807a:	4682      	mov	sl, r0
 800807c:	468b      	mov	fp, r1
 800807e:	2300      	movs	r3, #0
 8008080:	2502      	movs	r5, #2
 8008082:	2e00      	cmp	r6, #0
 8008084:	d17a      	bne.n	800817c <_dtoa_r+0x4c4>
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1d3      	bne.n	8008032 <_dtoa_r+0x37a>
 800808a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 8082 	beq.w	8008196 <_dtoa_r+0x4de>
 8008092:	4b91      	ldr	r3, [pc, #580]	; (80082d8 <_dtoa_r+0x620>)
 8008094:	2200      	movs	r2, #0
 8008096:	4650      	mov	r0, sl
 8008098:	4659      	mov	r1, fp
 800809a:	f7f8 fd4f 	bl	8000b3c <__aeabi_dcmplt>
 800809e:	2800      	cmp	r0, #0
 80080a0:	d079      	beq.n	8008196 <_dtoa_r+0x4de>
 80080a2:	9b03      	ldr	r3, [sp, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d076      	beq.n	8008196 <_dtoa_r+0x4de>
 80080a8:	9b02      	ldr	r3, [sp, #8]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	dd36      	ble.n	800811c <_dtoa_r+0x464>
 80080ae:	9b00      	ldr	r3, [sp, #0]
 80080b0:	4650      	mov	r0, sl
 80080b2:	4659      	mov	r1, fp
 80080b4:	1e5f      	subs	r7, r3, #1
 80080b6:	2200      	movs	r2, #0
 80080b8:	4b88      	ldr	r3, [pc, #544]	; (80082dc <_dtoa_r+0x624>)
 80080ba:	f7f8 facd 	bl	8000658 <__aeabi_dmul>
 80080be:	9e02      	ldr	r6, [sp, #8]
 80080c0:	4682      	mov	sl, r0
 80080c2:	468b      	mov	fp, r1
 80080c4:	3501      	adds	r5, #1
 80080c6:	4628      	mov	r0, r5
 80080c8:	f7f8 fa5c 	bl	8000584 <__aeabi_i2d>
 80080cc:	4652      	mov	r2, sl
 80080ce:	465b      	mov	r3, fp
 80080d0:	f7f8 fac2 	bl	8000658 <__aeabi_dmul>
 80080d4:	4b82      	ldr	r3, [pc, #520]	; (80082e0 <_dtoa_r+0x628>)
 80080d6:	2200      	movs	r2, #0
 80080d8:	f7f8 f908 	bl	80002ec <__adddf3>
 80080dc:	46d0      	mov	r8, sl
 80080de:	46d9      	mov	r9, fp
 80080e0:	4682      	mov	sl, r0
 80080e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80080e6:	2e00      	cmp	r6, #0
 80080e8:	d158      	bne.n	800819c <_dtoa_r+0x4e4>
 80080ea:	4b7e      	ldr	r3, [pc, #504]	; (80082e4 <_dtoa_r+0x62c>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	4640      	mov	r0, r8
 80080f0:	4649      	mov	r1, r9
 80080f2:	f7f8 f8f9 	bl	80002e8 <__aeabi_dsub>
 80080f6:	4652      	mov	r2, sl
 80080f8:	465b      	mov	r3, fp
 80080fa:	4680      	mov	r8, r0
 80080fc:	4689      	mov	r9, r1
 80080fe:	f7f8 fd3b 	bl	8000b78 <__aeabi_dcmpgt>
 8008102:	2800      	cmp	r0, #0
 8008104:	f040 8295 	bne.w	8008632 <_dtoa_r+0x97a>
 8008108:	4652      	mov	r2, sl
 800810a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800810e:	4640      	mov	r0, r8
 8008110:	4649      	mov	r1, r9
 8008112:	f7f8 fd13 	bl	8000b3c <__aeabi_dcmplt>
 8008116:	2800      	cmp	r0, #0
 8008118:	f040 8289 	bne.w	800862e <_dtoa_r+0x976>
 800811c:	ec5b ab19 	vmov	sl, fp, d9
 8008120:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008122:	2b00      	cmp	r3, #0
 8008124:	f2c0 8148 	blt.w	80083b8 <_dtoa_r+0x700>
 8008128:	9a00      	ldr	r2, [sp, #0]
 800812a:	2a0e      	cmp	r2, #14
 800812c:	f300 8144 	bgt.w	80083b8 <_dtoa_r+0x700>
 8008130:	4b67      	ldr	r3, [pc, #412]	; (80082d0 <_dtoa_r+0x618>)
 8008132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008136:	e9d3 8900 	ldrd	r8, r9, [r3]
 800813a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800813c:	2b00      	cmp	r3, #0
 800813e:	f280 80d5 	bge.w	80082ec <_dtoa_r+0x634>
 8008142:	9b03      	ldr	r3, [sp, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	f300 80d1 	bgt.w	80082ec <_dtoa_r+0x634>
 800814a:	f040 826f 	bne.w	800862c <_dtoa_r+0x974>
 800814e:	4b65      	ldr	r3, [pc, #404]	; (80082e4 <_dtoa_r+0x62c>)
 8008150:	2200      	movs	r2, #0
 8008152:	4640      	mov	r0, r8
 8008154:	4649      	mov	r1, r9
 8008156:	f7f8 fa7f 	bl	8000658 <__aeabi_dmul>
 800815a:	4652      	mov	r2, sl
 800815c:	465b      	mov	r3, fp
 800815e:	f7f8 fd01 	bl	8000b64 <__aeabi_dcmpge>
 8008162:	9e03      	ldr	r6, [sp, #12]
 8008164:	4637      	mov	r7, r6
 8008166:	2800      	cmp	r0, #0
 8008168:	f040 8245 	bne.w	80085f6 <_dtoa_r+0x93e>
 800816c:	9d01      	ldr	r5, [sp, #4]
 800816e:	2331      	movs	r3, #49	; 0x31
 8008170:	f805 3b01 	strb.w	r3, [r5], #1
 8008174:	9b00      	ldr	r3, [sp, #0]
 8008176:	3301      	adds	r3, #1
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	e240      	b.n	80085fe <_dtoa_r+0x946>
 800817c:	07f2      	lsls	r2, r6, #31
 800817e:	d505      	bpl.n	800818c <_dtoa_r+0x4d4>
 8008180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008184:	f7f8 fa68 	bl	8000658 <__aeabi_dmul>
 8008188:	3501      	adds	r5, #1
 800818a:	2301      	movs	r3, #1
 800818c:	1076      	asrs	r6, r6, #1
 800818e:	3708      	adds	r7, #8
 8008190:	e777      	b.n	8008082 <_dtoa_r+0x3ca>
 8008192:	2502      	movs	r5, #2
 8008194:	e779      	b.n	800808a <_dtoa_r+0x3d2>
 8008196:	9f00      	ldr	r7, [sp, #0]
 8008198:	9e03      	ldr	r6, [sp, #12]
 800819a:	e794      	b.n	80080c6 <_dtoa_r+0x40e>
 800819c:	9901      	ldr	r1, [sp, #4]
 800819e:	4b4c      	ldr	r3, [pc, #304]	; (80082d0 <_dtoa_r+0x618>)
 80081a0:	4431      	add	r1, r6
 80081a2:	910d      	str	r1, [sp, #52]	; 0x34
 80081a4:	9908      	ldr	r1, [sp, #32]
 80081a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80081aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081ae:	2900      	cmp	r1, #0
 80081b0:	d043      	beq.n	800823a <_dtoa_r+0x582>
 80081b2:	494d      	ldr	r1, [pc, #308]	; (80082e8 <_dtoa_r+0x630>)
 80081b4:	2000      	movs	r0, #0
 80081b6:	f7f8 fb79 	bl	80008ac <__aeabi_ddiv>
 80081ba:	4652      	mov	r2, sl
 80081bc:	465b      	mov	r3, fp
 80081be:	f7f8 f893 	bl	80002e8 <__aeabi_dsub>
 80081c2:	9d01      	ldr	r5, [sp, #4]
 80081c4:	4682      	mov	sl, r0
 80081c6:	468b      	mov	fp, r1
 80081c8:	4649      	mov	r1, r9
 80081ca:	4640      	mov	r0, r8
 80081cc:	f7f8 fcf4 	bl	8000bb8 <__aeabi_d2iz>
 80081d0:	4606      	mov	r6, r0
 80081d2:	f7f8 f9d7 	bl	8000584 <__aeabi_i2d>
 80081d6:	4602      	mov	r2, r0
 80081d8:	460b      	mov	r3, r1
 80081da:	4640      	mov	r0, r8
 80081dc:	4649      	mov	r1, r9
 80081de:	f7f8 f883 	bl	80002e8 <__aeabi_dsub>
 80081e2:	3630      	adds	r6, #48	; 0x30
 80081e4:	f805 6b01 	strb.w	r6, [r5], #1
 80081e8:	4652      	mov	r2, sl
 80081ea:	465b      	mov	r3, fp
 80081ec:	4680      	mov	r8, r0
 80081ee:	4689      	mov	r9, r1
 80081f0:	f7f8 fca4 	bl	8000b3c <__aeabi_dcmplt>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d163      	bne.n	80082c0 <_dtoa_r+0x608>
 80081f8:	4642      	mov	r2, r8
 80081fa:	464b      	mov	r3, r9
 80081fc:	4936      	ldr	r1, [pc, #216]	; (80082d8 <_dtoa_r+0x620>)
 80081fe:	2000      	movs	r0, #0
 8008200:	f7f8 f872 	bl	80002e8 <__aeabi_dsub>
 8008204:	4652      	mov	r2, sl
 8008206:	465b      	mov	r3, fp
 8008208:	f7f8 fc98 	bl	8000b3c <__aeabi_dcmplt>
 800820c:	2800      	cmp	r0, #0
 800820e:	f040 80b5 	bne.w	800837c <_dtoa_r+0x6c4>
 8008212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008214:	429d      	cmp	r5, r3
 8008216:	d081      	beq.n	800811c <_dtoa_r+0x464>
 8008218:	4b30      	ldr	r3, [pc, #192]	; (80082dc <_dtoa_r+0x624>)
 800821a:	2200      	movs	r2, #0
 800821c:	4650      	mov	r0, sl
 800821e:	4659      	mov	r1, fp
 8008220:	f7f8 fa1a 	bl	8000658 <__aeabi_dmul>
 8008224:	4b2d      	ldr	r3, [pc, #180]	; (80082dc <_dtoa_r+0x624>)
 8008226:	4682      	mov	sl, r0
 8008228:	468b      	mov	fp, r1
 800822a:	4640      	mov	r0, r8
 800822c:	4649      	mov	r1, r9
 800822e:	2200      	movs	r2, #0
 8008230:	f7f8 fa12 	bl	8000658 <__aeabi_dmul>
 8008234:	4680      	mov	r8, r0
 8008236:	4689      	mov	r9, r1
 8008238:	e7c6      	b.n	80081c8 <_dtoa_r+0x510>
 800823a:	4650      	mov	r0, sl
 800823c:	4659      	mov	r1, fp
 800823e:	f7f8 fa0b 	bl	8000658 <__aeabi_dmul>
 8008242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008244:	9d01      	ldr	r5, [sp, #4]
 8008246:	930f      	str	r3, [sp, #60]	; 0x3c
 8008248:	4682      	mov	sl, r0
 800824a:	468b      	mov	fp, r1
 800824c:	4649      	mov	r1, r9
 800824e:	4640      	mov	r0, r8
 8008250:	f7f8 fcb2 	bl	8000bb8 <__aeabi_d2iz>
 8008254:	4606      	mov	r6, r0
 8008256:	f7f8 f995 	bl	8000584 <__aeabi_i2d>
 800825a:	3630      	adds	r6, #48	; 0x30
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	4640      	mov	r0, r8
 8008262:	4649      	mov	r1, r9
 8008264:	f7f8 f840 	bl	80002e8 <__aeabi_dsub>
 8008268:	f805 6b01 	strb.w	r6, [r5], #1
 800826c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800826e:	429d      	cmp	r5, r3
 8008270:	4680      	mov	r8, r0
 8008272:	4689      	mov	r9, r1
 8008274:	f04f 0200 	mov.w	r2, #0
 8008278:	d124      	bne.n	80082c4 <_dtoa_r+0x60c>
 800827a:	4b1b      	ldr	r3, [pc, #108]	; (80082e8 <_dtoa_r+0x630>)
 800827c:	4650      	mov	r0, sl
 800827e:	4659      	mov	r1, fp
 8008280:	f7f8 f834 	bl	80002ec <__adddf3>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	4640      	mov	r0, r8
 800828a:	4649      	mov	r1, r9
 800828c:	f7f8 fc74 	bl	8000b78 <__aeabi_dcmpgt>
 8008290:	2800      	cmp	r0, #0
 8008292:	d173      	bne.n	800837c <_dtoa_r+0x6c4>
 8008294:	4652      	mov	r2, sl
 8008296:	465b      	mov	r3, fp
 8008298:	4913      	ldr	r1, [pc, #76]	; (80082e8 <_dtoa_r+0x630>)
 800829a:	2000      	movs	r0, #0
 800829c:	f7f8 f824 	bl	80002e8 <__aeabi_dsub>
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	4640      	mov	r0, r8
 80082a6:	4649      	mov	r1, r9
 80082a8:	f7f8 fc48 	bl	8000b3c <__aeabi_dcmplt>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	f43f af35 	beq.w	800811c <_dtoa_r+0x464>
 80082b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80082b4:	1e6b      	subs	r3, r5, #1
 80082b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80082b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082bc:	2b30      	cmp	r3, #48	; 0x30
 80082be:	d0f8      	beq.n	80082b2 <_dtoa_r+0x5fa>
 80082c0:	9700      	str	r7, [sp, #0]
 80082c2:	e049      	b.n	8008358 <_dtoa_r+0x6a0>
 80082c4:	4b05      	ldr	r3, [pc, #20]	; (80082dc <_dtoa_r+0x624>)
 80082c6:	f7f8 f9c7 	bl	8000658 <__aeabi_dmul>
 80082ca:	4680      	mov	r8, r0
 80082cc:	4689      	mov	r9, r1
 80082ce:	e7bd      	b.n	800824c <_dtoa_r+0x594>
 80082d0:	0800aec8 	.word	0x0800aec8
 80082d4:	0800aea0 	.word	0x0800aea0
 80082d8:	3ff00000 	.word	0x3ff00000
 80082dc:	40240000 	.word	0x40240000
 80082e0:	401c0000 	.word	0x401c0000
 80082e4:	40140000 	.word	0x40140000
 80082e8:	3fe00000 	.word	0x3fe00000
 80082ec:	9d01      	ldr	r5, [sp, #4]
 80082ee:	4656      	mov	r6, sl
 80082f0:	465f      	mov	r7, fp
 80082f2:	4642      	mov	r2, r8
 80082f4:	464b      	mov	r3, r9
 80082f6:	4630      	mov	r0, r6
 80082f8:	4639      	mov	r1, r7
 80082fa:	f7f8 fad7 	bl	80008ac <__aeabi_ddiv>
 80082fe:	f7f8 fc5b 	bl	8000bb8 <__aeabi_d2iz>
 8008302:	4682      	mov	sl, r0
 8008304:	f7f8 f93e 	bl	8000584 <__aeabi_i2d>
 8008308:	4642      	mov	r2, r8
 800830a:	464b      	mov	r3, r9
 800830c:	f7f8 f9a4 	bl	8000658 <__aeabi_dmul>
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	4630      	mov	r0, r6
 8008316:	4639      	mov	r1, r7
 8008318:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800831c:	f7f7 ffe4 	bl	80002e8 <__aeabi_dsub>
 8008320:	f805 6b01 	strb.w	r6, [r5], #1
 8008324:	9e01      	ldr	r6, [sp, #4]
 8008326:	9f03      	ldr	r7, [sp, #12]
 8008328:	1bae      	subs	r6, r5, r6
 800832a:	42b7      	cmp	r7, r6
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	d135      	bne.n	800839e <_dtoa_r+0x6e6>
 8008332:	f7f7 ffdb 	bl	80002ec <__adddf3>
 8008336:	4642      	mov	r2, r8
 8008338:	464b      	mov	r3, r9
 800833a:	4606      	mov	r6, r0
 800833c:	460f      	mov	r7, r1
 800833e:	f7f8 fc1b 	bl	8000b78 <__aeabi_dcmpgt>
 8008342:	b9d0      	cbnz	r0, 800837a <_dtoa_r+0x6c2>
 8008344:	4642      	mov	r2, r8
 8008346:	464b      	mov	r3, r9
 8008348:	4630      	mov	r0, r6
 800834a:	4639      	mov	r1, r7
 800834c:	f7f8 fbec 	bl	8000b28 <__aeabi_dcmpeq>
 8008350:	b110      	cbz	r0, 8008358 <_dtoa_r+0x6a0>
 8008352:	f01a 0f01 	tst.w	sl, #1
 8008356:	d110      	bne.n	800837a <_dtoa_r+0x6c2>
 8008358:	4620      	mov	r0, r4
 800835a:	ee18 1a10 	vmov	r1, s16
 800835e:	f000 fe87 	bl	8009070 <_Bfree>
 8008362:	2300      	movs	r3, #0
 8008364:	9800      	ldr	r0, [sp, #0]
 8008366:	702b      	strb	r3, [r5, #0]
 8008368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800836a:	3001      	adds	r0, #1
 800836c:	6018      	str	r0, [r3, #0]
 800836e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008370:	2b00      	cmp	r3, #0
 8008372:	f43f acf1 	beq.w	8007d58 <_dtoa_r+0xa0>
 8008376:	601d      	str	r5, [r3, #0]
 8008378:	e4ee      	b.n	8007d58 <_dtoa_r+0xa0>
 800837a:	9f00      	ldr	r7, [sp, #0]
 800837c:	462b      	mov	r3, r5
 800837e:	461d      	mov	r5, r3
 8008380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008384:	2a39      	cmp	r2, #57	; 0x39
 8008386:	d106      	bne.n	8008396 <_dtoa_r+0x6de>
 8008388:	9a01      	ldr	r2, [sp, #4]
 800838a:	429a      	cmp	r2, r3
 800838c:	d1f7      	bne.n	800837e <_dtoa_r+0x6c6>
 800838e:	9901      	ldr	r1, [sp, #4]
 8008390:	2230      	movs	r2, #48	; 0x30
 8008392:	3701      	adds	r7, #1
 8008394:	700a      	strb	r2, [r1, #0]
 8008396:	781a      	ldrb	r2, [r3, #0]
 8008398:	3201      	adds	r2, #1
 800839a:	701a      	strb	r2, [r3, #0]
 800839c:	e790      	b.n	80082c0 <_dtoa_r+0x608>
 800839e:	4ba6      	ldr	r3, [pc, #664]	; (8008638 <_dtoa_r+0x980>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	f7f8 f959 	bl	8000658 <__aeabi_dmul>
 80083a6:	2200      	movs	r2, #0
 80083a8:	2300      	movs	r3, #0
 80083aa:	4606      	mov	r6, r0
 80083ac:	460f      	mov	r7, r1
 80083ae:	f7f8 fbbb 	bl	8000b28 <__aeabi_dcmpeq>
 80083b2:	2800      	cmp	r0, #0
 80083b4:	d09d      	beq.n	80082f2 <_dtoa_r+0x63a>
 80083b6:	e7cf      	b.n	8008358 <_dtoa_r+0x6a0>
 80083b8:	9a08      	ldr	r2, [sp, #32]
 80083ba:	2a00      	cmp	r2, #0
 80083bc:	f000 80d7 	beq.w	800856e <_dtoa_r+0x8b6>
 80083c0:	9a06      	ldr	r2, [sp, #24]
 80083c2:	2a01      	cmp	r2, #1
 80083c4:	f300 80ba 	bgt.w	800853c <_dtoa_r+0x884>
 80083c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083ca:	2a00      	cmp	r2, #0
 80083cc:	f000 80b2 	beq.w	8008534 <_dtoa_r+0x87c>
 80083d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083d4:	9e07      	ldr	r6, [sp, #28]
 80083d6:	9d04      	ldr	r5, [sp, #16]
 80083d8:	9a04      	ldr	r2, [sp, #16]
 80083da:	441a      	add	r2, r3
 80083dc:	9204      	str	r2, [sp, #16]
 80083de:	9a05      	ldr	r2, [sp, #20]
 80083e0:	2101      	movs	r1, #1
 80083e2:	441a      	add	r2, r3
 80083e4:	4620      	mov	r0, r4
 80083e6:	9205      	str	r2, [sp, #20]
 80083e8:	f000 ff44 	bl	8009274 <__i2b>
 80083ec:	4607      	mov	r7, r0
 80083ee:	2d00      	cmp	r5, #0
 80083f0:	dd0c      	ble.n	800840c <_dtoa_r+0x754>
 80083f2:	9b05      	ldr	r3, [sp, #20]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	dd09      	ble.n	800840c <_dtoa_r+0x754>
 80083f8:	42ab      	cmp	r3, r5
 80083fa:	9a04      	ldr	r2, [sp, #16]
 80083fc:	bfa8      	it	ge
 80083fe:	462b      	movge	r3, r5
 8008400:	1ad2      	subs	r2, r2, r3
 8008402:	9204      	str	r2, [sp, #16]
 8008404:	9a05      	ldr	r2, [sp, #20]
 8008406:	1aed      	subs	r5, r5, r3
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	9305      	str	r3, [sp, #20]
 800840c:	9b07      	ldr	r3, [sp, #28]
 800840e:	b31b      	cbz	r3, 8008458 <_dtoa_r+0x7a0>
 8008410:	9b08      	ldr	r3, [sp, #32]
 8008412:	2b00      	cmp	r3, #0
 8008414:	f000 80af 	beq.w	8008576 <_dtoa_r+0x8be>
 8008418:	2e00      	cmp	r6, #0
 800841a:	dd13      	ble.n	8008444 <_dtoa_r+0x78c>
 800841c:	4639      	mov	r1, r7
 800841e:	4632      	mov	r2, r6
 8008420:	4620      	mov	r0, r4
 8008422:	f000 ffe7 	bl	80093f4 <__pow5mult>
 8008426:	ee18 2a10 	vmov	r2, s16
 800842a:	4601      	mov	r1, r0
 800842c:	4607      	mov	r7, r0
 800842e:	4620      	mov	r0, r4
 8008430:	f000 ff36 	bl	80092a0 <__multiply>
 8008434:	ee18 1a10 	vmov	r1, s16
 8008438:	4680      	mov	r8, r0
 800843a:	4620      	mov	r0, r4
 800843c:	f000 fe18 	bl	8009070 <_Bfree>
 8008440:	ee08 8a10 	vmov	s16, r8
 8008444:	9b07      	ldr	r3, [sp, #28]
 8008446:	1b9a      	subs	r2, r3, r6
 8008448:	d006      	beq.n	8008458 <_dtoa_r+0x7a0>
 800844a:	ee18 1a10 	vmov	r1, s16
 800844e:	4620      	mov	r0, r4
 8008450:	f000 ffd0 	bl	80093f4 <__pow5mult>
 8008454:	ee08 0a10 	vmov	s16, r0
 8008458:	2101      	movs	r1, #1
 800845a:	4620      	mov	r0, r4
 800845c:	f000 ff0a 	bl	8009274 <__i2b>
 8008460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008462:	2b00      	cmp	r3, #0
 8008464:	4606      	mov	r6, r0
 8008466:	f340 8088 	ble.w	800857a <_dtoa_r+0x8c2>
 800846a:	461a      	mov	r2, r3
 800846c:	4601      	mov	r1, r0
 800846e:	4620      	mov	r0, r4
 8008470:	f000 ffc0 	bl	80093f4 <__pow5mult>
 8008474:	9b06      	ldr	r3, [sp, #24]
 8008476:	2b01      	cmp	r3, #1
 8008478:	4606      	mov	r6, r0
 800847a:	f340 8081 	ble.w	8008580 <_dtoa_r+0x8c8>
 800847e:	f04f 0800 	mov.w	r8, #0
 8008482:	6933      	ldr	r3, [r6, #16]
 8008484:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008488:	6918      	ldr	r0, [r3, #16]
 800848a:	f000 fea3 	bl	80091d4 <__hi0bits>
 800848e:	f1c0 0020 	rsb	r0, r0, #32
 8008492:	9b05      	ldr	r3, [sp, #20]
 8008494:	4418      	add	r0, r3
 8008496:	f010 001f 	ands.w	r0, r0, #31
 800849a:	f000 8092 	beq.w	80085c2 <_dtoa_r+0x90a>
 800849e:	f1c0 0320 	rsb	r3, r0, #32
 80084a2:	2b04      	cmp	r3, #4
 80084a4:	f340 808a 	ble.w	80085bc <_dtoa_r+0x904>
 80084a8:	f1c0 001c 	rsb	r0, r0, #28
 80084ac:	9b04      	ldr	r3, [sp, #16]
 80084ae:	4403      	add	r3, r0
 80084b0:	9304      	str	r3, [sp, #16]
 80084b2:	9b05      	ldr	r3, [sp, #20]
 80084b4:	4403      	add	r3, r0
 80084b6:	4405      	add	r5, r0
 80084b8:	9305      	str	r3, [sp, #20]
 80084ba:	9b04      	ldr	r3, [sp, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	dd07      	ble.n	80084d0 <_dtoa_r+0x818>
 80084c0:	ee18 1a10 	vmov	r1, s16
 80084c4:	461a      	mov	r2, r3
 80084c6:	4620      	mov	r0, r4
 80084c8:	f000 ffee 	bl	80094a8 <__lshift>
 80084cc:	ee08 0a10 	vmov	s16, r0
 80084d0:	9b05      	ldr	r3, [sp, #20]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	dd05      	ble.n	80084e2 <_dtoa_r+0x82a>
 80084d6:	4631      	mov	r1, r6
 80084d8:	461a      	mov	r2, r3
 80084da:	4620      	mov	r0, r4
 80084dc:	f000 ffe4 	bl	80094a8 <__lshift>
 80084e0:	4606      	mov	r6, r0
 80084e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d06e      	beq.n	80085c6 <_dtoa_r+0x90e>
 80084e8:	ee18 0a10 	vmov	r0, s16
 80084ec:	4631      	mov	r1, r6
 80084ee:	f001 f84b 	bl	8009588 <__mcmp>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	da67      	bge.n	80085c6 <_dtoa_r+0x90e>
 80084f6:	9b00      	ldr	r3, [sp, #0]
 80084f8:	3b01      	subs	r3, #1
 80084fa:	ee18 1a10 	vmov	r1, s16
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	220a      	movs	r2, #10
 8008502:	2300      	movs	r3, #0
 8008504:	4620      	mov	r0, r4
 8008506:	f000 fdd5 	bl	80090b4 <__multadd>
 800850a:	9b08      	ldr	r3, [sp, #32]
 800850c:	ee08 0a10 	vmov	s16, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	f000 81b1 	beq.w	8008878 <_dtoa_r+0xbc0>
 8008516:	2300      	movs	r3, #0
 8008518:	4639      	mov	r1, r7
 800851a:	220a      	movs	r2, #10
 800851c:	4620      	mov	r0, r4
 800851e:	f000 fdc9 	bl	80090b4 <__multadd>
 8008522:	9b02      	ldr	r3, [sp, #8]
 8008524:	2b00      	cmp	r3, #0
 8008526:	4607      	mov	r7, r0
 8008528:	f300 808e 	bgt.w	8008648 <_dtoa_r+0x990>
 800852c:	9b06      	ldr	r3, [sp, #24]
 800852e:	2b02      	cmp	r3, #2
 8008530:	dc51      	bgt.n	80085d6 <_dtoa_r+0x91e>
 8008532:	e089      	b.n	8008648 <_dtoa_r+0x990>
 8008534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008536:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800853a:	e74b      	b.n	80083d4 <_dtoa_r+0x71c>
 800853c:	9b03      	ldr	r3, [sp, #12]
 800853e:	1e5e      	subs	r6, r3, #1
 8008540:	9b07      	ldr	r3, [sp, #28]
 8008542:	42b3      	cmp	r3, r6
 8008544:	bfbf      	itttt	lt
 8008546:	9b07      	ldrlt	r3, [sp, #28]
 8008548:	9607      	strlt	r6, [sp, #28]
 800854a:	1af2      	sublt	r2, r6, r3
 800854c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800854e:	bfb6      	itet	lt
 8008550:	189b      	addlt	r3, r3, r2
 8008552:	1b9e      	subge	r6, r3, r6
 8008554:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008556:	9b03      	ldr	r3, [sp, #12]
 8008558:	bfb8      	it	lt
 800855a:	2600      	movlt	r6, #0
 800855c:	2b00      	cmp	r3, #0
 800855e:	bfb7      	itett	lt
 8008560:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008564:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008568:	1a9d      	sublt	r5, r3, r2
 800856a:	2300      	movlt	r3, #0
 800856c:	e734      	b.n	80083d8 <_dtoa_r+0x720>
 800856e:	9e07      	ldr	r6, [sp, #28]
 8008570:	9d04      	ldr	r5, [sp, #16]
 8008572:	9f08      	ldr	r7, [sp, #32]
 8008574:	e73b      	b.n	80083ee <_dtoa_r+0x736>
 8008576:	9a07      	ldr	r2, [sp, #28]
 8008578:	e767      	b.n	800844a <_dtoa_r+0x792>
 800857a:	9b06      	ldr	r3, [sp, #24]
 800857c:	2b01      	cmp	r3, #1
 800857e:	dc18      	bgt.n	80085b2 <_dtoa_r+0x8fa>
 8008580:	f1ba 0f00 	cmp.w	sl, #0
 8008584:	d115      	bne.n	80085b2 <_dtoa_r+0x8fa>
 8008586:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800858a:	b993      	cbnz	r3, 80085b2 <_dtoa_r+0x8fa>
 800858c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008590:	0d1b      	lsrs	r3, r3, #20
 8008592:	051b      	lsls	r3, r3, #20
 8008594:	b183      	cbz	r3, 80085b8 <_dtoa_r+0x900>
 8008596:	9b04      	ldr	r3, [sp, #16]
 8008598:	3301      	adds	r3, #1
 800859a:	9304      	str	r3, [sp, #16]
 800859c:	9b05      	ldr	r3, [sp, #20]
 800859e:	3301      	adds	r3, #1
 80085a0:	9305      	str	r3, [sp, #20]
 80085a2:	f04f 0801 	mov.w	r8, #1
 80085a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f47f af6a 	bne.w	8008482 <_dtoa_r+0x7ca>
 80085ae:	2001      	movs	r0, #1
 80085b0:	e76f      	b.n	8008492 <_dtoa_r+0x7da>
 80085b2:	f04f 0800 	mov.w	r8, #0
 80085b6:	e7f6      	b.n	80085a6 <_dtoa_r+0x8ee>
 80085b8:	4698      	mov	r8, r3
 80085ba:	e7f4      	b.n	80085a6 <_dtoa_r+0x8ee>
 80085bc:	f43f af7d 	beq.w	80084ba <_dtoa_r+0x802>
 80085c0:	4618      	mov	r0, r3
 80085c2:	301c      	adds	r0, #28
 80085c4:	e772      	b.n	80084ac <_dtoa_r+0x7f4>
 80085c6:	9b03      	ldr	r3, [sp, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	dc37      	bgt.n	800863c <_dtoa_r+0x984>
 80085cc:	9b06      	ldr	r3, [sp, #24]
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	dd34      	ble.n	800863c <_dtoa_r+0x984>
 80085d2:	9b03      	ldr	r3, [sp, #12]
 80085d4:	9302      	str	r3, [sp, #8]
 80085d6:	9b02      	ldr	r3, [sp, #8]
 80085d8:	b96b      	cbnz	r3, 80085f6 <_dtoa_r+0x93e>
 80085da:	4631      	mov	r1, r6
 80085dc:	2205      	movs	r2, #5
 80085de:	4620      	mov	r0, r4
 80085e0:	f000 fd68 	bl	80090b4 <__multadd>
 80085e4:	4601      	mov	r1, r0
 80085e6:	4606      	mov	r6, r0
 80085e8:	ee18 0a10 	vmov	r0, s16
 80085ec:	f000 ffcc 	bl	8009588 <__mcmp>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	f73f adbb 	bgt.w	800816c <_dtoa_r+0x4b4>
 80085f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f8:	9d01      	ldr	r5, [sp, #4]
 80085fa:	43db      	mvns	r3, r3
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	f04f 0800 	mov.w	r8, #0
 8008602:	4631      	mov	r1, r6
 8008604:	4620      	mov	r0, r4
 8008606:	f000 fd33 	bl	8009070 <_Bfree>
 800860a:	2f00      	cmp	r7, #0
 800860c:	f43f aea4 	beq.w	8008358 <_dtoa_r+0x6a0>
 8008610:	f1b8 0f00 	cmp.w	r8, #0
 8008614:	d005      	beq.n	8008622 <_dtoa_r+0x96a>
 8008616:	45b8      	cmp	r8, r7
 8008618:	d003      	beq.n	8008622 <_dtoa_r+0x96a>
 800861a:	4641      	mov	r1, r8
 800861c:	4620      	mov	r0, r4
 800861e:	f000 fd27 	bl	8009070 <_Bfree>
 8008622:	4639      	mov	r1, r7
 8008624:	4620      	mov	r0, r4
 8008626:	f000 fd23 	bl	8009070 <_Bfree>
 800862a:	e695      	b.n	8008358 <_dtoa_r+0x6a0>
 800862c:	2600      	movs	r6, #0
 800862e:	4637      	mov	r7, r6
 8008630:	e7e1      	b.n	80085f6 <_dtoa_r+0x93e>
 8008632:	9700      	str	r7, [sp, #0]
 8008634:	4637      	mov	r7, r6
 8008636:	e599      	b.n	800816c <_dtoa_r+0x4b4>
 8008638:	40240000 	.word	0x40240000
 800863c:	9b08      	ldr	r3, [sp, #32]
 800863e:	2b00      	cmp	r3, #0
 8008640:	f000 80ca 	beq.w	80087d8 <_dtoa_r+0xb20>
 8008644:	9b03      	ldr	r3, [sp, #12]
 8008646:	9302      	str	r3, [sp, #8]
 8008648:	2d00      	cmp	r5, #0
 800864a:	dd05      	ble.n	8008658 <_dtoa_r+0x9a0>
 800864c:	4639      	mov	r1, r7
 800864e:	462a      	mov	r2, r5
 8008650:	4620      	mov	r0, r4
 8008652:	f000 ff29 	bl	80094a8 <__lshift>
 8008656:	4607      	mov	r7, r0
 8008658:	f1b8 0f00 	cmp.w	r8, #0
 800865c:	d05b      	beq.n	8008716 <_dtoa_r+0xa5e>
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	4620      	mov	r0, r4
 8008662:	f000 fcc5 	bl	8008ff0 <_Balloc>
 8008666:	4605      	mov	r5, r0
 8008668:	b928      	cbnz	r0, 8008676 <_dtoa_r+0x9be>
 800866a:	4b87      	ldr	r3, [pc, #540]	; (8008888 <_dtoa_r+0xbd0>)
 800866c:	4602      	mov	r2, r0
 800866e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008672:	f7ff bb3b 	b.w	8007cec <_dtoa_r+0x34>
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	3202      	adds	r2, #2
 800867a:	0092      	lsls	r2, r2, #2
 800867c:	f107 010c 	add.w	r1, r7, #12
 8008680:	300c      	adds	r0, #12
 8008682:	f000 fca7 	bl	8008fd4 <memcpy>
 8008686:	2201      	movs	r2, #1
 8008688:	4629      	mov	r1, r5
 800868a:	4620      	mov	r0, r4
 800868c:	f000 ff0c 	bl	80094a8 <__lshift>
 8008690:	9b01      	ldr	r3, [sp, #4]
 8008692:	f103 0901 	add.w	r9, r3, #1
 8008696:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800869a:	4413      	add	r3, r2
 800869c:	9305      	str	r3, [sp, #20]
 800869e:	f00a 0301 	and.w	r3, sl, #1
 80086a2:	46b8      	mov	r8, r7
 80086a4:	9304      	str	r3, [sp, #16]
 80086a6:	4607      	mov	r7, r0
 80086a8:	4631      	mov	r1, r6
 80086aa:	ee18 0a10 	vmov	r0, s16
 80086ae:	f7ff fa77 	bl	8007ba0 <quorem>
 80086b2:	4641      	mov	r1, r8
 80086b4:	9002      	str	r0, [sp, #8]
 80086b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80086ba:	ee18 0a10 	vmov	r0, s16
 80086be:	f000 ff63 	bl	8009588 <__mcmp>
 80086c2:	463a      	mov	r2, r7
 80086c4:	9003      	str	r0, [sp, #12]
 80086c6:	4631      	mov	r1, r6
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 ff79 	bl	80095c0 <__mdiff>
 80086ce:	68c2      	ldr	r2, [r0, #12]
 80086d0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80086d4:	4605      	mov	r5, r0
 80086d6:	bb02      	cbnz	r2, 800871a <_dtoa_r+0xa62>
 80086d8:	4601      	mov	r1, r0
 80086da:	ee18 0a10 	vmov	r0, s16
 80086de:	f000 ff53 	bl	8009588 <__mcmp>
 80086e2:	4602      	mov	r2, r0
 80086e4:	4629      	mov	r1, r5
 80086e6:	4620      	mov	r0, r4
 80086e8:	9207      	str	r2, [sp, #28]
 80086ea:	f000 fcc1 	bl	8009070 <_Bfree>
 80086ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80086f2:	ea43 0102 	orr.w	r1, r3, r2
 80086f6:	9b04      	ldr	r3, [sp, #16]
 80086f8:	430b      	orrs	r3, r1
 80086fa:	464d      	mov	r5, r9
 80086fc:	d10f      	bne.n	800871e <_dtoa_r+0xa66>
 80086fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008702:	d02a      	beq.n	800875a <_dtoa_r+0xaa2>
 8008704:	9b03      	ldr	r3, [sp, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	dd02      	ble.n	8008710 <_dtoa_r+0xa58>
 800870a:	9b02      	ldr	r3, [sp, #8]
 800870c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008710:	f88b a000 	strb.w	sl, [fp]
 8008714:	e775      	b.n	8008602 <_dtoa_r+0x94a>
 8008716:	4638      	mov	r0, r7
 8008718:	e7ba      	b.n	8008690 <_dtoa_r+0x9d8>
 800871a:	2201      	movs	r2, #1
 800871c:	e7e2      	b.n	80086e4 <_dtoa_r+0xa2c>
 800871e:	9b03      	ldr	r3, [sp, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	db04      	blt.n	800872e <_dtoa_r+0xa76>
 8008724:	9906      	ldr	r1, [sp, #24]
 8008726:	430b      	orrs	r3, r1
 8008728:	9904      	ldr	r1, [sp, #16]
 800872a:	430b      	orrs	r3, r1
 800872c:	d122      	bne.n	8008774 <_dtoa_r+0xabc>
 800872e:	2a00      	cmp	r2, #0
 8008730:	ddee      	ble.n	8008710 <_dtoa_r+0xa58>
 8008732:	ee18 1a10 	vmov	r1, s16
 8008736:	2201      	movs	r2, #1
 8008738:	4620      	mov	r0, r4
 800873a:	f000 feb5 	bl	80094a8 <__lshift>
 800873e:	4631      	mov	r1, r6
 8008740:	ee08 0a10 	vmov	s16, r0
 8008744:	f000 ff20 	bl	8009588 <__mcmp>
 8008748:	2800      	cmp	r0, #0
 800874a:	dc03      	bgt.n	8008754 <_dtoa_r+0xa9c>
 800874c:	d1e0      	bne.n	8008710 <_dtoa_r+0xa58>
 800874e:	f01a 0f01 	tst.w	sl, #1
 8008752:	d0dd      	beq.n	8008710 <_dtoa_r+0xa58>
 8008754:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008758:	d1d7      	bne.n	800870a <_dtoa_r+0xa52>
 800875a:	2339      	movs	r3, #57	; 0x39
 800875c:	f88b 3000 	strb.w	r3, [fp]
 8008760:	462b      	mov	r3, r5
 8008762:	461d      	mov	r5, r3
 8008764:	3b01      	subs	r3, #1
 8008766:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800876a:	2a39      	cmp	r2, #57	; 0x39
 800876c:	d071      	beq.n	8008852 <_dtoa_r+0xb9a>
 800876e:	3201      	adds	r2, #1
 8008770:	701a      	strb	r2, [r3, #0]
 8008772:	e746      	b.n	8008602 <_dtoa_r+0x94a>
 8008774:	2a00      	cmp	r2, #0
 8008776:	dd07      	ble.n	8008788 <_dtoa_r+0xad0>
 8008778:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800877c:	d0ed      	beq.n	800875a <_dtoa_r+0xaa2>
 800877e:	f10a 0301 	add.w	r3, sl, #1
 8008782:	f88b 3000 	strb.w	r3, [fp]
 8008786:	e73c      	b.n	8008602 <_dtoa_r+0x94a>
 8008788:	9b05      	ldr	r3, [sp, #20]
 800878a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800878e:	4599      	cmp	r9, r3
 8008790:	d047      	beq.n	8008822 <_dtoa_r+0xb6a>
 8008792:	ee18 1a10 	vmov	r1, s16
 8008796:	2300      	movs	r3, #0
 8008798:	220a      	movs	r2, #10
 800879a:	4620      	mov	r0, r4
 800879c:	f000 fc8a 	bl	80090b4 <__multadd>
 80087a0:	45b8      	cmp	r8, r7
 80087a2:	ee08 0a10 	vmov	s16, r0
 80087a6:	f04f 0300 	mov.w	r3, #0
 80087aa:	f04f 020a 	mov.w	r2, #10
 80087ae:	4641      	mov	r1, r8
 80087b0:	4620      	mov	r0, r4
 80087b2:	d106      	bne.n	80087c2 <_dtoa_r+0xb0a>
 80087b4:	f000 fc7e 	bl	80090b4 <__multadd>
 80087b8:	4680      	mov	r8, r0
 80087ba:	4607      	mov	r7, r0
 80087bc:	f109 0901 	add.w	r9, r9, #1
 80087c0:	e772      	b.n	80086a8 <_dtoa_r+0x9f0>
 80087c2:	f000 fc77 	bl	80090b4 <__multadd>
 80087c6:	4639      	mov	r1, r7
 80087c8:	4680      	mov	r8, r0
 80087ca:	2300      	movs	r3, #0
 80087cc:	220a      	movs	r2, #10
 80087ce:	4620      	mov	r0, r4
 80087d0:	f000 fc70 	bl	80090b4 <__multadd>
 80087d4:	4607      	mov	r7, r0
 80087d6:	e7f1      	b.n	80087bc <_dtoa_r+0xb04>
 80087d8:	9b03      	ldr	r3, [sp, #12]
 80087da:	9302      	str	r3, [sp, #8]
 80087dc:	9d01      	ldr	r5, [sp, #4]
 80087de:	ee18 0a10 	vmov	r0, s16
 80087e2:	4631      	mov	r1, r6
 80087e4:	f7ff f9dc 	bl	8007ba0 <quorem>
 80087e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80087ec:	9b01      	ldr	r3, [sp, #4]
 80087ee:	f805 ab01 	strb.w	sl, [r5], #1
 80087f2:	1aea      	subs	r2, r5, r3
 80087f4:	9b02      	ldr	r3, [sp, #8]
 80087f6:	4293      	cmp	r3, r2
 80087f8:	dd09      	ble.n	800880e <_dtoa_r+0xb56>
 80087fa:	ee18 1a10 	vmov	r1, s16
 80087fe:	2300      	movs	r3, #0
 8008800:	220a      	movs	r2, #10
 8008802:	4620      	mov	r0, r4
 8008804:	f000 fc56 	bl	80090b4 <__multadd>
 8008808:	ee08 0a10 	vmov	s16, r0
 800880c:	e7e7      	b.n	80087de <_dtoa_r+0xb26>
 800880e:	9b02      	ldr	r3, [sp, #8]
 8008810:	2b00      	cmp	r3, #0
 8008812:	bfc8      	it	gt
 8008814:	461d      	movgt	r5, r3
 8008816:	9b01      	ldr	r3, [sp, #4]
 8008818:	bfd8      	it	le
 800881a:	2501      	movle	r5, #1
 800881c:	441d      	add	r5, r3
 800881e:	f04f 0800 	mov.w	r8, #0
 8008822:	ee18 1a10 	vmov	r1, s16
 8008826:	2201      	movs	r2, #1
 8008828:	4620      	mov	r0, r4
 800882a:	f000 fe3d 	bl	80094a8 <__lshift>
 800882e:	4631      	mov	r1, r6
 8008830:	ee08 0a10 	vmov	s16, r0
 8008834:	f000 fea8 	bl	8009588 <__mcmp>
 8008838:	2800      	cmp	r0, #0
 800883a:	dc91      	bgt.n	8008760 <_dtoa_r+0xaa8>
 800883c:	d102      	bne.n	8008844 <_dtoa_r+0xb8c>
 800883e:	f01a 0f01 	tst.w	sl, #1
 8008842:	d18d      	bne.n	8008760 <_dtoa_r+0xaa8>
 8008844:	462b      	mov	r3, r5
 8008846:	461d      	mov	r5, r3
 8008848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800884c:	2a30      	cmp	r2, #48	; 0x30
 800884e:	d0fa      	beq.n	8008846 <_dtoa_r+0xb8e>
 8008850:	e6d7      	b.n	8008602 <_dtoa_r+0x94a>
 8008852:	9a01      	ldr	r2, [sp, #4]
 8008854:	429a      	cmp	r2, r3
 8008856:	d184      	bne.n	8008762 <_dtoa_r+0xaaa>
 8008858:	9b00      	ldr	r3, [sp, #0]
 800885a:	3301      	adds	r3, #1
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	2331      	movs	r3, #49	; 0x31
 8008860:	7013      	strb	r3, [r2, #0]
 8008862:	e6ce      	b.n	8008602 <_dtoa_r+0x94a>
 8008864:	4b09      	ldr	r3, [pc, #36]	; (800888c <_dtoa_r+0xbd4>)
 8008866:	f7ff ba95 	b.w	8007d94 <_dtoa_r+0xdc>
 800886a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800886c:	2b00      	cmp	r3, #0
 800886e:	f47f aa6e 	bne.w	8007d4e <_dtoa_r+0x96>
 8008872:	4b07      	ldr	r3, [pc, #28]	; (8008890 <_dtoa_r+0xbd8>)
 8008874:	f7ff ba8e 	b.w	8007d94 <_dtoa_r+0xdc>
 8008878:	9b02      	ldr	r3, [sp, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	dcae      	bgt.n	80087dc <_dtoa_r+0xb24>
 800887e:	9b06      	ldr	r3, [sp, #24]
 8008880:	2b02      	cmp	r3, #2
 8008882:	f73f aea8 	bgt.w	80085d6 <_dtoa_r+0x91e>
 8008886:	e7a9      	b.n	80087dc <_dtoa_r+0xb24>
 8008888:	0800adb8 	.word	0x0800adb8
 800888c:	0800ac28 	.word	0x0800ac28
 8008890:	0800ad50 	.word	0x0800ad50

08008894 <fiprintf>:
 8008894:	b40e      	push	{r1, r2, r3}
 8008896:	b503      	push	{r0, r1, lr}
 8008898:	4601      	mov	r1, r0
 800889a:	ab03      	add	r3, sp, #12
 800889c:	4805      	ldr	r0, [pc, #20]	; (80088b4 <fiprintf+0x20>)
 800889e:	f853 2b04 	ldr.w	r2, [r3], #4
 80088a2:	6800      	ldr	r0, [r0, #0]
 80088a4:	9301      	str	r3, [sp, #4]
 80088a6:	f001 fae1 	bl	8009e6c <_vfiprintf_r>
 80088aa:	b002      	add	sp, #8
 80088ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80088b0:	b003      	add	sp, #12
 80088b2:	4770      	bx	lr
 80088b4:	20000060 	.word	0x20000060

080088b8 <rshift>:
 80088b8:	6903      	ldr	r3, [r0, #16]
 80088ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80088be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80088c6:	f100 0414 	add.w	r4, r0, #20
 80088ca:	dd45      	ble.n	8008958 <rshift+0xa0>
 80088cc:	f011 011f 	ands.w	r1, r1, #31
 80088d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80088d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80088d8:	d10c      	bne.n	80088f4 <rshift+0x3c>
 80088da:	f100 0710 	add.w	r7, r0, #16
 80088de:	4629      	mov	r1, r5
 80088e0:	42b1      	cmp	r1, r6
 80088e2:	d334      	bcc.n	800894e <rshift+0x96>
 80088e4:	1a9b      	subs	r3, r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	1eea      	subs	r2, r5, #3
 80088ea:	4296      	cmp	r6, r2
 80088ec:	bf38      	it	cc
 80088ee:	2300      	movcc	r3, #0
 80088f0:	4423      	add	r3, r4
 80088f2:	e015      	b.n	8008920 <rshift+0x68>
 80088f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80088f8:	f1c1 0820 	rsb	r8, r1, #32
 80088fc:	40cf      	lsrs	r7, r1
 80088fe:	f105 0e04 	add.w	lr, r5, #4
 8008902:	46a1      	mov	r9, r4
 8008904:	4576      	cmp	r6, lr
 8008906:	46f4      	mov	ip, lr
 8008908:	d815      	bhi.n	8008936 <rshift+0x7e>
 800890a:	1a9a      	subs	r2, r3, r2
 800890c:	0092      	lsls	r2, r2, #2
 800890e:	3a04      	subs	r2, #4
 8008910:	3501      	adds	r5, #1
 8008912:	42ae      	cmp	r6, r5
 8008914:	bf38      	it	cc
 8008916:	2200      	movcc	r2, #0
 8008918:	18a3      	adds	r3, r4, r2
 800891a:	50a7      	str	r7, [r4, r2]
 800891c:	b107      	cbz	r7, 8008920 <rshift+0x68>
 800891e:	3304      	adds	r3, #4
 8008920:	1b1a      	subs	r2, r3, r4
 8008922:	42a3      	cmp	r3, r4
 8008924:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008928:	bf08      	it	eq
 800892a:	2300      	moveq	r3, #0
 800892c:	6102      	str	r2, [r0, #16]
 800892e:	bf08      	it	eq
 8008930:	6143      	streq	r3, [r0, #20]
 8008932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008936:	f8dc c000 	ldr.w	ip, [ip]
 800893a:	fa0c fc08 	lsl.w	ip, ip, r8
 800893e:	ea4c 0707 	orr.w	r7, ip, r7
 8008942:	f849 7b04 	str.w	r7, [r9], #4
 8008946:	f85e 7b04 	ldr.w	r7, [lr], #4
 800894a:	40cf      	lsrs	r7, r1
 800894c:	e7da      	b.n	8008904 <rshift+0x4c>
 800894e:	f851 cb04 	ldr.w	ip, [r1], #4
 8008952:	f847 cf04 	str.w	ip, [r7, #4]!
 8008956:	e7c3      	b.n	80088e0 <rshift+0x28>
 8008958:	4623      	mov	r3, r4
 800895a:	e7e1      	b.n	8008920 <rshift+0x68>

0800895c <__hexdig_fun>:
 800895c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008960:	2b09      	cmp	r3, #9
 8008962:	d802      	bhi.n	800896a <__hexdig_fun+0xe>
 8008964:	3820      	subs	r0, #32
 8008966:	b2c0      	uxtb	r0, r0
 8008968:	4770      	bx	lr
 800896a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800896e:	2b05      	cmp	r3, #5
 8008970:	d801      	bhi.n	8008976 <__hexdig_fun+0x1a>
 8008972:	3847      	subs	r0, #71	; 0x47
 8008974:	e7f7      	b.n	8008966 <__hexdig_fun+0xa>
 8008976:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800897a:	2b05      	cmp	r3, #5
 800897c:	d801      	bhi.n	8008982 <__hexdig_fun+0x26>
 800897e:	3827      	subs	r0, #39	; 0x27
 8008980:	e7f1      	b.n	8008966 <__hexdig_fun+0xa>
 8008982:	2000      	movs	r0, #0
 8008984:	4770      	bx	lr
	...

08008988 <__gethex>:
 8008988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800898c:	ed2d 8b02 	vpush	{d8}
 8008990:	b089      	sub	sp, #36	; 0x24
 8008992:	ee08 0a10 	vmov	s16, r0
 8008996:	9304      	str	r3, [sp, #16]
 8008998:	4bb4      	ldr	r3, [pc, #720]	; (8008c6c <__gethex+0x2e4>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	9301      	str	r3, [sp, #4]
 800899e:	4618      	mov	r0, r3
 80089a0:	468b      	mov	fp, r1
 80089a2:	4690      	mov	r8, r2
 80089a4:	f7f7 fc3e 	bl	8000224 <strlen>
 80089a8:	9b01      	ldr	r3, [sp, #4]
 80089aa:	f8db 2000 	ldr.w	r2, [fp]
 80089ae:	4403      	add	r3, r0
 80089b0:	4682      	mov	sl, r0
 80089b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80089b6:	9305      	str	r3, [sp, #20]
 80089b8:	1c93      	adds	r3, r2, #2
 80089ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80089be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80089c2:	32fe      	adds	r2, #254	; 0xfe
 80089c4:	18d1      	adds	r1, r2, r3
 80089c6:	461f      	mov	r7, r3
 80089c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80089cc:	9100      	str	r1, [sp, #0]
 80089ce:	2830      	cmp	r0, #48	; 0x30
 80089d0:	d0f8      	beq.n	80089c4 <__gethex+0x3c>
 80089d2:	f7ff ffc3 	bl	800895c <__hexdig_fun>
 80089d6:	4604      	mov	r4, r0
 80089d8:	2800      	cmp	r0, #0
 80089da:	d13a      	bne.n	8008a52 <__gethex+0xca>
 80089dc:	9901      	ldr	r1, [sp, #4]
 80089de:	4652      	mov	r2, sl
 80089e0:	4638      	mov	r0, r7
 80089e2:	f001 fb8d 	bl	800a100 <strncmp>
 80089e6:	4605      	mov	r5, r0
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d168      	bne.n	8008abe <__gethex+0x136>
 80089ec:	f817 000a 	ldrb.w	r0, [r7, sl]
 80089f0:	eb07 060a 	add.w	r6, r7, sl
 80089f4:	f7ff ffb2 	bl	800895c <__hexdig_fun>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d062      	beq.n	8008ac2 <__gethex+0x13a>
 80089fc:	4633      	mov	r3, r6
 80089fe:	7818      	ldrb	r0, [r3, #0]
 8008a00:	2830      	cmp	r0, #48	; 0x30
 8008a02:	461f      	mov	r7, r3
 8008a04:	f103 0301 	add.w	r3, r3, #1
 8008a08:	d0f9      	beq.n	80089fe <__gethex+0x76>
 8008a0a:	f7ff ffa7 	bl	800895c <__hexdig_fun>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	fab0 f480 	clz	r4, r0
 8008a14:	0964      	lsrs	r4, r4, #5
 8008a16:	4635      	mov	r5, r6
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	463a      	mov	r2, r7
 8008a1c:	4616      	mov	r6, r2
 8008a1e:	3201      	adds	r2, #1
 8008a20:	7830      	ldrb	r0, [r6, #0]
 8008a22:	f7ff ff9b 	bl	800895c <__hexdig_fun>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d1f8      	bne.n	8008a1c <__gethex+0x94>
 8008a2a:	9901      	ldr	r1, [sp, #4]
 8008a2c:	4652      	mov	r2, sl
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f001 fb66 	bl	800a100 <strncmp>
 8008a34:	b980      	cbnz	r0, 8008a58 <__gethex+0xd0>
 8008a36:	b94d      	cbnz	r5, 8008a4c <__gethex+0xc4>
 8008a38:	eb06 050a 	add.w	r5, r6, sl
 8008a3c:	462a      	mov	r2, r5
 8008a3e:	4616      	mov	r6, r2
 8008a40:	3201      	adds	r2, #1
 8008a42:	7830      	ldrb	r0, [r6, #0]
 8008a44:	f7ff ff8a 	bl	800895c <__hexdig_fun>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d1f8      	bne.n	8008a3e <__gethex+0xb6>
 8008a4c:	1bad      	subs	r5, r5, r6
 8008a4e:	00ad      	lsls	r5, r5, #2
 8008a50:	e004      	b.n	8008a5c <__gethex+0xd4>
 8008a52:	2400      	movs	r4, #0
 8008a54:	4625      	mov	r5, r4
 8008a56:	e7e0      	b.n	8008a1a <__gethex+0x92>
 8008a58:	2d00      	cmp	r5, #0
 8008a5a:	d1f7      	bne.n	8008a4c <__gethex+0xc4>
 8008a5c:	7833      	ldrb	r3, [r6, #0]
 8008a5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a62:	2b50      	cmp	r3, #80	; 0x50
 8008a64:	d13b      	bne.n	8008ade <__gethex+0x156>
 8008a66:	7873      	ldrb	r3, [r6, #1]
 8008a68:	2b2b      	cmp	r3, #43	; 0x2b
 8008a6a:	d02c      	beq.n	8008ac6 <__gethex+0x13e>
 8008a6c:	2b2d      	cmp	r3, #45	; 0x2d
 8008a6e:	d02e      	beq.n	8008ace <__gethex+0x146>
 8008a70:	1c71      	adds	r1, r6, #1
 8008a72:	f04f 0900 	mov.w	r9, #0
 8008a76:	7808      	ldrb	r0, [r1, #0]
 8008a78:	f7ff ff70 	bl	800895c <__hexdig_fun>
 8008a7c:	1e43      	subs	r3, r0, #1
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	2b18      	cmp	r3, #24
 8008a82:	d82c      	bhi.n	8008ade <__gethex+0x156>
 8008a84:	f1a0 0210 	sub.w	r2, r0, #16
 8008a88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a8c:	f7ff ff66 	bl	800895c <__hexdig_fun>
 8008a90:	1e43      	subs	r3, r0, #1
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	2b18      	cmp	r3, #24
 8008a96:	d91d      	bls.n	8008ad4 <__gethex+0x14c>
 8008a98:	f1b9 0f00 	cmp.w	r9, #0
 8008a9c:	d000      	beq.n	8008aa0 <__gethex+0x118>
 8008a9e:	4252      	negs	r2, r2
 8008aa0:	4415      	add	r5, r2
 8008aa2:	f8cb 1000 	str.w	r1, [fp]
 8008aa6:	b1e4      	cbz	r4, 8008ae2 <__gethex+0x15a>
 8008aa8:	9b00      	ldr	r3, [sp, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	bf14      	ite	ne
 8008aae:	2700      	movne	r7, #0
 8008ab0:	2706      	moveq	r7, #6
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	b009      	add	sp, #36	; 0x24
 8008ab6:	ecbd 8b02 	vpop	{d8}
 8008aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008abe:	463e      	mov	r6, r7
 8008ac0:	4625      	mov	r5, r4
 8008ac2:	2401      	movs	r4, #1
 8008ac4:	e7ca      	b.n	8008a5c <__gethex+0xd4>
 8008ac6:	f04f 0900 	mov.w	r9, #0
 8008aca:	1cb1      	adds	r1, r6, #2
 8008acc:	e7d3      	b.n	8008a76 <__gethex+0xee>
 8008ace:	f04f 0901 	mov.w	r9, #1
 8008ad2:	e7fa      	b.n	8008aca <__gethex+0x142>
 8008ad4:	230a      	movs	r3, #10
 8008ad6:	fb03 0202 	mla	r2, r3, r2, r0
 8008ada:	3a10      	subs	r2, #16
 8008adc:	e7d4      	b.n	8008a88 <__gethex+0x100>
 8008ade:	4631      	mov	r1, r6
 8008ae0:	e7df      	b.n	8008aa2 <__gethex+0x11a>
 8008ae2:	1bf3      	subs	r3, r6, r7
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	2b07      	cmp	r3, #7
 8008aea:	dc0b      	bgt.n	8008b04 <__gethex+0x17c>
 8008aec:	ee18 0a10 	vmov	r0, s16
 8008af0:	f000 fa7e 	bl	8008ff0 <_Balloc>
 8008af4:	4604      	mov	r4, r0
 8008af6:	b940      	cbnz	r0, 8008b0a <__gethex+0x182>
 8008af8:	4b5d      	ldr	r3, [pc, #372]	; (8008c70 <__gethex+0x2e8>)
 8008afa:	4602      	mov	r2, r0
 8008afc:	21de      	movs	r1, #222	; 0xde
 8008afe:	485d      	ldr	r0, [pc, #372]	; (8008c74 <__gethex+0x2ec>)
 8008b00:	f7ff f830 	bl	8007b64 <__assert_func>
 8008b04:	3101      	adds	r1, #1
 8008b06:	105b      	asrs	r3, r3, #1
 8008b08:	e7ee      	b.n	8008ae8 <__gethex+0x160>
 8008b0a:	f100 0914 	add.w	r9, r0, #20
 8008b0e:	f04f 0b00 	mov.w	fp, #0
 8008b12:	f1ca 0301 	rsb	r3, sl, #1
 8008b16:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b1a:	f8cd b000 	str.w	fp, [sp]
 8008b1e:	9306      	str	r3, [sp, #24]
 8008b20:	42b7      	cmp	r7, r6
 8008b22:	d340      	bcc.n	8008ba6 <__gethex+0x21e>
 8008b24:	9802      	ldr	r0, [sp, #8]
 8008b26:	9b00      	ldr	r3, [sp, #0]
 8008b28:	f840 3b04 	str.w	r3, [r0], #4
 8008b2c:	eba0 0009 	sub.w	r0, r0, r9
 8008b30:	1080      	asrs	r0, r0, #2
 8008b32:	0146      	lsls	r6, r0, #5
 8008b34:	6120      	str	r0, [r4, #16]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 fb4c 	bl	80091d4 <__hi0bits>
 8008b3c:	1a30      	subs	r0, r6, r0
 8008b3e:	f8d8 6000 	ldr.w	r6, [r8]
 8008b42:	42b0      	cmp	r0, r6
 8008b44:	dd63      	ble.n	8008c0e <__gethex+0x286>
 8008b46:	1b87      	subs	r7, r0, r6
 8008b48:	4639      	mov	r1, r7
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f000 fef0 	bl	8009930 <__any_on>
 8008b50:	4682      	mov	sl, r0
 8008b52:	b1a8      	cbz	r0, 8008b80 <__gethex+0x1f8>
 8008b54:	1e7b      	subs	r3, r7, #1
 8008b56:	1159      	asrs	r1, r3, #5
 8008b58:	f003 021f 	and.w	r2, r3, #31
 8008b5c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008b60:	f04f 0a01 	mov.w	sl, #1
 8008b64:	fa0a f202 	lsl.w	r2, sl, r2
 8008b68:	420a      	tst	r2, r1
 8008b6a:	d009      	beq.n	8008b80 <__gethex+0x1f8>
 8008b6c:	4553      	cmp	r3, sl
 8008b6e:	dd05      	ble.n	8008b7c <__gethex+0x1f4>
 8008b70:	1eb9      	subs	r1, r7, #2
 8008b72:	4620      	mov	r0, r4
 8008b74:	f000 fedc 	bl	8009930 <__any_on>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d145      	bne.n	8008c08 <__gethex+0x280>
 8008b7c:	f04f 0a02 	mov.w	sl, #2
 8008b80:	4639      	mov	r1, r7
 8008b82:	4620      	mov	r0, r4
 8008b84:	f7ff fe98 	bl	80088b8 <rshift>
 8008b88:	443d      	add	r5, r7
 8008b8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b8e:	42ab      	cmp	r3, r5
 8008b90:	da4c      	bge.n	8008c2c <__gethex+0x2a4>
 8008b92:	ee18 0a10 	vmov	r0, s16
 8008b96:	4621      	mov	r1, r4
 8008b98:	f000 fa6a 	bl	8009070 <_Bfree>
 8008b9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	6013      	str	r3, [r2, #0]
 8008ba2:	27a3      	movs	r7, #163	; 0xa3
 8008ba4:	e785      	b.n	8008ab2 <__gethex+0x12a>
 8008ba6:	1e73      	subs	r3, r6, #1
 8008ba8:	9a05      	ldr	r2, [sp, #20]
 8008baa:	9303      	str	r3, [sp, #12]
 8008bac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d019      	beq.n	8008be8 <__gethex+0x260>
 8008bb4:	f1bb 0f20 	cmp.w	fp, #32
 8008bb8:	d107      	bne.n	8008bca <__gethex+0x242>
 8008bba:	9b02      	ldr	r3, [sp, #8]
 8008bbc:	9a00      	ldr	r2, [sp, #0]
 8008bbe:	f843 2b04 	str.w	r2, [r3], #4
 8008bc2:	9302      	str	r3, [sp, #8]
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	469b      	mov	fp, r3
 8008bca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008bce:	f7ff fec5 	bl	800895c <__hexdig_fun>
 8008bd2:	9b00      	ldr	r3, [sp, #0]
 8008bd4:	f000 000f 	and.w	r0, r0, #15
 8008bd8:	fa00 f00b 	lsl.w	r0, r0, fp
 8008bdc:	4303      	orrs	r3, r0
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	f10b 0b04 	add.w	fp, fp, #4
 8008be4:	9b03      	ldr	r3, [sp, #12]
 8008be6:	e00d      	b.n	8008c04 <__gethex+0x27c>
 8008be8:	9b03      	ldr	r3, [sp, #12]
 8008bea:	9a06      	ldr	r2, [sp, #24]
 8008bec:	4413      	add	r3, r2
 8008bee:	42bb      	cmp	r3, r7
 8008bf0:	d3e0      	bcc.n	8008bb4 <__gethex+0x22c>
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	9901      	ldr	r1, [sp, #4]
 8008bf6:	9307      	str	r3, [sp, #28]
 8008bf8:	4652      	mov	r2, sl
 8008bfa:	f001 fa81 	bl	800a100 <strncmp>
 8008bfe:	9b07      	ldr	r3, [sp, #28]
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d1d7      	bne.n	8008bb4 <__gethex+0x22c>
 8008c04:	461e      	mov	r6, r3
 8008c06:	e78b      	b.n	8008b20 <__gethex+0x198>
 8008c08:	f04f 0a03 	mov.w	sl, #3
 8008c0c:	e7b8      	b.n	8008b80 <__gethex+0x1f8>
 8008c0e:	da0a      	bge.n	8008c26 <__gethex+0x29e>
 8008c10:	1a37      	subs	r7, r6, r0
 8008c12:	4621      	mov	r1, r4
 8008c14:	ee18 0a10 	vmov	r0, s16
 8008c18:	463a      	mov	r2, r7
 8008c1a:	f000 fc45 	bl	80094a8 <__lshift>
 8008c1e:	1bed      	subs	r5, r5, r7
 8008c20:	4604      	mov	r4, r0
 8008c22:	f100 0914 	add.w	r9, r0, #20
 8008c26:	f04f 0a00 	mov.w	sl, #0
 8008c2a:	e7ae      	b.n	8008b8a <__gethex+0x202>
 8008c2c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008c30:	42a8      	cmp	r0, r5
 8008c32:	dd72      	ble.n	8008d1a <__gethex+0x392>
 8008c34:	1b45      	subs	r5, r0, r5
 8008c36:	42ae      	cmp	r6, r5
 8008c38:	dc36      	bgt.n	8008ca8 <__gethex+0x320>
 8008c3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d02a      	beq.n	8008c98 <__gethex+0x310>
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d02c      	beq.n	8008ca0 <__gethex+0x318>
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d11c      	bne.n	8008c84 <__gethex+0x2fc>
 8008c4a:	42ae      	cmp	r6, r5
 8008c4c:	d11a      	bne.n	8008c84 <__gethex+0x2fc>
 8008c4e:	2e01      	cmp	r6, #1
 8008c50:	d112      	bne.n	8008c78 <__gethex+0x2f0>
 8008c52:	9a04      	ldr	r2, [sp, #16]
 8008c54:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c58:	6013      	str	r3, [r2, #0]
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	6123      	str	r3, [r4, #16]
 8008c5e:	f8c9 3000 	str.w	r3, [r9]
 8008c62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c64:	2762      	movs	r7, #98	; 0x62
 8008c66:	601c      	str	r4, [r3, #0]
 8008c68:	e723      	b.n	8008ab2 <__gethex+0x12a>
 8008c6a:	bf00      	nop
 8008c6c:	0800ae30 	.word	0x0800ae30
 8008c70:	0800adb8 	.word	0x0800adb8
 8008c74:	0800adc9 	.word	0x0800adc9
 8008c78:	1e71      	subs	r1, r6, #1
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f000 fe58 	bl	8009930 <__any_on>
 8008c80:	2800      	cmp	r0, #0
 8008c82:	d1e6      	bne.n	8008c52 <__gethex+0x2ca>
 8008c84:	ee18 0a10 	vmov	r0, s16
 8008c88:	4621      	mov	r1, r4
 8008c8a:	f000 f9f1 	bl	8009070 <_Bfree>
 8008c8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c90:	2300      	movs	r3, #0
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	2750      	movs	r7, #80	; 0x50
 8008c96:	e70c      	b.n	8008ab2 <__gethex+0x12a>
 8008c98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1f2      	bne.n	8008c84 <__gethex+0x2fc>
 8008c9e:	e7d8      	b.n	8008c52 <__gethex+0x2ca>
 8008ca0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1d5      	bne.n	8008c52 <__gethex+0x2ca>
 8008ca6:	e7ed      	b.n	8008c84 <__gethex+0x2fc>
 8008ca8:	1e6f      	subs	r7, r5, #1
 8008caa:	f1ba 0f00 	cmp.w	sl, #0
 8008cae:	d131      	bne.n	8008d14 <__gethex+0x38c>
 8008cb0:	b127      	cbz	r7, 8008cbc <__gethex+0x334>
 8008cb2:	4639      	mov	r1, r7
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f000 fe3b 	bl	8009930 <__any_on>
 8008cba:	4682      	mov	sl, r0
 8008cbc:	117b      	asrs	r3, r7, #5
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008cc4:	f007 071f 	and.w	r7, r7, #31
 8008cc8:	fa01 f707 	lsl.w	r7, r1, r7
 8008ccc:	421f      	tst	r7, r3
 8008cce:	4629      	mov	r1, r5
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	bf18      	it	ne
 8008cd4:	f04a 0a02 	orrne.w	sl, sl, #2
 8008cd8:	1b76      	subs	r6, r6, r5
 8008cda:	f7ff fded 	bl	80088b8 <rshift>
 8008cde:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008ce2:	2702      	movs	r7, #2
 8008ce4:	f1ba 0f00 	cmp.w	sl, #0
 8008ce8:	d048      	beq.n	8008d7c <__gethex+0x3f4>
 8008cea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d015      	beq.n	8008d1e <__gethex+0x396>
 8008cf2:	2b03      	cmp	r3, #3
 8008cf4:	d017      	beq.n	8008d26 <__gethex+0x39e>
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d109      	bne.n	8008d0e <__gethex+0x386>
 8008cfa:	f01a 0f02 	tst.w	sl, #2
 8008cfe:	d006      	beq.n	8008d0e <__gethex+0x386>
 8008d00:	f8d9 0000 	ldr.w	r0, [r9]
 8008d04:	ea4a 0a00 	orr.w	sl, sl, r0
 8008d08:	f01a 0f01 	tst.w	sl, #1
 8008d0c:	d10e      	bne.n	8008d2c <__gethex+0x3a4>
 8008d0e:	f047 0710 	orr.w	r7, r7, #16
 8008d12:	e033      	b.n	8008d7c <__gethex+0x3f4>
 8008d14:	f04f 0a01 	mov.w	sl, #1
 8008d18:	e7d0      	b.n	8008cbc <__gethex+0x334>
 8008d1a:	2701      	movs	r7, #1
 8008d1c:	e7e2      	b.n	8008ce4 <__gethex+0x35c>
 8008d1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d20:	f1c3 0301 	rsb	r3, r3, #1
 8008d24:	9315      	str	r3, [sp, #84]	; 0x54
 8008d26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d0f0      	beq.n	8008d0e <__gethex+0x386>
 8008d2c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008d30:	f104 0314 	add.w	r3, r4, #20
 8008d34:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008d38:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008d3c:	f04f 0c00 	mov.w	ip, #0
 8008d40:	4618      	mov	r0, r3
 8008d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d46:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008d4a:	d01c      	beq.n	8008d86 <__gethex+0x3fe>
 8008d4c:	3201      	adds	r2, #1
 8008d4e:	6002      	str	r2, [r0, #0]
 8008d50:	2f02      	cmp	r7, #2
 8008d52:	f104 0314 	add.w	r3, r4, #20
 8008d56:	d13f      	bne.n	8008dd8 <__gethex+0x450>
 8008d58:	f8d8 2000 	ldr.w	r2, [r8]
 8008d5c:	3a01      	subs	r2, #1
 8008d5e:	42b2      	cmp	r2, r6
 8008d60:	d10a      	bne.n	8008d78 <__gethex+0x3f0>
 8008d62:	1171      	asrs	r1, r6, #5
 8008d64:	2201      	movs	r2, #1
 8008d66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d6a:	f006 061f 	and.w	r6, r6, #31
 8008d6e:	fa02 f606 	lsl.w	r6, r2, r6
 8008d72:	421e      	tst	r6, r3
 8008d74:	bf18      	it	ne
 8008d76:	4617      	movne	r7, r2
 8008d78:	f047 0720 	orr.w	r7, r7, #32
 8008d7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d7e:	601c      	str	r4, [r3, #0]
 8008d80:	9b04      	ldr	r3, [sp, #16]
 8008d82:	601d      	str	r5, [r3, #0]
 8008d84:	e695      	b.n	8008ab2 <__gethex+0x12a>
 8008d86:	4299      	cmp	r1, r3
 8008d88:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d8c:	d8d8      	bhi.n	8008d40 <__gethex+0x3b8>
 8008d8e:	68a3      	ldr	r3, [r4, #8]
 8008d90:	459b      	cmp	fp, r3
 8008d92:	db19      	blt.n	8008dc8 <__gethex+0x440>
 8008d94:	6861      	ldr	r1, [r4, #4]
 8008d96:	ee18 0a10 	vmov	r0, s16
 8008d9a:	3101      	adds	r1, #1
 8008d9c:	f000 f928 	bl	8008ff0 <_Balloc>
 8008da0:	4681      	mov	r9, r0
 8008da2:	b918      	cbnz	r0, 8008dac <__gethex+0x424>
 8008da4:	4b1a      	ldr	r3, [pc, #104]	; (8008e10 <__gethex+0x488>)
 8008da6:	4602      	mov	r2, r0
 8008da8:	2184      	movs	r1, #132	; 0x84
 8008daa:	e6a8      	b.n	8008afe <__gethex+0x176>
 8008dac:	6922      	ldr	r2, [r4, #16]
 8008dae:	3202      	adds	r2, #2
 8008db0:	f104 010c 	add.w	r1, r4, #12
 8008db4:	0092      	lsls	r2, r2, #2
 8008db6:	300c      	adds	r0, #12
 8008db8:	f000 f90c 	bl	8008fd4 <memcpy>
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	ee18 0a10 	vmov	r0, s16
 8008dc2:	f000 f955 	bl	8009070 <_Bfree>
 8008dc6:	464c      	mov	r4, r9
 8008dc8:	6923      	ldr	r3, [r4, #16]
 8008dca:	1c5a      	adds	r2, r3, #1
 8008dcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008dd0:	6122      	str	r2, [r4, #16]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	615a      	str	r2, [r3, #20]
 8008dd6:	e7bb      	b.n	8008d50 <__gethex+0x3c8>
 8008dd8:	6922      	ldr	r2, [r4, #16]
 8008dda:	455a      	cmp	r2, fp
 8008ddc:	dd0b      	ble.n	8008df6 <__gethex+0x46e>
 8008dde:	2101      	movs	r1, #1
 8008de0:	4620      	mov	r0, r4
 8008de2:	f7ff fd69 	bl	80088b8 <rshift>
 8008de6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dea:	3501      	adds	r5, #1
 8008dec:	42ab      	cmp	r3, r5
 8008dee:	f6ff aed0 	blt.w	8008b92 <__gethex+0x20a>
 8008df2:	2701      	movs	r7, #1
 8008df4:	e7c0      	b.n	8008d78 <__gethex+0x3f0>
 8008df6:	f016 061f 	ands.w	r6, r6, #31
 8008dfa:	d0fa      	beq.n	8008df2 <__gethex+0x46a>
 8008dfc:	4453      	add	r3, sl
 8008dfe:	f1c6 0620 	rsb	r6, r6, #32
 8008e02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008e06:	f000 f9e5 	bl	80091d4 <__hi0bits>
 8008e0a:	42b0      	cmp	r0, r6
 8008e0c:	dbe7      	blt.n	8008dde <__gethex+0x456>
 8008e0e:	e7f0      	b.n	8008df2 <__gethex+0x46a>
 8008e10:	0800adb8 	.word	0x0800adb8

08008e14 <L_shift>:
 8008e14:	f1c2 0208 	rsb	r2, r2, #8
 8008e18:	0092      	lsls	r2, r2, #2
 8008e1a:	b570      	push	{r4, r5, r6, lr}
 8008e1c:	f1c2 0620 	rsb	r6, r2, #32
 8008e20:	6843      	ldr	r3, [r0, #4]
 8008e22:	6804      	ldr	r4, [r0, #0]
 8008e24:	fa03 f506 	lsl.w	r5, r3, r6
 8008e28:	432c      	orrs	r4, r5
 8008e2a:	40d3      	lsrs	r3, r2
 8008e2c:	6004      	str	r4, [r0, #0]
 8008e2e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e32:	4288      	cmp	r0, r1
 8008e34:	d3f4      	bcc.n	8008e20 <L_shift+0xc>
 8008e36:	bd70      	pop	{r4, r5, r6, pc}

08008e38 <__match>:
 8008e38:	b530      	push	{r4, r5, lr}
 8008e3a:	6803      	ldr	r3, [r0, #0]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e42:	b914      	cbnz	r4, 8008e4a <__match+0x12>
 8008e44:	6003      	str	r3, [r0, #0]
 8008e46:	2001      	movs	r0, #1
 8008e48:	bd30      	pop	{r4, r5, pc}
 8008e4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008e52:	2d19      	cmp	r5, #25
 8008e54:	bf98      	it	ls
 8008e56:	3220      	addls	r2, #32
 8008e58:	42a2      	cmp	r2, r4
 8008e5a:	d0f0      	beq.n	8008e3e <__match+0x6>
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	e7f3      	b.n	8008e48 <__match+0x10>

08008e60 <__hexnan>:
 8008e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	680b      	ldr	r3, [r1, #0]
 8008e66:	115e      	asrs	r6, r3, #5
 8008e68:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e6c:	f013 031f 	ands.w	r3, r3, #31
 8008e70:	b087      	sub	sp, #28
 8008e72:	bf18      	it	ne
 8008e74:	3604      	addne	r6, #4
 8008e76:	2500      	movs	r5, #0
 8008e78:	1f37      	subs	r7, r6, #4
 8008e7a:	4690      	mov	r8, r2
 8008e7c:	6802      	ldr	r2, [r0, #0]
 8008e7e:	9301      	str	r3, [sp, #4]
 8008e80:	4682      	mov	sl, r0
 8008e82:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e86:	46b9      	mov	r9, r7
 8008e88:	463c      	mov	r4, r7
 8008e8a:	9502      	str	r5, [sp, #8]
 8008e8c:	46ab      	mov	fp, r5
 8008e8e:	7851      	ldrb	r1, [r2, #1]
 8008e90:	1c53      	adds	r3, r2, #1
 8008e92:	9303      	str	r3, [sp, #12]
 8008e94:	b341      	cbz	r1, 8008ee8 <__hexnan+0x88>
 8008e96:	4608      	mov	r0, r1
 8008e98:	9205      	str	r2, [sp, #20]
 8008e9a:	9104      	str	r1, [sp, #16]
 8008e9c:	f7ff fd5e 	bl	800895c <__hexdig_fun>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d14f      	bne.n	8008f44 <__hexnan+0xe4>
 8008ea4:	9904      	ldr	r1, [sp, #16]
 8008ea6:	9a05      	ldr	r2, [sp, #20]
 8008ea8:	2920      	cmp	r1, #32
 8008eaa:	d818      	bhi.n	8008ede <__hexnan+0x7e>
 8008eac:	9b02      	ldr	r3, [sp, #8]
 8008eae:	459b      	cmp	fp, r3
 8008eb0:	dd13      	ble.n	8008eda <__hexnan+0x7a>
 8008eb2:	454c      	cmp	r4, r9
 8008eb4:	d206      	bcs.n	8008ec4 <__hexnan+0x64>
 8008eb6:	2d07      	cmp	r5, #7
 8008eb8:	dc04      	bgt.n	8008ec4 <__hexnan+0x64>
 8008eba:	462a      	mov	r2, r5
 8008ebc:	4649      	mov	r1, r9
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f7ff ffa8 	bl	8008e14 <L_shift>
 8008ec4:	4544      	cmp	r4, r8
 8008ec6:	d950      	bls.n	8008f6a <__hexnan+0x10a>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	f1a4 0904 	sub.w	r9, r4, #4
 8008ece:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ed2:	f8cd b008 	str.w	fp, [sp, #8]
 8008ed6:	464c      	mov	r4, r9
 8008ed8:	461d      	mov	r5, r3
 8008eda:	9a03      	ldr	r2, [sp, #12]
 8008edc:	e7d7      	b.n	8008e8e <__hexnan+0x2e>
 8008ede:	2929      	cmp	r1, #41	; 0x29
 8008ee0:	d156      	bne.n	8008f90 <__hexnan+0x130>
 8008ee2:	3202      	adds	r2, #2
 8008ee4:	f8ca 2000 	str.w	r2, [sl]
 8008ee8:	f1bb 0f00 	cmp.w	fp, #0
 8008eec:	d050      	beq.n	8008f90 <__hexnan+0x130>
 8008eee:	454c      	cmp	r4, r9
 8008ef0:	d206      	bcs.n	8008f00 <__hexnan+0xa0>
 8008ef2:	2d07      	cmp	r5, #7
 8008ef4:	dc04      	bgt.n	8008f00 <__hexnan+0xa0>
 8008ef6:	462a      	mov	r2, r5
 8008ef8:	4649      	mov	r1, r9
 8008efa:	4620      	mov	r0, r4
 8008efc:	f7ff ff8a 	bl	8008e14 <L_shift>
 8008f00:	4544      	cmp	r4, r8
 8008f02:	d934      	bls.n	8008f6e <__hexnan+0x10e>
 8008f04:	f1a8 0204 	sub.w	r2, r8, #4
 8008f08:	4623      	mov	r3, r4
 8008f0a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f0e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f12:	429f      	cmp	r7, r3
 8008f14:	d2f9      	bcs.n	8008f0a <__hexnan+0xaa>
 8008f16:	1b3b      	subs	r3, r7, r4
 8008f18:	f023 0303 	bic.w	r3, r3, #3
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	3401      	adds	r4, #1
 8008f20:	3e03      	subs	r6, #3
 8008f22:	42b4      	cmp	r4, r6
 8008f24:	bf88      	it	hi
 8008f26:	2304      	movhi	r3, #4
 8008f28:	4443      	add	r3, r8
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f843 2b04 	str.w	r2, [r3], #4
 8008f30:	429f      	cmp	r7, r3
 8008f32:	d2fb      	bcs.n	8008f2c <__hexnan+0xcc>
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	b91b      	cbnz	r3, 8008f40 <__hexnan+0xe0>
 8008f38:	4547      	cmp	r7, r8
 8008f3a:	d127      	bne.n	8008f8c <__hexnan+0x12c>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	603b      	str	r3, [r7, #0]
 8008f40:	2005      	movs	r0, #5
 8008f42:	e026      	b.n	8008f92 <__hexnan+0x132>
 8008f44:	3501      	adds	r5, #1
 8008f46:	2d08      	cmp	r5, #8
 8008f48:	f10b 0b01 	add.w	fp, fp, #1
 8008f4c:	dd06      	ble.n	8008f5c <__hexnan+0xfc>
 8008f4e:	4544      	cmp	r4, r8
 8008f50:	d9c3      	bls.n	8008eda <__hexnan+0x7a>
 8008f52:	2300      	movs	r3, #0
 8008f54:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f58:	2501      	movs	r5, #1
 8008f5a:	3c04      	subs	r4, #4
 8008f5c:	6822      	ldr	r2, [r4, #0]
 8008f5e:	f000 000f 	and.w	r0, r0, #15
 8008f62:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008f66:	6022      	str	r2, [r4, #0]
 8008f68:	e7b7      	b.n	8008eda <__hexnan+0x7a>
 8008f6a:	2508      	movs	r5, #8
 8008f6c:	e7b5      	b.n	8008eda <__hexnan+0x7a>
 8008f6e:	9b01      	ldr	r3, [sp, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d0df      	beq.n	8008f34 <__hexnan+0xd4>
 8008f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f78:	f1c3 0320 	rsb	r3, r3, #32
 8008f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f84:	401a      	ands	r2, r3
 8008f86:	f846 2c04 	str.w	r2, [r6, #-4]
 8008f8a:	e7d3      	b.n	8008f34 <__hexnan+0xd4>
 8008f8c:	3f04      	subs	r7, #4
 8008f8e:	e7d1      	b.n	8008f34 <__hexnan+0xd4>
 8008f90:	2004      	movs	r0, #4
 8008f92:	b007      	add	sp, #28
 8008f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f98 <_localeconv_r>:
 8008f98:	4800      	ldr	r0, [pc, #0]	; (8008f9c <_localeconv_r+0x4>)
 8008f9a:	4770      	bx	lr
 8008f9c:	200001b8 	.word	0x200001b8

08008fa0 <malloc>:
 8008fa0:	4b02      	ldr	r3, [pc, #8]	; (8008fac <malloc+0xc>)
 8008fa2:	4601      	mov	r1, r0
 8008fa4:	6818      	ldr	r0, [r3, #0]
 8008fa6:	f000 bd67 	b.w	8009a78 <_malloc_r>
 8008faa:	bf00      	nop
 8008fac:	20000060 	.word	0x20000060

08008fb0 <__ascii_mbtowc>:
 8008fb0:	b082      	sub	sp, #8
 8008fb2:	b901      	cbnz	r1, 8008fb6 <__ascii_mbtowc+0x6>
 8008fb4:	a901      	add	r1, sp, #4
 8008fb6:	b142      	cbz	r2, 8008fca <__ascii_mbtowc+0x1a>
 8008fb8:	b14b      	cbz	r3, 8008fce <__ascii_mbtowc+0x1e>
 8008fba:	7813      	ldrb	r3, [r2, #0]
 8008fbc:	600b      	str	r3, [r1, #0]
 8008fbe:	7812      	ldrb	r2, [r2, #0]
 8008fc0:	1e10      	subs	r0, r2, #0
 8008fc2:	bf18      	it	ne
 8008fc4:	2001      	movne	r0, #1
 8008fc6:	b002      	add	sp, #8
 8008fc8:	4770      	bx	lr
 8008fca:	4610      	mov	r0, r2
 8008fcc:	e7fb      	b.n	8008fc6 <__ascii_mbtowc+0x16>
 8008fce:	f06f 0001 	mvn.w	r0, #1
 8008fd2:	e7f8      	b.n	8008fc6 <__ascii_mbtowc+0x16>

08008fd4 <memcpy>:
 8008fd4:	440a      	add	r2, r1
 8008fd6:	4291      	cmp	r1, r2
 8008fd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008fdc:	d100      	bne.n	8008fe0 <memcpy+0xc>
 8008fde:	4770      	bx	lr
 8008fe0:	b510      	push	{r4, lr}
 8008fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fea:	4291      	cmp	r1, r2
 8008fec:	d1f9      	bne.n	8008fe2 <memcpy+0xe>
 8008fee:	bd10      	pop	{r4, pc}

08008ff0 <_Balloc>:
 8008ff0:	b570      	push	{r4, r5, r6, lr}
 8008ff2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	460d      	mov	r5, r1
 8008ff8:	b976      	cbnz	r6, 8009018 <_Balloc+0x28>
 8008ffa:	2010      	movs	r0, #16
 8008ffc:	f7ff ffd0 	bl	8008fa0 <malloc>
 8009000:	4602      	mov	r2, r0
 8009002:	6260      	str	r0, [r4, #36]	; 0x24
 8009004:	b920      	cbnz	r0, 8009010 <_Balloc+0x20>
 8009006:	4b18      	ldr	r3, [pc, #96]	; (8009068 <_Balloc+0x78>)
 8009008:	4818      	ldr	r0, [pc, #96]	; (800906c <_Balloc+0x7c>)
 800900a:	2166      	movs	r1, #102	; 0x66
 800900c:	f7fe fdaa 	bl	8007b64 <__assert_func>
 8009010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009014:	6006      	str	r6, [r0, #0]
 8009016:	60c6      	str	r6, [r0, #12]
 8009018:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800901a:	68f3      	ldr	r3, [r6, #12]
 800901c:	b183      	cbz	r3, 8009040 <_Balloc+0x50>
 800901e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009026:	b9b8      	cbnz	r0, 8009058 <_Balloc+0x68>
 8009028:	2101      	movs	r1, #1
 800902a:	fa01 f605 	lsl.w	r6, r1, r5
 800902e:	1d72      	adds	r2, r6, #5
 8009030:	0092      	lsls	r2, r2, #2
 8009032:	4620      	mov	r0, r4
 8009034:	f000 fc9d 	bl	8009972 <_calloc_r>
 8009038:	b160      	cbz	r0, 8009054 <_Balloc+0x64>
 800903a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800903e:	e00e      	b.n	800905e <_Balloc+0x6e>
 8009040:	2221      	movs	r2, #33	; 0x21
 8009042:	2104      	movs	r1, #4
 8009044:	4620      	mov	r0, r4
 8009046:	f000 fc94 	bl	8009972 <_calloc_r>
 800904a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800904c:	60f0      	str	r0, [r6, #12]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1e4      	bne.n	800901e <_Balloc+0x2e>
 8009054:	2000      	movs	r0, #0
 8009056:	bd70      	pop	{r4, r5, r6, pc}
 8009058:	6802      	ldr	r2, [r0, #0]
 800905a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800905e:	2300      	movs	r3, #0
 8009060:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009064:	e7f7      	b.n	8009056 <_Balloc+0x66>
 8009066:	bf00      	nop
 8009068:	0800aca0 	.word	0x0800aca0
 800906c:	0800ae44 	.word	0x0800ae44

08009070 <_Bfree>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009074:	4605      	mov	r5, r0
 8009076:	460c      	mov	r4, r1
 8009078:	b976      	cbnz	r6, 8009098 <_Bfree+0x28>
 800907a:	2010      	movs	r0, #16
 800907c:	f7ff ff90 	bl	8008fa0 <malloc>
 8009080:	4602      	mov	r2, r0
 8009082:	6268      	str	r0, [r5, #36]	; 0x24
 8009084:	b920      	cbnz	r0, 8009090 <_Bfree+0x20>
 8009086:	4b09      	ldr	r3, [pc, #36]	; (80090ac <_Bfree+0x3c>)
 8009088:	4809      	ldr	r0, [pc, #36]	; (80090b0 <_Bfree+0x40>)
 800908a:	218a      	movs	r1, #138	; 0x8a
 800908c:	f7fe fd6a 	bl	8007b64 <__assert_func>
 8009090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009094:	6006      	str	r6, [r0, #0]
 8009096:	60c6      	str	r6, [r0, #12]
 8009098:	b13c      	cbz	r4, 80090aa <_Bfree+0x3a>
 800909a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800909c:	6862      	ldr	r2, [r4, #4]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090a4:	6021      	str	r1, [r4, #0]
 80090a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80090aa:	bd70      	pop	{r4, r5, r6, pc}
 80090ac:	0800aca0 	.word	0x0800aca0
 80090b0:	0800ae44 	.word	0x0800ae44

080090b4 <__multadd>:
 80090b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b8:	690d      	ldr	r5, [r1, #16]
 80090ba:	4607      	mov	r7, r0
 80090bc:	460c      	mov	r4, r1
 80090be:	461e      	mov	r6, r3
 80090c0:	f101 0c14 	add.w	ip, r1, #20
 80090c4:	2000      	movs	r0, #0
 80090c6:	f8dc 3000 	ldr.w	r3, [ip]
 80090ca:	b299      	uxth	r1, r3
 80090cc:	fb02 6101 	mla	r1, r2, r1, r6
 80090d0:	0c1e      	lsrs	r6, r3, #16
 80090d2:	0c0b      	lsrs	r3, r1, #16
 80090d4:	fb02 3306 	mla	r3, r2, r6, r3
 80090d8:	b289      	uxth	r1, r1
 80090da:	3001      	adds	r0, #1
 80090dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090e0:	4285      	cmp	r5, r0
 80090e2:	f84c 1b04 	str.w	r1, [ip], #4
 80090e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090ea:	dcec      	bgt.n	80090c6 <__multadd+0x12>
 80090ec:	b30e      	cbz	r6, 8009132 <__multadd+0x7e>
 80090ee:	68a3      	ldr	r3, [r4, #8]
 80090f0:	42ab      	cmp	r3, r5
 80090f2:	dc19      	bgt.n	8009128 <__multadd+0x74>
 80090f4:	6861      	ldr	r1, [r4, #4]
 80090f6:	4638      	mov	r0, r7
 80090f8:	3101      	adds	r1, #1
 80090fa:	f7ff ff79 	bl	8008ff0 <_Balloc>
 80090fe:	4680      	mov	r8, r0
 8009100:	b928      	cbnz	r0, 800910e <__multadd+0x5a>
 8009102:	4602      	mov	r2, r0
 8009104:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <__multadd+0x84>)
 8009106:	480d      	ldr	r0, [pc, #52]	; (800913c <__multadd+0x88>)
 8009108:	21b5      	movs	r1, #181	; 0xb5
 800910a:	f7fe fd2b 	bl	8007b64 <__assert_func>
 800910e:	6922      	ldr	r2, [r4, #16]
 8009110:	3202      	adds	r2, #2
 8009112:	f104 010c 	add.w	r1, r4, #12
 8009116:	0092      	lsls	r2, r2, #2
 8009118:	300c      	adds	r0, #12
 800911a:	f7ff ff5b 	bl	8008fd4 <memcpy>
 800911e:	4621      	mov	r1, r4
 8009120:	4638      	mov	r0, r7
 8009122:	f7ff ffa5 	bl	8009070 <_Bfree>
 8009126:	4644      	mov	r4, r8
 8009128:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800912c:	3501      	adds	r5, #1
 800912e:	615e      	str	r6, [r3, #20]
 8009130:	6125      	str	r5, [r4, #16]
 8009132:	4620      	mov	r0, r4
 8009134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009138:	0800adb8 	.word	0x0800adb8
 800913c:	0800ae44 	.word	0x0800ae44

08009140 <__s2b>:
 8009140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009144:	460c      	mov	r4, r1
 8009146:	4615      	mov	r5, r2
 8009148:	461f      	mov	r7, r3
 800914a:	2209      	movs	r2, #9
 800914c:	3308      	adds	r3, #8
 800914e:	4606      	mov	r6, r0
 8009150:	fb93 f3f2 	sdiv	r3, r3, r2
 8009154:	2100      	movs	r1, #0
 8009156:	2201      	movs	r2, #1
 8009158:	429a      	cmp	r2, r3
 800915a:	db09      	blt.n	8009170 <__s2b+0x30>
 800915c:	4630      	mov	r0, r6
 800915e:	f7ff ff47 	bl	8008ff0 <_Balloc>
 8009162:	b940      	cbnz	r0, 8009176 <__s2b+0x36>
 8009164:	4602      	mov	r2, r0
 8009166:	4b19      	ldr	r3, [pc, #100]	; (80091cc <__s2b+0x8c>)
 8009168:	4819      	ldr	r0, [pc, #100]	; (80091d0 <__s2b+0x90>)
 800916a:	21ce      	movs	r1, #206	; 0xce
 800916c:	f7fe fcfa 	bl	8007b64 <__assert_func>
 8009170:	0052      	lsls	r2, r2, #1
 8009172:	3101      	adds	r1, #1
 8009174:	e7f0      	b.n	8009158 <__s2b+0x18>
 8009176:	9b08      	ldr	r3, [sp, #32]
 8009178:	6143      	str	r3, [r0, #20]
 800917a:	2d09      	cmp	r5, #9
 800917c:	f04f 0301 	mov.w	r3, #1
 8009180:	6103      	str	r3, [r0, #16]
 8009182:	dd16      	ble.n	80091b2 <__s2b+0x72>
 8009184:	f104 0909 	add.w	r9, r4, #9
 8009188:	46c8      	mov	r8, r9
 800918a:	442c      	add	r4, r5
 800918c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009190:	4601      	mov	r1, r0
 8009192:	3b30      	subs	r3, #48	; 0x30
 8009194:	220a      	movs	r2, #10
 8009196:	4630      	mov	r0, r6
 8009198:	f7ff ff8c 	bl	80090b4 <__multadd>
 800919c:	45a0      	cmp	r8, r4
 800919e:	d1f5      	bne.n	800918c <__s2b+0x4c>
 80091a0:	f1a5 0408 	sub.w	r4, r5, #8
 80091a4:	444c      	add	r4, r9
 80091a6:	1b2d      	subs	r5, r5, r4
 80091a8:	1963      	adds	r3, r4, r5
 80091aa:	42bb      	cmp	r3, r7
 80091ac:	db04      	blt.n	80091b8 <__s2b+0x78>
 80091ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091b2:	340a      	adds	r4, #10
 80091b4:	2509      	movs	r5, #9
 80091b6:	e7f6      	b.n	80091a6 <__s2b+0x66>
 80091b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80091bc:	4601      	mov	r1, r0
 80091be:	3b30      	subs	r3, #48	; 0x30
 80091c0:	220a      	movs	r2, #10
 80091c2:	4630      	mov	r0, r6
 80091c4:	f7ff ff76 	bl	80090b4 <__multadd>
 80091c8:	e7ee      	b.n	80091a8 <__s2b+0x68>
 80091ca:	bf00      	nop
 80091cc:	0800adb8 	.word	0x0800adb8
 80091d0:	0800ae44 	.word	0x0800ae44

080091d4 <__hi0bits>:
 80091d4:	0c03      	lsrs	r3, r0, #16
 80091d6:	041b      	lsls	r3, r3, #16
 80091d8:	b9d3      	cbnz	r3, 8009210 <__hi0bits+0x3c>
 80091da:	0400      	lsls	r0, r0, #16
 80091dc:	2310      	movs	r3, #16
 80091de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80091e2:	bf04      	itt	eq
 80091e4:	0200      	lsleq	r0, r0, #8
 80091e6:	3308      	addeq	r3, #8
 80091e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80091ec:	bf04      	itt	eq
 80091ee:	0100      	lsleq	r0, r0, #4
 80091f0:	3304      	addeq	r3, #4
 80091f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80091f6:	bf04      	itt	eq
 80091f8:	0080      	lsleq	r0, r0, #2
 80091fa:	3302      	addeq	r3, #2
 80091fc:	2800      	cmp	r0, #0
 80091fe:	db05      	blt.n	800920c <__hi0bits+0x38>
 8009200:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009204:	f103 0301 	add.w	r3, r3, #1
 8009208:	bf08      	it	eq
 800920a:	2320      	moveq	r3, #32
 800920c:	4618      	mov	r0, r3
 800920e:	4770      	bx	lr
 8009210:	2300      	movs	r3, #0
 8009212:	e7e4      	b.n	80091de <__hi0bits+0xa>

08009214 <__lo0bits>:
 8009214:	6803      	ldr	r3, [r0, #0]
 8009216:	f013 0207 	ands.w	r2, r3, #7
 800921a:	4601      	mov	r1, r0
 800921c:	d00b      	beq.n	8009236 <__lo0bits+0x22>
 800921e:	07da      	lsls	r2, r3, #31
 8009220:	d423      	bmi.n	800926a <__lo0bits+0x56>
 8009222:	0798      	lsls	r0, r3, #30
 8009224:	bf49      	itett	mi
 8009226:	085b      	lsrmi	r3, r3, #1
 8009228:	089b      	lsrpl	r3, r3, #2
 800922a:	2001      	movmi	r0, #1
 800922c:	600b      	strmi	r3, [r1, #0]
 800922e:	bf5c      	itt	pl
 8009230:	600b      	strpl	r3, [r1, #0]
 8009232:	2002      	movpl	r0, #2
 8009234:	4770      	bx	lr
 8009236:	b298      	uxth	r0, r3
 8009238:	b9a8      	cbnz	r0, 8009266 <__lo0bits+0x52>
 800923a:	0c1b      	lsrs	r3, r3, #16
 800923c:	2010      	movs	r0, #16
 800923e:	b2da      	uxtb	r2, r3
 8009240:	b90a      	cbnz	r2, 8009246 <__lo0bits+0x32>
 8009242:	3008      	adds	r0, #8
 8009244:	0a1b      	lsrs	r3, r3, #8
 8009246:	071a      	lsls	r2, r3, #28
 8009248:	bf04      	itt	eq
 800924a:	091b      	lsreq	r3, r3, #4
 800924c:	3004      	addeq	r0, #4
 800924e:	079a      	lsls	r2, r3, #30
 8009250:	bf04      	itt	eq
 8009252:	089b      	lsreq	r3, r3, #2
 8009254:	3002      	addeq	r0, #2
 8009256:	07da      	lsls	r2, r3, #31
 8009258:	d403      	bmi.n	8009262 <__lo0bits+0x4e>
 800925a:	085b      	lsrs	r3, r3, #1
 800925c:	f100 0001 	add.w	r0, r0, #1
 8009260:	d005      	beq.n	800926e <__lo0bits+0x5a>
 8009262:	600b      	str	r3, [r1, #0]
 8009264:	4770      	bx	lr
 8009266:	4610      	mov	r0, r2
 8009268:	e7e9      	b.n	800923e <__lo0bits+0x2a>
 800926a:	2000      	movs	r0, #0
 800926c:	4770      	bx	lr
 800926e:	2020      	movs	r0, #32
 8009270:	4770      	bx	lr
	...

08009274 <__i2b>:
 8009274:	b510      	push	{r4, lr}
 8009276:	460c      	mov	r4, r1
 8009278:	2101      	movs	r1, #1
 800927a:	f7ff feb9 	bl	8008ff0 <_Balloc>
 800927e:	4602      	mov	r2, r0
 8009280:	b928      	cbnz	r0, 800928e <__i2b+0x1a>
 8009282:	4b05      	ldr	r3, [pc, #20]	; (8009298 <__i2b+0x24>)
 8009284:	4805      	ldr	r0, [pc, #20]	; (800929c <__i2b+0x28>)
 8009286:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800928a:	f7fe fc6b 	bl	8007b64 <__assert_func>
 800928e:	2301      	movs	r3, #1
 8009290:	6144      	str	r4, [r0, #20]
 8009292:	6103      	str	r3, [r0, #16]
 8009294:	bd10      	pop	{r4, pc}
 8009296:	bf00      	nop
 8009298:	0800adb8 	.word	0x0800adb8
 800929c:	0800ae44 	.word	0x0800ae44

080092a0 <__multiply>:
 80092a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	4691      	mov	r9, r2
 80092a6:	690a      	ldr	r2, [r1, #16]
 80092a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	bfb8      	it	lt
 80092b0:	460b      	movlt	r3, r1
 80092b2:	460c      	mov	r4, r1
 80092b4:	bfbc      	itt	lt
 80092b6:	464c      	movlt	r4, r9
 80092b8:	4699      	movlt	r9, r3
 80092ba:	6927      	ldr	r7, [r4, #16]
 80092bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80092c0:	68a3      	ldr	r3, [r4, #8]
 80092c2:	6861      	ldr	r1, [r4, #4]
 80092c4:	eb07 060a 	add.w	r6, r7, sl
 80092c8:	42b3      	cmp	r3, r6
 80092ca:	b085      	sub	sp, #20
 80092cc:	bfb8      	it	lt
 80092ce:	3101      	addlt	r1, #1
 80092d0:	f7ff fe8e 	bl	8008ff0 <_Balloc>
 80092d4:	b930      	cbnz	r0, 80092e4 <__multiply+0x44>
 80092d6:	4602      	mov	r2, r0
 80092d8:	4b44      	ldr	r3, [pc, #272]	; (80093ec <__multiply+0x14c>)
 80092da:	4845      	ldr	r0, [pc, #276]	; (80093f0 <__multiply+0x150>)
 80092dc:	f240 115d 	movw	r1, #349	; 0x15d
 80092e0:	f7fe fc40 	bl	8007b64 <__assert_func>
 80092e4:	f100 0514 	add.w	r5, r0, #20
 80092e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80092ec:	462b      	mov	r3, r5
 80092ee:	2200      	movs	r2, #0
 80092f0:	4543      	cmp	r3, r8
 80092f2:	d321      	bcc.n	8009338 <__multiply+0x98>
 80092f4:	f104 0314 	add.w	r3, r4, #20
 80092f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80092fc:	f109 0314 	add.w	r3, r9, #20
 8009300:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009304:	9202      	str	r2, [sp, #8]
 8009306:	1b3a      	subs	r2, r7, r4
 8009308:	3a15      	subs	r2, #21
 800930a:	f022 0203 	bic.w	r2, r2, #3
 800930e:	3204      	adds	r2, #4
 8009310:	f104 0115 	add.w	r1, r4, #21
 8009314:	428f      	cmp	r7, r1
 8009316:	bf38      	it	cc
 8009318:	2204      	movcc	r2, #4
 800931a:	9201      	str	r2, [sp, #4]
 800931c:	9a02      	ldr	r2, [sp, #8]
 800931e:	9303      	str	r3, [sp, #12]
 8009320:	429a      	cmp	r2, r3
 8009322:	d80c      	bhi.n	800933e <__multiply+0x9e>
 8009324:	2e00      	cmp	r6, #0
 8009326:	dd03      	ble.n	8009330 <__multiply+0x90>
 8009328:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800932c:	2b00      	cmp	r3, #0
 800932e:	d05a      	beq.n	80093e6 <__multiply+0x146>
 8009330:	6106      	str	r6, [r0, #16]
 8009332:	b005      	add	sp, #20
 8009334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009338:	f843 2b04 	str.w	r2, [r3], #4
 800933c:	e7d8      	b.n	80092f0 <__multiply+0x50>
 800933e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009342:	f1ba 0f00 	cmp.w	sl, #0
 8009346:	d024      	beq.n	8009392 <__multiply+0xf2>
 8009348:	f104 0e14 	add.w	lr, r4, #20
 800934c:	46a9      	mov	r9, r5
 800934e:	f04f 0c00 	mov.w	ip, #0
 8009352:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009356:	f8d9 1000 	ldr.w	r1, [r9]
 800935a:	fa1f fb82 	uxth.w	fp, r2
 800935e:	b289      	uxth	r1, r1
 8009360:	fb0a 110b 	mla	r1, sl, fp, r1
 8009364:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009368:	f8d9 2000 	ldr.w	r2, [r9]
 800936c:	4461      	add	r1, ip
 800936e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009372:	fb0a c20b 	mla	r2, sl, fp, ip
 8009376:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800937a:	b289      	uxth	r1, r1
 800937c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009380:	4577      	cmp	r7, lr
 8009382:	f849 1b04 	str.w	r1, [r9], #4
 8009386:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800938a:	d8e2      	bhi.n	8009352 <__multiply+0xb2>
 800938c:	9a01      	ldr	r2, [sp, #4]
 800938e:	f845 c002 	str.w	ip, [r5, r2]
 8009392:	9a03      	ldr	r2, [sp, #12]
 8009394:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009398:	3304      	adds	r3, #4
 800939a:	f1b9 0f00 	cmp.w	r9, #0
 800939e:	d020      	beq.n	80093e2 <__multiply+0x142>
 80093a0:	6829      	ldr	r1, [r5, #0]
 80093a2:	f104 0c14 	add.w	ip, r4, #20
 80093a6:	46ae      	mov	lr, r5
 80093a8:	f04f 0a00 	mov.w	sl, #0
 80093ac:	f8bc b000 	ldrh.w	fp, [ip]
 80093b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80093b4:	fb09 220b 	mla	r2, r9, fp, r2
 80093b8:	4492      	add	sl, r2
 80093ba:	b289      	uxth	r1, r1
 80093bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80093c0:	f84e 1b04 	str.w	r1, [lr], #4
 80093c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80093c8:	f8be 1000 	ldrh.w	r1, [lr]
 80093cc:	0c12      	lsrs	r2, r2, #16
 80093ce:	fb09 1102 	mla	r1, r9, r2, r1
 80093d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80093d6:	4567      	cmp	r7, ip
 80093d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093dc:	d8e6      	bhi.n	80093ac <__multiply+0x10c>
 80093de:	9a01      	ldr	r2, [sp, #4]
 80093e0:	50a9      	str	r1, [r5, r2]
 80093e2:	3504      	adds	r5, #4
 80093e4:	e79a      	b.n	800931c <__multiply+0x7c>
 80093e6:	3e01      	subs	r6, #1
 80093e8:	e79c      	b.n	8009324 <__multiply+0x84>
 80093ea:	bf00      	nop
 80093ec:	0800adb8 	.word	0x0800adb8
 80093f0:	0800ae44 	.word	0x0800ae44

080093f4 <__pow5mult>:
 80093f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093f8:	4615      	mov	r5, r2
 80093fa:	f012 0203 	ands.w	r2, r2, #3
 80093fe:	4606      	mov	r6, r0
 8009400:	460f      	mov	r7, r1
 8009402:	d007      	beq.n	8009414 <__pow5mult+0x20>
 8009404:	4c25      	ldr	r4, [pc, #148]	; (800949c <__pow5mult+0xa8>)
 8009406:	3a01      	subs	r2, #1
 8009408:	2300      	movs	r3, #0
 800940a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800940e:	f7ff fe51 	bl	80090b4 <__multadd>
 8009412:	4607      	mov	r7, r0
 8009414:	10ad      	asrs	r5, r5, #2
 8009416:	d03d      	beq.n	8009494 <__pow5mult+0xa0>
 8009418:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800941a:	b97c      	cbnz	r4, 800943c <__pow5mult+0x48>
 800941c:	2010      	movs	r0, #16
 800941e:	f7ff fdbf 	bl	8008fa0 <malloc>
 8009422:	4602      	mov	r2, r0
 8009424:	6270      	str	r0, [r6, #36]	; 0x24
 8009426:	b928      	cbnz	r0, 8009434 <__pow5mult+0x40>
 8009428:	4b1d      	ldr	r3, [pc, #116]	; (80094a0 <__pow5mult+0xac>)
 800942a:	481e      	ldr	r0, [pc, #120]	; (80094a4 <__pow5mult+0xb0>)
 800942c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009430:	f7fe fb98 	bl	8007b64 <__assert_func>
 8009434:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009438:	6004      	str	r4, [r0, #0]
 800943a:	60c4      	str	r4, [r0, #12]
 800943c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009440:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009444:	b94c      	cbnz	r4, 800945a <__pow5mult+0x66>
 8009446:	f240 2171 	movw	r1, #625	; 0x271
 800944a:	4630      	mov	r0, r6
 800944c:	f7ff ff12 	bl	8009274 <__i2b>
 8009450:	2300      	movs	r3, #0
 8009452:	f8c8 0008 	str.w	r0, [r8, #8]
 8009456:	4604      	mov	r4, r0
 8009458:	6003      	str	r3, [r0, #0]
 800945a:	f04f 0900 	mov.w	r9, #0
 800945e:	07eb      	lsls	r3, r5, #31
 8009460:	d50a      	bpl.n	8009478 <__pow5mult+0x84>
 8009462:	4639      	mov	r1, r7
 8009464:	4622      	mov	r2, r4
 8009466:	4630      	mov	r0, r6
 8009468:	f7ff ff1a 	bl	80092a0 <__multiply>
 800946c:	4639      	mov	r1, r7
 800946e:	4680      	mov	r8, r0
 8009470:	4630      	mov	r0, r6
 8009472:	f7ff fdfd 	bl	8009070 <_Bfree>
 8009476:	4647      	mov	r7, r8
 8009478:	106d      	asrs	r5, r5, #1
 800947a:	d00b      	beq.n	8009494 <__pow5mult+0xa0>
 800947c:	6820      	ldr	r0, [r4, #0]
 800947e:	b938      	cbnz	r0, 8009490 <__pow5mult+0x9c>
 8009480:	4622      	mov	r2, r4
 8009482:	4621      	mov	r1, r4
 8009484:	4630      	mov	r0, r6
 8009486:	f7ff ff0b 	bl	80092a0 <__multiply>
 800948a:	6020      	str	r0, [r4, #0]
 800948c:	f8c0 9000 	str.w	r9, [r0]
 8009490:	4604      	mov	r4, r0
 8009492:	e7e4      	b.n	800945e <__pow5mult+0x6a>
 8009494:	4638      	mov	r0, r7
 8009496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800949a:	bf00      	nop
 800949c:	0800af90 	.word	0x0800af90
 80094a0:	0800aca0 	.word	0x0800aca0
 80094a4:	0800ae44 	.word	0x0800ae44

080094a8 <__lshift>:
 80094a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ac:	460c      	mov	r4, r1
 80094ae:	6849      	ldr	r1, [r1, #4]
 80094b0:	6923      	ldr	r3, [r4, #16]
 80094b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094b6:	68a3      	ldr	r3, [r4, #8]
 80094b8:	4607      	mov	r7, r0
 80094ba:	4691      	mov	r9, r2
 80094bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094c0:	f108 0601 	add.w	r6, r8, #1
 80094c4:	42b3      	cmp	r3, r6
 80094c6:	db0b      	blt.n	80094e0 <__lshift+0x38>
 80094c8:	4638      	mov	r0, r7
 80094ca:	f7ff fd91 	bl	8008ff0 <_Balloc>
 80094ce:	4605      	mov	r5, r0
 80094d0:	b948      	cbnz	r0, 80094e6 <__lshift+0x3e>
 80094d2:	4602      	mov	r2, r0
 80094d4:	4b2a      	ldr	r3, [pc, #168]	; (8009580 <__lshift+0xd8>)
 80094d6:	482b      	ldr	r0, [pc, #172]	; (8009584 <__lshift+0xdc>)
 80094d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80094dc:	f7fe fb42 	bl	8007b64 <__assert_func>
 80094e0:	3101      	adds	r1, #1
 80094e2:	005b      	lsls	r3, r3, #1
 80094e4:	e7ee      	b.n	80094c4 <__lshift+0x1c>
 80094e6:	2300      	movs	r3, #0
 80094e8:	f100 0114 	add.w	r1, r0, #20
 80094ec:	f100 0210 	add.w	r2, r0, #16
 80094f0:	4618      	mov	r0, r3
 80094f2:	4553      	cmp	r3, sl
 80094f4:	db37      	blt.n	8009566 <__lshift+0xbe>
 80094f6:	6920      	ldr	r0, [r4, #16]
 80094f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094fc:	f104 0314 	add.w	r3, r4, #20
 8009500:	f019 091f 	ands.w	r9, r9, #31
 8009504:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009508:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800950c:	d02f      	beq.n	800956e <__lshift+0xc6>
 800950e:	f1c9 0e20 	rsb	lr, r9, #32
 8009512:	468a      	mov	sl, r1
 8009514:	f04f 0c00 	mov.w	ip, #0
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	fa02 f209 	lsl.w	r2, r2, r9
 800951e:	ea42 020c 	orr.w	r2, r2, ip
 8009522:	f84a 2b04 	str.w	r2, [sl], #4
 8009526:	f853 2b04 	ldr.w	r2, [r3], #4
 800952a:	4298      	cmp	r0, r3
 800952c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009530:	d8f2      	bhi.n	8009518 <__lshift+0x70>
 8009532:	1b03      	subs	r3, r0, r4
 8009534:	3b15      	subs	r3, #21
 8009536:	f023 0303 	bic.w	r3, r3, #3
 800953a:	3304      	adds	r3, #4
 800953c:	f104 0215 	add.w	r2, r4, #21
 8009540:	4290      	cmp	r0, r2
 8009542:	bf38      	it	cc
 8009544:	2304      	movcc	r3, #4
 8009546:	f841 c003 	str.w	ip, [r1, r3]
 800954a:	f1bc 0f00 	cmp.w	ip, #0
 800954e:	d001      	beq.n	8009554 <__lshift+0xac>
 8009550:	f108 0602 	add.w	r6, r8, #2
 8009554:	3e01      	subs	r6, #1
 8009556:	4638      	mov	r0, r7
 8009558:	612e      	str	r6, [r5, #16]
 800955a:	4621      	mov	r1, r4
 800955c:	f7ff fd88 	bl	8009070 <_Bfree>
 8009560:	4628      	mov	r0, r5
 8009562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009566:	f842 0f04 	str.w	r0, [r2, #4]!
 800956a:	3301      	adds	r3, #1
 800956c:	e7c1      	b.n	80094f2 <__lshift+0x4a>
 800956e:	3904      	subs	r1, #4
 8009570:	f853 2b04 	ldr.w	r2, [r3], #4
 8009574:	f841 2f04 	str.w	r2, [r1, #4]!
 8009578:	4298      	cmp	r0, r3
 800957a:	d8f9      	bhi.n	8009570 <__lshift+0xc8>
 800957c:	e7ea      	b.n	8009554 <__lshift+0xac>
 800957e:	bf00      	nop
 8009580:	0800adb8 	.word	0x0800adb8
 8009584:	0800ae44 	.word	0x0800ae44

08009588 <__mcmp>:
 8009588:	b530      	push	{r4, r5, lr}
 800958a:	6902      	ldr	r2, [r0, #16]
 800958c:	690c      	ldr	r4, [r1, #16]
 800958e:	1b12      	subs	r2, r2, r4
 8009590:	d10e      	bne.n	80095b0 <__mcmp+0x28>
 8009592:	f100 0314 	add.w	r3, r0, #20
 8009596:	3114      	adds	r1, #20
 8009598:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800959c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80095a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80095a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80095a8:	42a5      	cmp	r5, r4
 80095aa:	d003      	beq.n	80095b4 <__mcmp+0x2c>
 80095ac:	d305      	bcc.n	80095ba <__mcmp+0x32>
 80095ae:	2201      	movs	r2, #1
 80095b0:	4610      	mov	r0, r2
 80095b2:	bd30      	pop	{r4, r5, pc}
 80095b4:	4283      	cmp	r3, r0
 80095b6:	d3f3      	bcc.n	80095a0 <__mcmp+0x18>
 80095b8:	e7fa      	b.n	80095b0 <__mcmp+0x28>
 80095ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095be:	e7f7      	b.n	80095b0 <__mcmp+0x28>

080095c0 <__mdiff>:
 80095c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c4:	460c      	mov	r4, r1
 80095c6:	4606      	mov	r6, r0
 80095c8:	4611      	mov	r1, r2
 80095ca:	4620      	mov	r0, r4
 80095cc:	4690      	mov	r8, r2
 80095ce:	f7ff ffdb 	bl	8009588 <__mcmp>
 80095d2:	1e05      	subs	r5, r0, #0
 80095d4:	d110      	bne.n	80095f8 <__mdiff+0x38>
 80095d6:	4629      	mov	r1, r5
 80095d8:	4630      	mov	r0, r6
 80095da:	f7ff fd09 	bl	8008ff0 <_Balloc>
 80095de:	b930      	cbnz	r0, 80095ee <__mdiff+0x2e>
 80095e0:	4b3a      	ldr	r3, [pc, #232]	; (80096cc <__mdiff+0x10c>)
 80095e2:	4602      	mov	r2, r0
 80095e4:	f240 2132 	movw	r1, #562	; 0x232
 80095e8:	4839      	ldr	r0, [pc, #228]	; (80096d0 <__mdiff+0x110>)
 80095ea:	f7fe fabb 	bl	8007b64 <__assert_func>
 80095ee:	2301      	movs	r3, #1
 80095f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f8:	bfa4      	itt	ge
 80095fa:	4643      	movge	r3, r8
 80095fc:	46a0      	movge	r8, r4
 80095fe:	4630      	mov	r0, r6
 8009600:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009604:	bfa6      	itte	ge
 8009606:	461c      	movge	r4, r3
 8009608:	2500      	movge	r5, #0
 800960a:	2501      	movlt	r5, #1
 800960c:	f7ff fcf0 	bl	8008ff0 <_Balloc>
 8009610:	b920      	cbnz	r0, 800961c <__mdiff+0x5c>
 8009612:	4b2e      	ldr	r3, [pc, #184]	; (80096cc <__mdiff+0x10c>)
 8009614:	4602      	mov	r2, r0
 8009616:	f44f 7110 	mov.w	r1, #576	; 0x240
 800961a:	e7e5      	b.n	80095e8 <__mdiff+0x28>
 800961c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009620:	6926      	ldr	r6, [r4, #16]
 8009622:	60c5      	str	r5, [r0, #12]
 8009624:	f104 0914 	add.w	r9, r4, #20
 8009628:	f108 0514 	add.w	r5, r8, #20
 800962c:	f100 0e14 	add.w	lr, r0, #20
 8009630:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009634:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009638:	f108 0210 	add.w	r2, r8, #16
 800963c:	46f2      	mov	sl, lr
 800963e:	2100      	movs	r1, #0
 8009640:	f859 3b04 	ldr.w	r3, [r9], #4
 8009644:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009648:	fa1f f883 	uxth.w	r8, r3
 800964c:	fa11 f18b 	uxtah	r1, r1, fp
 8009650:	0c1b      	lsrs	r3, r3, #16
 8009652:	eba1 0808 	sub.w	r8, r1, r8
 8009656:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800965a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800965e:	fa1f f888 	uxth.w	r8, r8
 8009662:	1419      	asrs	r1, r3, #16
 8009664:	454e      	cmp	r6, r9
 8009666:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800966a:	f84a 3b04 	str.w	r3, [sl], #4
 800966e:	d8e7      	bhi.n	8009640 <__mdiff+0x80>
 8009670:	1b33      	subs	r3, r6, r4
 8009672:	3b15      	subs	r3, #21
 8009674:	f023 0303 	bic.w	r3, r3, #3
 8009678:	3304      	adds	r3, #4
 800967a:	3415      	adds	r4, #21
 800967c:	42a6      	cmp	r6, r4
 800967e:	bf38      	it	cc
 8009680:	2304      	movcc	r3, #4
 8009682:	441d      	add	r5, r3
 8009684:	4473      	add	r3, lr
 8009686:	469e      	mov	lr, r3
 8009688:	462e      	mov	r6, r5
 800968a:	4566      	cmp	r6, ip
 800968c:	d30e      	bcc.n	80096ac <__mdiff+0xec>
 800968e:	f10c 0203 	add.w	r2, ip, #3
 8009692:	1b52      	subs	r2, r2, r5
 8009694:	f022 0203 	bic.w	r2, r2, #3
 8009698:	3d03      	subs	r5, #3
 800969a:	45ac      	cmp	ip, r5
 800969c:	bf38      	it	cc
 800969e:	2200      	movcc	r2, #0
 80096a0:	441a      	add	r2, r3
 80096a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80096a6:	b17b      	cbz	r3, 80096c8 <__mdiff+0x108>
 80096a8:	6107      	str	r7, [r0, #16]
 80096aa:	e7a3      	b.n	80095f4 <__mdiff+0x34>
 80096ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80096b0:	fa11 f288 	uxtah	r2, r1, r8
 80096b4:	1414      	asrs	r4, r2, #16
 80096b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80096ba:	b292      	uxth	r2, r2
 80096bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80096c0:	f84e 2b04 	str.w	r2, [lr], #4
 80096c4:	1421      	asrs	r1, r4, #16
 80096c6:	e7e0      	b.n	800968a <__mdiff+0xca>
 80096c8:	3f01      	subs	r7, #1
 80096ca:	e7ea      	b.n	80096a2 <__mdiff+0xe2>
 80096cc:	0800adb8 	.word	0x0800adb8
 80096d0:	0800ae44 	.word	0x0800ae44

080096d4 <__ulp>:
 80096d4:	b082      	sub	sp, #8
 80096d6:	ed8d 0b00 	vstr	d0, [sp]
 80096da:	9b01      	ldr	r3, [sp, #4]
 80096dc:	4912      	ldr	r1, [pc, #72]	; (8009728 <__ulp+0x54>)
 80096de:	4019      	ands	r1, r3
 80096e0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80096e4:	2900      	cmp	r1, #0
 80096e6:	dd05      	ble.n	80096f4 <__ulp+0x20>
 80096e8:	2200      	movs	r2, #0
 80096ea:	460b      	mov	r3, r1
 80096ec:	ec43 2b10 	vmov	d0, r2, r3
 80096f0:	b002      	add	sp, #8
 80096f2:	4770      	bx	lr
 80096f4:	4249      	negs	r1, r1
 80096f6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80096fa:	ea4f 5021 	mov.w	r0, r1, asr #20
 80096fe:	f04f 0200 	mov.w	r2, #0
 8009702:	f04f 0300 	mov.w	r3, #0
 8009706:	da04      	bge.n	8009712 <__ulp+0x3e>
 8009708:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800970c:	fa41 f300 	asr.w	r3, r1, r0
 8009710:	e7ec      	b.n	80096ec <__ulp+0x18>
 8009712:	f1a0 0114 	sub.w	r1, r0, #20
 8009716:	291e      	cmp	r1, #30
 8009718:	bfda      	itte	le
 800971a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800971e:	fa20 f101 	lsrle.w	r1, r0, r1
 8009722:	2101      	movgt	r1, #1
 8009724:	460a      	mov	r2, r1
 8009726:	e7e1      	b.n	80096ec <__ulp+0x18>
 8009728:	7ff00000 	.word	0x7ff00000

0800972c <__b2d>:
 800972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972e:	6905      	ldr	r5, [r0, #16]
 8009730:	f100 0714 	add.w	r7, r0, #20
 8009734:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009738:	1f2e      	subs	r6, r5, #4
 800973a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800973e:	4620      	mov	r0, r4
 8009740:	f7ff fd48 	bl	80091d4 <__hi0bits>
 8009744:	f1c0 0320 	rsb	r3, r0, #32
 8009748:	280a      	cmp	r0, #10
 800974a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80097c8 <__b2d+0x9c>
 800974e:	600b      	str	r3, [r1, #0]
 8009750:	dc14      	bgt.n	800977c <__b2d+0x50>
 8009752:	f1c0 0e0b 	rsb	lr, r0, #11
 8009756:	fa24 f10e 	lsr.w	r1, r4, lr
 800975a:	42b7      	cmp	r7, r6
 800975c:	ea41 030c 	orr.w	r3, r1, ip
 8009760:	bf34      	ite	cc
 8009762:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009766:	2100      	movcs	r1, #0
 8009768:	3015      	adds	r0, #21
 800976a:	fa04 f000 	lsl.w	r0, r4, r0
 800976e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009772:	ea40 0201 	orr.w	r2, r0, r1
 8009776:	ec43 2b10 	vmov	d0, r2, r3
 800977a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800977c:	42b7      	cmp	r7, r6
 800977e:	bf3a      	itte	cc
 8009780:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009784:	f1a5 0608 	subcc.w	r6, r5, #8
 8009788:	2100      	movcs	r1, #0
 800978a:	380b      	subs	r0, #11
 800978c:	d017      	beq.n	80097be <__b2d+0x92>
 800978e:	f1c0 0c20 	rsb	ip, r0, #32
 8009792:	fa04 f500 	lsl.w	r5, r4, r0
 8009796:	42be      	cmp	r6, r7
 8009798:	fa21 f40c 	lsr.w	r4, r1, ip
 800979c:	ea45 0504 	orr.w	r5, r5, r4
 80097a0:	bf8c      	ite	hi
 80097a2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80097a6:	2400      	movls	r4, #0
 80097a8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80097ac:	fa01 f000 	lsl.w	r0, r1, r0
 80097b0:	fa24 f40c 	lsr.w	r4, r4, ip
 80097b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80097b8:	ea40 0204 	orr.w	r2, r0, r4
 80097bc:	e7db      	b.n	8009776 <__b2d+0x4a>
 80097be:	ea44 030c 	orr.w	r3, r4, ip
 80097c2:	460a      	mov	r2, r1
 80097c4:	e7d7      	b.n	8009776 <__b2d+0x4a>
 80097c6:	bf00      	nop
 80097c8:	3ff00000 	.word	0x3ff00000

080097cc <__d2b>:
 80097cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097d0:	4689      	mov	r9, r1
 80097d2:	2101      	movs	r1, #1
 80097d4:	ec57 6b10 	vmov	r6, r7, d0
 80097d8:	4690      	mov	r8, r2
 80097da:	f7ff fc09 	bl	8008ff0 <_Balloc>
 80097de:	4604      	mov	r4, r0
 80097e0:	b930      	cbnz	r0, 80097f0 <__d2b+0x24>
 80097e2:	4602      	mov	r2, r0
 80097e4:	4b25      	ldr	r3, [pc, #148]	; (800987c <__d2b+0xb0>)
 80097e6:	4826      	ldr	r0, [pc, #152]	; (8009880 <__d2b+0xb4>)
 80097e8:	f240 310a 	movw	r1, #778	; 0x30a
 80097ec:	f7fe f9ba 	bl	8007b64 <__assert_func>
 80097f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80097f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097f8:	bb35      	cbnz	r5, 8009848 <__d2b+0x7c>
 80097fa:	2e00      	cmp	r6, #0
 80097fc:	9301      	str	r3, [sp, #4]
 80097fe:	d028      	beq.n	8009852 <__d2b+0x86>
 8009800:	4668      	mov	r0, sp
 8009802:	9600      	str	r6, [sp, #0]
 8009804:	f7ff fd06 	bl	8009214 <__lo0bits>
 8009808:	9900      	ldr	r1, [sp, #0]
 800980a:	b300      	cbz	r0, 800984e <__d2b+0x82>
 800980c:	9a01      	ldr	r2, [sp, #4]
 800980e:	f1c0 0320 	rsb	r3, r0, #32
 8009812:	fa02 f303 	lsl.w	r3, r2, r3
 8009816:	430b      	orrs	r3, r1
 8009818:	40c2      	lsrs	r2, r0
 800981a:	6163      	str	r3, [r4, #20]
 800981c:	9201      	str	r2, [sp, #4]
 800981e:	9b01      	ldr	r3, [sp, #4]
 8009820:	61a3      	str	r3, [r4, #24]
 8009822:	2b00      	cmp	r3, #0
 8009824:	bf14      	ite	ne
 8009826:	2202      	movne	r2, #2
 8009828:	2201      	moveq	r2, #1
 800982a:	6122      	str	r2, [r4, #16]
 800982c:	b1d5      	cbz	r5, 8009864 <__d2b+0x98>
 800982e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009832:	4405      	add	r5, r0
 8009834:	f8c9 5000 	str.w	r5, [r9]
 8009838:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800983c:	f8c8 0000 	str.w	r0, [r8]
 8009840:	4620      	mov	r0, r4
 8009842:	b003      	add	sp, #12
 8009844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800984c:	e7d5      	b.n	80097fa <__d2b+0x2e>
 800984e:	6161      	str	r1, [r4, #20]
 8009850:	e7e5      	b.n	800981e <__d2b+0x52>
 8009852:	a801      	add	r0, sp, #4
 8009854:	f7ff fcde 	bl	8009214 <__lo0bits>
 8009858:	9b01      	ldr	r3, [sp, #4]
 800985a:	6163      	str	r3, [r4, #20]
 800985c:	2201      	movs	r2, #1
 800985e:	6122      	str	r2, [r4, #16]
 8009860:	3020      	adds	r0, #32
 8009862:	e7e3      	b.n	800982c <__d2b+0x60>
 8009864:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009868:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800986c:	f8c9 0000 	str.w	r0, [r9]
 8009870:	6918      	ldr	r0, [r3, #16]
 8009872:	f7ff fcaf 	bl	80091d4 <__hi0bits>
 8009876:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800987a:	e7df      	b.n	800983c <__d2b+0x70>
 800987c:	0800adb8 	.word	0x0800adb8
 8009880:	0800ae44 	.word	0x0800ae44

08009884 <__ratio>:
 8009884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009888:	4688      	mov	r8, r1
 800988a:	4669      	mov	r1, sp
 800988c:	4681      	mov	r9, r0
 800988e:	f7ff ff4d 	bl	800972c <__b2d>
 8009892:	a901      	add	r1, sp, #4
 8009894:	4640      	mov	r0, r8
 8009896:	ec55 4b10 	vmov	r4, r5, d0
 800989a:	f7ff ff47 	bl	800972c <__b2d>
 800989e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80098a2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80098a6:	eba3 0c02 	sub.w	ip, r3, r2
 80098aa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80098ae:	1a9b      	subs	r3, r3, r2
 80098b0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80098b4:	ec51 0b10 	vmov	r0, r1, d0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	bfd6      	itet	le
 80098bc:	460a      	movle	r2, r1
 80098be:	462a      	movgt	r2, r5
 80098c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80098c4:	468b      	mov	fp, r1
 80098c6:	462f      	mov	r7, r5
 80098c8:	bfd4      	ite	le
 80098ca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80098ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80098d2:	4620      	mov	r0, r4
 80098d4:	ee10 2a10 	vmov	r2, s0
 80098d8:	465b      	mov	r3, fp
 80098da:	4639      	mov	r1, r7
 80098dc:	f7f6 ffe6 	bl	80008ac <__aeabi_ddiv>
 80098e0:	ec41 0b10 	vmov	d0, r0, r1
 80098e4:	b003      	add	sp, #12
 80098e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098ea <__copybits>:
 80098ea:	3901      	subs	r1, #1
 80098ec:	b570      	push	{r4, r5, r6, lr}
 80098ee:	1149      	asrs	r1, r1, #5
 80098f0:	6914      	ldr	r4, [r2, #16]
 80098f2:	3101      	adds	r1, #1
 80098f4:	f102 0314 	add.w	r3, r2, #20
 80098f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80098fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009900:	1f05      	subs	r5, r0, #4
 8009902:	42a3      	cmp	r3, r4
 8009904:	d30c      	bcc.n	8009920 <__copybits+0x36>
 8009906:	1aa3      	subs	r3, r4, r2
 8009908:	3b11      	subs	r3, #17
 800990a:	f023 0303 	bic.w	r3, r3, #3
 800990e:	3211      	adds	r2, #17
 8009910:	42a2      	cmp	r2, r4
 8009912:	bf88      	it	hi
 8009914:	2300      	movhi	r3, #0
 8009916:	4418      	add	r0, r3
 8009918:	2300      	movs	r3, #0
 800991a:	4288      	cmp	r0, r1
 800991c:	d305      	bcc.n	800992a <__copybits+0x40>
 800991e:	bd70      	pop	{r4, r5, r6, pc}
 8009920:	f853 6b04 	ldr.w	r6, [r3], #4
 8009924:	f845 6f04 	str.w	r6, [r5, #4]!
 8009928:	e7eb      	b.n	8009902 <__copybits+0x18>
 800992a:	f840 3b04 	str.w	r3, [r0], #4
 800992e:	e7f4      	b.n	800991a <__copybits+0x30>

08009930 <__any_on>:
 8009930:	f100 0214 	add.w	r2, r0, #20
 8009934:	6900      	ldr	r0, [r0, #16]
 8009936:	114b      	asrs	r3, r1, #5
 8009938:	4298      	cmp	r0, r3
 800993a:	b510      	push	{r4, lr}
 800993c:	db11      	blt.n	8009962 <__any_on+0x32>
 800993e:	dd0a      	ble.n	8009956 <__any_on+0x26>
 8009940:	f011 011f 	ands.w	r1, r1, #31
 8009944:	d007      	beq.n	8009956 <__any_on+0x26>
 8009946:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800994a:	fa24 f001 	lsr.w	r0, r4, r1
 800994e:	fa00 f101 	lsl.w	r1, r0, r1
 8009952:	428c      	cmp	r4, r1
 8009954:	d10b      	bne.n	800996e <__any_on+0x3e>
 8009956:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800995a:	4293      	cmp	r3, r2
 800995c:	d803      	bhi.n	8009966 <__any_on+0x36>
 800995e:	2000      	movs	r0, #0
 8009960:	bd10      	pop	{r4, pc}
 8009962:	4603      	mov	r3, r0
 8009964:	e7f7      	b.n	8009956 <__any_on+0x26>
 8009966:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800996a:	2900      	cmp	r1, #0
 800996c:	d0f5      	beq.n	800995a <__any_on+0x2a>
 800996e:	2001      	movs	r0, #1
 8009970:	e7f6      	b.n	8009960 <__any_on+0x30>

08009972 <_calloc_r>:
 8009972:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009974:	fba1 2402 	umull	r2, r4, r1, r2
 8009978:	b94c      	cbnz	r4, 800998e <_calloc_r+0x1c>
 800997a:	4611      	mov	r1, r2
 800997c:	9201      	str	r2, [sp, #4]
 800997e:	f000 f87b 	bl	8009a78 <_malloc_r>
 8009982:	9a01      	ldr	r2, [sp, #4]
 8009984:	4605      	mov	r5, r0
 8009986:	b930      	cbnz	r0, 8009996 <_calloc_r+0x24>
 8009988:	4628      	mov	r0, r5
 800998a:	b003      	add	sp, #12
 800998c:	bd30      	pop	{r4, r5, pc}
 800998e:	220c      	movs	r2, #12
 8009990:	6002      	str	r2, [r0, #0]
 8009992:	2500      	movs	r5, #0
 8009994:	e7f8      	b.n	8009988 <_calloc_r+0x16>
 8009996:	4621      	mov	r1, r4
 8009998:	f7fc fdc6 	bl	8006528 <memset>
 800999c:	e7f4      	b.n	8009988 <_calloc_r+0x16>
	...

080099a0 <_free_r>:
 80099a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099a2:	2900      	cmp	r1, #0
 80099a4:	d044      	beq.n	8009a30 <_free_r+0x90>
 80099a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099aa:	9001      	str	r0, [sp, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f1a1 0404 	sub.w	r4, r1, #4
 80099b2:	bfb8      	it	lt
 80099b4:	18e4      	addlt	r4, r4, r3
 80099b6:	f000 fec7 	bl	800a748 <__malloc_lock>
 80099ba:	4a1e      	ldr	r2, [pc, #120]	; (8009a34 <_free_r+0x94>)
 80099bc:	9801      	ldr	r0, [sp, #4]
 80099be:	6813      	ldr	r3, [r2, #0]
 80099c0:	b933      	cbnz	r3, 80099d0 <_free_r+0x30>
 80099c2:	6063      	str	r3, [r4, #4]
 80099c4:	6014      	str	r4, [r2, #0]
 80099c6:	b003      	add	sp, #12
 80099c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099cc:	f000 bec2 	b.w	800a754 <__malloc_unlock>
 80099d0:	42a3      	cmp	r3, r4
 80099d2:	d908      	bls.n	80099e6 <_free_r+0x46>
 80099d4:	6825      	ldr	r5, [r4, #0]
 80099d6:	1961      	adds	r1, r4, r5
 80099d8:	428b      	cmp	r3, r1
 80099da:	bf01      	itttt	eq
 80099dc:	6819      	ldreq	r1, [r3, #0]
 80099de:	685b      	ldreq	r3, [r3, #4]
 80099e0:	1949      	addeq	r1, r1, r5
 80099e2:	6021      	streq	r1, [r4, #0]
 80099e4:	e7ed      	b.n	80099c2 <_free_r+0x22>
 80099e6:	461a      	mov	r2, r3
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	b10b      	cbz	r3, 80099f0 <_free_r+0x50>
 80099ec:	42a3      	cmp	r3, r4
 80099ee:	d9fa      	bls.n	80099e6 <_free_r+0x46>
 80099f0:	6811      	ldr	r1, [r2, #0]
 80099f2:	1855      	adds	r5, r2, r1
 80099f4:	42a5      	cmp	r5, r4
 80099f6:	d10b      	bne.n	8009a10 <_free_r+0x70>
 80099f8:	6824      	ldr	r4, [r4, #0]
 80099fa:	4421      	add	r1, r4
 80099fc:	1854      	adds	r4, r2, r1
 80099fe:	42a3      	cmp	r3, r4
 8009a00:	6011      	str	r1, [r2, #0]
 8009a02:	d1e0      	bne.n	80099c6 <_free_r+0x26>
 8009a04:	681c      	ldr	r4, [r3, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	6053      	str	r3, [r2, #4]
 8009a0a:	4421      	add	r1, r4
 8009a0c:	6011      	str	r1, [r2, #0]
 8009a0e:	e7da      	b.n	80099c6 <_free_r+0x26>
 8009a10:	d902      	bls.n	8009a18 <_free_r+0x78>
 8009a12:	230c      	movs	r3, #12
 8009a14:	6003      	str	r3, [r0, #0]
 8009a16:	e7d6      	b.n	80099c6 <_free_r+0x26>
 8009a18:	6825      	ldr	r5, [r4, #0]
 8009a1a:	1961      	adds	r1, r4, r5
 8009a1c:	428b      	cmp	r3, r1
 8009a1e:	bf04      	itt	eq
 8009a20:	6819      	ldreq	r1, [r3, #0]
 8009a22:	685b      	ldreq	r3, [r3, #4]
 8009a24:	6063      	str	r3, [r4, #4]
 8009a26:	bf04      	itt	eq
 8009a28:	1949      	addeq	r1, r1, r5
 8009a2a:	6021      	streq	r1, [r4, #0]
 8009a2c:	6054      	str	r4, [r2, #4]
 8009a2e:	e7ca      	b.n	80099c6 <_free_r+0x26>
 8009a30:	b003      	add	sp, #12
 8009a32:	bd30      	pop	{r4, r5, pc}
 8009a34:	200004e8 	.word	0x200004e8

08009a38 <sbrk_aligned>:
 8009a38:	b570      	push	{r4, r5, r6, lr}
 8009a3a:	4e0e      	ldr	r6, [pc, #56]	; (8009a74 <sbrk_aligned+0x3c>)
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	6831      	ldr	r1, [r6, #0]
 8009a40:	4605      	mov	r5, r0
 8009a42:	b911      	cbnz	r1, 8009a4a <sbrk_aligned+0x12>
 8009a44:	f000 fb4c 	bl	800a0e0 <_sbrk_r>
 8009a48:	6030      	str	r0, [r6, #0]
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	f000 fb47 	bl	800a0e0 <_sbrk_r>
 8009a52:	1c43      	adds	r3, r0, #1
 8009a54:	d00a      	beq.n	8009a6c <sbrk_aligned+0x34>
 8009a56:	1cc4      	adds	r4, r0, #3
 8009a58:	f024 0403 	bic.w	r4, r4, #3
 8009a5c:	42a0      	cmp	r0, r4
 8009a5e:	d007      	beq.n	8009a70 <sbrk_aligned+0x38>
 8009a60:	1a21      	subs	r1, r4, r0
 8009a62:	4628      	mov	r0, r5
 8009a64:	f000 fb3c 	bl	800a0e0 <_sbrk_r>
 8009a68:	3001      	adds	r0, #1
 8009a6a:	d101      	bne.n	8009a70 <sbrk_aligned+0x38>
 8009a6c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009a70:	4620      	mov	r0, r4
 8009a72:	bd70      	pop	{r4, r5, r6, pc}
 8009a74:	200004ec 	.word	0x200004ec

08009a78 <_malloc_r>:
 8009a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a7c:	1ccd      	adds	r5, r1, #3
 8009a7e:	f025 0503 	bic.w	r5, r5, #3
 8009a82:	3508      	adds	r5, #8
 8009a84:	2d0c      	cmp	r5, #12
 8009a86:	bf38      	it	cc
 8009a88:	250c      	movcc	r5, #12
 8009a8a:	2d00      	cmp	r5, #0
 8009a8c:	4607      	mov	r7, r0
 8009a8e:	db01      	blt.n	8009a94 <_malloc_r+0x1c>
 8009a90:	42a9      	cmp	r1, r5
 8009a92:	d905      	bls.n	8009aa0 <_malloc_r+0x28>
 8009a94:	230c      	movs	r3, #12
 8009a96:	603b      	str	r3, [r7, #0]
 8009a98:	2600      	movs	r6, #0
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa0:	4e2e      	ldr	r6, [pc, #184]	; (8009b5c <_malloc_r+0xe4>)
 8009aa2:	f000 fe51 	bl	800a748 <__malloc_lock>
 8009aa6:	6833      	ldr	r3, [r6, #0]
 8009aa8:	461c      	mov	r4, r3
 8009aaa:	bb34      	cbnz	r4, 8009afa <_malloc_r+0x82>
 8009aac:	4629      	mov	r1, r5
 8009aae:	4638      	mov	r0, r7
 8009ab0:	f7ff ffc2 	bl	8009a38 <sbrk_aligned>
 8009ab4:	1c43      	adds	r3, r0, #1
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	d14d      	bne.n	8009b56 <_malloc_r+0xde>
 8009aba:	6834      	ldr	r4, [r6, #0]
 8009abc:	4626      	mov	r6, r4
 8009abe:	2e00      	cmp	r6, #0
 8009ac0:	d140      	bne.n	8009b44 <_malloc_r+0xcc>
 8009ac2:	6823      	ldr	r3, [r4, #0]
 8009ac4:	4631      	mov	r1, r6
 8009ac6:	4638      	mov	r0, r7
 8009ac8:	eb04 0803 	add.w	r8, r4, r3
 8009acc:	f000 fb08 	bl	800a0e0 <_sbrk_r>
 8009ad0:	4580      	cmp	r8, r0
 8009ad2:	d13a      	bne.n	8009b4a <_malloc_r+0xd2>
 8009ad4:	6821      	ldr	r1, [r4, #0]
 8009ad6:	3503      	adds	r5, #3
 8009ad8:	1a6d      	subs	r5, r5, r1
 8009ada:	f025 0503 	bic.w	r5, r5, #3
 8009ade:	3508      	adds	r5, #8
 8009ae0:	2d0c      	cmp	r5, #12
 8009ae2:	bf38      	it	cc
 8009ae4:	250c      	movcc	r5, #12
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	4638      	mov	r0, r7
 8009aea:	f7ff ffa5 	bl	8009a38 <sbrk_aligned>
 8009aee:	3001      	adds	r0, #1
 8009af0:	d02b      	beq.n	8009b4a <_malloc_r+0xd2>
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	442b      	add	r3, r5
 8009af6:	6023      	str	r3, [r4, #0]
 8009af8:	e00e      	b.n	8009b18 <_malloc_r+0xa0>
 8009afa:	6822      	ldr	r2, [r4, #0]
 8009afc:	1b52      	subs	r2, r2, r5
 8009afe:	d41e      	bmi.n	8009b3e <_malloc_r+0xc6>
 8009b00:	2a0b      	cmp	r2, #11
 8009b02:	d916      	bls.n	8009b32 <_malloc_r+0xba>
 8009b04:	1961      	adds	r1, r4, r5
 8009b06:	42a3      	cmp	r3, r4
 8009b08:	6025      	str	r5, [r4, #0]
 8009b0a:	bf18      	it	ne
 8009b0c:	6059      	strne	r1, [r3, #4]
 8009b0e:	6863      	ldr	r3, [r4, #4]
 8009b10:	bf08      	it	eq
 8009b12:	6031      	streq	r1, [r6, #0]
 8009b14:	5162      	str	r2, [r4, r5]
 8009b16:	604b      	str	r3, [r1, #4]
 8009b18:	4638      	mov	r0, r7
 8009b1a:	f104 060b 	add.w	r6, r4, #11
 8009b1e:	f000 fe19 	bl	800a754 <__malloc_unlock>
 8009b22:	f026 0607 	bic.w	r6, r6, #7
 8009b26:	1d23      	adds	r3, r4, #4
 8009b28:	1af2      	subs	r2, r6, r3
 8009b2a:	d0b6      	beq.n	8009a9a <_malloc_r+0x22>
 8009b2c:	1b9b      	subs	r3, r3, r6
 8009b2e:	50a3      	str	r3, [r4, r2]
 8009b30:	e7b3      	b.n	8009a9a <_malloc_r+0x22>
 8009b32:	6862      	ldr	r2, [r4, #4]
 8009b34:	42a3      	cmp	r3, r4
 8009b36:	bf0c      	ite	eq
 8009b38:	6032      	streq	r2, [r6, #0]
 8009b3a:	605a      	strne	r2, [r3, #4]
 8009b3c:	e7ec      	b.n	8009b18 <_malloc_r+0xa0>
 8009b3e:	4623      	mov	r3, r4
 8009b40:	6864      	ldr	r4, [r4, #4]
 8009b42:	e7b2      	b.n	8009aaa <_malloc_r+0x32>
 8009b44:	4634      	mov	r4, r6
 8009b46:	6876      	ldr	r6, [r6, #4]
 8009b48:	e7b9      	b.n	8009abe <_malloc_r+0x46>
 8009b4a:	230c      	movs	r3, #12
 8009b4c:	603b      	str	r3, [r7, #0]
 8009b4e:	4638      	mov	r0, r7
 8009b50:	f000 fe00 	bl	800a754 <__malloc_unlock>
 8009b54:	e7a1      	b.n	8009a9a <_malloc_r+0x22>
 8009b56:	6025      	str	r5, [r4, #0]
 8009b58:	e7de      	b.n	8009b18 <_malloc_r+0xa0>
 8009b5a:	bf00      	nop
 8009b5c:	200004e8 	.word	0x200004e8

08009b60 <__ssputs_r>:
 8009b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b64:	688e      	ldr	r6, [r1, #8]
 8009b66:	429e      	cmp	r6, r3
 8009b68:	4682      	mov	sl, r0
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	4690      	mov	r8, r2
 8009b6e:	461f      	mov	r7, r3
 8009b70:	d838      	bhi.n	8009be4 <__ssputs_r+0x84>
 8009b72:	898a      	ldrh	r2, [r1, #12]
 8009b74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b78:	d032      	beq.n	8009be0 <__ssputs_r+0x80>
 8009b7a:	6825      	ldr	r5, [r4, #0]
 8009b7c:	6909      	ldr	r1, [r1, #16]
 8009b7e:	eba5 0901 	sub.w	r9, r5, r1
 8009b82:	6965      	ldr	r5, [r4, #20]
 8009b84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	444b      	add	r3, r9
 8009b90:	106d      	asrs	r5, r5, #1
 8009b92:	429d      	cmp	r5, r3
 8009b94:	bf38      	it	cc
 8009b96:	461d      	movcc	r5, r3
 8009b98:	0553      	lsls	r3, r2, #21
 8009b9a:	d531      	bpl.n	8009c00 <__ssputs_r+0xa0>
 8009b9c:	4629      	mov	r1, r5
 8009b9e:	f7ff ff6b 	bl	8009a78 <_malloc_r>
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	b950      	cbnz	r0, 8009bbc <__ssputs_r+0x5c>
 8009ba6:	230c      	movs	r3, #12
 8009ba8:	f8ca 3000 	str.w	r3, [sl]
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bb2:	81a3      	strh	r3, [r4, #12]
 8009bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bbc:	6921      	ldr	r1, [r4, #16]
 8009bbe:	464a      	mov	r2, r9
 8009bc0:	f7ff fa08 	bl	8008fd4 <memcpy>
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bce:	81a3      	strh	r3, [r4, #12]
 8009bd0:	6126      	str	r6, [r4, #16]
 8009bd2:	6165      	str	r5, [r4, #20]
 8009bd4:	444e      	add	r6, r9
 8009bd6:	eba5 0509 	sub.w	r5, r5, r9
 8009bda:	6026      	str	r6, [r4, #0]
 8009bdc:	60a5      	str	r5, [r4, #8]
 8009bde:	463e      	mov	r6, r7
 8009be0:	42be      	cmp	r6, r7
 8009be2:	d900      	bls.n	8009be6 <__ssputs_r+0x86>
 8009be4:	463e      	mov	r6, r7
 8009be6:	6820      	ldr	r0, [r4, #0]
 8009be8:	4632      	mov	r2, r6
 8009bea:	4641      	mov	r1, r8
 8009bec:	f000 fd92 	bl	800a714 <memmove>
 8009bf0:	68a3      	ldr	r3, [r4, #8]
 8009bf2:	1b9b      	subs	r3, r3, r6
 8009bf4:	60a3      	str	r3, [r4, #8]
 8009bf6:	6823      	ldr	r3, [r4, #0]
 8009bf8:	4433      	add	r3, r6
 8009bfa:	6023      	str	r3, [r4, #0]
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	e7db      	b.n	8009bb8 <__ssputs_r+0x58>
 8009c00:	462a      	mov	r2, r5
 8009c02:	f000 fdad 	bl	800a760 <_realloc_r>
 8009c06:	4606      	mov	r6, r0
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d1e1      	bne.n	8009bd0 <__ssputs_r+0x70>
 8009c0c:	6921      	ldr	r1, [r4, #16]
 8009c0e:	4650      	mov	r0, sl
 8009c10:	f7ff fec6 	bl	80099a0 <_free_r>
 8009c14:	e7c7      	b.n	8009ba6 <__ssputs_r+0x46>
	...

08009c18 <_svfiprintf_r>:
 8009c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1c:	4698      	mov	r8, r3
 8009c1e:	898b      	ldrh	r3, [r1, #12]
 8009c20:	061b      	lsls	r3, r3, #24
 8009c22:	b09d      	sub	sp, #116	; 0x74
 8009c24:	4607      	mov	r7, r0
 8009c26:	460d      	mov	r5, r1
 8009c28:	4614      	mov	r4, r2
 8009c2a:	d50e      	bpl.n	8009c4a <_svfiprintf_r+0x32>
 8009c2c:	690b      	ldr	r3, [r1, #16]
 8009c2e:	b963      	cbnz	r3, 8009c4a <_svfiprintf_r+0x32>
 8009c30:	2140      	movs	r1, #64	; 0x40
 8009c32:	f7ff ff21 	bl	8009a78 <_malloc_r>
 8009c36:	6028      	str	r0, [r5, #0]
 8009c38:	6128      	str	r0, [r5, #16]
 8009c3a:	b920      	cbnz	r0, 8009c46 <_svfiprintf_r+0x2e>
 8009c3c:	230c      	movs	r3, #12
 8009c3e:	603b      	str	r3, [r7, #0]
 8009c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c44:	e0d1      	b.n	8009dea <_svfiprintf_r+0x1d2>
 8009c46:	2340      	movs	r3, #64	; 0x40
 8009c48:	616b      	str	r3, [r5, #20]
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c4e:	2320      	movs	r3, #32
 8009c50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c54:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c58:	2330      	movs	r3, #48	; 0x30
 8009c5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e04 <_svfiprintf_r+0x1ec>
 8009c5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c62:	f04f 0901 	mov.w	r9, #1
 8009c66:	4623      	mov	r3, r4
 8009c68:	469a      	mov	sl, r3
 8009c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c6e:	b10a      	cbz	r2, 8009c74 <_svfiprintf_r+0x5c>
 8009c70:	2a25      	cmp	r2, #37	; 0x25
 8009c72:	d1f9      	bne.n	8009c68 <_svfiprintf_r+0x50>
 8009c74:	ebba 0b04 	subs.w	fp, sl, r4
 8009c78:	d00b      	beq.n	8009c92 <_svfiprintf_r+0x7a>
 8009c7a:	465b      	mov	r3, fp
 8009c7c:	4622      	mov	r2, r4
 8009c7e:	4629      	mov	r1, r5
 8009c80:	4638      	mov	r0, r7
 8009c82:	f7ff ff6d 	bl	8009b60 <__ssputs_r>
 8009c86:	3001      	adds	r0, #1
 8009c88:	f000 80aa 	beq.w	8009de0 <_svfiprintf_r+0x1c8>
 8009c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c8e:	445a      	add	r2, fp
 8009c90:	9209      	str	r2, [sp, #36]	; 0x24
 8009c92:	f89a 3000 	ldrb.w	r3, [sl]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f000 80a2 	beq.w	8009de0 <_svfiprintf_r+0x1c8>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ca6:	f10a 0a01 	add.w	sl, sl, #1
 8009caa:	9304      	str	r3, [sp, #16]
 8009cac:	9307      	str	r3, [sp, #28]
 8009cae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cb2:	931a      	str	r3, [sp, #104]	; 0x68
 8009cb4:	4654      	mov	r4, sl
 8009cb6:	2205      	movs	r2, #5
 8009cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cbc:	4851      	ldr	r0, [pc, #324]	; (8009e04 <_svfiprintf_r+0x1ec>)
 8009cbe:	f7f6 fabf 	bl	8000240 <memchr>
 8009cc2:	9a04      	ldr	r2, [sp, #16]
 8009cc4:	b9d8      	cbnz	r0, 8009cfe <_svfiprintf_r+0xe6>
 8009cc6:	06d0      	lsls	r0, r2, #27
 8009cc8:	bf44      	itt	mi
 8009cca:	2320      	movmi	r3, #32
 8009ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cd0:	0711      	lsls	r1, r2, #28
 8009cd2:	bf44      	itt	mi
 8009cd4:	232b      	movmi	r3, #43	; 0x2b
 8009cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cda:	f89a 3000 	ldrb.w	r3, [sl]
 8009cde:	2b2a      	cmp	r3, #42	; 0x2a
 8009ce0:	d015      	beq.n	8009d0e <_svfiprintf_r+0xf6>
 8009ce2:	9a07      	ldr	r2, [sp, #28]
 8009ce4:	4654      	mov	r4, sl
 8009ce6:	2000      	movs	r0, #0
 8009ce8:	f04f 0c0a 	mov.w	ip, #10
 8009cec:	4621      	mov	r1, r4
 8009cee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cf2:	3b30      	subs	r3, #48	; 0x30
 8009cf4:	2b09      	cmp	r3, #9
 8009cf6:	d94e      	bls.n	8009d96 <_svfiprintf_r+0x17e>
 8009cf8:	b1b0      	cbz	r0, 8009d28 <_svfiprintf_r+0x110>
 8009cfa:	9207      	str	r2, [sp, #28]
 8009cfc:	e014      	b.n	8009d28 <_svfiprintf_r+0x110>
 8009cfe:	eba0 0308 	sub.w	r3, r0, r8
 8009d02:	fa09 f303 	lsl.w	r3, r9, r3
 8009d06:	4313      	orrs	r3, r2
 8009d08:	9304      	str	r3, [sp, #16]
 8009d0a:	46a2      	mov	sl, r4
 8009d0c:	e7d2      	b.n	8009cb4 <_svfiprintf_r+0x9c>
 8009d0e:	9b03      	ldr	r3, [sp, #12]
 8009d10:	1d19      	adds	r1, r3, #4
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	9103      	str	r1, [sp, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	bfbb      	ittet	lt
 8009d1a:	425b      	neglt	r3, r3
 8009d1c:	f042 0202 	orrlt.w	r2, r2, #2
 8009d20:	9307      	strge	r3, [sp, #28]
 8009d22:	9307      	strlt	r3, [sp, #28]
 8009d24:	bfb8      	it	lt
 8009d26:	9204      	strlt	r2, [sp, #16]
 8009d28:	7823      	ldrb	r3, [r4, #0]
 8009d2a:	2b2e      	cmp	r3, #46	; 0x2e
 8009d2c:	d10c      	bne.n	8009d48 <_svfiprintf_r+0x130>
 8009d2e:	7863      	ldrb	r3, [r4, #1]
 8009d30:	2b2a      	cmp	r3, #42	; 0x2a
 8009d32:	d135      	bne.n	8009da0 <_svfiprintf_r+0x188>
 8009d34:	9b03      	ldr	r3, [sp, #12]
 8009d36:	1d1a      	adds	r2, r3, #4
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	9203      	str	r2, [sp, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	bfb8      	it	lt
 8009d40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009d44:	3402      	adds	r4, #2
 8009d46:	9305      	str	r3, [sp, #20]
 8009d48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e14 <_svfiprintf_r+0x1fc>
 8009d4c:	7821      	ldrb	r1, [r4, #0]
 8009d4e:	2203      	movs	r2, #3
 8009d50:	4650      	mov	r0, sl
 8009d52:	f7f6 fa75 	bl	8000240 <memchr>
 8009d56:	b140      	cbz	r0, 8009d6a <_svfiprintf_r+0x152>
 8009d58:	2340      	movs	r3, #64	; 0x40
 8009d5a:	eba0 000a 	sub.w	r0, r0, sl
 8009d5e:	fa03 f000 	lsl.w	r0, r3, r0
 8009d62:	9b04      	ldr	r3, [sp, #16]
 8009d64:	4303      	orrs	r3, r0
 8009d66:	3401      	adds	r4, #1
 8009d68:	9304      	str	r3, [sp, #16]
 8009d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d6e:	4826      	ldr	r0, [pc, #152]	; (8009e08 <_svfiprintf_r+0x1f0>)
 8009d70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d74:	2206      	movs	r2, #6
 8009d76:	f7f6 fa63 	bl	8000240 <memchr>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	d038      	beq.n	8009df0 <_svfiprintf_r+0x1d8>
 8009d7e:	4b23      	ldr	r3, [pc, #140]	; (8009e0c <_svfiprintf_r+0x1f4>)
 8009d80:	bb1b      	cbnz	r3, 8009dca <_svfiprintf_r+0x1b2>
 8009d82:	9b03      	ldr	r3, [sp, #12]
 8009d84:	3307      	adds	r3, #7
 8009d86:	f023 0307 	bic.w	r3, r3, #7
 8009d8a:	3308      	adds	r3, #8
 8009d8c:	9303      	str	r3, [sp, #12]
 8009d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d90:	4433      	add	r3, r6
 8009d92:	9309      	str	r3, [sp, #36]	; 0x24
 8009d94:	e767      	b.n	8009c66 <_svfiprintf_r+0x4e>
 8009d96:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d9a:	460c      	mov	r4, r1
 8009d9c:	2001      	movs	r0, #1
 8009d9e:	e7a5      	b.n	8009cec <_svfiprintf_r+0xd4>
 8009da0:	2300      	movs	r3, #0
 8009da2:	3401      	adds	r4, #1
 8009da4:	9305      	str	r3, [sp, #20]
 8009da6:	4619      	mov	r1, r3
 8009da8:	f04f 0c0a 	mov.w	ip, #10
 8009dac:	4620      	mov	r0, r4
 8009dae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009db2:	3a30      	subs	r2, #48	; 0x30
 8009db4:	2a09      	cmp	r2, #9
 8009db6:	d903      	bls.n	8009dc0 <_svfiprintf_r+0x1a8>
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d0c5      	beq.n	8009d48 <_svfiprintf_r+0x130>
 8009dbc:	9105      	str	r1, [sp, #20]
 8009dbe:	e7c3      	b.n	8009d48 <_svfiprintf_r+0x130>
 8009dc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e7f0      	b.n	8009dac <_svfiprintf_r+0x194>
 8009dca:	ab03      	add	r3, sp, #12
 8009dcc:	9300      	str	r3, [sp, #0]
 8009dce:	462a      	mov	r2, r5
 8009dd0:	4b0f      	ldr	r3, [pc, #60]	; (8009e10 <_svfiprintf_r+0x1f8>)
 8009dd2:	a904      	add	r1, sp, #16
 8009dd4:	4638      	mov	r0, r7
 8009dd6:	f7fc fc4f 	bl	8006678 <_printf_float>
 8009dda:	1c42      	adds	r2, r0, #1
 8009ddc:	4606      	mov	r6, r0
 8009dde:	d1d6      	bne.n	8009d8e <_svfiprintf_r+0x176>
 8009de0:	89ab      	ldrh	r3, [r5, #12]
 8009de2:	065b      	lsls	r3, r3, #25
 8009de4:	f53f af2c 	bmi.w	8009c40 <_svfiprintf_r+0x28>
 8009de8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dea:	b01d      	add	sp, #116	; 0x74
 8009dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df0:	ab03      	add	r3, sp, #12
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	462a      	mov	r2, r5
 8009df6:	4b06      	ldr	r3, [pc, #24]	; (8009e10 <_svfiprintf_r+0x1f8>)
 8009df8:	a904      	add	r1, sp, #16
 8009dfa:	4638      	mov	r0, r7
 8009dfc:	f7fc fee0 	bl	8006bc0 <_printf_i>
 8009e00:	e7eb      	b.n	8009dda <_svfiprintf_r+0x1c2>
 8009e02:	bf00      	nop
 8009e04:	0800af9c 	.word	0x0800af9c
 8009e08:	0800afa6 	.word	0x0800afa6
 8009e0c:	08006679 	.word	0x08006679
 8009e10:	08009b61 	.word	0x08009b61
 8009e14:	0800afa2 	.word	0x0800afa2

08009e18 <__sfputc_r>:
 8009e18:	6893      	ldr	r3, [r2, #8]
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	b410      	push	{r4}
 8009e20:	6093      	str	r3, [r2, #8]
 8009e22:	da08      	bge.n	8009e36 <__sfputc_r+0x1e>
 8009e24:	6994      	ldr	r4, [r2, #24]
 8009e26:	42a3      	cmp	r3, r4
 8009e28:	db01      	blt.n	8009e2e <__sfputc_r+0x16>
 8009e2a:	290a      	cmp	r1, #10
 8009e2c:	d103      	bne.n	8009e36 <__sfputc_r+0x1e>
 8009e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e32:	f000 b979 	b.w	800a128 <__swbuf_r>
 8009e36:	6813      	ldr	r3, [r2, #0]
 8009e38:	1c58      	adds	r0, r3, #1
 8009e3a:	6010      	str	r0, [r2, #0]
 8009e3c:	7019      	strb	r1, [r3, #0]
 8009e3e:	4608      	mov	r0, r1
 8009e40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e44:	4770      	bx	lr

08009e46 <__sfputs_r>:
 8009e46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e48:	4606      	mov	r6, r0
 8009e4a:	460f      	mov	r7, r1
 8009e4c:	4614      	mov	r4, r2
 8009e4e:	18d5      	adds	r5, r2, r3
 8009e50:	42ac      	cmp	r4, r5
 8009e52:	d101      	bne.n	8009e58 <__sfputs_r+0x12>
 8009e54:	2000      	movs	r0, #0
 8009e56:	e007      	b.n	8009e68 <__sfputs_r+0x22>
 8009e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e5c:	463a      	mov	r2, r7
 8009e5e:	4630      	mov	r0, r6
 8009e60:	f7ff ffda 	bl	8009e18 <__sfputc_r>
 8009e64:	1c43      	adds	r3, r0, #1
 8009e66:	d1f3      	bne.n	8009e50 <__sfputs_r+0xa>
 8009e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e6c <_vfiprintf_r>:
 8009e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e70:	460d      	mov	r5, r1
 8009e72:	b09d      	sub	sp, #116	; 0x74
 8009e74:	4614      	mov	r4, r2
 8009e76:	4698      	mov	r8, r3
 8009e78:	4606      	mov	r6, r0
 8009e7a:	b118      	cbz	r0, 8009e84 <_vfiprintf_r+0x18>
 8009e7c:	6983      	ldr	r3, [r0, #24]
 8009e7e:	b90b      	cbnz	r3, 8009e84 <_vfiprintf_r+0x18>
 8009e80:	f000 fb42 	bl	800a508 <__sinit>
 8009e84:	4b89      	ldr	r3, [pc, #548]	; (800a0ac <_vfiprintf_r+0x240>)
 8009e86:	429d      	cmp	r5, r3
 8009e88:	d11b      	bne.n	8009ec2 <_vfiprintf_r+0x56>
 8009e8a:	6875      	ldr	r5, [r6, #4]
 8009e8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e8e:	07d9      	lsls	r1, r3, #31
 8009e90:	d405      	bmi.n	8009e9e <_vfiprintf_r+0x32>
 8009e92:	89ab      	ldrh	r3, [r5, #12]
 8009e94:	059a      	lsls	r2, r3, #22
 8009e96:	d402      	bmi.n	8009e9e <_vfiprintf_r+0x32>
 8009e98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e9a:	f000 fbd3 	bl	800a644 <__retarget_lock_acquire_recursive>
 8009e9e:	89ab      	ldrh	r3, [r5, #12]
 8009ea0:	071b      	lsls	r3, r3, #28
 8009ea2:	d501      	bpl.n	8009ea8 <_vfiprintf_r+0x3c>
 8009ea4:	692b      	ldr	r3, [r5, #16]
 8009ea6:	b9eb      	cbnz	r3, 8009ee4 <_vfiprintf_r+0x78>
 8009ea8:	4629      	mov	r1, r5
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f000 f99c 	bl	800a1e8 <__swsetup_r>
 8009eb0:	b1c0      	cbz	r0, 8009ee4 <_vfiprintf_r+0x78>
 8009eb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009eb4:	07dc      	lsls	r4, r3, #31
 8009eb6:	d50e      	bpl.n	8009ed6 <_vfiprintf_r+0x6a>
 8009eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ebc:	b01d      	add	sp, #116	; 0x74
 8009ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec2:	4b7b      	ldr	r3, [pc, #492]	; (800a0b0 <_vfiprintf_r+0x244>)
 8009ec4:	429d      	cmp	r5, r3
 8009ec6:	d101      	bne.n	8009ecc <_vfiprintf_r+0x60>
 8009ec8:	68b5      	ldr	r5, [r6, #8]
 8009eca:	e7df      	b.n	8009e8c <_vfiprintf_r+0x20>
 8009ecc:	4b79      	ldr	r3, [pc, #484]	; (800a0b4 <_vfiprintf_r+0x248>)
 8009ece:	429d      	cmp	r5, r3
 8009ed0:	bf08      	it	eq
 8009ed2:	68f5      	ldreq	r5, [r6, #12]
 8009ed4:	e7da      	b.n	8009e8c <_vfiprintf_r+0x20>
 8009ed6:	89ab      	ldrh	r3, [r5, #12]
 8009ed8:	0598      	lsls	r0, r3, #22
 8009eda:	d4ed      	bmi.n	8009eb8 <_vfiprintf_r+0x4c>
 8009edc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ede:	f000 fbb2 	bl	800a646 <__retarget_lock_release_recursive>
 8009ee2:	e7e9      	b.n	8009eb8 <_vfiprintf_r+0x4c>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee8:	2320      	movs	r3, #32
 8009eea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009eee:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ef2:	2330      	movs	r3, #48	; 0x30
 8009ef4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a0b8 <_vfiprintf_r+0x24c>
 8009ef8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009efc:	f04f 0901 	mov.w	r9, #1
 8009f00:	4623      	mov	r3, r4
 8009f02:	469a      	mov	sl, r3
 8009f04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f08:	b10a      	cbz	r2, 8009f0e <_vfiprintf_r+0xa2>
 8009f0a:	2a25      	cmp	r2, #37	; 0x25
 8009f0c:	d1f9      	bne.n	8009f02 <_vfiprintf_r+0x96>
 8009f0e:	ebba 0b04 	subs.w	fp, sl, r4
 8009f12:	d00b      	beq.n	8009f2c <_vfiprintf_r+0xc0>
 8009f14:	465b      	mov	r3, fp
 8009f16:	4622      	mov	r2, r4
 8009f18:	4629      	mov	r1, r5
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	f7ff ff93 	bl	8009e46 <__sfputs_r>
 8009f20:	3001      	adds	r0, #1
 8009f22:	f000 80aa 	beq.w	800a07a <_vfiprintf_r+0x20e>
 8009f26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f28:	445a      	add	r2, fp
 8009f2a:	9209      	str	r2, [sp, #36]	; 0x24
 8009f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	f000 80a2 	beq.w	800a07a <_vfiprintf_r+0x20e>
 8009f36:	2300      	movs	r3, #0
 8009f38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f40:	f10a 0a01 	add.w	sl, sl, #1
 8009f44:	9304      	str	r3, [sp, #16]
 8009f46:	9307      	str	r3, [sp, #28]
 8009f48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f4c:	931a      	str	r3, [sp, #104]	; 0x68
 8009f4e:	4654      	mov	r4, sl
 8009f50:	2205      	movs	r2, #5
 8009f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f56:	4858      	ldr	r0, [pc, #352]	; (800a0b8 <_vfiprintf_r+0x24c>)
 8009f58:	f7f6 f972 	bl	8000240 <memchr>
 8009f5c:	9a04      	ldr	r2, [sp, #16]
 8009f5e:	b9d8      	cbnz	r0, 8009f98 <_vfiprintf_r+0x12c>
 8009f60:	06d1      	lsls	r1, r2, #27
 8009f62:	bf44      	itt	mi
 8009f64:	2320      	movmi	r3, #32
 8009f66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f6a:	0713      	lsls	r3, r2, #28
 8009f6c:	bf44      	itt	mi
 8009f6e:	232b      	movmi	r3, #43	; 0x2b
 8009f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f74:	f89a 3000 	ldrb.w	r3, [sl]
 8009f78:	2b2a      	cmp	r3, #42	; 0x2a
 8009f7a:	d015      	beq.n	8009fa8 <_vfiprintf_r+0x13c>
 8009f7c:	9a07      	ldr	r2, [sp, #28]
 8009f7e:	4654      	mov	r4, sl
 8009f80:	2000      	movs	r0, #0
 8009f82:	f04f 0c0a 	mov.w	ip, #10
 8009f86:	4621      	mov	r1, r4
 8009f88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f8c:	3b30      	subs	r3, #48	; 0x30
 8009f8e:	2b09      	cmp	r3, #9
 8009f90:	d94e      	bls.n	800a030 <_vfiprintf_r+0x1c4>
 8009f92:	b1b0      	cbz	r0, 8009fc2 <_vfiprintf_r+0x156>
 8009f94:	9207      	str	r2, [sp, #28]
 8009f96:	e014      	b.n	8009fc2 <_vfiprintf_r+0x156>
 8009f98:	eba0 0308 	sub.w	r3, r0, r8
 8009f9c:	fa09 f303 	lsl.w	r3, r9, r3
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	9304      	str	r3, [sp, #16]
 8009fa4:	46a2      	mov	sl, r4
 8009fa6:	e7d2      	b.n	8009f4e <_vfiprintf_r+0xe2>
 8009fa8:	9b03      	ldr	r3, [sp, #12]
 8009faa:	1d19      	adds	r1, r3, #4
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	9103      	str	r1, [sp, #12]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	bfbb      	ittet	lt
 8009fb4:	425b      	neglt	r3, r3
 8009fb6:	f042 0202 	orrlt.w	r2, r2, #2
 8009fba:	9307      	strge	r3, [sp, #28]
 8009fbc:	9307      	strlt	r3, [sp, #28]
 8009fbe:	bfb8      	it	lt
 8009fc0:	9204      	strlt	r2, [sp, #16]
 8009fc2:	7823      	ldrb	r3, [r4, #0]
 8009fc4:	2b2e      	cmp	r3, #46	; 0x2e
 8009fc6:	d10c      	bne.n	8009fe2 <_vfiprintf_r+0x176>
 8009fc8:	7863      	ldrb	r3, [r4, #1]
 8009fca:	2b2a      	cmp	r3, #42	; 0x2a
 8009fcc:	d135      	bne.n	800a03a <_vfiprintf_r+0x1ce>
 8009fce:	9b03      	ldr	r3, [sp, #12]
 8009fd0:	1d1a      	adds	r2, r3, #4
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	9203      	str	r2, [sp, #12]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	bfb8      	it	lt
 8009fda:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009fde:	3402      	adds	r4, #2
 8009fe0:	9305      	str	r3, [sp, #20]
 8009fe2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a0c8 <_vfiprintf_r+0x25c>
 8009fe6:	7821      	ldrb	r1, [r4, #0]
 8009fe8:	2203      	movs	r2, #3
 8009fea:	4650      	mov	r0, sl
 8009fec:	f7f6 f928 	bl	8000240 <memchr>
 8009ff0:	b140      	cbz	r0, 800a004 <_vfiprintf_r+0x198>
 8009ff2:	2340      	movs	r3, #64	; 0x40
 8009ff4:	eba0 000a 	sub.w	r0, r0, sl
 8009ff8:	fa03 f000 	lsl.w	r0, r3, r0
 8009ffc:	9b04      	ldr	r3, [sp, #16]
 8009ffe:	4303      	orrs	r3, r0
 800a000:	3401      	adds	r4, #1
 800a002:	9304      	str	r3, [sp, #16]
 800a004:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a008:	482c      	ldr	r0, [pc, #176]	; (800a0bc <_vfiprintf_r+0x250>)
 800a00a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a00e:	2206      	movs	r2, #6
 800a010:	f7f6 f916 	bl	8000240 <memchr>
 800a014:	2800      	cmp	r0, #0
 800a016:	d03f      	beq.n	800a098 <_vfiprintf_r+0x22c>
 800a018:	4b29      	ldr	r3, [pc, #164]	; (800a0c0 <_vfiprintf_r+0x254>)
 800a01a:	bb1b      	cbnz	r3, 800a064 <_vfiprintf_r+0x1f8>
 800a01c:	9b03      	ldr	r3, [sp, #12]
 800a01e:	3307      	adds	r3, #7
 800a020:	f023 0307 	bic.w	r3, r3, #7
 800a024:	3308      	adds	r3, #8
 800a026:	9303      	str	r3, [sp, #12]
 800a028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a02a:	443b      	add	r3, r7
 800a02c:	9309      	str	r3, [sp, #36]	; 0x24
 800a02e:	e767      	b.n	8009f00 <_vfiprintf_r+0x94>
 800a030:	fb0c 3202 	mla	r2, ip, r2, r3
 800a034:	460c      	mov	r4, r1
 800a036:	2001      	movs	r0, #1
 800a038:	e7a5      	b.n	8009f86 <_vfiprintf_r+0x11a>
 800a03a:	2300      	movs	r3, #0
 800a03c:	3401      	adds	r4, #1
 800a03e:	9305      	str	r3, [sp, #20]
 800a040:	4619      	mov	r1, r3
 800a042:	f04f 0c0a 	mov.w	ip, #10
 800a046:	4620      	mov	r0, r4
 800a048:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a04c:	3a30      	subs	r2, #48	; 0x30
 800a04e:	2a09      	cmp	r2, #9
 800a050:	d903      	bls.n	800a05a <_vfiprintf_r+0x1ee>
 800a052:	2b00      	cmp	r3, #0
 800a054:	d0c5      	beq.n	8009fe2 <_vfiprintf_r+0x176>
 800a056:	9105      	str	r1, [sp, #20]
 800a058:	e7c3      	b.n	8009fe2 <_vfiprintf_r+0x176>
 800a05a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a05e:	4604      	mov	r4, r0
 800a060:	2301      	movs	r3, #1
 800a062:	e7f0      	b.n	800a046 <_vfiprintf_r+0x1da>
 800a064:	ab03      	add	r3, sp, #12
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	462a      	mov	r2, r5
 800a06a:	4b16      	ldr	r3, [pc, #88]	; (800a0c4 <_vfiprintf_r+0x258>)
 800a06c:	a904      	add	r1, sp, #16
 800a06e:	4630      	mov	r0, r6
 800a070:	f7fc fb02 	bl	8006678 <_printf_float>
 800a074:	4607      	mov	r7, r0
 800a076:	1c78      	adds	r0, r7, #1
 800a078:	d1d6      	bne.n	800a028 <_vfiprintf_r+0x1bc>
 800a07a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a07c:	07d9      	lsls	r1, r3, #31
 800a07e:	d405      	bmi.n	800a08c <_vfiprintf_r+0x220>
 800a080:	89ab      	ldrh	r3, [r5, #12]
 800a082:	059a      	lsls	r2, r3, #22
 800a084:	d402      	bmi.n	800a08c <_vfiprintf_r+0x220>
 800a086:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a088:	f000 fadd 	bl	800a646 <__retarget_lock_release_recursive>
 800a08c:	89ab      	ldrh	r3, [r5, #12]
 800a08e:	065b      	lsls	r3, r3, #25
 800a090:	f53f af12 	bmi.w	8009eb8 <_vfiprintf_r+0x4c>
 800a094:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a096:	e711      	b.n	8009ebc <_vfiprintf_r+0x50>
 800a098:	ab03      	add	r3, sp, #12
 800a09a:	9300      	str	r3, [sp, #0]
 800a09c:	462a      	mov	r2, r5
 800a09e:	4b09      	ldr	r3, [pc, #36]	; (800a0c4 <_vfiprintf_r+0x258>)
 800a0a0:	a904      	add	r1, sp, #16
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	f7fc fd8c 	bl	8006bc0 <_printf_i>
 800a0a8:	e7e4      	b.n	800a074 <_vfiprintf_r+0x208>
 800a0aa:	bf00      	nop
 800a0ac:	0800b0d0 	.word	0x0800b0d0
 800a0b0:	0800b0f0 	.word	0x0800b0f0
 800a0b4:	0800b0b0 	.word	0x0800b0b0
 800a0b8:	0800af9c 	.word	0x0800af9c
 800a0bc:	0800afa6 	.word	0x0800afa6
 800a0c0:	08006679 	.word	0x08006679
 800a0c4:	08009e47 	.word	0x08009e47
 800a0c8:	0800afa2 	.word	0x0800afa2
 800a0cc:	00000000 	.word	0x00000000

0800a0d0 <nan>:
 800a0d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a0d8 <nan+0x8>
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	00000000 	.word	0x00000000
 800a0dc:	7ff80000 	.word	0x7ff80000

0800a0e0 <_sbrk_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4d06      	ldr	r5, [pc, #24]	; (800a0fc <_sbrk_r+0x1c>)
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	602b      	str	r3, [r5, #0]
 800a0ec:	f7f9 f806 	bl	80030fc <_sbrk>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d102      	bne.n	800a0fa <_sbrk_r+0x1a>
 800a0f4:	682b      	ldr	r3, [r5, #0]
 800a0f6:	b103      	cbz	r3, 800a0fa <_sbrk_r+0x1a>
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	200004f4 	.word	0x200004f4

0800a100 <strncmp>:
 800a100:	b510      	push	{r4, lr}
 800a102:	b17a      	cbz	r2, 800a124 <strncmp+0x24>
 800a104:	4603      	mov	r3, r0
 800a106:	3901      	subs	r1, #1
 800a108:	1884      	adds	r4, r0, r2
 800a10a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a10e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a112:	4290      	cmp	r0, r2
 800a114:	d101      	bne.n	800a11a <strncmp+0x1a>
 800a116:	42a3      	cmp	r3, r4
 800a118:	d101      	bne.n	800a11e <strncmp+0x1e>
 800a11a:	1a80      	subs	r0, r0, r2
 800a11c:	bd10      	pop	{r4, pc}
 800a11e:	2800      	cmp	r0, #0
 800a120:	d1f3      	bne.n	800a10a <strncmp+0xa>
 800a122:	e7fa      	b.n	800a11a <strncmp+0x1a>
 800a124:	4610      	mov	r0, r2
 800a126:	e7f9      	b.n	800a11c <strncmp+0x1c>

0800a128 <__swbuf_r>:
 800a128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12a:	460e      	mov	r6, r1
 800a12c:	4614      	mov	r4, r2
 800a12e:	4605      	mov	r5, r0
 800a130:	b118      	cbz	r0, 800a13a <__swbuf_r+0x12>
 800a132:	6983      	ldr	r3, [r0, #24]
 800a134:	b90b      	cbnz	r3, 800a13a <__swbuf_r+0x12>
 800a136:	f000 f9e7 	bl	800a508 <__sinit>
 800a13a:	4b21      	ldr	r3, [pc, #132]	; (800a1c0 <__swbuf_r+0x98>)
 800a13c:	429c      	cmp	r4, r3
 800a13e:	d12b      	bne.n	800a198 <__swbuf_r+0x70>
 800a140:	686c      	ldr	r4, [r5, #4]
 800a142:	69a3      	ldr	r3, [r4, #24]
 800a144:	60a3      	str	r3, [r4, #8]
 800a146:	89a3      	ldrh	r3, [r4, #12]
 800a148:	071a      	lsls	r2, r3, #28
 800a14a:	d52f      	bpl.n	800a1ac <__swbuf_r+0x84>
 800a14c:	6923      	ldr	r3, [r4, #16]
 800a14e:	b36b      	cbz	r3, 800a1ac <__swbuf_r+0x84>
 800a150:	6923      	ldr	r3, [r4, #16]
 800a152:	6820      	ldr	r0, [r4, #0]
 800a154:	1ac0      	subs	r0, r0, r3
 800a156:	6963      	ldr	r3, [r4, #20]
 800a158:	b2f6      	uxtb	r6, r6
 800a15a:	4283      	cmp	r3, r0
 800a15c:	4637      	mov	r7, r6
 800a15e:	dc04      	bgt.n	800a16a <__swbuf_r+0x42>
 800a160:	4621      	mov	r1, r4
 800a162:	4628      	mov	r0, r5
 800a164:	f000 f93c 	bl	800a3e0 <_fflush_r>
 800a168:	bb30      	cbnz	r0, 800a1b8 <__swbuf_r+0x90>
 800a16a:	68a3      	ldr	r3, [r4, #8]
 800a16c:	3b01      	subs	r3, #1
 800a16e:	60a3      	str	r3, [r4, #8]
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	1c5a      	adds	r2, r3, #1
 800a174:	6022      	str	r2, [r4, #0]
 800a176:	701e      	strb	r6, [r3, #0]
 800a178:	6963      	ldr	r3, [r4, #20]
 800a17a:	3001      	adds	r0, #1
 800a17c:	4283      	cmp	r3, r0
 800a17e:	d004      	beq.n	800a18a <__swbuf_r+0x62>
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	07db      	lsls	r3, r3, #31
 800a184:	d506      	bpl.n	800a194 <__swbuf_r+0x6c>
 800a186:	2e0a      	cmp	r6, #10
 800a188:	d104      	bne.n	800a194 <__swbuf_r+0x6c>
 800a18a:	4621      	mov	r1, r4
 800a18c:	4628      	mov	r0, r5
 800a18e:	f000 f927 	bl	800a3e0 <_fflush_r>
 800a192:	b988      	cbnz	r0, 800a1b8 <__swbuf_r+0x90>
 800a194:	4638      	mov	r0, r7
 800a196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a198:	4b0a      	ldr	r3, [pc, #40]	; (800a1c4 <__swbuf_r+0x9c>)
 800a19a:	429c      	cmp	r4, r3
 800a19c:	d101      	bne.n	800a1a2 <__swbuf_r+0x7a>
 800a19e:	68ac      	ldr	r4, [r5, #8]
 800a1a0:	e7cf      	b.n	800a142 <__swbuf_r+0x1a>
 800a1a2:	4b09      	ldr	r3, [pc, #36]	; (800a1c8 <__swbuf_r+0xa0>)
 800a1a4:	429c      	cmp	r4, r3
 800a1a6:	bf08      	it	eq
 800a1a8:	68ec      	ldreq	r4, [r5, #12]
 800a1aa:	e7ca      	b.n	800a142 <__swbuf_r+0x1a>
 800a1ac:	4621      	mov	r1, r4
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	f000 f81a 	bl	800a1e8 <__swsetup_r>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	d0cb      	beq.n	800a150 <__swbuf_r+0x28>
 800a1b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a1bc:	e7ea      	b.n	800a194 <__swbuf_r+0x6c>
 800a1be:	bf00      	nop
 800a1c0:	0800b0d0 	.word	0x0800b0d0
 800a1c4:	0800b0f0 	.word	0x0800b0f0
 800a1c8:	0800b0b0 	.word	0x0800b0b0

0800a1cc <__ascii_wctomb>:
 800a1cc:	b149      	cbz	r1, 800a1e2 <__ascii_wctomb+0x16>
 800a1ce:	2aff      	cmp	r2, #255	; 0xff
 800a1d0:	bf85      	ittet	hi
 800a1d2:	238a      	movhi	r3, #138	; 0x8a
 800a1d4:	6003      	strhi	r3, [r0, #0]
 800a1d6:	700a      	strbls	r2, [r1, #0]
 800a1d8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a1dc:	bf98      	it	ls
 800a1de:	2001      	movls	r0, #1
 800a1e0:	4770      	bx	lr
 800a1e2:	4608      	mov	r0, r1
 800a1e4:	4770      	bx	lr
	...

0800a1e8 <__swsetup_r>:
 800a1e8:	4b32      	ldr	r3, [pc, #200]	; (800a2b4 <__swsetup_r+0xcc>)
 800a1ea:	b570      	push	{r4, r5, r6, lr}
 800a1ec:	681d      	ldr	r5, [r3, #0]
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	460c      	mov	r4, r1
 800a1f2:	b125      	cbz	r5, 800a1fe <__swsetup_r+0x16>
 800a1f4:	69ab      	ldr	r3, [r5, #24]
 800a1f6:	b913      	cbnz	r3, 800a1fe <__swsetup_r+0x16>
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	f000 f985 	bl	800a508 <__sinit>
 800a1fe:	4b2e      	ldr	r3, [pc, #184]	; (800a2b8 <__swsetup_r+0xd0>)
 800a200:	429c      	cmp	r4, r3
 800a202:	d10f      	bne.n	800a224 <__swsetup_r+0x3c>
 800a204:	686c      	ldr	r4, [r5, #4]
 800a206:	89a3      	ldrh	r3, [r4, #12]
 800a208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a20c:	0719      	lsls	r1, r3, #28
 800a20e:	d42c      	bmi.n	800a26a <__swsetup_r+0x82>
 800a210:	06dd      	lsls	r5, r3, #27
 800a212:	d411      	bmi.n	800a238 <__swsetup_r+0x50>
 800a214:	2309      	movs	r3, #9
 800a216:	6033      	str	r3, [r6, #0]
 800a218:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a21c:	81a3      	strh	r3, [r4, #12]
 800a21e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a222:	e03e      	b.n	800a2a2 <__swsetup_r+0xba>
 800a224:	4b25      	ldr	r3, [pc, #148]	; (800a2bc <__swsetup_r+0xd4>)
 800a226:	429c      	cmp	r4, r3
 800a228:	d101      	bne.n	800a22e <__swsetup_r+0x46>
 800a22a:	68ac      	ldr	r4, [r5, #8]
 800a22c:	e7eb      	b.n	800a206 <__swsetup_r+0x1e>
 800a22e:	4b24      	ldr	r3, [pc, #144]	; (800a2c0 <__swsetup_r+0xd8>)
 800a230:	429c      	cmp	r4, r3
 800a232:	bf08      	it	eq
 800a234:	68ec      	ldreq	r4, [r5, #12]
 800a236:	e7e6      	b.n	800a206 <__swsetup_r+0x1e>
 800a238:	0758      	lsls	r0, r3, #29
 800a23a:	d512      	bpl.n	800a262 <__swsetup_r+0x7a>
 800a23c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a23e:	b141      	cbz	r1, 800a252 <__swsetup_r+0x6a>
 800a240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a244:	4299      	cmp	r1, r3
 800a246:	d002      	beq.n	800a24e <__swsetup_r+0x66>
 800a248:	4630      	mov	r0, r6
 800a24a:	f7ff fba9 	bl	80099a0 <_free_r>
 800a24e:	2300      	movs	r3, #0
 800a250:	6363      	str	r3, [r4, #52]	; 0x34
 800a252:	89a3      	ldrh	r3, [r4, #12]
 800a254:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a258:	81a3      	strh	r3, [r4, #12]
 800a25a:	2300      	movs	r3, #0
 800a25c:	6063      	str	r3, [r4, #4]
 800a25e:	6923      	ldr	r3, [r4, #16]
 800a260:	6023      	str	r3, [r4, #0]
 800a262:	89a3      	ldrh	r3, [r4, #12]
 800a264:	f043 0308 	orr.w	r3, r3, #8
 800a268:	81a3      	strh	r3, [r4, #12]
 800a26a:	6923      	ldr	r3, [r4, #16]
 800a26c:	b94b      	cbnz	r3, 800a282 <__swsetup_r+0x9a>
 800a26e:	89a3      	ldrh	r3, [r4, #12]
 800a270:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a278:	d003      	beq.n	800a282 <__swsetup_r+0x9a>
 800a27a:	4621      	mov	r1, r4
 800a27c:	4630      	mov	r0, r6
 800a27e:	f000 fa09 	bl	800a694 <__smakebuf_r>
 800a282:	89a0      	ldrh	r0, [r4, #12]
 800a284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a288:	f010 0301 	ands.w	r3, r0, #1
 800a28c:	d00a      	beq.n	800a2a4 <__swsetup_r+0xbc>
 800a28e:	2300      	movs	r3, #0
 800a290:	60a3      	str	r3, [r4, #8]
 800a292:	6963      	ldr	r3, [r4, #20]
 800a294:	425b      	negs	r3, r3
 800a296:	61a3      	str	r3, [r4, #24]
 800a298:	6923      	ldr	r3, [r4, #16]
 800a29a:	b943      	cbnz	r3, 800a2ae <__swsetup_r+0xc6>
 800a29c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2a0:	d1ba      	bne.n	800a218 <__swsetup_r+0x30>
 800a2a2:	bd70      	pop	{r4, r5, r6, pc}
 800a2a4:	0781      	lsls	r1, r0, #30
 800a2a6:	bf58      	it	pl
 800a2a8:	6963      	ldrpl	r3, [r4, #20]
 800a2aa:	60a3      	str	r3, [r4, #8]
 800a2ac:	e7f4      	b.n	800a298 <__swsetup_r+0xb0>
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	e7f7      	b.n	800a2a2 <__swsetup_r+0xba>
 800a2b2:	bf00      	nop
 800a2b4:	20000060 	.word	0x20000060
 800a2b8:	0800b0d0 	.word	0x0800b0d0
 800a2bc:	0800b0f0 	.word	0x0800b0f0
 800a2c0:	0800b0b0 	.word	0x0800b0b0

0800a2c4 <abort>:
 800a2c4:	b508      	push	{r3, lr}
 800a2c6:	2006      	movs	r0, #6
 800a2c8:	f000 faa2 	bl	800a810 <raise>
 800a2cc:	2001      	movs	r0, #1
 800a2ce:	f7f8 fe9d 	bl	800300c <_exit>
	...

0800a2d4 <__sflush_r>:
 800a2d4:	898a      	ldrh	r2, [r1, #12]
 800a2d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2da:	4605      	mov	r5, r0
 800a2dc:	0710      	lsls	r0, r2, #28
 800a2de:	460c      	mov	r4, r1
 800a2e0:	d458      	bmi.n	800a394 <__sflush_r+0xc0>
 800a2e2:	684b      	ldr	r3, [r1, #4]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	dc05      	bgt.n	800a2f4 <__sflush_r+0x20>
 800a2e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	dc02      	bgt.n	800a2f4 <__sflush_r+0x20>
 800a2ee:	2000      	movs	r0, #0
 800a2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2f6:	2e00      	cmp	r6, #0
 800a2f8:	d0f9      	beq.n	800a2ee <__sflush_r+0x1a>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a300:	682f      	ldr	r7, [r5, #0]
 800a302:	602b      	str	r3, [r5, #0]
 800a304:	d032      	beq.n	800a36c <__sflush_r+0x98>
 800a306:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a308:	89a3      	ldrh	r3, [r4, #12]
 800a30a:	075a      	lsls	r2, r3, #29
 800a30c:	d505      	bpl.n	800a31a <__sflush_r+0x46>
 800a30e:	6863      	ldr	r3, [r4, #4]
 800a310:	1ac0      	subs	r0, r0, r3
 800a312:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a314:	b10b      	cbz	r3, 800a31a <__sflush_r+0x46>
 800a316:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a318:	1ac0      	subs	r0, r0, r3
 800a31a:	2300      	movs	r3, #0
 800a31c:	4602      	mov	r2, r0
 800a31e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a320:	6a21      	ldr	r1, [r4, #32]
 800a322:	4628      	mov	r0, r5
 800a324:	47b0      	blx	r6
 800a326:	1c43      	adds	r3, r0, #1
 800a328:	89a3      	ldrh	r3, [r4, #12]
 800a32a:	d106      	bne.n	800a33a <__sflush_r+0x66>
 800a32c:	6829      	ldr	r1, [r5, #0]
 800a32e:	291d      	cmp	r1, #29
 800a330:	d82c      	bhi.n	800a38c <__sflush_r+0xb8>
 800a332:	4a2a      	ldr	r2, [pc, #168]	; (800a3dc <__sflush_r+0x108>)
 800a334:	40ca      	lsrs	r2, r1
 800a336:	07d6      	lsls	r6, r2, #31
 800a338:	d528      	bpl.n	800a38c <__sflush_r+0xb8>
 800a33a:	2200      	movs	r2, #0
 800a33c:	6062      	str	r2, [r4, #4]
 800a33e:	04d9      	lsls	r1, r3, #19
 800a340:	6922      	ldr	r2, [r4, #16]
 800a342:	6022      	str	r2, [r4, #0]
 800a344:	d504      	bpl.n	800a350 <__sflush_r+0x7c>
 800a346:	1c42      	adds	r2, r0, #1
 800a348:	d101      	bne.n	800a34e <__sflush_r+0x7a>
 800a34a:	682b      	ldr	r3, [r5, #0]
 800a34c:	b903      	cbnz	r3, 800a350 <__sflush_r+0x7c>
 800a34e:	6560      	str	r0, [r4, #84]	; 0x54
 800a350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a352:	602f      	str	r7, [r5, #0]
 800a354:	2900      	cmp	r1, #0
 800a356:	d0ca      	beq.n	800a2ee <__sflush_r+0x1a>
 800a358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a35c:	4299      	cmp	r1, r3
 800a35e:	d002      	beq.n	800a366 <__sflush_r+0x92>
 800a360:	4628      	mov	r0, r5
 800a362:	f7ff fb1d 	bl	80099a0 <_free_r>
 800a366:	2000      	movs	r0, #0
 800a368:	6360      	str	r0, [r4, #52]	; 0x34
 800a36a:	e7c1      	b.n	800a2f0 <__sflush_r+0x1c>
 800a36c:	6a21      	ldr	r1, [r4, #32]
 800a36e:	2301      	movs	r3, #1
 800a370:	4628      	mov	r0, r5
 800a372:	47b0      	blx	r6
 800a374:	1c41      	adds	r1, r0, #1
 800a376:	d1c7      	bne.n	800a308 <__sflush_r+0x34>
 800a378:	682b      	ldr	r3, [r5, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d0c4      	beq.n	800a308 <__sflush_r+0x34>
 800a37e:	2b1d      	cmp	r3, #29
 800a380:	d001      	beq.n	800a386 <__sflush_r+0xb2>
 800a382:	2b16      	cmp	r3, #22
 800a384:	d101      	bne.n	800a38a <__sflush_r+0xb6>
 800a386:	602f      	str	r7, [r5, #0]
 800a388:	e7b1      	b.n	800a2ee <__sflush_r+0x1a>
 800a38a:	89a3      	ldrh	r3, [r4, #12]
 800a38c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a390:	81a3      	strh	r3, [r4, #12]
 800a392:	e7ad      	b.n	800a2f0 <__sflush_r+0x1c>
 800a394:	690f      	ldr	r7, [r1, #16]
 800a396:	2f00      	cmp	r7, #0
 800a398:	d0a9      	beq.n	800a2ee <__sflush_r+0x1a>
 800a39a:	0793      	lsls	r3, r2, #30
 800a39c:	680e      	ldr	r6, [r1, #0]
 800a39e:	bf08      	it	eq
 800a3a0:	694b      	ldreq	r3, [r1, #20]
 800a3a2:	600f      	str	r7, [r1, #0]
 800a3a4:	bf18      	it	ne
 800a3a6:	2300      	movne	r3, #0
 800a3a8:	eba6 0807 	sub.w	r8, r6, r7
 800a3ac:	608b      	str	r3, [r1, #8]
 800a3ae:	f1b8 0f00 	cmp.w	r8, #0
 800a3b2:	dd9c      	ble.n	800a2ee <__sflush_r+0x1a>
 800a3b4:	6a21      	ldr	r1, [r4, #32]
 800a3b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a3b8:	4643      	mov	r3, r8
 800a3ba:	463a      	mov	r2, r7
 800a3bc:	4628      	mov	r0, r5
 800a3be:	47b0      	blx	r6
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	dc06      	bgt.n	800a3d2 <__sflush_r+0xfe>
 800a3c4:	89a3      	ldrh	r3, [r4, #12]
 800a3c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ca:	81a3      	strh	r3, [r4, #12]
 800a3cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3d0:	e78e      	b.n	800a2f0 <__sflush_r+0x1c>
 800a3d2:	4407      	add	r7, r0
 800a3d4:	eba8 0800 	sub.w	r8, r8, r0
 800a3d8:	e7e9      	b.n	800a3ae <__sflush_r+0xda>
 800a3da:	bf00      	nop
 800a3dc:	20400001 	.word	0x20400001

0800a3e0 <_fflush_r>:
 800a3e0:	b538      	push	{r3, r4, r5, lr}
 800a3e2:	690b      	ldr	r3, [r1, #16]
 800a3e4:	4605      	mov	r5, r0
 800a3e6:	460c      	mov	r4, r1
 800a3e8:	b913      	cbnz	r3, 800a3f0 <_fflush_r+0x10>
 800a3ea:	2500      	movs	r5, #0
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	bd38      	pop	{r3, r4, r5, pc}
 800a3f0:	b118      	cbz	r0, 800a3fa <_fflush_r+0x1a>
 800a3f2:	6983      	ldr	r3, [r0, #24]
 800a3f4:	b90b      	cbnz	r3, 800a3fa <_fflush_r+0x1a>
 800a3f6:	f000 f887 	bl	800a508 <__sinit>
 800a3fa:	4b14      	ldr	r3, [pc, #80]	; (800a44c <_fflush_r+0x6c>)
 800a3fc:	429c      	cmp	r4, r3
 800a3fe:	d11b      	bne.n	800a438 <_fflush_r+0x58>
 800a400:	686c      	ldr	r4, [r5, #4]
 800a402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d0ef      	beq.n	800a3ea <_fflush_r+0xa>
 800a40a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a40c:	07d0      	lsls	r0, r2, #31
 800a40e:	d404      	bmi.n	800a41a <_fflush_r+0x3a>
 800a410:	0599      	lsls	r1, r3, #22
 800a412:	d402      	bmi.n	800a41a <_fflush_r+0x3a>
 800a414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a416:	f000 f915 	bl	800a644 <__retarget_lock_acquire_recursive>
 800a41a:	4628      	mov	r0, r5
 800a41c:	4621      	mov	r1, r4
 800a41e:	f7ff ff59 	bl	800a2d4 <__sflush_r>
 800a422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a424:	07da      	lsls	r2, r3, #31
 800a426:	4605      	mov	r5, r0
 800a428:	d4e0      	bmi.n	800a3ec <_fflush_r+0xc>
 800a42a:	89a3      	ldrh	r3, [r4, #12]
 800a42c:	059b      	lsls	r3, r3, #22
 800a42e:	d4dd      	bmi.n	800a3ec <_fflush_r+0xc>
 800a430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a432:	f000 f908 	bl	800a646 <__retarget_lock_release_recursive>
 800a436:	e7d9      	b.n	800a3ec <_fflush_r+0xc>
 800a438:	4b05      	ldr	r3, [pc, #20]	; (800a450 <_fflush_r+0x70>)
 800a43a:	429c      	cmp	r4, r3
 800a43c:	d101      	bne.n	800a442 <_fflush_r+0x62>
 800a43e:	68ac      	ldr	r4, [r5, #8]
 800a440:	e7df      	b.n	800a402 <_fflush_r+0x22>
 800a442:	4b04      	ldr	r3, [pc, #16]	; (800a454 <_fflush_r+0x74>)
 800a444:	429c      	cmp	r4, r3
 800a446:	bf08      	it	eq
 800a448:	68ec      	ldreq	r4, [r5, #12]
 800a44a:	e7da      	b.n	800a402 <_fflush_r+0x22>
 800a44c:	0800b0d0 	.word	0x0800b0d0
 800a450:	0800b0f0 	.word	0x0800b0f0
 800a454:	0800b0b0 	.word	0x0800b0b0

0800a458 <std>:
 800a458:	2300      	movs	r3, #0
 800a45a:	b510      	push	{r4, lr}
 800a45c:	4604      	mov	r4, r0
 800a45e:	e9c0 3300 	strd	r3, r3, [r0]
 800a462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a466:	6083      	str	r3, [r0, #8]
 800a468:	8181      	strh	r1, [r0, #12]
 800a46a:	6643      	str	r3, [r0, #100]	; 0x64
 800a46c:	81c2      	strh	r2, [r0, #14]
 800a46e:	6183      	str	r3, [r0, #24]
 800a470:	4619      	mov	r1, r3
 800a472:	2208      	movs	r2, #8
 800a474:	305c      	adds	r0, #92	; 0x5c
 800a476:	f7fc f857 	bl	8006528 <memset>
 800a47a:	4b05      	ldr	r3, [pc, #20]	; (800a490 <std+0x38>)
 800a47c:	6263      	str	r3, [r4, #36]	; 0x24
 800a47e:	4b05      	ldr	r3, [pc, #20]	; (800a494 <std+0x3c>)
 800a480:	62a3      	str	r3, [r4, #40]	; 0x28
 800a482:	4b05      	ldr	r3, [pc, #20]	; (800a498 <std+0x40>)
 800a484:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a486:	4b05      	ldr	r3, [pc, #20]	; (800a49c <std+0x44>)
 800a488:	6224      	str	r4, [r4, #32]
 800a48a:	6323      	str	r3, [r4, #48]	; 0x30
 800a48c:	bd10      	pop	{r4, pc}
 800a48e:	bf00      	nop
 800a490:	0800a849 	.word	0x0800a849
 800a494:	0800a86b 	.word	0x0800a86b
 800a498:	0800a8a3 	.word	0x0800a8a3
 800a49c:	0800a8c7 	.word	0x0800a8c7

0800a4a0 <_cleanup_r>:
 800a4a0:	4901      	ldr	r1, [pc, #4]	; (800a4a8 <_cleanup_r+0x8>)
 800a4a2:	f000 b8af 	b.w	800a604 <_fwalk_reent>
 800a4a6:	bf00      	nop
 800a4a8:	0800a3e1 	.word	0x0800a3e1

0800a4ac <__sfmoreglue>:
 800a4ac:	b570      	push	{r4, r5, r6, lr}
 800a4ae:	2268      	movs	r2, #104	; 0x68
 800a4b0:	1e4d      	subs	r5, r1, #1
 800a4b2:	4355      	muls	r5, r2
 800a4b4:	460e      	mov	r6, r1
 800a4b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a4ba:	f7ff fadd 	bl	8009a78 <_malloc_r>
 800a4be:	4604      	mov	r4, r0
 800a4c0:	b140      	cbz	r0, 800a4d4 <__sfmoreglue+0x28>
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	e9c0 1600 	strd	r1, r6, [r0]
 800a4c8:	300c      	adds	r0, #12
 800a4ca:	60a0      	str	r0, [r4, #8]
 800a4cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a4d0:	f7fc f82a 	bl	8006528 <memset>
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	bd70      	pop	{r4, r5, r6, pc}

0800a4d8 <__sfp_lock_acquire>:
 800a4d8:	4801      	ldr	r0, [pc, #4]	; (800a4e0 <__sfp_lock_acquire+0x8>)
 800a4da:	f000 b8b3 	b.w	800a644 <__retarget_lock_acquire_recursive>
 800a4de:	bf00      	nop
 800a4e0:	200004f1 	.word	0x200004f1

0800a4e4 <__sfp_lock_release>:
 800a4e4:	4801      	ldr	r0, [pc, #4]	; (800a4ec <__sfp_lock_release+0x8>)
 800a4e6:	f000 b8ae 	b.w	800a646 <__retarget_lock_release_recursive>
 800a4ea:	bf00      	nop
 800a4ec:	200004f1 	.word	0x200004f1

0800a4f0 <__sinit_lock_acquire>:
 800a4f0:	4801      	ldr	r0, [pc, #4]	; (800a4f8 <__sinit_lock_acquire+0x8>)
 800a4f2:	f000 b8a7 	b.w	800a644 <__retarget_lock_acquire_recursive>
 800a4f6:	bf00      	nop
 800a4f8:	200004f2 	.word	0x200004f2

0800a4fc <__sinit_lock_release>:
 800a4fc:	4801      	ldr	r0, [pc, #4]	; (800a504 <__sinit_lock_release+0x8>)
 800a4fe:	f000 b8a2 	b.w	800a646 <__retarget_lock_release_recursive>
 800a502:	bf00      	nop
 800a504:	200004f2 	.word	0x200004f2

0800a508 <__sinit>:
 800a508:	b510      	push	{r4, lr}
 800a50a:	4604      	mov	r4, r0
 800a50c:	f7ff fff0 	bl	800a4f0 <__sinit_lock_acquire>
 800a510:	69a3      	ldr	r3, [r4, #24]
 800a512:	b11b      	cbz	r3, 800a51c <__sinit+0x14>
 800a514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a518:	f7ff bff0 	b.w	800a4fc <__sinit_lock_release>
 800a51c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a520:	6523      	str	r3, [r4, #80]	; 0x50
 800a522:	4b13      	ldr	r3, [pc, #76]	; (800a570 <__sinit+0x68>)
 800a524:	4a13      	ldr	r2, [pc, #76]	; (800a574 <__sinit+0x6c>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	62a2      	str	r2, [r4, #40]	; 0x28
 800a52a:	42a3      	cmp	r3, r4
 800a52c:	bf04      	itt	eq
 800a52e:	2301      	moveq	r3, #1
 800a530:	61a3      	streq	r3, [r4, #24]
 800a532:	4620      	mov	r0, r4
 800a534:	f000 f820 	bl	800a578 <__sfp>
 800a538:	6060      	str	r0, [r4, #4]
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 f81c 	bl	800a578 <__sfp>
 800a540:	60a0      	str	r0, [r4, #8]
 800a542:	4620      	mov	r0, r4
 800a544:	f000 f818 	bl	800a578 <__sfp>
 800a548:	2200      	movs	r2, #0
 800a54a:	60e0      	str	r0, [r4, #12]
 800a54c:	2104      	movs	r1, #4
 800a54e:	6860      	ldr	r0, [r4, #4]
 800a550:	f7ff ff82 	bl	800a458 <std>
 800a554:	68a0      	ldr	r0, [r4, #8]
 800a556:	2201      	movs	r2, #1
 800a558:	2109      	movs	r1, #9
 800a55a:	f7ff ff7d 	bl	800a458 <std>
 800a55e:	68e0      	ldr	r0, [r4, #12]
 800a560:	2202      	movs	r2, #2
 800a562:	2112      	movs	r1, #18
 800a564:	f7ff ff78 	bl	800a458 <std>
 800a568:	2301      	movs	r3, #1
 800a56a:	61a3      	str	r3, [r4, #24]
 800a56c:	e7d2      	b.n	800a514 <__sinit+0xc>
 800a56e:	bf00      	nop
 800a570:	0800ac14 	.word	0x0800ac14
 800a574:	0800a4a1 	.word	0x0800a4a1

0800a578 <__sfp>:
 800a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57a:	4607      	mov	r7, r0
 800a57c:	f7ff ffac 	bl	800a4d8 <__sfp_lock_acquire>
 800a580:	4b1e      	ldr	r3, [pc, #120]	; (800a5fc <__sfp+0x84>)
 800a582:	681e      	ldr	r6, [r3, #0]
 800a584:	69b3      	ldr	r3, [r6, #24]
 800a586:	b913      	cbnz	r3, 800a58e <__sfp+0x16>
 800a588:	4630      	mov	r0, r6
 800a58a:	f7ff ffbd 	bl	800a508 <__sinit>
 800a58e:	3648      	adds	r6, #72	; 0x48
 800a590:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a594:	3b01      	subs	r3, #1
 800a596:	d503      	bpl.n	800a5a0 <__sfp+0x28>
 800a598:	6833      	ldr	r3, [r6, #0]
 800a59a:	b30b      	cbz	r3, 800a5e0 <__sfp+0x68>
 800a59c:	6836      	ldr	r6, [r6, #0]
 800a59e:	e7f7      	b.n	800a590 <__sfp+0x18>
 800a5a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5a4:	b9d5      	cbnz	r5, 800a5dc <__sfp+0x64>
 800a5a6:	4b16      	ldr	r3, [pc, #88]	; (800a600 <__sfp+0x88>)
 800a5a8:	60e3      	str	r3, [r4, #12]
 800a5aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5ae:	6665      	str	r5, [r4, #100]	; 0x64
 800a5b0:	f000 f847 	bl	800a642 <__retarget_lock_init_recursive>
 800a5b4:	f7ff ff96 	bl	800a4e4 <__sfp_lock_release>
 800a5b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a5bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a5c0:	6025      	str	r5, [r4, #0]
 800a5c2:	61a5      	str	r5, [r4, #24]
 800a5c4:	2208      	movs	r2, #8
 800a5c6:	4629      	mov	r1, r5
 800a5c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a5cc:	f7fb ffac 	bl	8006528 <memset>
 800a5d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a5d8:	4620      	mov	r0, r4
 800a5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5dc:	3468      	adds	r4, #104	; 0x68
 800a5de:	e7d9      	b.n	800a594 <__sfp+0x1c>
 800a5e0:	2104      	movs	r1, #4
 800a5e2:	4638      	mov	r0, r7
 800a5e4:	f7ff ff62 	bl	800a4ac <__sfmoreglue>
 800a5e8:	4604      	mov	r4, r0
 800a5ea:	6030      	str	r0, [r6, #0]
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d1d5      	bne.n	800a59c <__sfp+0x24>
 800a5f0:	f7ff ff78 	bl	800a4e4 <__sfp_lock_release>
 800a5f4:	230c      	movs	r3, #12
 800a5f6:	603b      	str	r3, [r7, #0]
 800a5f8:	e7ee      	b.n	800a5d8 <__sfp+0x60>
 800a5fa:	bf00      	nop
 800a5fc:	0800ac14 	.word	0x0800ac14
 800a600:	ffff0001 	.word	0xffff0001

0800a604 <_fwalk_reent>:
 800a604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a608:	4606      	mov	r6, r0
 800a60a:	4688      	mov	r8, r1
 800a60c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a610:	2700      	movs	r7, #0
 800a612:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a616:	f1b9 0901 	subs.w	r9, r9, #1
 800a61a:	d505      	bpl.n	800a628 <_fwalk_reent+0x24>
 800a61c:	6824      	ldr	r4, [r4, #0]
 800a61e:	2c00      	cmp	r4, #0
 800a620:	d1f7      	bne.n	800a612 <_fwalk_reent+0xe>
 800a622:	4638      	mov	r0, r7
 800a624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a628:	89ab      	ldrh	r3, [r5, #12]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d907      	bls.n	800a63e <_fwalk_reent+0x3a>
 800a62e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a632:	3301      	adds	r3, #1
 800a634:	d003      	beq.n	800a63e <_fwalk_reent+0x3a>
 800a636:	4629      	mov	r1, r5
 800a638:	4630      	mov	r0, r6
 800a63a:	47c0      	blx	r8
 800a63c:	4307      	orrs	r7, r0
 800a63e:	3568      	adds	r5, #104	; 0x68
 800a640:	e7e9      	b.n	800a616 <_fwalk_reent+0x12>

0800a642 <__retarget_lock_init_recursive>:
 800a642:	4770      	bx	lr

0800a644 <__retarget_lock_acquire_recursive>:
 800a644:	4770      	bx	lr

0800a646 <__retarget_lock_release_recursive>:
 800a646:	4770      	bx	lr

0800a648 <__swhatbuf_r>:
 800a648:	b570      	push	{r4, r5, r6, lr}
 800a64a:	460e      	mov	r6, r1
 800a64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a650:	2900      	cmp	r1, #0
 800a652:	b096      	sub	sp, #88	; 0x58
 800a654:	4614      	mov	r4, r2
 800a656:	461d      	mov	r5, r3
 800a658:	da08      	bge.n	800a66c <__swhatbuf_r+0x24>
 800a65a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	602a      	str	r2, [r5, #0]
 800a662:	061a      	lsls	r2, r3, #24
 800a664:	d410      	bmi.n	800a688 <__swhatbuf_r+0x40>
 800a666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a66a:	e00e      	b.n	800a68a <__swhatbuf_r+0x42>
 800a66c:	466a      	mov	r2, sp
 800a66e:	f000 f951 	bl	800a914 <_fstat_r>
 800a672:	2800      	cmp	r0, #0
 800a674:	dbf1      	blt.n	800a65a <__swhatbuf_r+0x12>
 800a676:	9a01      	ldr	r2, [sp, #4]
 800a678:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a67c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a680:	425a      	negs	r2, r3
 800a682:	415a      	adcs	r2, r3
 800a684:	602a      	str	r2, [r5, #0]
 800a686:	e7ee      	b.n	800a666 <__swhatbuf_r+0x1e>
 800a688:	2340      	movs	r3, #64	; 0x40
 800a68a:	2000      	movs	r0, #0
 800a68c:	6023      	str	r3, [r4, #0]
 800a68e:	b016      	add	sp, #88	; 0x58
 800a690:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a694 <__smakebuf_r>:
 800a694:	898b      	ldrh	r3, [r1, #12]
 800a696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a698:	079d      	lsls	r5, r3, #30
 800a69a:	4606      	mov	r6, r0
 800a69c:	460c      	mov	r4, r1
 800a69e:	d507      	bpl.n	800a6b0 <__smakebuf_r+0x1c>
 800a6a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6a4:	6023      	str	r3, [r4, #0]
 800a6a6:	6123      	str	r3, [r4, #16]
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	6163      	str	r3, [r4, #20]
 800a6ac:	b002      	add	sp, #8
 800a6ae:	bd70      	pop	{r4, r5, r6, pc}
 800a6b0:	ab01      	add	r3, sp, #4
 800a6b2:	466a      	mov	r2, sp
 800a6b4:	f7ff ffc8 	bl	800a648 <__swhatbuf_r>
 800a6b8:	9900      	ldr	r1, [sp, #0]
 800a6ba:	4605      	mov	r5, r0
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f7ff f9db 	bl	8009a78 <_malloc_r>
 800a6c2:	b948      	cbnz	r0, 800a6d8 <__smakebuf_r+0x44>
 800a6c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6c8:	059a      	lsls	r2, r3, #22
 800a6ca:	d4ef      	bmi.n	800a6ac <__smakebuf_r+0x18>
 800a6cc:	f023 0303 	bic.w	r3, r3, #3
 800a6d0:	f043 0302 	orr.w	r3, r3, #2
 800a6d4:	81a3      	strh	r3, [r4, #12]
 800a6d6:	e7e3      	b.n	800a6a0 <__smakebuf_r+0xc>
 800a6d8:	4b0d      	ldr	r3, [pc, #52]	; (800a710 <__smakebuf_r+0x7c>)
 800a6da:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6dc:	89a3      	ldrh	r3, [r4, #12]
 800a6de:	6020      	str	r0, [r4, #0]
 800a6e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6e4:	81a3      	strh	r3, [r4, #12]
 800a6e6:	9b00      	ldr	r3, [sp, #0]
 800a6e8:	6163      	str	r3, [r4, #20]
 800a6ea:	9b01      	ldr	r3, [sp, #4]
 800a6ec:	6120      	str	r0, [r4, #16]
 800a6ee:	b15b      	cbz	r3, 800a708 <__smakebuf_r+0x74>
 800a6f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	f000 f91f 	bl	800a938 <_isatty_r>
 800a6fa:	b128      	cbz	r0, 800a708 <__smakebuf_r+0x74>
 800a6fc:	89a3      	ldrh	r3, [r4, #12]
 800a6fe:	f023 0303 	bic.w	r3, r3, #3
 800a702:	f043 0301 	orr.w	r3, r3, #1
 800a706:	81a3      	strh	r3, [r4, #12]
 800a708:	89a0      	ldrh	r0, [r4, #12]
 800a70a:	4305      	orrs	r5, r0
 800a70c:	81a5      	strh	r5, [r4, #12]
 800a70e:	e7cd      	b.n	800a6ac <__smakebuf_r+0x18>
 800a710:	0800a4a1 	.word	0x0800a4a1

0800a714 <memmove>:
 800a714:	4288      	cmp	r0, r1
 800a716:	b510      	push	{r4, lr}
 800a718:	eb01 0402 	add.w	r4, r1, r2
 800a71c:	d902      	bls.n	800a724 <memmove+0x10>
 800a71e:	4284      	cmp	r4, r0
 800a720:	4623      	mov	r3, r4
 800a722:	d807      	bhi.n	800a734 <memmove+0x20>
 800a724:	1e43      	subs	r3, r0, #1
 800a726:	42a1      	cmp	r1, r4
 800a728:	d008      	beq.n	800a73c <memmove+0x28>
 800a72a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a72e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a732:	e7f8      	b.n	800a726 <memmove+0x12>
 800a734:	4402      	add	r2, r0
 800a736:	4601      	mov	r1, r0
 800a738:	428a      	cmp	r2, r1
 800a73a:	d100      	bne.n	800a73e <memmove+0x2a>
 800a73c:	bd10      	pop	{r4, pc}
 800a73e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a746:	e7f7      	b.n	800a738 <memmove+0x24>

0800a748 <__malloc_lock>:
 800a748:	4801      	ldr	r0, [pc, #4]	; (800a750 <__malloc_lock+0x8>)
 800a74a:	f7ff bf7b 	b.w	800a644 <__retarget_lock_acquire_recursive>
 800a74e:	bf00      	nop
 800a750:	200004f0 	.word	0x200004f0

0800a754 <__malloc_unlock>:
 800a754:	4801      	ldr	r0, [pc, #4]	; (800a75c <__malloc_unlock+0x8>)
 800a756:	f7ff bf76 	b.w	800a646 <__retarget_lock_release_recursive>
 800a75a:	bf00      	nop
 800a75c:	200004f0 	.word	0x200004f0

0800a760 <_realloc_r>:
 800a760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a764:	4680      	mov	r8, r0
 800a766:	4614      	mov	r4, r2
 800a768:	460e      	mov	r6, r1
 800a76a:	b921      	cbnz	r1, 800a776 <_realloc_r+0x16>
 800a76c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a770:	4611      	mov	r1, r2
 800a772:	f7ff b981 	b.w	8009a78 <_malloc_r>
 800a776:	b92a      	cbnz	r2, 800a784 <_realloc_r+0x24>
 800a778:	f7ff f912 	bl	80099a0 <_free_r>
 800a77c:	4625      	mov	r5, r4
 800a77e:	4628      	mov	r0, r5
 800a780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a784:	f000 f8fa 	bl	800a97c <_malloc_usable_size_r>
 800a788:	4284      	cmp	r4, r0
 800a78a:	4607      	mov	r7, r0
 800a78c:	d802      	bhi.n	800a794 <_realloc_r+0x34>
 800a78e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a792:	d812      	bhi.n	800a7ba <_realloc_r+0x5a>
 800a794:	4621      	mov	r1, r4
 800a796:	4640      	mov	r0, r8
 800a798:	f7ff f96e 	bl	8009a78 <_malloc_r>
 800a79c:	4605      	mov	r5, r0
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	d0ed      	beq.n	800a77e <_realloc_r+0x1e>
 800a7a2:	42bc      	cmp	r4, r7
 800a7a4:	4622      	mov	r2, r4
 800a7a6:	4631      	mov	r1, r6
 800a7a8:	bf28      	it	cs
 800a7aa:	463a      	movcs	r2, r7
 800a7ac:	f7fe fc12 	bl	8008fd4 <memcpy>
 800a7b0:	4631      	mov	r1, r6
 800a7b2:	4640      	mov	r0, r8
 800a7b4:	f7ff f8f4 	bl	80099a0 <_free_r>
 800a7b8:	e7e1      	b.n	800a77e <_realloc_r+0x1e>
 800a7ba:	4635      	mov	r5, r6
 800a7bc:	e7df      	b.n	800a77e <_realloc_r+0x1e>

0800a7be <_raise_r>:
 800a7be:	291f      	cmp	r1, #31
 800a7c0:	b538      	push	{r3, r4, r5, lr}
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	460d      	mov	r5, r1
 800a7c6:	d904      	bls.n	800a7d2 <_raise_r+0x14>
 800a7c8:	2316      	movs	r3, #22
 800a7ca:	6003      	str	r3, [r0, #0]
 800a7cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7d0:	bd38      	pop	{r3, r4, r5, pc}
 800a7d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a7d4:	b112      	cbz	r2, 800a7dc <_raise_r+0x1e>
 800a7d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7da:	b94b      	cbnz	r3, 800a7f0 <_raise_r+0x32>
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f000 f831 	bl	800a844 <_getpid_r>
 800a7e2:	462a      	mov	r2, r5
 800a7e4:	4601      	mov	r1, r0
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7ec:	f000 b818 	b.w	800a820 <_kill_r>
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d00a      	beq.n	800a80a <_raise_r+0x4c>
 800a7f4:	1c59      	adds	r1, r3, #1
 800a7f6:	d103      	bne.n	800a800 <_raise_r+0x42>
 800a7f8:	2316      	movs	r3, #22
 800a7fa:	6003      	str	r3, [r0, #0]
 800a7fc:	2001      	movs	r0, #1
 800a7fe:	e7e7      	b.n	800a7d0 <_raise_r+0x12>
 800a800:	2400      	movs	r4, #0
 800a802:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a806:	4628      	mov	r0, r5
 800a808:	4798      	blx	r3
 800a80a:	2000      	movs	r0, #0
 800a80c:	e7e0      	b.n	800a7d0 <_raise_r+0x12>
	...

0800a810 <raise>:
 800a810:	4b02      	ldr	r3, [pc, #8]	; (800a81c <raise+0xc>)
 800a812:	4601      	mov	r1, r0
 800a814:	6818      	ldr	r0, [r3, #0]
 800a816:	f7ff bfd2 	b.w	800a7be <_raise_r>
 800a81a:	bf00      	nop
 800a81c:	20000060 	.word	0x20000060

0800a820 <_kill_r>:
 800a820:	b538      	push	{r3, r4, r5, lr}
 800a822:	4d07      	ldr	r5, [pc, #28]	; (800a840 <_kill_r+0x20>)
 800a824:	2300      	movs	r3, #0
 800a826:	4604      	mov	r4, r0
 800a828:	4608      	mov	r0, r1
 800a82a:	4611      	mov	r1, r2
 800a82c:	602b      	str	r3, [r5, #0]
 800a82e:	f7f8 fbdd 	bl	8002fec <_kill>
 800a832:	1c43      	adds	r3, r0, #1
 800a834:	d102      	bne.n	800a83c <_kill_r+0x1c>
 800a836:	682b      	ldr	r3, [r5, #0]
 800a838:	b103      	cbz	r3, 800a83c <_kill_r+0x1c>
 800a83a:	6023      	str	r3, [r4, #0]
 800a83c:	bd38      	pop	{r3, r4, r5, pc}
 800a83e:	bf00      	nop
 800a840:	200004f4 	.word	0x200004f4

0800a844 <_getpid_r>:
 800a844:	f7f8 bbca 	b.w	8002fdc <_getpid>

0800a848 <__sread>:
 800a848:	b510      	push	{r4, lr}
 800a84a:	460c      	mov	r4, r1
 800a84c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a850:	f000 f89c 	bl	800a98c <_read_r>
 800a854:	2800      	cmp	r0, #0
 800a856:	bfab      	itete	ge
 800a858:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a85a:	89a3      	ldrhlt	r3, [r4, #12]
 800a85c:	181b      	addge	r3, r3, r0
 800a85e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a862:	bfac      	ite	ge
 800a864:	6563      	strge	r3, [r4, #84]	; 0x54
 800a866:	81a3      	strhlt	r3, [r4, #12]
 800a868:	bd10      	pop	{r4, pc}

0800a86a <__swrite>:
 800a86a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a86e:	461f      	mov	r7, r3
 800a870:	898b      	ldrh	r3, [r1, #12]
 800a872:	05db      	lsls	r3, r3, #23
 800a874:	4605      	mov	r5, r0
 800a876:	460c      	mov	r4, r1
 800a878:	4616      	mov	r6, r2
 800a87a:	d505      	bpl.n	800a888 <__swrite+0x1e>
 800a87c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a880:	2302      	movs	r3, #2
 800a882:	2200      	movs	r2, #0
 800a884:	f000 f868 	bl	800a958 <_lseek_r>
 800a888:	89a3      	ldrh	r3, [r4, #12]
 800a88a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a88e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a892:	81a3      	strh	r3, [r4, #12]
 800a894:	4632      	mov	r2, r6
 800a896:	463b      	mov	r3, r7
 800a898:	4628      	mov	r0, r5
 800a89a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a89e:	f000 b817 	b.w	800a8d0 <_write_r>

0800a8a2 <__sseek>:
 800a8a2:	b510      	push	{r4, lr}
 800a8a4:	460c      	mov	r4, r1
 800a8a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8aa:	f000 f855 	bl	800a958 <_lseek_r>
 800a8ae:	1c43      	adds	r3, r0, #1
 800a8b0:	89a3      	ldrh	r3, [r4, #12]
 800a8b2:	bf15      	itete	ne
 800a8b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8be:	81a3      	strheq	r3, [r4, #12]
 800a8c0:	bf18      	it	ne
 800a8c2:	81a3      	strhne	r3, [r4, #12]
 800a8c4:	bd10      	pop	{r4, pc}

0800a8c6 <__sclose>:
 800a8c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ca:	f000 b813 	b.w	800a8f4 <_close_r>
	...

0800a8d0 <_write_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	4d07      	ldr	r5, [pc, #28]	; (800a8f0 <_write_r+0x20>)
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	4608      	mov	r0, r1
 800a8d8:	4611      	mov	r1, r2
 800a8da:	2200      	movs	r2, #0
 800a8dc:	602a      	str	r2, [r5, #0]
 800a8de:	461a      	mov	r2, r3
 800a8e0:	f7f8 fbbb 	bl	800305a <_write>
 800a8e4:	1c43      	adds	r3, r0, #1
 800a8e6:	d102      	bne.n	800a8ee <_write_r+0x1e>
 800a8e8:	682b      	ldr	r3, [r5, #0]
 800a8ea:	b103      	cbz	r3, 800a8ee <_write_r+0x1e>
 800a8ec:	6023      	str	r3, [r4, #0]
 800a8ee:	bd38      	pop	{r3, r4, r5, pc}
 800a8f0:	200004f4 	.word	0x200004f4

0800a8f4 <_close_r>:
 800a8f4:	b538      	push	{r3, r4, r5, lr}
 800a8f6:	4d06      	ldr	r5, [pc, #24]	; (800a910 <_close_r+0x1c>)
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	4608      	mov	r0, r1
 800a8fe:	602b      	str	r3, [r5, #0]
 800a900:	f7f8 fbc7 	bl	8003092 <_close>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d102      	bne.n	800a90e <_close_r+0x1a>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	b103      	cbz	r3, 800a90e <_close_r+0x1a>
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	bd38      	pop	{r3, r4, r5, pc}
 800a910:	200004f4 	.word	0x200004f4

0800a914 <_fstat_r>:
 800a914:	b538      	push	{r3, r4, r5, lr}
 800a916:	4d07      	ldr	r5, [pc, #28]	; (800a934 <_fstat_r+0x20>)
 800a918:	2300      	movs	r3, #0
 800a91a:	4604      	mov	r4, r0
 800a91c:	4608      	mov	r0, r1
 800a91e:	4611      	mov	r1, r2
 800a920:	602b      	str	r3, [r5, #0]
 800a922:	f7f8 fbc2 	bl	80030aa <_fstat>
 800a926:	1c43      	adds	r3, r0, #1
 800a928:	d102      	bne.n	800a930 <_fstat_r+0x1c>
 800a92a:	682b      	ldr	r3, [r5, #0]
 800a92c:	b103      	cbz	r3, 800a930 <_fstat_r+0x1c>
 800a92e:	6023      	str	r3, [r4, #0]
 800a930:	bd38      	pop	{r3, r4, r5, pc}
 800a932:	bf00      	nop
 800a934:	200004f4 	.word	0x200004f4

0800a938 <_isatty_r>:
 800a938:	b538      	push	{r3, r4, r5, lr}
 800a93a:	4d06      	ldr	r5, [pc, #24]	; (800a954 <_isatty_r+0x1c>)
 800a93c:	2300      	movs	r3, #0
 800a93e:	4604      	mov	r4, r0
 800a940:	4608      	mov	r0, r1
 800a942:	602b      	str	r3, [r5, #0]
 800a944:	f7f8 fbc1 	bl	80030ca <_isatty>
 800a948:	1c43      	adds	r3, r0, #1
 800a94a:	d102      	bne.n	800a952 <_isatty_r+0x1a>
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	b103      	cbz	r3, 800a952 <_isatty_r+0x1a>
 800a950:	6023      	str	r3, [r4, #0]
 800a952:	bd38      	pop	{r3, r4, r5, pc}
 800a954:	200004f4 	.word	0x200004f4

0800a958 <_lseek_r>:
 800a958:	b538      	push	{r3, r4, r5, lr}
 800a95a:	4d07      	ldr	r5, [pc, #28]	; (800a978 <_lseek_r+0x20>)
 800a95c:	4604      	mov	r4, r0
 800a95e:	4608      	mov	r0, r1
 800a960:	4611      	mov	r1, r2
 800a962:	2200      	movs	r2, #0
 800a964:	602a      	str	r2, [r5, #0]
 800a966:	461a      	mov	r2, r3
 800a968:	f7f8 fbba 	bl	80030e0 <_lseek>
 800a96c:	1c43      	adds	r3, r0, #1
 800a96e:	d102      	bne.n	800a976 <_lseek_r+0x1e>
 800a970:	682b      	ldr	r3, [r5, #0]
 800a972:	b103      	cbz	r3, 800a976 <_lseek_r+0x1e>
 800a974:	6023      	str	r3, [r4, #0]
 800a976:	bd38      	pop	{r3, r4, r5, pc}
 800a978:	200004f4 	.word	0x200004f4

0800a97c <_malloc_usable_size_r>:
 800a97c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a980:	1f18      	subs	r0, r3, #4
 800a982:	2b00      	cmp	r3, #0
 800a984:	bfbc      	itt	lt
 800a986:	580b      	ldrlt	r3, [r1, r0]
 800a988:	18c0      	addlt	r0, r0, r3
 800a98a:	4770      	bx	lr

0800a98c <_read_r>:
 800a98c:	b538      	push	{r3, r4, r5, lr}
 800a98e:	4d07      	ldr	r5, [pc, #28]	; (800a9ac <_read_r+0x20>)
 800a990:	4604      	mov	r4, r0
 800a992:	4608      	mov	r0, r1
 800a994:	4611      	mov	r1, r2
 800a996:	2200      	movs	r2, #0
 800a998:	602a      	str	r2, [r5, #0]
 800a99a:	461a      	mov	r2, r3
 800a99c:	f7f8 fb40 	bl	8003020 <_read>
 800a9a0:	1c43      	adds	r3, r0, #1
 800a9a2:	d102      	bne.n	800a9aa <_read_r+0x1e>
 800a9a4:	682b      	ldr	r3, [r5, #0]
 800a9a6:	b103      	cbz	r3, 800a9aa <_read_r+0x1e>
 800a9a8:	6023      	str	r3, [r4, #0]
 800a9aa:	bd38      	pop	{r3, r4, r5, pc}
 800a9ac:	200004f4 	.word	0x200004f4

0800a9b0 <sqrt>:
 800a9b0:	b538      	push	{r3, r4, r5, lr}
 800a9b2:	ed2d 8b02 	vpush	{d8}
 800a9b6:	ec55 4b10 	vmov	r4, r5, d0
 800a9ba:	f000 f825 	bl	800aa08 <__ieee754_sqrt>
 800a9be:	4622      	mov	r2, r4
 800a9c0:	462b      	mov	r3, r5
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	eeb0 8a40 	vmov.f32	s16, s0
 800a9ca:	eef0 8a60 	vmov.f32	s17, s1
 800a9ce:	f7f6 f8dd 	bl	8000b8c <__aeabi_dcmpun>
 800a9d2:	b990      	cbnz	r0, 800a9fa <sqrt+0x4a>
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	4620      	mov	r0, r4
 800a9da:	4629      	mov	r1, r5
 800a9dc:	f7f6 f8ae 	bl	8000b3c <__aeabi_dcmplt>
 800a9e0:	b158      	cbz	r0, 800a9fa <sqrt+0x4a>
 800a9e2:	f7fb fd77 	bl	80064d4 <__errno>
 800a9e6:	2321      	movs	r3, #33	; 0x21
 800a9e8:	6003      	str	r3, [r0, #0]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	4610      	mov	r0, r2
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	f7f5 ff5b 	bl	80008ac <__aeabi_ddiv>
 800a9f6:	ec41 0b18 	vmov	d8, r0, r1
 800a9fa:	eeb0 0a48 	vmov.f32	s0, s16
 800a9fe:	eef0 0a68 	vmov.f32	s1, s17
 800aa02:	ecbd 8b02 	vpop	{d8}
 800aa06:	bd38      	pop	{r3, r4, r5, pc}

0800aa08 <__ieee754_sqrt>:
 800aa08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa0c:	ec55 4b10 	vmov	r4, r5, d0
 800aa10:	4e55      	ldr	r6, [pc, #340]	; (800ab68 <__ieee754_sqrt+0x160>)
 800aa12:	43ae      	bics	r6, r5
 800aa14:	ee10 0a10 	vmov	r0, s0
 800aa18:	ee10 3a10 	vmov	r3, s0
 800aa1c:	462a      	mov	r2, r5
 800aa1e:	4629      	mov	r1, r5
 800aa20:	d110      	bne.n	800aa44 <__ieee754_sqrt+0x3c>
 800aa22:	ee10 2a10 	vmov	r2, s0
 800aa26:	462b      	mov	r3, r5
 800aa28:	f7f5 fe16 	bl	8000658 <__aeabi_dmul>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	460b      	mov	r3, r1
 800aa30:	4620      	mov	r0, r4
 800aa32:	4629      	mov	r1, r5
 800aa34:	f7f5 fc5a 	bl	80002ec <__adddf3>
 800aa38:	4604      	mov	r4, r0
 800aa3a:	460d      	mov	r5, r1
 800aa3c:	ec45 4b10 	vmov	d0, r4, r5
 800aa40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa44:	2d00      	cmp	r5, #0
 800aa46:	dc10      	bgt.n	800aa6a <__ieee754_sqrt+0x62>
 800aa48:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800aa4c:	4330      	orrs	r0, r6
 800aa4e:	d0f5      	beq.n	800aa3c <__ieee754_sqrt+0x34>
 800aa50:	b15d      	cbz	r5, 800aa6a <__ieee754_sqrt+0x62>
 800aa52:	ee10 2a10 	vmov	r2, s0
 800aa56:	462b      	mov	r3, r5
 800aa58:	ee10 0a10 	vmov	r0, s0
 800aa5c:	f7f5 fc44 	bl	80002e8 <__aeabi_dsub>
 800aa60:	4602      	mov	r2, r0
 800aa62:	460b      	mov	r3, r1
 800aa64:	f7f5 ff22 	bl	80008ac <__aeabi_ddiv>
 800aa68:	e7e6      	b.n	800aa38 <__ieee754_sqrt+0x30>
 800aa6a:	1512      	asrs	r2, r2, #20
 800aa6c:	d074      	beq.n	800ab58 <__ieee754_sqrt+0x150>
 800aa6e:	07d4      	lsls	r4, r2, #31
 800aa70:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800aa74:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800aa78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800aa7c:	bf5e      	ittt	pl
 800aa7e:	0fda      	lsrpl	r2, r3, #31
 800aa80:	005b      	lslpl	r3, r3, #1
 800aa82:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800aa86:	2400      	movs	r4, #0
 800aa88:	0fda      	lsrs	r2, r3, #31
 800aa8a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800aa8e:	107f      	asrs	r7, r7, #1
 800aa90:	005b      	lsls	r3, r3, #1
 800aa92:	2516      	movs	r5, #22
 800aa94:	4620      	mov	r0, r4
 800aa96:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800aa9a:	1886      	adds	r6, r0, r2
 800aa9c:	428e      	cmp	r6, r1
 800aa9e:	bfde      	ittt	le
 800aaa0:	1b89      	suble	r1, r1, r6
 800aaa2:	18b0      	addle	r0, r6, r2
 800aaa4:	18a4      	addle	r4, r4, r2
 800aaa6:	0049      	lsls	r1, r1, #1
 800aaa8:	3d01      	subs	r5, #1
 800aaaa:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800aaae:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800aab2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aab6:	d1f0      	bne.n	800aa9a <__ieee754_sqrt+0x92>
 800aab8:	462a      	mov	r2, r5
 800aaba:	f04f 0e20 	mov.w	lr, #32
 800aabe:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aac2:	4281      	cmp	r1, r0
 800aac4:	eb06 0c05 	add.w	ip, r6, r5
 800aac8:	dc02      	bgt.n	800aad0 <__ieee754_sqrt+0xc8>
 800aaca:	d113      	bne.n	800aaf4 <__ieee754_sqrt+0xec>
 800aacc:	459c      	cmp	ip, r3
 800aace:	d811      	bhi.n	800aaf4 <__ieee754_sqrt+0xec>
 800aad0:	f1bc 0f00 	cmp.w	ip, #0
 800aad4:	eb0c 0506 	add.w	r5, ip, r6
 800aad8:	da43      	bge.n	800ab62 <__ieee754_sqrt+0x15a>
 800aada:	2d00      	cmp	r5, #0
 800aadc:	db41      	blt.n	800ab62 <__ieee754_sqrt+0x15a>
 800aade:	f100 0801 	add.w	r8, r0, #1
 800aae2:	1a09      	subs	r1, r1, r0
 800aae4:	459c      	cmp	ip, r3
 800aae6:	bf88      	it	hi
 800aae8:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800aaec:	eba3 030c 	sub.w	r3, r3, ip
 800aaf0:	4432      	add	r2, r6
 800aaf2:	4640      	mov	r0, r8
 800aaf4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800aaf8:	f1be 0e01 	subs.w	lr, lr, #1
 800aafc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ab00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ab04:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ab08:	d1db      	bne.n	800aac2 <__ieee754_sqrt+0xba>
 800ab0a:	430b      	orrs	r3, r1
 800ab0c:	d006      	beq.n	800ab1c <__ieee754_sqrt+0x114>
 800ab0e:	1c50      	adds	r0, r2, #1
 800ab10:	bf13      	iteet	ne
 800ab12:	3201      	addne	r2, #1
 800ab14:	3401      	addeq	r4, #1
 800ab16:	4672      	moveq	r2, lr
 800ab18:	f022 0201 	bicne.w	r2, r2, #1
 800ab1c:	1063      	asrs	r3, r4, #1
 800ab1e:	0852      	lsrs	r2, r2, #1
 800ab20:	07e1      	lsls	r1, r4, #31
 800ab22:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ab26:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ab2a:	bf48      	it	mi
 800ab2c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ab30:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ab34:	4614      	mov	r4, r2
 800ab36:	e781      	b.n	800aa3c <__ieee754_sqrt+0x34>
 800ab38:	0ad9      	lsrs	r1, r3, #11
 800ab3a:	3815      	subs	r0, #21
 800ab3c:	055b      	lsls	r3, r3, #21
 800ab3e:	2900      	cmp	r1, #0
 800ab40:	d0fa      	beq.n	800ab38 <__ieee754_sqrt+0x130>
 800ab42:	02cd      	lsls	r5, r1, #11
 800ab44:	d50a      	bpl.n	800ab5c <__ieee754_sqrt+0x154>
 800ab46:	f1c2 0420 	rsb	r4, r2, #32
 800ab4a:	fa23 f404 	lsr.w	r4, r3, r4
 800ab4e:	1e55      	subs	r5, r2, #1
 800ab50:	4093      	lsls	r3, r2
 800ab52:	4321      	orrs	r1, r4
 800ab54:	1b42      	subs	r2, r0, r5
 800ab56:	e78a      	b.n	800aa6e <__ieee754_sqrt+0x66>
 800ab58:	4610      	mov	r0, r2
 800ab5a:	e7f0      	b.n	800ab3e <__ieee754_sqrt+0x136>
 800ab5c:	0049      	lsls	r1, r1, #1
 800ab5e:	3201      	adds	r2, #1
 800ab60:	e7ef      	b.n	800ab42 <__ieee754_sqrt+0x13a>
 800ab62:	4680      	mov	r8, r0
 800ab64:	e7bd      	b.n	800aae2 <__ieee754_sqrt+0xda>
 800ab66:	bf00      	nop
 800ab68:	7ff00000 	.word	0x7ff00000

0800ab6c <_init>:
 800ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6e:	bf00      	nop
 800ab70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab72:	bc08      	pop	{r3}
 800ab74:	469e      	mov	lr, r3
 800ab76:	4770      	bx	lr

0800ab78 <_fini>:
 800ab78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7a:	bf00      	nop
 800ab7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7e:	bc08      	pop	{r3}
 800ab80:	469e      	mov	lr, r3
 800ab82:	4770      	bx	lr
