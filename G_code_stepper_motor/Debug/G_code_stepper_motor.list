
G_code_stepper_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aadc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800acb0  0800acb0  0001acb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2d8  0800b2d8  00020250  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2d8  0800b2d8  0001b2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2e0  0800b2e0  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2e0  0800b2e0  0001b2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2e4  0800b2e4  0001b2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800b2e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  20000250  0800b538  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a30  0800b538  00020a30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001493a  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e48  00000000  00000000  00034bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00037a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  00038ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b86  00000000  00000000  00039c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158db  00000000  00000000  0005e7ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5977  00000000  00000000  00074089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149a00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fb4  00000000  00000000  00149a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000250 	.word	0x20000250
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ac94 	.word	0x0800ac94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000254 	.word	0x20000254
 800020c:	0800ac94 	.word	0x0800ac94

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9aa 	b.w	8001054 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468e      	mov	lr, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d14d      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d92:	428a      	cmp	r2, r1
 8000d94:	4694      	mov	ip, r2
 8000d96:	d969      	bls.n	8000e6c <__udivmoddi4+0xe8>
 8000d98:	fab2 f282 	clz	r2, r2
 8000d9c:	b152      	cbz	r2, 8000db4 <__udivmoddi4+0x30>
 8000d9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000da2:	f1c2 0120 	rsb	r1, r2, #32
 8000da6:	fa20 f101 	lsr.w	r1, r0, r1
 8000daa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dae:	ea41 0e03 	orr.w	lr, r1, r3
 8000db2:	4094      	lsls	r4, r2
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	0c21      	lsrs	r1, r4, #16
 8000dba:	fbbe f6f8 	udiv	r6, lr, r8
 8000dbe:	fa1f f78c 	uxth.w	r7, ip
 8000dc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000dc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dca:	fb06 f107 	mul.w	r1, r6, r7
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dda:	f080 811f 	bcs.w	800101c <__udivmoddi4+0x298>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 811c 	bls.w	800101c <__udivmoddi4+0x298>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	d90a      	bls.n	8000e16 <__udivmoddi4+0x92>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	f080 810a 	bcs.w	8001020 <__udivmoddi4+0x29c>
 8000e0c:	42a7      	cmp	r7, r4
 8000e0e:	f240 8107 	bls.w	8001020 <__udivmoddi4+0x29c>
 8000e12:	4464      	add	r4, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e1a:	1be4      	subs	r4, r4, r7
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	b11d      	cbz	r5, 8000e28 <__udivmoddi4+0xa4>
 8000e20:	40d4      	lsrs	r4, r2
 8000e22:	2300      	movs	r3, #0
 8000e24:	e9c5 4300 	strd	r4, r3, [r5]
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0xc2>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80ef 	beq.w	8001016 <__udivmoddi4+0x292>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x160>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0xd4>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80f9 	bhi.w	800104a <__udivmoddi4+0x2c6>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	469e      	mov	lr, r3
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0e0      	beq.n	8000e28 <__udivmoddi4+0xa4>
 8000e66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e6a:	e7dd      	b.n	8000e28 <__udivmoddi4+0xa4>
 8000e6c:	b902      	cbnz	r2, 8000e70 <__udivmoddi4+0xec>
 8000e6e:	deff      	udf	#255	; 0xff
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	f040 8092 	bne.w	8000f9e <__udivmoddi4+0x21a>
 8000e7a:	eba1 010c 	sub.w	r1, r1, ip
 8000e7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	2601      	movs	r6, #1
 8000e88:	0c20      	lsrs	r0, r4, #16
 8000e8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e96:	fb0e f003 	mul.w	r0, lr, r3
 8000e9a:	4288      	cmp	r0, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x12c>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x12a>
 8000ea8:	4288      	cmp	r0, r1
 8000eaa:	f200 80cb 	bhi.w	8001044 <__udivmoddi4+0x2c0>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ebc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ec0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x156>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x154>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 80bb 	bhi.w	800104e <__udivmoddi4+0x2ca>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x9a>
 8000ee4:	f1c6 0720 	rsb	r7, r6, #32
 8000ee8:	40b3      	lsls	r3, r6
 8000eea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ef2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	431c      	orrs	r4, r3
 8000efc:	40f9      	lsrs	r1, r7
 8000efe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f02:	fa00 f306 	lsl.w	r3, r0, r6
 8000f06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f0a:	0c20      	lsrs	r0, r4, #16
 8000f0c:	fa1f fe8c 	uxth.w	lr, ip
 8000f10:	fb09 1118 	mls	r1, r9, r8, r1
 8000f14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f18:	fb08 f00e 	mul.w	r0, r8, lr
 8000f1c:	4288      	cmp	r0, r1
 8000f1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f22:	d90b      	bls.n	8000f3c <__udivmoddi4+0x1b8>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f2c:	f080 8088 	bcs.w	8001040 <__udivmoddi4+0x2bc>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f240 8085 	bls.w	8001040 <__udivmoddi4+0x2bc>
 8000f36:	f1a8 0802 	sub.w	r8, r8, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f44:	fb09 1110 	mls	r1, r9, r0, r1
 8000f48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f50:	458e      	cmp	lr, r1
 8000f52:	d908      	bls.n	8000f66 <__udivmoddi4+0x1e2>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5c:	d26c      	bcs.n	8001038 <__udivmoddi4+0x2b4>
 8000f5e:	458e      	cmp	lr, r1
 8000f60:	d96a      	bls.n	8001038 <__udivmoddi4+0x2b4>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f6e:	eba1 010e 	sub.w	r1, r1, lr
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	46c8      	mov	r8, r9
 8000f76:	46a6      	mov	lr, r4
 8000f78:	d356      	bcc.n	8001028 <__udivmoddi4+0x2a4>
 8000f7a:	d053      	beq.n	8001024 <__udivmoddi4+0x2a0>
 8000f7c:	b15d      	cbz	r5, 8000f96 <__udivmoddi4+0x212>
 8000f7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f82:	eb61 010e 	sbc.w	r1, r1, lr
 8000f86:	fa01 f707 	lsl.w	r7, r1, r7
 8000f8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f8e:	40f1      	lsrs	r1, r6
 8000f90:	431f      	orrs	r7, r3
 8000f92:	e9c5 7100 	strd	r7, r1, [r5]
 8000f96:	2600      	movs	r6, #0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9e:	f1c2 0320 	rsb	r3, r2, #32
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fac:	4091      	lsls	r1, r2
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fb4:	fa1f fe8c 	uxth.w	lr, ip
 8000fb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fc0:	0c0b      	lsrs	r3, r1, #16
 8000fc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x260>
 8000fd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fda:	d22f      	bcs.n	800103c <__udivmoddi4+0x2b8>
 8000fdc:	429e      	cmp	r6, r3
 8000fde:	d92d      	bls.n	800103c <__udivmoddi4+0x2b8>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	4463      	add	r3, ip
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	b289      	uxth	r1, r1
 8000fe8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fec:	fb07 3316 	mls	r3, r7, r6, r3
 8000ff0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	d908      	bls.n	800100e <__udivmoddi4+0x28a>
 8000ffc:	eb1c 0101 	adds.w	r1, ip, r1
 8001000:	f106 38ff 	add.w	r8, r6, #4294967295
 8001004:	d216      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8001006:	428b      	cmp	r3, r1
 8001008:	d914      	bls.n	8001034 <__udivmoddi4+0x2b0>
 800100a:	3e02      	subs	r6, #2
 800100c:	4461      	add	r1, ip
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001014:	e738      	b.n	8000e88 <__udivmoddi4+0x104>
 8001016:	462e      	mov	r6, r5
 8001018:	4628      	mov	r0, r5
 800101a:	e705      	b.n	8000e28 <__udivmoddi4+0xa4>
 800101c:	4606      	mov	r6, r0
 800101e:	e6e3      	b.n	8000de8 <__udivmoddi4+0x64>
 8001020:	4618      	mov	r0, r3
 8001022:	e6f8      	b.n	8000e16 <__udivmoddi4+0x92>
 8001024:	454b      	cmp	r3, r9
 8001026:	d2a9      	bcs.n	8000f7c <__udivmoddi4+0x1f8>
 8001028:	ebb9 0802 	subs.w	r8, r9, r2
 800102c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001030:	3801      	subs	r0, #1
 8001032:	e7a3      	b.n	8000f7c <__udivmoddi4+0x1f8>
 8001034:	4646      	mov	r6, r8
 8001036:	e7ea      	b.n	800100e <__udivmoddi4+0x28a>
 8001038:	4620      	mov	r0, r4
 800103a:	e794      	b.n	8000f66 <__udivmoddi4+0x1e2>
 800103c:	4640      	mov	r0, r8
 800103e:	e7d1      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001040:	46d0      	mov	r8, sl
 8001042:	e77b      	b.n	8000f3c <__udivmoddi4+0x1b8>
 8001044:	3b02      	subs	r3, #2
 8001046:	4461      	add	r1, ip
 8001048:	e732      	b.n	8000eb0 <__udivmoddi4+0x12c>
 800104a:	4630      	mov	r0, r6
 800104c:	e709      	b.n	8000e62 <__udivmoddi4+0xde>
 800104e:	4464      	add	r4, ip
 8001050:	3802      	subs	r0, #2
 8001052:	e742      	b.n	8000eda <__udivmoddi4+0x156>

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <is_instant_command>:
int total_instant_commands = sizeof(Instant_G_codes)/sizeof(char *);

int total_commands = sizeof(G_codes)/sizeof(char *);


int is_instant_command(char *tokens[]){
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

	for(int val=0;val < total_instant_commands;val++){
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	e014      	b.n	8001090 <is_instant_command+0x38>

		if(strcmp(tokens[0],Instant_G_codes[val]) == 0 )
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	490e      	ldr	r1, [pc, #56]	; (80010a4 <is_instant_command+0x4c>)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001072:	4619      	mov	r1, r3
 8001074:	4610      	mov	r0, r2
 8001076:	f7ff f8cb 	bl	8000210 <strcmp>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d104      	bne.n	800108a <is_instant_command+0x32>
		{
			send_json_data(&Driv_status);
 8001080:	4809      	ldr	r0, [pc, #36]	; (80010a8 <is_instant_command+0x50>)
 8001082:	f000 f95d 	bl	8001340 <send_json_data>
			return 1;
 8001086:	2301      	movs	r3, #1
 8001088:	e008      	b.n	800109c <is_instant_command+0x44>
	for(int val=0;val < total_instant_commands;val++){
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3301      	adds	r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <is_instant_command+0x54>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	429a      	cmp	r2, r3
 8001098:	dbe5      	blt.n	8001066 <is_instant_command+0xe>
		}
	}

	return 0;
 800109a:	2300      	movs	r3, #0

}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000018 	.word	0x20000018
 80010a8:	2000026c 	.word	0x2000026c
 80010ac:	2000001c 	.word	0x2000001c

080010b0 <is_command_valid>:

int is_command_valid(char* command){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

	char* Temp_Buffer = (char *) malloc(strlen(command)+1);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff f8b3 	bl	8000224 <strlen>
 80010be:	4603      	mov	r3, r0
 80010c0:	3301      	adds	r3, #1
 80010c2:	4618      	mov	r0, r3
 80010c4:	f005 fa38 	bl	8006538 <malloc>
 80010c8:	4603      	mov	r3, r0
 80010ca:	61bb      	str	r3, [r7, #24]

	strcpy(Temp_Buffer,command);
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	69b8      	ldr	r0, [r7, #24]
 80010d0:	f006 f861 	bl	8007196 <strcpy>

	int MAX_TOKENS = 3;
 80010d4:	2303      	movs	r3, #3
 80010d6:	617b      	str	r3, [r7, #20]
	char *token;
	char *tokens[3] = {0};
 80010d8:	f107 0308 	add.w	r3, r7, #8
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
	int i = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]


	/* Split the string by the delimiter " " */
	token = strtok((char *)Temp_Buffer, " ");
 80010e8:	4926      	ldr	r1, [pc, #152]	; (8001184 <is_command_valid+0xd4>)
 80010ea:	69b8      	ldr	r0, [r7, #24]
 80010ec:	f006 fe8a 	bl	8007e04 <strtok>
 80010f0:	6278      	str	r0, [r7, #36]	; 0x24

	while (token != NULL && i < MAX_TOKENS) {
 80010f2:	e00e      	b.n	8001112 <is_command_valid+0x62>
		tokens[i] = token;
 80010f4:	6a3b      	ldr	r3, [r7, #32]
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	3328      	adds	r3, #40	; 0x28
 80010fa:	443b      	add	r3, r7
 80010fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010fe:	f843 2c20 	str.w	r2, [r3, #-32]
		i++;
 8001102:	6a3b      	ldr	r3, [r7, #32]
 8001104:	3301      	adds	r3, #1
 8001106:	623b      	str	r3, [r7, #32]
		token = strtok(NULL, " ");
 8001108:	491e      	ldr	r1, [pc, #120]	; (8001184 <is_command_valid+0xd4>)
 800110a:	2000      	movs	r0, #0
 800110c:	f006 fe7a 	bl	8007e04 <strtok>
 8001110:	6278      	str	r0, [r7, #36]	; 0x24
	while (token != NULL && i < MAX_TOKENS) {
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <is_command_valid+0x70>
 8001118:	6a3a      	ldr	r2, [r7, #32]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	429a      	cmp	r2, r3
 800111e:	dbe9      	blt.n	80010f4 <is_command_valid+0x44>
	}

	if( is_instant_command(tokens)){
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff97 	bl	8001058 <is_instant_command>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d004      	beq.n	800113a <is_command_valid+0x8a>
		/* Skipping enqueue for instant command */
		free(Temp_Buffer);
 8001130:	69b8      	ldr	r0, [r7, #24]
 8001132:	f005 fa09 	bl	8006548 <free>
		return 2;
 8001136:	2302      	movs	r3, #2
 8001138:	e01f      	b.n	800117a <is_command_valid+0xca>
	}

	for(int val=0;val < total_commands;val++){
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	e013      	b.n	8001168 <is_command_valid+0xb8>

		if(strcmp(tokens[0],G_codes[val]) == 0 )
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	4911      	ldr	r1, [pc, #68]	; (8001188 <is_command_valid+0xd8>)
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800114a:	4619      	mov	r1, r3
 800114c:	4610      	mov	r0, r2
 800114e:	f7ff f85f 	bl	8000210 <strcmp>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d104      	bne.n	8001162 <is_command_valid+0xb2>
		{
			free(Temp_Buffer);
 8001158:	69b8      	ldr	r0, [r7, #24]
 800115a:	f005 f9f5 	bl	8006548 <free>
			return 1;
 800115e:	2301      	movs	r3, #1
 8001160:	e00b      	b.n	800117a <is_command_valid+0xca>
	for(int val=0;val < total_commands;val++){
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3301      	adds	r3, #1
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <is_command_valid+0xdc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	429a      	cmp	r2, r3
 8001170:	dbe6      	blt.n	8001140 <is_command_valid+0x90>
		}
	}
	free(Temp_Buffer);
 8001172:	69b8      	ldr	r0, [r7, #24]
 8001174:	f005 f9e8 	bl	8006548 <free>
	return 0;
 8001178:	2300      	movs	r3, #0

//	if(strcmp(tokens[0],"G90") == 0 ){
//	}

}
 800117a:	4618      	mov	r0, r3
 800117c:	3728      	adds	r7, #40	; 0x28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	0800ace0 	.word	0x0800ace0
 8001188:	20000000 	.word	0x20000000
 800118c:	20000020 	.word	0x20000020

08001190 <Setup_Absolute_position>:

void Setup_Absolute_position(char *tokens[] ){
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

	if((*tokens[1]) == 'Z'){
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3304      	adds	r3, #4
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b5a      	cmp	r3, #90	; 0x5a
 80011a2:	d140      	bne.n	8001226 <Setup_Absolute_position+0x96>
	// Z directional motor
//	char *p;
	float steps =strtod(tokens[1]+1,NULL);  // strtol(tokens[1]+1, &p, 10);  //number start from next position of string
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3304      	adds	r3, #4
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3301      	adds	r3, #1
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f006 fe1c 	bl	8007dec <strtod>
 80011b4:	ec53 2b10 	vmov	r2, r3, d0
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fd44 	bl	8000c48 <__aeabi_d2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	617b      	str	r3, [r7, #20]

	/* Z motor Positioning */
	int32_t total_steps = (int32_t) (steps * steps_per_millimeters);
 80011c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800122c <Setup_Absolute_position+0x9c>
 80011cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d4:	ee17 3a90 	vmov	r3, s15
 80011d8:	613b      	str	r3, [r7, #16]
	moveTo(total_steps);
 80011da:	6938      	ldr	r0, [r7, #16]
 80011dc:	f001 f9f8 	bl	80025d0 <moveTo>



	if(*tokens[2] == 'F'){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3308      	adds	r3, #8
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b46      	cmp	r3, #70	; 0x46
 80011ea:	d11b      	bne.n	8001224 <Setup_Absolute_position+0x94>
	/* F speed controller */
	float speed = strtod(tokens[2]+1,NULL);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3308      	adds	r3, #8
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	3301      	adds	r3, #1
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f006 fdf8 	bl	8007dec <strtod>
 80011fc:	ec53 2b10 	vmov	r2, r3, d0
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fd20 	bl	8000c48 <__aeabi_d2f>
 8001208:	4603      	mov	r3, r0
 800120a:	60fb      	str	r3, [r7, #12]
	speed = speed * steps_per_millimeters;
 800120c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001210:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800122c <Setup_Absolute_position+0x9c>
 8001214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001218:	edc7 7a03 	vstr	s15, [r7, #12]
	/*Fan Speed controlling */
	setMaxSpeed(speed);
 800121c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001220:	f001 fc7e 	bl	8002b20 <setMaxSpeed>

	}
	return;
 8001224:	bf00      	nop
	}


}
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	47435000 	.word	0x47435000

08001230 <Setup_Relative_position>:


void Setup_Relative_position(char *tokens[] ){
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

	if((*tokens[1]) == 'Z'){
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3304      	adds	r3, #4
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b5a      	cmp	r3, #90	; 0x5a
 8001242:	d140      	bne.n	80012c6 <Setup_Relative_position+0x96>
	// Z directional motor
//	char *p;
	float steps =strtod(tokens[1]+1,NULL);  // strtol(tokens[1]+1, &p, 10);  //number start from next position of string
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3304      	adds	r3, #4
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f006 fdcc 	bl	8007dec <strtod>
 8001254:	ec53 2b10 	vmov	r2, r3, d0
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fcf4 	bl	8000c48 <__aeabi_d2f>
 8001260:	4603      	mov	r3, r0
 8001262:	617b      	str	r3, [r7, #20]

	/* Z motor Positioning */
	int32_t total_steps = (int32_t) (steps * steps_per_millimeters);
 8001264:	edd7 7a05 	vldr	s15, [r7, #20]
 8001268:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80012d0 <Setup_Relative_position+0xa0>
 800126c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001270:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001274:	ee17 3a90 	vmov	r3, s15
 8001278:	613b      	str	r3, [r7, #16]
	move(total_steps);
 800127a:	6938      	ldr	r0, [r7, #16]
 800127c:	f001 f9d0 	bl	8002620 <move>

	if(*tokens[2] == 'F'){
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3308      	adds	r3, #8
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b46      	cmp	r3, #70	; 0x46
 800128a:	d11c      	bne.n	80012c6 <Setup_Relative_position+0x96>
	/* F speed controller */
	float speed = strtod(tokens[2]+1,NULL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3308      	adds	r3, #8
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f006 fda8 	bl	8007dec <strtod>
 800129c:	ec53 2b10 	vmov	r2, r3, d0
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f7ff fcd0 	bl	8000c48 <__aeabi_d2f>
 80012a8:	4603      	mov	r3, r0
 80012aa:	60fb      	str	r3, [r7, #12]
	speed = speed * steps_per_millimeters;
 80012ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80012d0 <Setup_Relative_position+0xa0>
 80012b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b8:	edc7 7a03 	vstr	s15, [r7, #12]

	/*Fan Speed controlling */
	setMaxSpeed(speed);
 80012bc:	ed97 0a03 	vldr	s0, [r7, #12]
 80012c0:	f001 fc2e 	bl	8002b20 <setMaxSpeed>

	}
}
	return;
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
}
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	47435000 	.word	0x47435000

080012d4 <Homing_motor>:

void Homing_motor(char *tokens[] ){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	setMaxSpeed(2*HOME_SPEED); //MOVING IN ccw
 80012dc:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001308 <Homing_motor+0x34>
 80012e0:	f001 fc1e 	bl	8002b20 <setMaxSpeed>
	setSpeed(-1*HOME_SPEED); //MOVING IN ccw
 80012e4:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800130c <Homing_motor+0x38>
 80012e8:	f001 fcfe 	bl	8002ce8 <setSpeed>

	while(!HOMED){
 80012ec:	e001      	b.n	80012f2 <Homing_motor+0x1e>
	runSpeed();
 80012ee:	f001 fa45 	bl	800277c <runSpeed>
	while(!HOMED){
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <Homing_motor+0x3c>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f8      	beq.n	80012ee <Homing_motor+0x1a>
	}
	Homing_completion();
 80012fc:	f000 f80a 	bl	8001314 <Homing_completion>
	return;
 8001300:	bf00      	nop
}
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	47c35000 	.word	0x47c35000
 800130c:	c7435000 	.word	0xc7435000
 8001310:	200009c9 	.word	0x200009c9

08001314 <Homing_completion>:

void Homing_completion(void){
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	stop();
 8001318:	f001 fdf8 	bl	8002f0c <stop>
	//resetting position parameters
	setCurrentPosition(0);
 800131c:	2000      	movs	r0, #0
 800131e:	f001 fa83 	bl	8002828 <setCurrentPosition>
	//Resetting the encoder value to zero
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8001322:	4b03      	ldr	r3, [pc, #12]	; (8001330 <Homing_completion+0x1c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	; 0x24
	return;
 800132a:	bf00      	nop
}
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000358 	.word	0x20000358

08001334 <Run_Motor>:

void Run_Motor(void){
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	runToPosition();
 8001338:	f001 fddc 	bl	8002ef4 <runToPosition>
	return;
 800133c:	bf00      	nop
}
 800133e:	bd80      	pop	{r7, pc}

08001340 <send_json_data>:

void send_json_data(Driver_status* status){
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b0a1      	sub	sp, #132	; 0x84
 8001344:	af04      	add	r7, sp, #16
 8001346:	6078      	str	r0, [r7, #4]

    char json_string[100] = {0};   // Initialize JSON string buffer
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	2260      	movs	r2, #96	; 0x60
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f005 f919 	bl	800658c <memset>

#if IS_ENCODER_THERE
    status ->encoder_val = __HAL_TIM_GET_COUNTER(&htim2);
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <send_json_data+0x8c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]
#else
    status ->encoder_val = (uint32_t)-100;
#endif

    status -> Motpos = (float) currentPosition()/steps_per_millimeters;
 8001364:	f001 fa54 	bl	8002810 <currentPosition>
 8001368:	ee07 0a90 	vmov	s15, r0
 800136c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001370:	eddf 6a17 	vldr	s13, [pc, #92]	; 80013d0 <send_json_data+0x90>
 8001374:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	edc3 7a01 	vstr	s15, [r3, #4]

    // Create JSON string
    sprintf(json_string, "{\"STATUS\":%d,\"MOTPOS\":%0.2f,\"ENCVAL\":%lu}\r\n", status->mot_status,status->Motpos,status->encoder_val);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	461c      	mov	r4, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f90d 	bl	80005a8 <__aeabi_f2d>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	6889      	ldr	r1, [r1, #8]
 8001396:	f107 000c 	add.w	r0, r7, #12
 800139a:	9102      	str	r1, [sp, #8]
 800139c:	e9cd 2300 	strd	r2, r3, [sp]
 80013a0:	4622      	mov	r2, r4
 80013a2:	490c      	ldr	r1, [pc, #48]	; (80013d4 <send_json_data+0x94>)
 80013a4:	f005 feca 	bl	800713c <siprintf>

    // Send JSON string over UART
    HAL_UART_Transmit(&huart2, (uint8_t*)json_string, strlen(json_string), HAL_MAX_DELAY);
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7fe ff39 	bl	8000224 <strlen>
 80013b2:	4603      	mov	r3, r0
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	f107 010c 	add.w	r1, r7, #12
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	4806      	ldr	r0, [pc, #24]	; (80013d8 <send_json_data+0x98>)
 80013c0:	f004 f80d 	bl	80053de <HAL_UART_Transmit>

}
 80013c4:	bf00      	nop
 80013c6:	3774      	adds	r7, #116	; 0x74
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd90      	pop	{r4, r7, pc}
 80013cc:	20000358 	.word	0x20000358
 80013d0:	47435000 	.word	0x47435000
 80013d4:	0800ace4 	.word	0x0800ace4
 80013d8:	20000430 	.word	0x20000430

080013dc <dectoint>:
 * Convert binary values contaning arry to decimal values
 * Params:
 * y_1 =
 */
void dectoint(char *y_1, char *y_2)
{
 80013dc:	b5b0      	push	{r4, r5, r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
	*y_1 = ((arr1[0]*pow(2,7))+(arr1[1]*pow(2,6))+(arr1[2]*pow(2,5))+(arr1[3]*pow(2,4))+(arr1[4]*pow(2,3))+(arr1[5]*pow(2,2))+(arr1[6]*pow(2,1))+(arr1[7]*pow(2,0)));
 80013e6:	4b9c      	ldr	r3, [pc, #624]	; (8001658 <dectoint+0x27c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f8ca 	bl	8000584 <__aeabi_i2d>
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	4b99      	ldr	r3, [pc, #612]	; (800165c <dectoint+0x280>)
 80013f6:	f7ff f92f 	bl	8000658 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4614      	mov	r4, r2
 8001400:	461d      	mov	r5, r3
 8001402:	4b95      	ldr	r3, [pc, #596]	; (8001658 <dectoint+0x27c>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f8bc 	bl	8000584 <__aeabi_i2d>
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b93      	ldr	r3, [pc, #588]	; (8001660 <dectoint+0x284>)
 8001412:	f7ff f921 	bl	8000658 <__aeabi_dmul>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4620      	mov	r0, r4
 800141c:	4629      	mov	r1, r5
 800141e:	f7fe ff65 	bl	80002ec <__adddf3>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4614      	mov	r4, r2
 8001428:	461d      	mov	r5, r3
 800142a:	4b8b      	ldr	r3, [pc, #556]	; (8001658 <dectoint+0x27c>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f8a8 	bl	8000584 <__aeabi_i2d>
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	4b8a      	ldr	r3, [pc, #552]	; (8001664 <dectoint+0x288>)
 800143a:	f7ff f90d 	bl	8000658 <__aeabi_dmul>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4620      	mov	r0, r4
 8001444:	4629      	mov	r1, r5
 8001446:	f7fe ff51 	bl	80002ec <__adddf3>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4614      	mov	r4, r2
 8001450:	461d      	mov	r5, r3
 8001452:	4b81      	ldr	r3, [pc, #516]	; (8001658 <dectoint+0x27c>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f894 	bl	8000584 <__aeabi_i2d>
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b81      	ldr	r3, [pc, #516]	; (8001668 <dectoint+0x28c>)
 8001462:	f7ff f8f9 	bl	8000658 <__aeabi_dmul>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4620      	mov	r0, r4
 800146c:	4629      	mov	r1, r5
 800146e:	f7fe ff3d 	bl	80002ec <__adddf3>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4614      	mov	r4, r2
 8001478:	461d      	mov	r5, r3
 800147a:	4b77      	ldr	r3, [pc, #476]	; (8001658 <dectoint+0x27c>)
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f880 	bl	8000584 <__aeabi_i2d>
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	4b78      	ldr	r3, [pc, #480]	; (800166c <dectoint+0x290>)
 800148a:	f7ff f8e5 	bl	8000658 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4620      	mov	r0, r4
 8001494:	4629      	mov	r1, r5
 8001496:	f7fe ff29 	bl	80002ec <__adddf3>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4614      	mov	r4, r2
 80014a0:	461d      	mov	r5, r3
 80014a2:	4b6d      	ldr	r3, [pc, #436]	; (8001658 <dectoint+0x27c>)
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f86c 	bl	8000584 <__aeabi_i2d>
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	4b6f      	ldr	r3, [pc, #444]	; (8001670 <dectoint+0x294>)
 80014b2:	f7ff f8d1 	bl	8000658 <__aeabi_dmul>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4620      	mov	r0, r4
 80014bc:	4629      	mov	r1, r5
 80014be:	f7fe ff15 	bl	80002ec <__adddf3>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4614      	mov	r4, r2
 80014c8:	461d      	mov	r5, r3
 80014ca:	4b63      	ldr	r3, [pc, #396]	; (8001658 <dectoint+0x27c>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff f858 	bl	8000584 <__aeabi_i2d>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	f7fe ff08 	bl	80002ec <__adddf3>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4620      	mov	r0, r4
 80014e2:	4629      	mov	r1, r5
 80014e4:	f7fe ff02 	bl	80002ec <__adddf3>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4614      	mov	r4, r2
 80014ee:	461d      	mov	r5, r3
 80014f0:	4b59      	ldr	r3, [pc, #356]	; (8001658 <dectoint+0x27c>)
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f845 	bl	8000584 <__aeabi_i2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4620      	mov	r0, r4
 8001500:	4629      	mov	r1, r5
 8001502:	f7fe fef3 	bl	80002ec <__adddf3>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff fb7b 	bl	8000c08 <__aeabi_d2uiz>
 8001512:	4603      	mov	r3, r0
 8001514:	b2da      	uxtb	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	701a      	strb	r2, [r3, #0]

	*y_2 = ((arr2[0]*pow(2,7))+(arr2[1]*pow(2,6))+(arr2[2]*pow(2,5))+(arr2[3]*pow(2,4))+(arr2[4]*pow(2,3))+(arr2[5]*pow(2,2))+(arr2[6]*pow(2,1))+(arr2[7]*pow(2,0)));
 800151a:	4b56      	ldr	r3, [pc, #344]	; (8001674 <dectoint+0x298>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f830 	bl	8000584 <__aeabi_i2d>
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b4c      	ldr	r3, [pc, #304]	; (800165c <dectoint+0x280>)
 800152a:	f7ff f895 	bl	8000658 <__aeabi_dmul>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4614      	mov	r4, r2
 8001534:	461d      	mov	r5, r3
 8001536:	4b4f      	ldr	r3, [pc, #316]	; (8001674 <dectoint+0x298>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f822 	bl	8000584 <__aeabi_i2d>
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	4b46      	ldr	r3, [pc, #280]	; (8001660 <dectoint+0x284>)
 8001546:	f7ff f887 	bl	8000658 <__aeabi_dmul>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4620      	mov	r0, r4
 8001550:	4629      	mov	r1, r5
 8001552:	f7fe fecb 	bl	80002ec <__adddf3>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4614      	mov	r4, r2
 800155c:	461d      	mov	r5, r3
 800155e:	4b45      	ldr	r3, [pc, #276]	; (8001674 <dectoint+0x298>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff f80e 	bl	8000584 <__aeabi_i2d>
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <dectoint+0x288>)
 800156e:	f7ff f873 	bl	8000658 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4620      	mov	r0, r4
 8001578:	4629      	mov	r1, r5
 800157a:	f7fe feb7 	bl	80002ec <__adddf3>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4614      	mov	r4, r2
 8001584:	461d      	mov	r5, r3
 8001586:	4b3b      	ldr	r3, [pc, #236]	; (8001674 <dectoint+0x298>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe fffa 	bl	8000584 <__aeabi_i2d>
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4b34      	ldr	r3, [pc, #208]	; (8001668 <dectoint+0x28c>)
 8001596:	f7ff f85f 	bl	8000658 <__aeabi_dmul>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4620      	mov	r0, r4
 80015a0:	4629      	mov	r1, r5
 80015a2:	f7fe fea3 	bl	80002ec <__adddf3>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4614      	mov	r4, r2
 80015ac:	461d      	mov	r5, r3
 80015ae:	4b31      	ldr	r3, [pc, #196]	; (8001674 <dectoint+0x298>)
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffe6 	bl	8000584 <__aeabi_i2d>
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <dectoint+0x290>)
 80015be:	f7ff f84b 	bl	8000658 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4620      	mov	r0, r4
 80015c8:	4629      	mov	r1, r5
 80015ca:	f7fe fe8f 	bl	80002ec <__adddf3>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4614      	mov	r4, r2
 80015d4:	461d      	mov	r5, r3
 80015d6:	4b27      	ldr	r3, [pc, #156]	; (8001674 <dectoint+0x298>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ffd2 	bl	8000584 <__aeabi_i2d>
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	4b22      	ldr	r3, [pc, #136]	; (8001670 <dectoint+0x294>)
 80015e6:	f7ff f837 	bl	8000658 <__aeabi_dmul>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4620      	mov	r0, r4
 80015f0:	4629      	mov	r1, r5
 80015f2:	f7fe fe7b 	bl	80002ec <__adddf3>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4614      	mov	r4, r2
 80015fc:	461d      	mov	r5, r3
 80015fe:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <dectoint+0x298>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ffbe 	bl	8000584 <__aeabi_i2d>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	f7fe fe6e 	bl	80002ec <__adddf3>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4620      	mov	r0, r4
 8001616:	4629      	mov	r1, r5
 8001618:	f7fe fe68 	bl	80002ec <__adddf3>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4614      	mov	r4, r2
 8001622:	461d      	mov	r5, r3
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <dectoint+0x298>)
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ffab 	bl	8000584 <__aeabi_i2d>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4620      	mov	r0, r4
 8001634:	4629      	mov	r1, r5
 8001636:	f7fe fe59 	bl	80002ec <__adddf3>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff fae1 	bl	8000c08 <__aeabi_d2uiz>
 8001646:	4603      	mov	r3, r0
 8001648:	b2da      	uxtb	r2, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	701a      	strb	r2, [r3, #0]

}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bdb0      	pop	{r4, r5, r7, pc}
 8001656:	bf00      	nop
 8001658:	200002b8 	.word	0x200002b8
 800165c:	40600000 	.word	0x40600000
 8001660:	40500000 	.word	0x40500000
 8001664:	40400000 	.word	0x40400000
 8001668:	40300000 	.word	0x40300000
 800166c:	40200000 	.word	0x40200000
 8001670:	40100000 	.word	0x40100000
 8001674:	200002d8 	.word	0x200002d8

08001678 <split>:
 * y1 = empty char which going to carry left most 8 bits equivalent decimal value after the function execution.
 * y2 = empty char which going to carry right most 8 bits equivalent decimal value after the function execution.
 */

void split(char *y1, char *y2)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
	int k=0;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
	int l=0;
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
	for(int i = 0; i<16; i++)
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	e025      	b.n	80016dc <split+0x64>
	{
		if(i>=0 && i<=7)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0e      	blt.n	80016b4 <split+0x3c>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b07      	cmp	r3, #7
 800169a:	dc0b      	bgt.n	80016b4 <split+0x3c>
		{

			arr1[k] = arr[i];
 800169c:	4a15      	ldr	r2, [pc, #84]	; (80016f4 <split+0x7c>)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016a4:	4914      	ldr	r1, [pc, #80]	; (80016f8 <split+0x80>)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			k++;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3301      	adds	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	e010      	b.n	80016d6 <split+0x5e>
		}

		else if(i>=8 && i <=15)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b07      	cmp	r3, #7
 80016b8:	dd0d      	ble.n	80016d6 <split+0x5e>
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2b0f      	cmp	r3, #15
 80016be:	dc0a      	bgt.n	80016d6 <split+0x5e>
		{

			arr2[l] = arr[i];
 80016c0:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <split+0x7c>)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016c8:	490c      	ldr	r1, [pc, #48]	; (80016fc <split+0x84>)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			l++;
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	3301      	adds	r3, #1
 80016d4:	613b      	str	r3, [r7, #16]
	for(int i = 0; i<16; i++)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3301      	adds	r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b0f      	cmp	r3, #15
 80016e0:	ddd6      	ble.n	8001690 <split+0x18>
		}
	}
	dectoint(y1,y2);// stores the equivalent decimal of binary number in arr1 and arr2 into y1 and y2
 80016e2:	6839      	ldr	r1, [r7, #0]
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fe79 	bl	80013dc <dectoint>
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000278 	.word	0x20000278
 80016f8:	200002b8 	.word	0x200002b8
 80016fc:	200002d8 	.word	0x200002d8

08001700 <dectobin>:
 * y1 = stores the left most 8 bits in decimal form from 16bit binary number
 * y2 = stores the right most 8 bits in decimal form from 16bit binary number
 *
 */
void dectobin(int y, char *y1, char *y2)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b098      	sub	sp, #96	; 0x60
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
	int i = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	65fb      	str	r3, [r7, #92]	; 0x5c
	int j = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	65bb      	str	r3, [r7, #88]	; 0x58

	int binaryNum[16]={0};
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	2240      	movs	r2, #64	; 0x40
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f004 ff35 	bl	800658c <memset>
	while( y > 0)
 8001722:	e014      	b.n	800174e <dectobin+0x4e>
	{
		binaryNum[i] = y % 2;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	bfb8      	it	lt
 800172e:	425b      	neglt	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	3360      	adds	r3, #96	; 0x60
 8001738:	443b      	add	r3, r7
 800173a:	f843 2c4c 	str.w	r2, [r3, #-76]
		y = y/2;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	0fda      	lsrs	r2, r3, #31
 8001742:	4413      	add	r3, r2
 8001744:	105b      	asrs	r3, r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
		i++;
 8001748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800174a:	3301      	adds	r3, #1
 800174c:	65fb      	str	r3, [r7, #92]	; 0x5c
	while( y > 0)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	dce7      	bgt.n	8001724 <dectobin+0x24>
	}

	int k=0;
 8001754:	2300      	movs	r3, #0
 8001756:	657b      	str	r3, [r7, #84]	; 0x54
	for(j= 15; j >= 0; j--)
 8001758:	230f      	movs	r3, #15
 800175a:	65bb      	str	r3, [r7, #88]	; 0x58
 800175c:	e00f      	b.n	800177e <dectobin+0x7e>
	{
		arr[k] = binaryNum[j];
 800175e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	3360      	adds	r3, #96	; 0x60
 8001764:	443b      	add	r3, r7
 8001766:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 800176a:	490a      	ldr	r1, [pc, #40]	; (8001794 <dectobin+0x94>)
 800176c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		k++;
 8001772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001774:	3301      	adds	r3, #1
 8001776:	657b      	str	r3, [r7, #84]	; 0x54
	for(j= 15; j >= 0; j--)
 8001778:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800177a:	3b01      	subs	r3, #1
 800177c:	65bb      	str	r3, [r7, #88]	; 0x58
 800177e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001780:	2b00      	cmp	r3, #0
 8001782:	daec      	bge.n	800175e <dectobin+0x5e>
	}
	split(y1,y2);
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	68b8      	ldr	r0, [r7, #8]
 8001788:	f7ff ff76 	bl	8001678 <split>
}
 800178c:	bf00      	nop
 800178e:	3760      	adds	r7, #96	; 0x60
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000278 	.word	0x20000278

08001798 <HOMING_Command>:
 */

#include "UART_helper.h"


void HOMING_Command(char *tokens[]){
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	if(strcmp(tokens[0],"HOME") == 0){
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4914      	ldr	r1, [pc, #80]	; (80017f8 <HOMING_Command+0x60>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fd32 	bl	8000210 <strcmp>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d11e      	bne.n	80017f0 <HOMING_Command+0x58>

		//enabling IRQ for Endstop button
		HAL_NVIC_EnableIRQ(Z_END_STOP_EXTI_IRQn);
 80017b2:	2017      	movs	r0, #23
 80017b4:	f002 f841 	bl	800383a <HAL_NVIC_EnableIRQ>
		HOMED = false;
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <HOMING_Command+0x64>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]

		//homing
		Homing_motor(tokens);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fd88 	bl	80012d4 <Homing_motor>

		//resetting the parameters
		Homing_completion();
 80017c4:	f7ff fda6 	bl	8001314 <Homing_completion>

		//Sending completion status
		memset(sending_data,0,sizeof(sending_data));
 80017c8:	2232      	movs	r2, #50	; 0x32
 80017ca:	2100      	movs	r1, #0
 80017cc:	480c      	ldr	r0, [pc, #48]	; (8001800 <HOMING_Command+0x68>)
 80017ce:	f004 fedd 	bl	800658c <memset>
		sprintf(sending_data,"Homed \n");
 80017d2:	490c      	ldr	r1, [pc, #48]	; (8001804 <HOMING_Command+0x6c>)
 80017d4:	480a      	ldr	r0, [pc, #40]	; (8001800 <HOMING_Command+0x68>)
 80017d6:	f005 fcb1 	bl	800713c <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 80017da:	4809      	ldr	r0, [pc, #36]	; (8001800 <HOMING_Command+0x68>)
 80017dc:	f7fe fd22 	bl	8000224 <strlen>
 80017e0:	4603      	mov	r3, r0
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
 80017e8:	4905      	ldr	r1, [pc, #20]	; (8001800 <HOMING_Command+0x68>)
 80017ea:	4807      	ldr	r0, [pc, #28]	; (8001808 <HOMING_Command+0x70>)
 80017ec:	f003 fdf7 	bl	80053de <HAL_UART_Transmit>

		}

}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	0800ad10 	.word	0x0800ad10
 80017fc:	200009c9 	.word	0x200009c9
 8001800:	20000030 	.word	0x20000030
 8001804:	0800ad18 	.word	0x0800ad18
 8001808:	20000430 	.word	0x20000430

0800180c <UART_Command>:
//Need to be update
 char*  Split_command(){
	 return NULL;
}

void UART_Command(char *tokens[]){
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

		if(strcmp(tokens[0],"G90") == 0 ){
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4948      	ldr	r1, [pc, #288]	; (800193c <UART_Command+0x130>)
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fcf8 	bl	8000210 <strcmp>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d105      	bne.n	8001832 <UART_Command+0x26>
		//Absolute positioning
		Setup_Absolute_position(tokens);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fcb2 	bl	8001190 <Setup_Absolute_position>

		//Run the Motors
		Run_Motor();
 800182c:	f7ff fd82 	bl	8001334 <Run_Motor>


		}


}
 8001830:	e080      	b.n	8001934 <UART_Command+0x128>
		else if(strcmp(tokens[0],"G91") == 0){
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4942      	ldr	r1, [pc, #264]	; (8001940 <UART_Command+0x134>)
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fce9 	bl	8000210 <strcmp>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d105      	bne.n	8001850 <UART_Command+0x44>
		Setup_Relative_position(tokens);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff fcf3 	bl	8001230 <Setup_Relative_position>
		Run_Motor();
 800184a:	f7ff fd73 	bl	8001334 <Run_Motor>
}
 800184e:	e071      	b.n	8001934 <UART_Command+0x128>
		else if(strcmp(tokens[0],"HOME") == 0){
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	493b      	ldr	r1, [pc, #236]	; (8001944 <UART_Command+0x138>)
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fcda 	bl	8000210 <strcmp>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10b      	bne.n	800187a <UART_Command+0x6e>
		HAL_NVIC_EnableIRQ(Z_END_STOP_EXTI_IRQn);
 8001862:	2017      	movs	r0, #23
 8001864:	f001 ffe9 	bl	800383a <HAL_NVIC_EnableIRQ>
		HOMED = false;
 8001868:	4b37      	ldr	r3, [pc, #220]	; (8001948 <UART_Command+0x13c>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
		Homing_motor(tokens);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fd30 	bl	80012d4 <Homing_motor>
		Homing_completion();
 8001874:	f7ff fd4e 	bl	8001314 <Homing_completion>
}
 8001878:	e05c      	b.n	8001934 <UART_Command+0x128>
		else if(strcmp(tokens[0],"MOTPOS") == 0){
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4933      	ldr	r1, [pc, #204]	; (800194c <UART_Command+0x140>)
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fcc5 	bl	8000210 <strcmp>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d124      	bne.n	80018d6 <UART_Command+0xca>
			memset(sending_data,0,sizeof(sending_data));
 800188c:	2232      	movs	r2, #50	; 0x32
 800188e:	2100      	movs	r1, #0
 8001890:	482f      	ldr	r0, [pc, #188]	; (8001950 <UART_Command+0x144>)
 8001892:	f004 fe7b 	bl	800658c <memset>
			sprintf(sending_data,"%0.2f\n",(float) currentPosition()/steps_per_millimeters );
 8001896:	f000 ffbb 	bl	8002810 <currentPosition>
 800189a:	ee07 0a90 	vmov	s15, r0
 800189e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001954 <UART_Command+0x148>
 80018a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018aa:	ee16 0a90 	vmov	r0, s13
 80018ae:	f7fe fe7b 	bl	80005a8 <__aeabi_f2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4928      	ldr	r1, [pc, #160]	; (8001958 <UART_Command+0x14c>)
 80018b8:	4825      	ldr	r0, [pc, #148]	; (8001950 <UART_Command+0x144>)
 80018ba:	f005 fc3f 	bl	800713c <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 80018be:	4824      	ldr	r0, [pc, #144]	; (8001950 <UART_Command+0x144>)
 80018c0:	f7fe fcb0 	bl	8000224 <strlen>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
 80018cc:	4920      	ldr	r1, [pc, #128]	; (8001950 <UART_Command+0x144>)
 80018ce:	4823      	ldr	r0, [pc, #140]	; (800195c <UART_Command+0x150>)
 80018d0:	f003 fd85 	bl	80053de <HAL_UART_Transmit>
}
 80018d4:	e02e      	b.n	8001934 <UART_Command+0x128>
		else if(strcmp(tokens[0],"ENCZERO") == 0){
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4921      	ldr	r1, [pc, #132]	; (8001960 <UART_Command+0x154>)
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fc97 	bl	8000210 <strcmp>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d104      	bne.n	80018f2 <UART_Command+0xe6>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 80018e8:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <UART_Command+0x158>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2200      	movs	r2, #0
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24
}
 80018f0:	e020      	b.n	8001934 <UART_Command+0x128>
		else if(strcmp(tokens[0],"ENCVAL") == 0){
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	491c      	ldr	r1, [pc, #112]	; (8001968 <UART_Command+0x15c>)
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fc89 	bl	8000210 <strcmp>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d117      	bne.n	8001934 <UART_Command+0x128>
			memset(sending_data,0,sizeof(sending_data));
 8001904:	2232      	movs	r2, #50	; 0x32
 8001906:	2100      	movs	r1, #0
 8001908:	4811      	ldr	r0, [pc, #68]	; (8001950 <UART_Command+0x144>)
 800190a:	f004 fe3f 	bl	800658c <memset>
			sprintf(sending_data,"%ld\n",__HAL_TIM_GET_COUNTER(&htim2) );
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <UART_Command+0x158>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	461a      	mov	r2, r3
 8001916:	4915      	ldr	r1, [pc, #84]	; (800196c <UART_Command+0x160>)
 8001918:	480d      	ldr	r0, [pc, #52]	; (8001950 <UART_Command+0x144>)
 800191a:	f005 fc0f 	bl	800713c <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 800191e:	480c      	ldr	r0, [pc, #48]	; (8001950 <UART_Command+0x144>)
 8001920:	f7fe fc80 	bl	8000224 <strlen>
 8001924:	4603      	mov	r3, r0
 8001926:	b29a      	uxth	r2, r3
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
 800192c:	4908      	ldr	r1, [pc, #32]	; (8001950 <UART_Command+0x144>)
 800192e:	480b      	ldr	r0, [pc, #44]	; (800195c <UART_Command+0x150>)
 8001930:	f003 fd55 	bl	80053de <HAL_UART_Transmit>
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	0800ad20 	.word	0x0800ad20
 8001940:	0800ad24 	.word	0x0800ad24
 8001944:	0800ad10 	.word	0x0800ad10
 8001948:	200009c9 	.word	0x200009c9
 800194c:	0800ad28 	.word	0x0800ad28
 8001950:	20000030 	.word	0x20000030
 8001954:	47435000 	.word	0x47435000
 8001958:	0800ad30 	.word	0x0800ad30
 800195c:	20000430 	.word	0x20000430
 8001960:	0800ad38 	.word	0x0800ad38
 8001964:	20000358 	.word	0x20000358
 8001968:	0800ad40 	.word	0x0800ad40
 800196c:	0800ad48 	.word	0x0800ad48

08001970 <initQueue>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "circular_queue.h"

void initQueue(volatile CircularQueue* q) {
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

    q->front = -1;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f04f 32ff 	mov.w	r2, #4294967295
 800197e:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
    q->rear = -1;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f04f 32ff 	mov.w	r2, #4294967295
 8001988:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4

}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <isFull>:


int isFull(volatile CircularQueue* q) {
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
    return ((q->rear + 1) % MAX_QUEUE_SIZE == q->front);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <isFull+0x44>)
 80019aa:	fb83 1302 	smull	r1, r3, r3, r2
 80019ae:	4413      	add	r3, r2
 80019b0:	1119      	asrs	r1, r3, #4
 80019b2:	17d3      	asrs	r3, r2, #31
 80019b4:	1ac9      	subs	r1, r1, r3
 80019b6:	460b      	mov	r3, r1
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	1a5b      	subs	r3, r3, r1
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	1ad1      	subs	r1, r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 80019c6:	4299      	cmp	r1, r3
 80019c8:	bf0c      	ite	eq
 80019ca:	2301      	moveq	r3, #1
 80019cc:	2300      	movne	r3, #0
 80019ce:	b2db      	uxtb	r3, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	88888889 	.word	0x88888889

080019e0 <isEmpty>:

int isEmpty(volatile CircularQueue* q) {
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
    return (q->front == -1);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 80019ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <enqueue>:

void enqueue(volatile CircularQueue* q, const char* item) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
    if (isFull(q)) {
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffc0 	bl	8001998 <isFull>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <enqueue+0x1e>
        printf("Queue is full\n");
 8001a1e:	4818      	ldr	r0, [pc, #96]	; (8001a80 <enqueue+0x78>)
 8001a20:	f005 fb74 	bl	800710c <puts>
        return;
 8001a24:	e029      	b.n	8001a7a <enqueue+0x72>
    }
    if (isEmpty(q)) {
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffda 	bl	80019e0 <isEmpty>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <enqueue+0x32>
        q->front = 0;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
    }
    q->rear = (q->rear + 1) % MAX_QUEUE_SIZE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <enqueue+0x7c>)
 8001a44:	fb83 1302 	smull	r1, r3, r3, r2
 8001a48:	4413      	add	r3, r2
 8001a4a:	1119      	asrs	r1, r3, #4
 8001a4c:	17d3      	asrs	r3, r2, #31
 8001a4e:	1ac9      	subs	r1, r1, r3
 8001a50:	460b      	mov	r3, r1
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	1a5b      	subs	r3, r3, r1
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	1ad1      	subs	r1, r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f8c3 14b4 	str.w	r1, [r3, #1204]	; 0x4b4
    strcpy(q->items[q->rear], item);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	; 0x4b4
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	6839      	ldr	r1, [r7, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f005 fb8e 	bl	8007196 <strcpy>
}
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	0800ad50 	.word	0x0800ad50
 8001a84:	88888889 	.word	0x88888889

08001a88 <dequeue>:

char * dequeue(volatile CircularQueue* q) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	  char* item = NULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
	if (isEmpty(q)) {
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ffa3 	bl	80019e0 <isEmpty>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <dequeue+0x20>
		printf("Queue is empty.\n");
 8001aa0:	481c      	ldr	r0, [pc, #112]	; (8001b14 <dequeue+0x8c>)
 8001aa2:	f005 fb33 	bl	800710c <puts>
 8001aa6:	e02f      	b.n	8001b08 <dequeue+0x80>
	} else {
		item = q->items[q->front];
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f8d3 24b0 	ldr.w	r2, [r3, #1200]	; 0x4b0
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
		if (q->front == q->rear) {
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f8d3 24b0 	ldr.w	r2, [r3, #1200]	; 0x4b0
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d10a      	bne.n	8001ae2 <dequeue+0x5a>
			q->front = -1;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad2:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
			q->rear = -1;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8001adc:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
 8001ae0:	e012      	b.n	8001b08 <dequeue+0x80>
		} else {
			q->front = (q->front + 1) % MAX_QUEUE_SIZE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <dequeue+0x90>)
 8001aec:	fb83 1302 	smull	r1, r3, r3, r2
 8001af0:	4413      	add	r3, r2
 8001af2:	1119      	asrs	r1, r3, #4
 8001af4:	17d3      	asrs	r3, r2, #31
 8001af6:	1ac9      	subs	r1, r1, r3
 8001af8:	460b      	mov	r3, r1
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	1a5b      	subs	r3, r3, r1
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	1ad1      	subs	r1, r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f8c3 14b0 	str.w	r1, [r3, #1200]	; 0x4b0
		}
	}
	return item;
 8001b08:	68fb      	ldr	r3, [r7, #12]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	0800ad60 	.word	0x0800ad60
 8001b18:	88888889 	.word	0x88888889

08001b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001b22:	f001 fcfd 	bl	8003520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b26:	f000 f8f3 	bl	8001d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b2a:	f000 fa7d 	bl	8002028 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b2e:	f000 fa51 	bl	8001fd4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001b32:	f000 f9e3 	bl	8001efc <MX_TIM6_Init>
  MX_TIM7_Init();
 8001b36:	f000 fa17 	bl	8001f68 <MX_TIM7_Init>
  MX_SPI1_Init();
 8001b3a:	f000 f955 	bl	8001de8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001b3e:	f000 f989 	bl	8001e54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /****************************** Setting up IRQ ***********************/
	HAL_NVIC_DisableIRQ(Z_END_STOP_EXTI_IRQn);
 8001b42:	2017      	movs	r0, #23
 8001b44:	f001 fe87 	bl	8003856 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(Z_reference_EXTI_IRQn);
 8001b48:	2006      	movs	r0, #6
 8001b4a:	f001 fe84 	bl	8003856 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(P_limit_EXTI_IRQn);
 8001b4e:	200a      	movs	r0, #10
 8001b50:	f001 fe81 	bl	8003856 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(Q_limit_EXTI_IRQn);
 8001b54:	2017      	movs	r0, #23
 8001b56:	f001 fe7e 	bl	8003856 <HAL_NVIC_DisableIRQ>


/*********************** LED SPI Intialization *******************/

	//initializing LED values
	dectobin(ch1_br, &ch1_buff1, &ch1_buff2);
 8001b5a:	4b52      	ldr	r3, [pc, #328]	; (8001ca4 <main+0x188>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a52      	ldr	r2, [pc, #328]	; (8001ca8 <main+0x18c>)
 8001b60:	4952      	ldr	r1, [pc, #328]	; (8001cac <main+0x190>)
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fdcc 	bl	8001700 <dectobin>
	dectobin(ch2_br, &ch2_buff1, &ch2_buff2);
 8001b68:	4b51      	ldr	r3, [pc, #324]	; (8001cb0 <main+0x194>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a51      	ldr	r2, [pc, #324]	; (8001cb4 <main+0x198>)
 8001b6e:	4952      	ldr	r1, [pc, #328]	; (8001cb8 <main+0x19c>)
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fdc5 	bl	8001700 <dectobin>
	dectobin(ch3_br, &ch3_buff1, &ch3_buff2);
 8001b76:	4b51      	ldr	r3, [pc, #324]	; (8001cbc <main+0x1a0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a51      	ldr	r2, [pc, #324]	; (8001cc0 <main+0x1a4>)
 8001b7c:	4951      	ldr	r1, [pc, #324]	; (8001cc4 <main+0x1a8>)
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fdbe 	bl	8001700 <dectobin>
	//setting up channel select pin to HIGH
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b8a:	484f      	ldr	r0, [pc, #316]	; (8001cc8 <main+0x1ac>)
 8001b8c:	f002 f8bc 	bl	8003d08 <HAL_GPIO_WritePin>



/************************** UART Initialisation *********************/
	// initiating interrupt for PC data receiving
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)RxBuffer, sizeof(RxBuffer));
 8001b90:	228c      	movs	r2, #140	; 0x8c
 8001b92:	494e      	ldr	r1, [pc, #312]	; (8001ccc <main+0x1b0>)
 8001b94:	484e      	ldr	r0, [pc, #312]	; (8001cd0 <main+0x1b4>)
 8001b96:	f003 fce4 	bl	8005562 <HAL_UARTEx_ReceiveToIdle_IT>



/************************** Encoder Intialization *******************/

	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL); //starting encoder
 8001b9a:	213c      	movs	r1, #60	; 0x3c
 8001b9c:	484d      	ldr	r0, [pc, #308]	; (8001cd4 <main+0x1b8>)
 8001b9e:	f003 f8b3 	bl	8004d08 <HAL_TIM_Encoder_Start>



/*************************** Timer Intializations ****************/

  HAL_TIM_Base_Start(&htim6); //to calculate pulse time
 8001ba2:	484d      	ldr	r0, [pc, #308]	; (8001cd8 <main+0x1bc>)
 8001ba4:	f002 ffa2 	bl	8004aec <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim7); // for microseconds delay
 8001ba8:	484c      	ldr	r0, [pc, #304]	; (8001cdc <main+0x1c0>)
 8001baa:	f002 ff9f 	bl	8004aec <HAL_TIM_Base_Start>


/*********************** Z motor initialization *********************/


	stepper_setup(STEP_GPIO_Port, STEP_Pin, DIR_GPIO_Port, DIR_Pin );
 8001bae:	2301      	movs	r3, #1
 8001bb0:	4a4b      	ldr	r2, [pc, #300]	; (8001ce0 <main+0x1c4>)
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	484a      	ldr	r0, [pc, #296]	; (8001ce0 <main+0x1c4>)
 8001bb6:	f000 fd45 	bl	8002644 <stepper_setup>

	//sample movement
	Total_Steps = (int32_t) ( steps_per_millimeters * targetPos );
 8001bba:	4b4a      	ldr	r3, [pc, #296]	; (8001ce4 <main+0x1c8>)
 8001bbc:	edd3 7a00 	vldr	s15, [r3]
 8001bc0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001ce8 <main+0x1cc>
 8001bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bcc:	ee17 2a90 	vmov	r2, s15
 8001bd0:	4b46      	ldr	r3, [pc, #280]	; (8001cec <main+0x1d0>)
 8001bd2:	601a      	str	r2, [r3, #0]
	setMaxSpeed(10*steps_per_millimeters);
 8001bd4:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8001cf0 <main+0x1d4>
 8001bd8:	f000 ffa2 	bl	8002b20 <setMaxSpeed>
	setAcceleration(Acceleration);
 8001bdc:	4b45      	ldr	r3, [pc, #276]	; (8001cf4 <main+0x1d8>)
 8001bde:	edd3 7a00 	vldr	s15, [r3]
 8001be2:	eeb0 0a67 	vmov.f32	s0, s15
 8001be6:	f000 ffff 	bl	8002be8 <setAcceleration>
	moveTo(Total_Steps);
 8001bea:	4b40      	ldr	r3, [pc, #256]	; (8001cec <main+0x1d0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 fcee 	bl	80025d0 <moveTo>

	//runToPosition(); //moving to desired positions

/************************ Buffer Intialization *************************/
initQueue(&CommandBuffer) ;
 8001bf4:	4840      	ldr	r0, [pc, #256]	; (8001cf8 <main+0x1dc>)
 8001bf6:	f7ff febb 	bl	8001970 <initQueue>

/*********************************************************************/

/**************************** Home Initialization ********************/
HOMED = false;
 8001bfa:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <main+0x1e0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
Home_Pass = 0;
 8001c00:	4b3f      	ldr	r3, [pc, #252]	; (8001d00 <main+0x1e4>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(!isEmpty(&CommandBuffer)){
 8001c06:	483c      	ldr	r0, [pc, #240]	; (8001cf8 <main+0x1dc>)
 8001c08:	f7ff feea 	bl	80019e0 <isEmpty>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d13e      	bne.n	8001c90 <main+0x174>

		Driv_status.mot_status = MOT_BUSY; /* setting busy flag in the driver status */
 8001c12:	4b3c      	ldr	r3, [pc, #240]	; (8001d04 <main+0x1e8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]

		command = dequeue(&CommandBuffer);
 8001c18:	4837      	ldr	r0, [pc, #220]	; (8001cf8 <main+0x1dc>)
 8001c1a:	f7ff ff35 	bl	8001a88 <dequeue>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4a39      	ldr	r2, [pc, #228]	; (8001d08 <main+0x1ec>)
 8001c22:	6013      	str	r3, [r2, #0]
		int MAX_TOKENS = 3;
 8001c24:	2303      	movs	r3, #3
 8001c26:	60fb      	str	r3, [r7, #12]
		char *token;
		char *tokens[3] = {0};
 8001c28:	463b      	mov	r3, r7
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
		int i = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]


		/* Split the string by the delimiter " " */
		token = strtok((char *)command, " ");
 8001c36:	4b34      	ldr	r3, [pc, #208]	; (8001d08 <main+0x1ec>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4934      	ldr	r1, [pc, #208]	; (8001d0c <main+0x1f0>)
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f006 f8e1 	bl	8007e04 <strtok>
 8001c42:	6178      	str	r0, [r7, #20]

		while (token != NULL && i < MAX_TOKENS) {
 8001c44:	e00e      	b.n	8001c64 <main+0x148>
			tokens[i] = token;
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	3318      	adds	r3, #24
 8001c4c:	443b      	add	r3, r7
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	f843 2c18 	str.w	r2, [r3, #-24]
			i++;
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	3301      	adds	r3, #1
 8001c58:	613b      	str	r3, [r7, #16]
			token = strtok(NULL, " ");
 8001c5a:	492c      	ldr	r1, [pc, #176]	; (8001d0c <main+0x1f0>)
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f006 f8d1 	bl	8007e04 <strtok>
 8001c62:	6178      	str	r0, [r7, #20]
		while (token != NULL && i < MAX_TOKENS) {
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <main+0x156>
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	dbe9      	blt.n	8001c46 <main+0x12a>
		}

		if(HOMED){
 8001c72:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <main+0x1e0>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <main+0x16a>

			//Execute the command
			UART_Command(tokens);
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fdc4 	bl	800180c <UART_Command>
 8001c84:	e7bf      	b.n	8001c06 <main+0xea>
		}
		else{
			//check and excute HOME command

			HOMING_Command(tokens);
 8001c86:	463b      	mov	r3, r7
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fd85 	bl	8001798 <HOMING_Command>
 8001c8e:	e7ba      	b.n	8001c06 <main+0xea>

		}
	}

	else{
		Driv_status.mot_status = MOT_IDLE;
 8001c90:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <main+0x1e8>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t*)RxBuffer, sizeof(RxBuffer));
 8001c96:	228c      	movs	r2, #140	; 0x8c
 8001c98:	490c      	ldr	r1, [pc, #48]	; (8001ccc <main+0x1b0>)
 8001c9a:	480d      	ldr	r0, [pc, #52]	; (8001cd0 <main+0x1b4>)
 8001c9c:	f003 fc61 	bl	8005562 <HAL_UARTEx_ReceiveToIdle_IT>
	if(!isEmpty(&CommandBuffer)){
 8001ca0:	e7b1      	b.n	8001c06 <main+0xea>
 8001ca2:	bf00      	nop
 8001ca4:	20000024 	.word	0x20000024
 8001ca8:	200002f9 	.word	0x200002f9
 8001cac:	200002f8 	.word	0x200002f8
 8001cb0:	20000028 	.word	0x20000028
 8001cb4:	200002fb 	.word	0x200002fb
 8001cb8:	200002fa 	.word	0x200002fa
 8001cbc:	2000002c 	.word	0x2000002c
 8001cc0:	200002fd 	.word	0x200002fd
 8001cc4:	200002fc 	.word	0x200002fc
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	20000930 	.word	0x20000930
 8001cd0:	20000430 	.word	0x20000430
 8001cd4:	20000358 	.word	0x20000358
 8001cd8:	200003a0 	.word	0x200003a0
 8001cdc:	200003e8 	.word	0x200003e8
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	20000064 	.word	0x20000064
 8001ce8:	47435000 	.word	0x47435000
 8001cec:	200009c4 	.word	0x200009c4
 8001cf0:	48f42400 	.word	0x48f42400
 8001cf4:	2000006c 	.word	0x2000006c
 8001cf8:	20000474 	.word	0x20000474
 8001cfc:	200009c9 	.word	0x200009c9
 8001d00:	200009c8 	.word	0x200009c8
 8001d04:	2000026c 	.word	0x2000026c
 8001d08:	2000092c 	.word	0x2000092c
 8001d0c:	0800ad90 	.word	0x0800ad90

08001d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b094      	sub	sp, #80	; 0x50
 8001d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	2234      	movs	r2, #52	; 0x34
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f004 fc34 	bl	800658c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d24:	f107 0308 	add.w	r3, r7, #8
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d34:	2300      	movs	r3, #0
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <SystemClock_Config+0xd0>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	4a28      	ldr	r2, [pc, #160]	; (8001de0 <SystemClock_Config+0xd0>)
 8001d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d42:	6413      	str	r3, [r2, #64]	; 0x40
 8001d44:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <SystemClock_Config+0xd0>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d50:	2300      	movs	r3, #0
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <SystemClock_Config+0xd4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a22      	ldr	r2, [pc, #136]	; (8001de4 <SystemClock_Config+0xd4>)
 8001d5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <SystemClock_Config+0xd4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d70:	2301      	movs	r3, #1
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d74:	2310      	movs	r3, #16
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d80:	2308      	movs	r3, #8
 8001d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001d84:	23a0      	movs	r3, #160	; 0xa0
 8001d86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d90:	2302      	movs	r3, #2
 8001d92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f002 fb31 	bl	8004400 <HAL_RCC_OscConfig>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001da4:	f000 fbf4 	bl	8002590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001da8:	230f      	movs	r3, #15
 8001daa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dac:	2302      	movs	r3, #2
 8001dae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001db4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001db8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dbe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dc0:	f107 0308 	add.w	r3, r7, #8
 8001dc4:	2105      	movs	r1, #5
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f001 ffd0 	bl	8003d6c <HAL_RCC_ClockConfig>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001dd2:	f000 fbdd 	bl	8002590 <Error_Handler>
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	3750      	adds	r7, #80	; 0x50
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40007000 	.word	0x40007000

08001de8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <MX_SPI1_Init+0x64>)
 8001dee:	4a18      	ldr	r2, [pc, #96]	; (8001e50 <MX_SPI1_Init+0x68>)
 8001df0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001df2:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <MX_SPI1_Init+0x64>)
 8001df4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001df8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <MX_SPI1_Init+0x64>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <MX_SPI1_Init+0x64>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_SPI1_Init+0x64>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_SPI1_Init+0x64>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_SPI1_Init+0x64>)
 8001e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_SPI1_Init+0x64>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <MX_SPI1_Init+0x64>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_SPI1_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <MX_SPI1_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_SPI1_Init+0x64>)
 8001e34:	220a      	movs	r2, #10
 8001e36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <MX_SPI1_Init+0x64>)
 8001e3a:	f002 fd7f 	bl	800493c <HAL_SPI_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e44:	f000 fba4 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000300 	.word	0x20000300
 8001e50:	40013000 	.word	0x40013000

08001e54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08c      	sub	sp, #48	; 0x30
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	2224      	movs	r2, #36	; 0x24
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f004 fb92 	bl	800658c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e70:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <MX_TIM2_Init+0xa4>)
 8001e72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e78:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <MX_TIM2_Init+0xa4>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <MX_TIM2_Init+0xa4>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e84:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <MX_TIM2_Init+0xa4>)
 8001e86:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <MX_TIM2_Init+0xa4>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e92:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <MX_TIM2_Init+0xa4>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001eac:	2300      	movs	r3, #0
 8001eae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ebc:	f107 030c 	add.w	r3, r7, #12
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <MX_TIM2_Init+0xa4>)
 8001ec4:	f002 fe7a 	bl	8004bbc <HAL_TIM_Encoder_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001ece:	f000 fb5f 	bl	8002590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4806      	ldr	r0, [pc, #24]	; (8001ef8 <MX_TIM2_Init+0xa4>)
 8001ee0:	f003 f9a0 	bl	8005224 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001eea:	f000 fb51 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	3730      	adds	r7, #48	; 0x30
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000358 	.word	0x20000358

08001efc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f02:	463b      	mov	r3, r7
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <MX_TIM6_Init+0x64>)
 8001f0c:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <MX_TIM6_Init+0x68>)
 8001f0e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 40-1;
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <MX_TIM6_Init+0x64>)
 8001f12:	2227      	movs	r2, #39	; 0x27
 8001f14:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <MX_TIM6_Init+0x64>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <MX_TIM6_Init+0x64>)
 8001f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f22:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <MX_TIM6_Init+0x64>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f2a:	480d      	ldr	r0, [pc, #52]	; (8001f60 <MX_TIM6_Init+0x64>)
 8001f2c:	f002 fd8f 	bl	8004a4e <HAL_TIM_Base_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001f36:	f000 fb2b 	bl	8002590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f42:	463b      	mov	r3, r7
 8001f44:	4619      	mov	r1, r3
 8001f46:	4806      	ldr	r0, [pc, #24]	; (8001f60 <MX_TIM6_Init+0x64>)
 8001f48:	f003 f96c 	bl	8005224 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001f52:	f000 fb1d 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200003a0 	.word	0x200003a0
 8001f64:	40001000 	.word	0x40001000

08001f68 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6e:	463b      	mov	r3, r7
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <MX_TIM7_Init+0x64>)
 8001f78:	4a15      	ldr	r2, [pc, #84]	; (8001fd0 <MX_TIM7_Init+0x68>)
 8001f7a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40-1;
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <MX_TIM7_Init+0x64>)
 8001f7e:	2227      	movs	r2, #39	; 0x27
 8001f80:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <MX_TIM7_Init+0x64>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001f88:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <MX_TIM7_Init+0x64>)
 8001f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f8e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f90:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <MX_TIM7_Init+0x64>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001f96:	480d      	ldr	r0, [pc, #52]	; (8001fcc <MX_TIM7_Init+0x64>)
 8001f98:	f002 fd59 	bl	8004a4e <HAL_TIM_Base_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001fa2:	f000 faf5 	bl	8002590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001fae:	463b      	mov	r3, r7
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4806      	ldr	r0, [pc, #24]	; (8001fcc <MX_TIM7_Init+0x64>)
 8001fb4:	f003 f936 	bl	8005224 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001fbe:	f000 fae7 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200003e8 	.word	0x200003e8
 8001fd0:	40001400 	.word	0x40001400

08001fd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <MX_USART2_UART_Init+0x50>)
 8001fdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8001fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fe4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800200a:	4805      	ldr	r0, [pc, #20]	; (8002020 <MX_USART2_UART_Init+0x4c>)
 800200c:	f003 f99a 	bl	8005344 <HAL_UART_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002016:	f000 fabb 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000430 	.word	0x20000430
 8002024:	40004400 	.word	0x40004400

08002028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	4b66      	ldr	r3, [pc, #408]	; (80021dc <MX_GPIO_Init+0x1b4>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a65      	ldr	r2, [pc, #404]	; (80021dc <MX_GPIO_Init+0x1b4>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b63      	ldr	r3, [pc, #396]	; (80021dc <MX_GPIO_Init+0x1b4>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b5f      	ldr	r3, [pc, #380]	; (80021dc <MX_GPIO_Init+0x1b4>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a5e      	ldr	r2, [pc, #376]	; (80021dc <MX_GPIO_Init+0x1b4>)
 8002064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b5c      	ldr	r3, [pc, #368]	; (80021dc <MX_GPIO_Init+0x1b4>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	4b58      	ldr	r3, [pc, #352]	; (80021dc <MX_GPIO_Init+0x1b4>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a57      	ldr	r2, [pc, #348]	; (80021dc <MX_GPIO_Init+0x1b4>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b55      	ldr	r3, [pc, #340]	; (80021dc <MX_GPIO_Init+0x1b4>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	4b51      	ldr	r3, [pc, #324]	; (80021dc <MX_GPIO_Init+0x1b4>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a50      	ldr	r2, [pc, #320]	; (80021dc <MX_GPIO_Init+0x1b4>)
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b4e      	ldr	r3, [pc, #312]	; (80021dc <MX_GPIO_Init+0x1b4>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR_Pin|STEP_Pin, GPIO_PIN_RESET);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2103      	movs	r1, #3
 80020b2:	484b      	ldr	r0, [pc, #300]	; (80021e0 <MX_GPIO_Init+0x1b8>)
 80020b4:	f001 fe28 	bl	8003d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(End_stop_GPIO_Port, End_stop_Pin, GPIO_PIN_SET);
 80020b8:	2201      	movs	r2, #1
 80020ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020be:	4849      	ldr	r0, [pc, #292]	; (80021e4 <MX_GPIO_Init+0x1bc>)
 80020c0:	f001 fe22 	bl	8003d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_Selection_GPIO_Port, SPI_Selection_Pin, GPIO_PIN_SET);
 80020c4:	2201      	movs	r2, #1
 80020c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ca:	4847      	ldr	r0, [pc, #284]	; (80021e8 <MX_GPIO_Init+0x1c0>)
 80020cc:	f001 fe1c 	bl	8003d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80020da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	4619      	mov	r1, r3
 80020e6:	483e      	ldr	r0, [pc, #248]	; (80021e0 <MX_GPIO_Init+0x1b8>)
 80020e8:	f001 fc62 	bl	80039b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Pin STEP_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|STEP_Pin;
 80020ec:	2303      	movs	r3, #3
 80020ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f0:	2301      	movs	r3, #1
 80020f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f8:	2303      	movs	r3, #3
 80020fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	4619      	mov	r1, r3
 8002102:	4837      	ldr	r0, [pc, #220]	; (80021e0 <MX_GPIO_Init+0x1b8>)
 8002104:	f001 fc54 	bl	80039b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z_reference_Pin P_limit_Pin Q_limit_Pin */
  GPIO_InitStruct.Pin = Z_reference_Pin|P_limit_Pin|Q_limit_Pin;
 8002108:	2331      	movs	r3, #49	; 0x31
 800210a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800210c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002112:	2302      	movs	r3, #2
 8002114:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4619      	mov	r1, r3
 800211c:	4831      	ldr	r0, [pc, #196]	; (80021e4 <MX_GPIO_Init+0x1bc>)
 800211e:	f001 fc47 	bl	80039b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : End_stop_Pin */
  GPIO_InitStruct.Pin = End_stop_Pin;
 8002122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002128:	2301      	movs	r3, #1
 800212a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(End_stop_GPIO_Port, &GPIO_InitStruct);
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4619      	mov	r1, r3
 800213a:	482a      	ldr	r0, [pc, #168]	; (80021e4 <MX_GPIO_Init+0x1bc>)
 800213c:	f001 fc38 	bl	80039b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Z_END_STOP_Pin */
  GPIO_InitStruct.Pin = Z_END_STOP_Pin;
 8002140:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002146:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800214a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800214c:	2301      	movs	r3, #1
 800214e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Z_END_STOP_GPIO_Port, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	4824      	ldr	r0, [pc, #144]	; (80021e8 <MX_GPIO_Init+0x1c0>)
 8002158:	f001 fc2a 	bl	80039b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_Selection_Pin */
  GPIO_InitStruct.Pin = SPI_Selection_Pin;
 800215c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002162:	2301      	movs	r3, #1
 8002164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216a:	2303      	movs	r3, #3
 800216c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_Selection_GPIO_Port, &GPIO_InitStruct);
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	4619      	mov	r1, r3
 8002174:	481c      	ldr	r0, [pc, #112]	; (80021e8 <MX_GPIO_Init+0x1c0>)
 8002176:	f001 fc1b 	bl	80039b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Camera_input_Pin */
  GPIO_InitStruct.Pin = Camera_input_Pin;
 800217a:	2308      	movs	r3, #8
 800217c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800217e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Camera_input_GPIO_Port, &GPIO_InitStruct);
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	4619      	mov	r1, r3
 800218e:	4815      	ldr	r0, [pc, #84]	; (80021e4 <MX_GPIO_Init+0x1bc>)
 8002190:	f001 fc0e 	bl	80039b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	2006      	movs	r0, #6
 800219a:	f001 fb32 	bl	8003802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800219e:	2006      	movs	r0, #6
 80021a0:	f001 fb4b 	bl	800383a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2100      	movs	r1, #0
 80021a8:	2009      	movs	r0, #9
 80021aa:	f001 fb2a 	bl	8003802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80021ae:	2009      	movs	r0, #9
 80021b0:	f001 fb43 	bl	800383a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80021b4:	2200      	movs	r2, #0
 80021b6:	2100      	movs	r1, #0
 80021b8:	200a      	movs	r0, #10
 80021ba:	f001 fb22 	bl	8003802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80021be:	200a      	movs	r0, #10
 80021c0:	f001 fb3b 	bl	800383a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80021c4:	2200      	movs	r2, #0
 80021c6:	2100      	movs	r1, #0
 80021c8:	2017      	movs	r0, #23
 80021ca:	f001 fb1a 	bl	8003802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80021ce:	2017      	movs	r0, #23
 80021d0:	f001 fb33 	bl	800383a <HAL_NVIC_EnableIRQ>

}
 80021d4:	bf00      	nop
 80021d6:	3728      	adds	r7, #40	; 0x28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40020800 	.word	0x40020800
 80021e4:	40020400 	.word	0x40020400
 80021e8:	40020000 	.word	0x40020000

080021ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	80fb      	strh	r3, [r7, #6]


	if( GPIO_Pin == Z_END_STOP_Pin ){
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021fc:	d131      	bne.n	8002262 <HAL_GPIO_EXTI_Callback+0x76>
		 */

		/*
		 * Debounce checking
		 */
		__delay_ms(1);
 80021fe:	2001      	movs	r0, #1
 8002200:	f000 f9a6 	bl	8002550 <__delay_ms>

		if(HAL_GPIO_ReadPin(Z_END_STOP_GPIO_Port, Z_END_STOP_Pin) != GPIO_PIN_RESET){
 8002204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002208:	4819      	ldr	r0, [pc, #100]	; (8002270 <HAL_GPIO_EXTI_Callback+0x84>)
 800220a:	f001 fd65 	bl	8003cd8 <HAL_GPIO_ReadPin>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d128      	bne.n	8002266 <HAL_GPIO_EXTI_Callback+0x7a>
			/* error signal detected */
			return;
		}

		if(Home_Pass == 0){
 8002214:	4b17      	ldr	r3, [pc, #92]	; (8002274 <HAL_GPIO_EXTI_Callback+0x88>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10f      	bne.n	800223e <HAL_GPIO_EXTI_Callback+0x52>
			// first pass
			Home_Pass = 1;
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <HAL_GPIO_EXTI_Callback+0x88>)
 8002220:	2201      	movs	r2, #1
 8002222:	701a      	strb	r2, [r3, #0]

			Homing_completion();
 8002224:	f7ff f876 	bl	8001314 <Homing_completion>

			move((int32_t ) (steps_per_millimeters * HOMING_PASS_BACK_MM));
 8002228:	f242 7010 	movw	r0, #10000	; 0x2710
 800222c:	f000 f9f8 	bl	8002620 <move>
			runToPosition();
 8002230:	f000 fe60 	bl	8002ef4 <runToPosition>


			/* setting speed again to initiate the HOMING
			 otherwise _stepintervel became zero */
			setSpeed(-1*HOME_SPEED);  /* MOVING IN CCW */
 8002234:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8002278 <HAL_GPIO_EXTI_Callback+0x8c>
 8002238:	f000 fd56 	bl	8002ce8 <setSpeed>
			return;
 800223c:	e014      	b.n	8002268 <HAL_GPIO_EXTI_Callback+0x7c>
		}
		else{
			HOMED = true; /* Homing is completed */
 800223e:	4b0f      	ldr	r3, [pc, #60]	; (800227c <HAL_GPIO_EXTI_Callback+0x90>)
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
			Home_Pass = 0;
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_GPIO_EXTI_Callback+0x88>)
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]

			// come back to reactivate the sensor
			move((int32_t ) (steps_per_millimeters * HOMING_PASS_BACK_MM));
 800224a:	f242 7010 	movw	r0, #10000	; 0x2710
 800224e:	f000 f9e7 	bl	8002620 <move>
			runToPosition();
 8002252:	f000 fe4f 	bl	8002ef4 <runToPosition>

			//resetting all the parameters
			Homing_completion();
 8002256:	f7ff f85d 	bl	8001314 <Homing_completion>
		}

		HAL_NVIC_DisableIRQ(Z_END_STOP_EXTI_IRQn);
 800225a:	2017      	movs	r0, #23
 800225c:	f001 fafb 	bl	8003856 <HAL_NVIC_DisableIRQ>
		return;
 8002260:	e002      	b.n	8002268 <HAL_GPIO_EXTI_Callback+0x7c>

	else if(GPIO_Pin == P_limit_Pin){
	// P_limit detected(Upper Limit)
	}
#endif
	return;
 8002262:	bf00      	nop
 8002264:	e000      	b.n	8002268 <HAL_GPIO_EXTI_Callback+0x7c>
			return;
 8002266:	bf00      	nop
}
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40020000 	.word	0x40020000
 8002274:	200009c8 	.word	0x200009c8
 8002278:	c7435000 	.word	0xc7435000
 800227c:	200009c9 	.word	0x200009c9

08002280 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b0a5      	sub	sp, #148	; 0x94
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	807b      	strh	r3, [r7, #2]

	if(huart == &huart2){
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a6d      	ldr	r2, [pc, #436]	; (8002444 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	f040 80d3 	bne.w	800243c <HAL_UARTEx_RxEventCallback+0x1bc>
	  /* Add null character to terminate string */
		if(Size < sizeof(RxBuffer)){
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	2b8b      	cmp	r3, #139	; 0x8b
 800229a:	d804      	bhi.n	80022a6 <HAL_UARTEx_RxEventCallback+0x26>
			RxBuffer[Size] = 0;
 800229c:	887b      	ldrh	r3, [r7, #2]
 800229e:	4a6a      	ldr	r2, [pc, #424]	; (8002448 <HAL_UARTEx_RxEventCallback+0x1c8>)
 80022a0:	2100      	movs	r1, #0
 80022a2:	54d1      	strb	r1, [r2, r3]
 80022a4:	e004      	b.n	80022b0 <HAL_UARTEx_RxEventCallback+0x30>
		}
		else{
			RxBuffer[Size-1] = 0;
 80022a6:	887b      	ldrh	r3, [r7, #2]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	4a67      	ldr	r2, [pc, #412]	; (8002448 <HAL_UARTEx_RxEventCallback+0x1c8>)
 80022ac:	2100      	movs	r1, #0
 80022ae:	54d1      	strb	r1, [r2, r3]
		}

		// Replace all occurrences of "\r " with "\r" (if any)
		char* space_ptr = strstr((void *)RxBuffer, "\r");
 80022b0:	210d      	movs	r1, #13
 80022b2:	4865      	ldr	r0, [pc, #404]	; (8002448 <HAL_UARTEx_RxEventCallback+0x1c8>)
 80022b4:	f004 ff62 	bl	800717c <strchr>
 80022b8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		while (space_ptr != NULL) {
 80022bc:	e028      	b.n	8002310 <HAL_UARTEx_RxEventCallback+0x90>
			// Skip over the "\r" delimiter
			space_ptr++;
 80022be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022c2:	3301      	adds	r3, #1
 80022c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			// Remove any leading spaces after the "\r" delimiter
			while (isspace(*space_ptr)) {
 80022c8:	e010      	b.n	80022ec <HAL_UARTEx_RxEventCallback+0x6c>
				memmove(space_ptr, space_ptr + 1, strlen(space_ptr + 1) + 1);
 80022ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ce:	1c5c      	adds	r4, r3, #1
 80022d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022d4:	3301      	adds	r3, #1
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fd ffa4 	bl	8000224 <strlen>
 80022dc:	4603      	mov	r3, r0
 80022de:	3301      	adds	r3, #1
 80022e0:	461a      	mov	r2, r3
 80022e2:	4621      	mov	r1, r4
 80022e4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80022e8:	f004 f936 	bl	8006558 <memmove>
			while (isspace(*space_ptr)) {
 80022ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	4a55      	ldr	r2, [pc, #340]	; (800244c <HAL_UARTEx_RxEventCallback+0x1cc>)
 80022f6:	4413      	add	r3, r2
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1e3      	bne.n	80022ca <HAL_UARTEx_RxEventCallback+0x4a>
			}
			// Find the next occurrence of "\r"
			space_ptr = strstr(space_ptr, "\r");
 8002302:	210d      	movs	r1, #13
 8002304:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002308:	f004 ff38 	bl	800717c <strchr>
 800230c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		while (space_ptr != NULL) {
 8002310:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1d2      	bne.n	80022be <HAL_UARTEx_RxEventCallback+0x3e>
		}



		char *token;
		char *tokens[MAX_COMMANDS_PER_TIME] = {0};
 8002318:	f107 0308 	add.w	r3, r7, #8
 800231c:	2278      	movs	r2, #120	; 0x78
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f004 f933 	bl	800658c <memset>
		int i = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84


		/* Split the string by the delimiter "\r" */
		token = strtok((void *)RxBuffer, "\r");
 800232c:	4948      	ldr	r1, [pc, #288]	; (8002450 <HAL_UARTEx_RxEventCallback+0x1d0>)
 800232e:	4846      	ldr	r0, [pc, #280]	; (8002448 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8002330:	f005 fd68 	bl	8007e04 <strtok>
 8002334:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

		while (token != NULL && i < MAX_COMMANDS_PER_TIME) {
 8002338:	e013      	b.n	8002362 <HAL_UARTEx_RxEventCallback+0xe2>
			tokens[i] = token;
 800233a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	3390      	adds	r3, #144	; 0x90
 8002342:	443b      	add	r3, r7
 8002344:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002348:	f843 2c88 	str.w	r2, [r3, #-136]
			i++;
 800234c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002350:	3301      	adds	r3, #1
 8002352:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			token = strtok(NULL, "\r");
 8002356:	493e      	ldr	r1, [pc, #248]	; (8002450 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8002358:	2000      	movs	r0, #0
 800235a:	f005 fd53 	bl	8007e04 <strtok>
 800235e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		while (token != NULL && i < MAX_COMMANDS_PER_TIME) {
 8002362:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_UARTEx_RxEventCallback+0xf2>
 800236a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800236e:	2b1d      	cmp	r3, #29
 8002370:	dde3      	ble.n	800233a <HAL_UARTEx_RxEventCallback+0xba>
			UNUSED(tokens);
		}

		for(i=0;tokens[i]!=NULL;i++){
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002378:	e03e      	b.n	80023f8 <HAL_UARTEx_RxEventCallback+0x178>

			int valid = is_command_valid(tokens[i]);
 800237a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	3390      	adds	r3, #144	; 0x90
 8002382:	443b      	add	r3, r7
 8002384:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fe91 	bl	80010b0 <is_command_valid>
 800238e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
			if(valid == 1){
 8002392:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002396:	2b01      	cmp	r3, #1
 8002398:	d10b      	bne.n	80023b2 <HAL_UARTEx_RxEventCallback+0x132>
				enqueue(&CommandBuffer,tokens[i]);
 800239a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	3390      	adds	r3, #144	; 0x90
 80023a2:	443b      	add	r3, r7
 80023a4:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80023a8:	4619      	mov	r1, r3
 80023aa:	482a      	ldr	r0, [pc, #168]	; (8002454 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80023ac:	f7ff fb2c 	bl	8001a08 <enqueue>
 80023b0:	e01d      	b.n	80023ee <HAL_UARTEx_RxEventCallback+0x16e>
			}
			else if(valid == 0){
 80023b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d119      	bne.n	80023ee <HAL_UARTEx_RxEventCallback+0x16e>
				/* Bad command detected */
				memset(sending_data,0,sizeof(sending_data));
 80023ba:	2232      	movs	r2, #50	; 0x32
 80023bc:	2100      	movs	r1, #0
 80023be:	4826      	ldr	r0, [pc, #152]	; (8002458 <HAL_UARTEx_RxEventCallback+0x1d8>)
 80023c0:	f004 f8e4 	bl	800658c <memset>
				sprintf(sending_data,"Bad Command\n");
 80023c4:	4925      	ldr	r1, [pc, #148]	; (800245c <HAL_UARTEx_RxEventCallback+0x1dc>)
 80023c6:	4824      	ldr	r0, [pc, #144]	; (8002458 <HAL_UARTEx_RxEventCallback+0x1d8>)
 80023c8:	f004 feb8 	bl	800713c <siprintf>
				HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 80023cc:	4822      	ldr	r0, [pc, #136]	; (8002458 <HAL_UARTEx_RxEventCallback+0x1d8>)
 80023ce:	f7fd ff29 	bl	8000224 <strlen>
 80023d2:	4603      	mov	r3, r0
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
 80023da:	491f      	ldr	r1, [pc, #124]	; (8002458 <HAL_UARTEx_RxEventCallback+0x1d8>)
 80023dc:	4819      	ldr	r0, [pc, #100]	; (8002444 <HAL_UARTEx_RxEventCallback+0x1c4>)
 80023de:	f002 fffe 	bl	80053de <HAL_UART_Transmit>

				HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t*)RxBuffer, sizeof(RxBuffer));
 80023e2:	228c      	movs	r2, #140	; 0x8c
 80023e4:	4918      	ldr	r1, [pc, #96]	; (8002448 <HAL_UARTEx_RxEventCallback+0x1c8>)
 80023e6:	4817      	ldr	r0, [pc, #92]	; (8002444 <HAL_UARTEx_RxEventCallback+0x1c4>)
 80023e8:	f003 f8bb 	bl	8005562 <HAL_UARTEx_ReceiveToIdle_IT>
 80023ec:	e026      	b.n	800243c <HAL_UARTEx_RxEventCallback+0x1bc>
		for(i=0;tokens[i]!=NULL;i++){
 80023ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023f2:	3301      	adds	r3, #1
 80023f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	3390      	adds	r3, #144	; 0x90
 8002400:	443b      	add	r3, r7
 8002402:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1b7      	bne.n	800237a <HAL_UARTEx_RxEventCallback+0xfa>
				/* Instant command */

			}
		}
		/* Commands are good */
		memset(sending_data,0,sizeof(sending_data));
 800240a:	2232      	movs	r2, #50	; 0x32
 800240c:	2100      	movs	r1, #0
 800240e:	4812      	ldr	r0, [pc, #72]	; (8002458 <HAL_UARTEx_RxEventCallback+0x1d8>)
 8002410:	f004 f8bc 	bl	800658c <memset>
		sprintf(sending_data,"Ok\n");
 8002414:	4912      	ldr	r1, [pc, #72]	; (8002460 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8002416:	4810      	ldr	r0, [pc, #64]	; (8002458 <HAL_UARTEx_RxEventCallback+0x1d8>)
 8002418:	f004 fe90 	bl	800713c <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 800241c:	480e      	ldr	r0, [pc, #56]	; (8002458 <HAL_UARTEx_RxEventCallback+0x1d8>)
 800241e:	f7fd ff01 	bl	8000224 <strlen>
 8002422:	4603      	mov	r3, r0
 8002424:	b29a      	uxth	r2, r3
 8002426:	f04f 33ff 	mov.w	r3, #4294967295
 800242a:	490b      	ldr	r1, [pc, #44]	; (8002458 <HAL_UARTEx_RxEventCallback+0x1d8>)
 800242c:	4805      	ldr	r0, [pc, #20]	; (8002444 <HAL_UARTEx_RxEventCallback+0x1c4>)
 800242e:	f002 ffd6 	bl	80053de <HAL_UART_Transmit>

		HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t*)RxBuffer, sizeof(RxBuffer));
 8002432:	228c      	movs	r2, #140	; 0x8c
 8002434:	4904      	ldr	r1, [pc, #16]	; (8002448 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8002436:	4803      	ldr	r0, [pc, #12]	; (8002444 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8002438:	f003 f893 	bl	8005562 <HAL_UARTEx_ReceiveToIdle_IT>

	}

}
 800243c:	3794      	adds	r7, #148	; 0x94
 800243e:	46bd      	mov	sp, r7
 8002440:	bd90      	pop	{r4, r7, pc}
 8002442:	bf00      	nop
 8002444:	20000430 	.word	0x20000430
 8002448:	20000930 	.word	0x20000930
 800244c:	0800add4 	.word	0x0800add4
 8002450:	0800ad94 	.word	0x0800ad94
 8002454:	20000474 	.word	0x20000474
 8002458:	20000030 	.word	0x20000030
 800245c:	0800ad98 	.word	0x0800ad98
 8002460:	0800ada8 	.word	0x0800ada8

08002464 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

	if(huart == &huart2){
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a2f      	ldr	r2, [pc, #188]	; (800252c <HAL_UART_RxCpltCallback+0xc8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d157      	bne.n	8002524 <HAL_UART_RxCpltCallback+0xc0>
    /* Receive one byte in the receive data register */

    /* Check if the received character is a /r or buffer is full */
    if (rxByte == '\r' || RxIndex == 50 - 1) // 50 is buffer length
 8002474:	4b2e      	ldr	r3, [pc, #184]	; (8002530 <HAL_UART_RxCpltCallback+0xcc>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b0d      	cmp	r3, #13
 800247a:	d003      	beq.n	8002484 <HAL_UART_RxCpltCallback+0x20>
 800247c:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <HAL_UART_RxCpltCallback+0xd0>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b31      	cmp	r3, #49	; 0x31
 8002482:	d11b      	bne.n	80024bc <HAL_UART_RxCpltCallback+0x58>
    {
        /* Set flag to indicate command is complete */
        Exec_command = 1;
 8002484:	4b2c      	ldr	r3, [pc, #176]	; (8002538 <HAL_UART_RxCpltCallback+0xd4>)
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]

        /* Add null character to terminate string */
        RxBuffer[RxIndex] = 0;
 800248a:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <HAL_UART_RxCpltCallback+0xd0>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	4b2a      	ldr	r3, [pc, #168]	; (800253c <HAL_UART_RxCpltCallback+0xd8>)
 8002492:	2100      	movs	r1, #0
 8002494:	5499      	strb	r1, [r3, r2]

        /*Check whether command is valid or not*/
        if(is_command_valid((char*)RxBuffer))
 8002496:	4829      	ldr	r0, [pc, #164]	; (800253c <HAL_UART_RxCpltCallback+0xd8>)
 8002498:	f7fe fe0a 	bl	80010b0 <is_command_valid>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_UART_RxCpltCallback+0x46>
        {
            enqueue(&CommandBuffer, (void *)RxBuffer);
 80024a2:	4926      	ldr	r1, [pc, #152]	; (800253c <HAL_UART_RxCpltCallback+0xd8>)
 80024a4:	4826      	ldr	r0, [pc, #152]	; (8002540 <HAL_UART_RxCpltCallback+0xdc>)
 80024a6:	f7ff faaf 	bl	8001a08 <enqueue>
        	NULL;
        }


        /* Resetting RxIndex to zero */
        RxIndex = 0;
 80024aa:	4b22      	ldr	r3, [pc, #136]	; (8002534 <HAL_UART_RxCpltCallback+0xd0>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]

        /* Restart the UART Interrupt */
		HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 80024b0:	2201      	movs	r2, #1
 80024b2:	491f      	ldr	r1, [pc, #124]	; (8002530 <HAL_UART_RxCpltCallback+0xcc>)
 80024b4:	481d      	ldr	r0, [pc, #116]	; (800252c <HAL_UART_RxCpltCallback+0xc8>)
 80024b6:	f003 f824 	bl	8005502 <HAL_UART_Receive_IT>
 80024ba:	e033      	b.n	8002524 <HAL_UART_RxCpltCallback+0xc0>
    }

    else
    {
    	/****** Special Character Checking ***********/
    	if(rxByte == 'e' ){
 80024bc:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <HAL_UART_RxCpltCallback+0xcc>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b65      	cmp	r3, #101	; 0x65
 80024c2:	d11d      	bne.n	8002500 <HAL_UART_RxCpltCallback+0x9c>
		//sending encoder value through UART

		memset(sending_data,0,sizeof(sending_data));
 80024c4:	2232      	movs	r2, #50	; 0x32
 80024c6:	2100      	movs	r1, #0
 80024c8:	481e      	ldr	r0, [pc, #120]	; (8002544 <HAL_UART_RxCpltCallback+0xe0>)
 80024ca:	f004 f85f 	bl	800658c <memset>
		sprintf(sending_data,"%ld\n",__HAL_TIM_GET_COUNTER(&htim2) );
 80024ce:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <HAL_UART_RxCpltCallback+0xe4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	461a      	mov	r2, r3
 80024d6:	491d      	ldr	r1, [pc, #116]	; (800254c <HAL_UART_RxCpltCallback+0xe8>)
 80024d8:	481a      	ldr	r0, [pc, #104]	; (8002544 <HAL_UART_RxCpltCallback+0xe0>)
 80024da:	f004 fe2f 	bl	800713c <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 80024de:	4819      	ldr	r0, [pc, #100]	; (8002544 <HAL_UART_RxCpltCallback+0xe0>)
 80024e0:	f7fd fea0 	bl	8000224 <strlen>
 80024e4:	4603      	mov	r3, r0
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ec:	4915      	ldr	r1, [pc, #84]	; (8002544 <HAL_UART_RxCpltCallback+0xe0>)
 80024ee:	480f      	ldr	r0, [pc, #60]	; (800252c <HAL_UART_RxCpltCallback+0xc8>)
 80024f0:	f002 ff75 	bl	80053de <HAL_UART_Transmit>


		 /* Restart the UART Interrupt */
		HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 80024f4:	2201      	movs	r2, #1
 80024f6:	490e      	ldr	r1, [pc, #56]	; (8002530 <HAL_UART_RxCpltCallback+0xcc>)
 80024f8:	480c      	ldr	r0, [pc, #48]	; (800252c <HAL_UART_RxCpltCallback+0xc8>)
 80024fa:	f003 f802 	bl	8005502 <HAL_UART_Receive_IT>

		return;
 80024fe:	e011      	b.n	8002524 <HAL_UART_RxCpltCallback+0xc0>
    	}

        /* Add the character to the buffer */
        RxBuffer[RxIndex] = rxByte;
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <HAL_UART_RxCpltCallback+0xd0>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_UART_RxCpltCallback+0xcc>)
 8002508:	7819      	ldrb	r1, [r3, #0]
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <HAL_UART_RxCpltCallback+0xd8>)
 800250c:	5499      	strb	r1, [r3, r2]
        RxIndex++;
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_UART_RxCpltCallback+0xd0>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	3301      	adds	r3, #1
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <HAL_UART_RxCpltCallback+0xd0>)
 8002518:	701a      	strb	r2, [r3, #0]

        /* Restart the UART Interrupt */
        HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 800251a:	2201      	movs	r2, #1
 800251c:	4904      	ldr	r1, [pc, #16]	; (8002530 <HAL_UART_RxCpltCallback+0xcc>)
 800251e:	4803      	ldr	r0, [pc, #12]	; (800252c <HAL_UART_RxCpltCallback+0xc8>)
 8002520:	f002 ffef 	bl	8005502 <HAL_UART_Receive_IT>

    }

	}
}
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000430 	.word	0x20000430
 8002530:	200009be 	.word	0x200009be
 8002534:	200009bc 	.word	0x200009bc
 8002538:	200009bd 	.word	0x200009bd
 800253c:	20000930 	.word	0x20000930
 8002540:	20000474 	.word	0x20000474
 8002544:	20000030 	.word	0x20000030
 8002548:	20000358 	.word	0x20000358
 800254c:	0800adac 	.word	0x0800adac

08002550 <__delay_ms>:



void __delay_ms(int32_t k){
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	int32_t i,j;
	for(i=0;i<k;i++)
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e00d      	b.n	800257a <__delay_ms+0x2a>
		for(j=0;j<3000;j++){}
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	e002      	b.n	800256a <__delay_ms+0x1a>
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	3301      	adds	r3, #1
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002570:	4293      	cmp	r3, r2
 8002572:	ddf7      	ble.n	8002564 <__delay_ms+0x14>
	for(i=0;i<k;i++)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3301      	adds	r3, #1
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	429a      	cmp	r2, r3
 8002580:	dbed      	blt.n	800255e <__delay_ms+0xe>
}
 8002582:	bf00      	nop
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002594:	b672      	cpsid	i
}
 8002596:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  //sending the ready status
	memset(sending_data,0,sizeof(sending_data));
 8002598:	2232      	movs	r2, #50	; 0x32
 800259a:	2100      	movs	r1, #0
 800259c:	4809      	ldr	r0, [pc, #36]	; (80025c4 <Error_Handler+0x34>)
 800259e:	f003 fff5 	bl	800658c <memset>
	sprintf(sending_data,"ERROR");
 80025a2:	4909      	ldr	r1, [pc, #36]	; (80025c8 <Error_Handler+0x38>)
 80025a4:	4807      	ldr	r0, [pc, #28]	; (80025c4 <Error_Handler+0x34>)
 80025a6:	f004 fdc9 	bl	800713c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)sending_data,strlen(sending_data),HAL_MAX_DELAY);
 80025aa:	4806      	ldr	r0, [pc, #24]	; (80025c4 <Error_Handler+0x34>)
 80025ac:	f7fd fe3a 	bl	8000224 <strlen>
 80025b0:	4603      	mov	r3, r0
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	f04f 33ff 	mov.w	r3, #4294967295
 80025b8:	4902      	ldr	r1, [pc, #8]	; (80025c4 <Error_Handler+0x34>)
 80025ba:	4804      	ldr	r0, [pc, #16]	; (80025cc <Error_Handler+0x3c>)
 80025bc:	f002 ff0f 	bl	80053de <HAL_UART_Transmit>
	memset(sending_data,0,sizeof(sending_data));
 80025c0:	e7ea      	b.n	8002598 <Error_Handler+0x8>
 80025c2:	bf00      	nop
 80025c4:	20000030 	.word	0x20000030
 80025c8:	0800adb4 	.word	0x0800adb4
 80025cc:	20000430 	.word	0x20000430

080025d0 <moveTo>:




void moveTo(int32_t absolute)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	absolute  = (absolute<min_pos) ? min_pos :( (absolute<max_pos) ? absolute : max_pos );
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <moveTo+0x44>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	429a      	cmp	r2, r3
 80025e0:	db06      	blt.n	80025f0 <moveTo+0x20>
 80025e2:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <moveTo+0x48>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4293      	cmp	r3, r2
 80025ea:	bfa8      	it	ge
 80025ec:	4613      	movge	r3, r2
 80025ee:	e001      	b.n	80025f4 <moveTo+0x24>
 80025f0:	4b08      	ldr	r3, [pc, #32]	; (8002614 <moveTo+0x44>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	607b      	str	r3, [r7, #4]
    if (_targetPos != absolute)
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <moveTo+0x4c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d004      	beq.n	800260a <moveTo+0x3a>
    {
	_targetPos = absolute;
 8002600:	4a06      	ldr	r2, [pc, #24]	; (800261c <moveTo+0x4c>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6013      	str	r3, [r2, #0]
	computeNewSpeed();
 8002606:	f000 f935 	bl	8002874 <computeNewSpeed>
	// compute new n?
    }
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200009c0 	.word	0x200009c0
 8002618:	20000068 	.word	0x20000068
 800261c:	200009e8 	.word	0x200009e8

08002620 <move>:

void move(int32_t relative)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
    moveTo(_currentPos + relative);
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <move+0x20>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4413      	add	r3, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ffcd 	bl	80025d0 <moveTo>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200009e4 	.word	0x200009e4

08002644 <stepper_setup>:

void stepper_setup(GPIO_TypeDef*_step_port,uint16_t _step_pin, GPIO_TypeDef*  _dir_port,uint16_t _dir_pin ){
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	461a      	mov	r2, r3
 8002650:	460b      	mov	r3, r1
 8002652:	817b      	strh	r3, [r7, #10]
 8002654:	4613      	mov	r3, r2
 8002656:	813b      	strh	r3, [r7, #8]


	step_port = _step_port;
 8002658:	4a33      	ldr	r2, [pc, #204]	; (8002728 <stepper_setup+0xe4>)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6013      	str	r3, [r2, #0]
	step_pin = _step_pin;
 800265e:	4a33      	ldr	r2, [pc, #204]	; (800272c <stepper_setup+0xe8>)
 8002660:	897b      	ldrh	r3, [r7, #10]
 8002662:	8013      	strh	r3, [r2, #0]
	dir_port = _dir_port;
 8002664:	4a32      	ldr	r2, [pc, #200]	; (8002730 <stepper_setup+0xec>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6013      	str	r3, [r2, #0]
	dir_pin = _dir_pin;
 800266a:	4a32      	ldr	r2, [pc, #200]	; (8002734 <stepper_setup+0xf0>)
 800266c:	893b      	ldrh	r3, [r7, #8]
 800266e:	8013      	strh	r3, [r2, #0]


	_stepInterval = 0;
 8002670:	4b31      	ldr	r3, [pc, #196]	; (8002738 <stepper_setup+0xf4>)
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
	_minPulseWidth = 1;
 8002676:	4b31      	ldr	r3, [pc, #196]	; (800273c <stepper_setup+0xf8>)
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]
	_currentPos = 0;
 800267c:	4b30      	ldr	r3, [pc, #192]	; (8002740 <stepper_setup+0xfc>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
	_targetPos = 0;
 8002682:	4b30      	ldr	r3, [pc, #192]	; (8002744 <stepper_setup+0x100>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
	_speed = 0.0;
 8002688:	4b2f      	ldr	r3, [pc, #188]	; (8002748 <stepper_setup+0x104>)
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
	_maxSpeed = 30.0;
 8002690:	4b2e      	ldr	r3, [pc, #184]	; (800274c <stepper_setup+0x108>)
 8002692:	4a2f      	ldr	r2, [pc, #188]	; (8002750 <stepper_setup+0x10c>)
 8002694:	601a      	str	r2, [r3, #0]
	_acceleration = 0.0;
 8002696:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <stepper_setup+0x110>)
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
	_sqrt_twoa = 1.0;
 800269e:	4b2e      	ldr	r3, [pc, #184]	; (8002758 <stepper_setup+0x114>)
 80026a0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80026a4:	601a      	str	r2, [r3, #0]
	_stepInterval = 0;
 80026a6:	4b24      	ldr	r3, [pc, #144]	; (8002738 <stepper_setup+0xf4>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
	_minPulseWidth = 1;
 80026ac:	4b23      	ldr	r3, [pc, #140]	; (800273c <stepper_setup+0xf8>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
	_enablePin = 0xff;
 80026b2:	4b2a      	ldr	r3, [pc, #168]	; (800275c <stepper_setup+0x118>)
 80026b4:	22ff      	movs	r2, #255	; 0xff
 80026b6:	701a      	strb	r2, [r3, #0]
	_lastStepTime = 0;
 80026b8:	4b29      	ldr	r3, [pc, #164]	; (8002760 <stepper_setup+0x11c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]




	// NEW
	_n = 0;
 80026be:	4b29      	ldr	r3, [pc, #164]	; (8002764 <stepper_setup+0x120>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
	_c0 = 0.0;
 80026c4:	4b28      	ldr	r3, [pc, #160]	; (8002768 <stepper_setup+0x124>)
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
	_cn = 0.0;
 80026cc:	4b27      	ldr	r3, [pc, #156]	; (800276c <stepper_setup+0x128>)
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
	_cmin = 1.0;
 80026d4:	4b26      	ldr	r3, [pc, #152]	; (8002770 <stepper_setup+0x12c>)
 80026d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80026da:	601a      	str	r2, [r3, #0]
	_direction = DIRECTION_CCW;
 80026dc:	4b25      	ldr	r3, [pc, #148]	; (8002774 <stepper_setup+0x130>)
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]

	int i;
	for (i = 0; i < 4; i++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	e007      	b.n	80026f8 <stepper_setup+0xb4>
	_pinInverted[i] = 0;
 80026e8:	4a23      	ldr	r2, [pc, #140]	; (8002778 <stepper_setup+0x134>)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	4413      	add	r3, r2
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 4; i++)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	3301      	adds	r3, #1
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	ddf4      	ble.n	80026e8 <stepper_setup+0xa4>


	for (i = 0; i < 4; i++)
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	e007      	b.n	8002714 <stepper_setup+0xd0>
	_pinInverted[i] = 0;
 8002704:	4a1c      	ldr	r2, [pc, #112]	; (8002778 <stepper_setup+0x134>)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	4413      	add	r3, r2
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 4; i++)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	3301      	adds	r3, #1
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b03      	cmp	r3, #3
 8002718:	ddf4      	ble.n	8002704 <stepper_setup+0xc0>

}
 800271a:	bf00      	nop
 800271c:	bf00      	nop
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	200009cc 	.word	0x200009cc
 800272c:	200009d0 	.word	0x200009d0
 8002730:	200009d4 	.word	0x200009d4
 8002734:	200009d8 	.word	0x200009d8
 8002738:	200009dc 	.word	0x200009dc
 800273c:	20000a00 	.word	0x20000a00
 8002740:	200009e4 	.word	0x200009e4
 8002744:	200009e8 	.word	0x200009e8
 8002748:	200009ec 	.word	0x200009ec
 800274c:	200009f0 	.word	0x200009f0
 8002750:	41f00000 	.word	0x41f00000
 8002754:	200009f4 	.word	0x200009f4
 8002758:	200009f8 	.word	0x200009f8
 800275c:	20000a04 	.word	0x20000a04
 8002760:	200009fc 	.word	0x200009fc
 8002764:	20000a08 	.word	0x20000a08
 8002768:	20000a0c 	.word	0x20000a0c
 800276c:	20000a10 	.word	0x20000a10
 8002770:	20000a14 	.word	0x20000a14
 8002774:	200009da 	.word	0x200009da
 8002778:	200009e0 	.word	0x200009e0

0800277c <runSpeed>:


_Bool runSpeed()
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
    // Dont do anything unless we actually have a step interval
    if (!_stepInterval)
 8002782:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <runSpeed+0x64>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <runSpeed+0x12>
	return false;
 800278a:	2300      	movs	r3, #0
 800278c:	e023      	b.n	80027d6 <runSpeed+0x5a>

    uint32_t time =  __HAL_TIM_GET_COUNTER(&htim6);
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <runSpeed+0x68>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	607b      	str	r3, [r7, #4]
    if (time  >= _stepInterval)
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <runSpeed+0x64>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	429a      	cmp	r2, r3
 800279e:	d319      	bcc.n	80027d4 <runSpeed+0x58>
    {
	if (_direction == DIRECTION_CW)
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <runSpeed+0x6c>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <runSpeed+0x38>
	{
	    // Clockwise
	    _currentPos += 1;
 80027a8:	4b10      	ldr	r3, [pc, #64]	; (80027ec <runSpeed+0x70>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	3301      	adds	r3, #1
 80027ae:	4a0f      	ldr	r2, [pc, #60]	; (80027ec <runSpeed+0x70>)
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e004      	b.n	80027be <runSpeed+0x42>
	}
	else
	{
	    // Anticlockwise
	    _currentPos -= 1;
 80027b4:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <runSpeed+0x70>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	4a0c      	ldr	r2, [pc, #48]	; (80027ec <runSpeed+0x70>)
 80027bc:	6013      	str	r3, [r2, #0]
	}

	step(_currentPos);
 80027be:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <runSpeed+0x70>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fb5a 	bl	8002e7c <step>

	__HAL_TIM_SET_COUNTER(&htim6,0); //resetting the timer
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <runSpeed+0x68>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2200      	movs	r2, #0
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24
	//_lastStepTime = time; // Caution: does not account for costs in step()

	return true;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <runSpeed+0x5a>
    }
    else
    {
	return false;
 80027d4:	2300      	movs	r3, #0
    }
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200009dc 	.word	0x200009dc
 80027e4:	200003a0 	.word	0x200003a0
 80027e8:	200009da 	.word	0x200009da
 80027ec:	200009e4 	.word	0x200009e4

080027f0 <distanceToGo>:

int32_t distanceToGo()
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
    return _targetPos - _currentPos;
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <distanceToGo+0x18>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <distanceToGo+0x1c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	1ad3      	subs	r3, r2, r3
}
 80027fe:	4618      	mov	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	200009e8 	.word	0x200009e8
 800280c:	200009e4 	.word	0x200009e4

08002810 <currentPosition>:
{
    return _targetPos;
}

int32_t currentPosition()
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
    return _currentPos;
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <currentPosition+0x14>)
 8002816:	681b      	ldr	r3, [r3, #0]
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	200009e4 	.word	0x200009e4

08002828 <setCurrentPosition>:

void setCurrentPosition(int32_t position)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
    _targetPos = _currentPos = position;
 8002830:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <setCurrentPosition+0x38>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <setCurrentPosition+0x38>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <setCurrentPosition+0x3c>)
 800283c:	6013      	str	r3, [r2, #0]
    _n = 0;
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <setCurrentPosition+0x40>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
    _stepInterval = 0;
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <setCurrentPosition+0x44>)
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
    _speed = 0.0;
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <setCurrentPosition+0x48>)
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	200009e4 	.word	0x200009e4
 8002864:	200009e8 	.word	0x200009e8
 8002868:	20000a08 	.word	0x20000a08
 800286c:	200009dc 	.word	0x200009dc
 8002870:	200009ec 	.word	0x200009ec

08002874 <computeNewSpeed>:

uint32_t computeNewSpeed()
{
 8002874:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
    int32_t distanceTo = distanceToGo(); // +ve is clockwise from curent location
 800287c:	f7ff ffb8 	bl	80027f0 <distanceToGo>
 8002880:	6078      	str	r0, [r7, #4]

    int32_t stepsToStop = (int32_t)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
 8002882:	4b8c      	ldr	r3, [pc, #560]	; (8002ab4 <computeNewSpeed+0x240>)
 8002884:	ed93 7a00 	vldr	s14, [r3]
 8002888:	4b8a      	ldr	r3, [pc, #552]	; (8002ab4 <computeNewSpeed+0x240>)
 800288a:	edd3 7a00 	vldr	s15, [r3]
 800288e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002892:	ee17 0a90 	vmov	r0, s15
 8002896:	f7fd fe87 	bl	80005a8 <__aeabi_f2d>
 800289a:	4604      	mov	r4, r0
 800289c:	460d      	mov	r5, r1
 800289e:	4b86      	ldr	r3, [pc, #536]	; (8002ab8 <computeNewSpeed+0x244>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fd fe80 	bl	80005a8 <__aeabi_f2d>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	f7fd fd1e 	bl	80002ec <__adddf3>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4620      	mov	r0, r4
 80028b6:	4629      	mov	r1, r5
 80028b8:	f7fd fff8 	bl	80008ac <__aeabi_ddiv>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	f7fe f978 	bl	8000bb8 <__aeabi_d2iz>
 80028c8:	4603      	mov	r3, r0
 80028ca:	603b      	str	r3, [r7, #0]

    if (distanceTo == 0 && stepsToStop <= 1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10f      	bne.n	80028f2 <computeNewSpeed+0x7e>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	dc0c      	bgt.n	80028f2 <computeNewSpeed+0x7e>
    {
	// We are at the target and its time to stop
	_stepInterval = 0;
 80028d8:	4b78      	ldr	r3, [pc, #480]	; (8002abc <computeNewSpeed+0x248>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
	_speed = 0.0;
 80028de:	4b75      	ldr	r3, [pc, #468]	; (8002ab4 <computeNewSpeed+0x240>)
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
	_n = 0;
 80028e6:	4b76      	ldr	r3, [pc, #472]	; (8002ac0 <computeNewSpeed+0x24c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
	return _stepInterval;
 80028ec:	4b73      	ldr	r3, [pc, #460]	; (8002abc <computeNewSpeed+0x248>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	e0da      	b.n	8002aa8 <computeNewSpeed+0x234>
    }

    if (distanceTo > 0)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	dd25      	ble.n	8002944 <computeNewSpeed+0xd0>
    {
	// We are anti clockwise from the target
	// Need to go clockwise from here, maybe decelerate now
	if (_n > 0)
 80028f8:	4b71      	ldr	r3, [pc, #452]	; (8002ac0 <computeNewSpeed+0x24c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	dd0f      	ble.n	8002920 <computeNewSpeed+0xac>
	{
	    // Currently accelerating, need to decel now? Or maybe going the wrong way?
	    if ((stepsToStop >= distanceTo) || _direction == DIRECTION_CCW)
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	429a      	cmp	r2, r3
 8002906:	da06      	bge.n	8002916 <computeNewSpeed+0xa2>
 8002908:	4b6e      	ldr	r3, [pc, #440]	; (8002ac4 <computeNewSpeed+0x250>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	f083 0301 	eor.w	r3, r3, #1
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d040      	beq.n	8002998 <computeNewSpeed+0x124>
		_n = -stepsToStop; // Start deceleration
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	425b      	negs	r3, r3
 800291a:	4a69      	ldr	r2, [pc, #420]	; (8002ac0 <computeNewSpeed+0x24c>)
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e03b      	b.n	8002998 <computeNewSpeed+0x124>
	}
	else if (_n < 0)
 8002920:	4b67      	ldr	r3, [pc, #412]	; (8002ac0 <computeNewSpeed+0x24c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	da37      	bge.n	8002998 <computeNewSpeed+0x124>
	{
	    // Currently decelerating, need to accel again?
	    if ((stepsToStop < distanceTo) && _direction == DIRECTION_CW)
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	429a      	cmp	r2, r3
 800292e:	da33      	bge.n	8002998 <computeNewSpeed+0x124>
 8002930:	4b64      	ldr	r3, [pc, #400]	; (8002ac4 <computeNewSpeed+0x250>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d02f      	beq.n	8002998 <computeNewSpeed+0x124>
		_n = -_n; // Start accceleration
 8002938:	4b61      	ldr	r3, [pc, #388]	; (8002ac0 <computeNewSpeed+0x24c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	425b      	negs	r3, r3
 800293e:	4a60      	ldr	r2, [pc, #384]	; (8002ac0 <computeNewSpeed+0x24c>)
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	e029      	b.n	8002998 <computeNewSpeed+0x124>
	}
    }
    else if (distanceTo < 0)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	da26      	bge.n	8002998 <computeNewSpeed+0x124>
    {
	// We are clockwise from the target
	// Need to go anticlockwise from here, maybe decelerate
	if (_n > 0)
 800294a:	4b5d      	ldr	r3, [pc, #372]	; (8002ac0 <computeNewSpeed+0x24c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	dd0d      	ble.n	800296e <computeNewSpeed+0xfa>
	{
	    // Currently accelerating, need to decel now? Or maybe going the wrong way?
	    if ((stepsToStop >= -distanceTo) || _direction == DIRECTION_CW)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	425b      	negs	r3, r3
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	da03      	bge.n	8002964 <computeNewSpeed+0xf0>
 800295c:	4b59      	ldr	r3, [pc, #356]	; (8002ac4 <computeNewSpeed+0x250>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d019      	beq.n	8002998 <computeNewSpeed+0x124>
		_n = -stepsToStop; // Start deceleration
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	425b      	negs	r3, r3
 8002968:	4a55      	ldr	r2, [pc, #340]	; (8002ac0 <computeNewSpeed+0x24c>)
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	e014      	b.n	8002998 <computeNewSpeed+0x124>
	}
	else if (_n < 0)
 800296e:	4b54      	ldr	r3, [pc, #336]	; (8002ac0 <computeNewSpeed+0x24c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	da10      	bge.n	8002998 <computeNewSpeed+0x124>
	{
	    // Currently decelerating, need to accel again?
	    if ((stepsToStop < -distanceTo) && _direction == DIRECTION_CCW)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	425b      	negs	r3, r3
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	da0b      	bge.n	8002998 <computeNewSpeed+0x124>
 8002980:	4b50      	ldr	r3, [pc, #320]	; (8002ac4 <computeNewSpeed+0x250>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	f083 0301 	eor.w	r3, r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d004      	beq.n	8002998 <computeNewSpeed+0x124>
		_n = -_n; // Start accceleration
 800298e:	4b4c      	ldr	r3, [pc, #304]	; (8002ac0 <computeNewSpeed+0x24c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	425b      	negs	r3, r3
 8002994:	4a4a      	ldr	r2, [pc, #296]	; (8002ac0 <computeNewSpeed+0x24c>)
 8002996:	6013      	str	r3, [r2, #0]
	}
    }

    // Need to accelerate or decelerate
    if (_n == 0)
 8002998:	4b49      	ldr	r3, [pc, #292]	; (8002ac0 <computeNewSpeed+0x24c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10c      	bne.n	80029ba <computeNewSpeed+0x146>
    {
	// First step from stopped
	_cn = _c0;
 80029a0:	4b49      	ldr	r3, [pc, #292]	; (8002ac8 <computeNewSpeed+0x254>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a49      	ldr	r2, [pc, #292]	; (8002acc <computeNewSpeed+0x258>)
 80029a6:	6013      	str	r3, [r2, #0]
	_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	bfcc      	ite	gt
 80029ae:	2301      	movgt	r3, #1
 80029b0:	2300      	movle	r3, #0
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	4b43      	ldr	r3, [pc, #268]	; (8002ac4 <computeNewSpeed+0x250>)
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	e04d      	b.n	8002a56 <computeNewSpeed+0x1e2>
    }
    else
    {
	// Subsequent step. Works for accel (n is +_ve) and decel (n is -ve).
	_cn = _cn - ((2.0 * _cn) / ((4.0 * _n) + 1)); // Equation 13
 80029ba:	4b44      	ldr	r3, [pc, #272]	; (8002acc <computeNewSpeed+0x258>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fd fdf2 	bl	80005a8 <__aeabi_f2d>
 80029c4:	4604      	mov	r4, r0
 80029c6:	460d      	mov	r5, r1
 80029c8:	4b40      	ldr	r3, [pc, #256]	; (8002acc <computeNewSpeed+0x258>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fdeb 	bl	80005a8 <__aeabi_f2d>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	f7fd fc89 	bl	80002ec <__adddf3>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4690      	mov	r8, r2
 80029e0:	4699      	mov	r9, r3
 80029e2:	4b37      	ldr	r3, [pc, #220]	; (8002ac0 <computeNewSpeed+0x24c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fd fdcc 	bl	8000584 <__aeabi_i2d>
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	4b37      	ldr	r3, [pc, #220]	; (8002ad0 <computeNewSpeed+0x25c>)
 80029f2:	f7fd fe31 	bl	8000658 <__aeabi_dmul>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4610      	mov	r0, r2
 80029fc:	4619      	mov	r1, r3
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	4b34      	ldr	r3, [pc, #208]	; (8002ad4 <computeNewSpeed+0x260>)
 8002a04:	f7fd fc72 	bl	80002ec <__adddf3>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4640      	mov	r0, r8
 8002a0e:	4649      	mov	r1, r9
 8002a10:	f7fd ff4c 	bl	80008ac <__aeabi_ddiv>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4620      	mov	r0, r4
 8002a1a:	4629      	mov	r1, r5
 8002a1c:	f7fd fc64 	bl	80002e8 <__aeabi_dsub>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	f7fe f90e 	bl	8000c48 <__aeabi_d2f>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	4a27      	ldr	r2, [pc, #156]	; (8002acc <computeNewSpeed+0x258>)
 8002a30:	6013      	str	r3, [r2, #0]
	_cn = _cn >_cmin ? _cn:_cmin; // max(_cn,_cmin)
 8002a32:	4b26      	ldr	r3, [pc, #152]	; (8002acc <computeNewSpeed+0x258>)
 8002a34:	ed93 7a00 	vldr	s14, [r3]
 8002a38:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <computeNewSpeed+0x264>)
 8002a3a:	edd3 7a00 	vldr	s15, [r3]
 8002a3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a46:	dd02      	ble.n	8002a4e <computeNewSpeed+0x1da>
 8002a48:	4b20      	ldr	r3, [pc, #128]	; (8002acc <computeNewSpeed+0x258>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	e001      	b.n	8002a52 <computeNewSpeed+0x1de>
 8002a4e:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <computeNewSpeed+0x264>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1e      	ldr	r2, [pc, #120]	; (8002acc <computeNewSpeed+0x258>)
 8002a54:	6013      	str	r3, [r2, #0]
    }
    _n++;
 8002a56:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <computeNewSpeed+0x24c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	4a18      	ldr	r2, [pc, #96]	; (8002ac0 <computeNewSpeed+0x24c>)
 8002a5e:	6013      	str	r3, [r2, #0]
    _stepInterval = _cn;
 8002a60:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <computeNewSpeed+0x258>)
 8002a62:	edd3 7a00 	vldr	s15, [r3]
 8002a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a6a:	ee17 2a90 	vmov	r2, s15
 8002a6e:	4b13      	ldr	r3, [pc, #76]	; (8002abc <computeNewSpeed+0x248>)
 8002a70:	601a      	str	r2, [r3, #0]
    _speed = 1000000.0 / _cn;
 8002a72:	4b16      	ldr	r3, [pc, #88]	; (8002acc <computeNewSpeed+0x258>)
 8002a74:	ed93 7a00 	vldr	s14, [r3]
 8002a78:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002adc <computeNewSpeed+0x268>
 8002a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <computeNewSpeed+0x240>)
 8002a82:	edc3 7a00 	vstr	s15, [r3]
    if (_direction == DIRECTION_CCW)
 8002a86:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <computeNewSpeed+0x250>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	f083 0301 	eor.w	r3, r3, #1
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <computeNewSpeed+0x230>
	_speed = -_speed;
 8002a94:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <computeNewSpeed+0x240>)
 8002a96:	edd3 7a00 	vldr	s15, [r3]
 8002a9a:	eef1 7a67 	vneg.f32	s15, s15
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <computeNewSpeed+0x240>)
 8002aa0:	edc3 7a00 	vstr	s15, [r3]
    Serial.println(_stepInterval);
    Serial.println(distanceTo);
    Serial.println(stepsToStop);
    Serial.println("-----");
#endif
    return _stepInterval;
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <computeNewSpeed+0x248>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200009ec 	.word	0x200009ec
 8002ab8:	200009f4 	.word	0x200009f4
 8002abc:	200009dc 	.word	0x200009dc
 8002ac0:	20000a08 	.word	0x20000a08
 8002ac4:	200009da 	.word	0x200009da
 8002ac8:	20000a0c 	.word	0x20000a0c
 8002acc:	20000a10 	.word	0x20000a10
 8002ad0:	40100000 	.word	0x40100000
 8002ad4:	3ff00000 	.word	0x3ff00000
 8002ad8:	20000a14 	.word	0x20000a14
 8002adc:	49742400 	.word	0x49742400

08002ae0 <run>:
// Run the motor to implement speed and acceleration in order to proceed to the target position
// You must call this at least once per step, preferably in your main loop
// If the motor is in the desired position, the cost is very small
// returns true if the motor is still running to the target position.
_Bool run()
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
    if (runSpeed())
 8002ae4:	f7ff fe4a 	bl	800277c <runSpeed>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <run+0x12>
	computeNewSpeed();
 8002aee:	f7ff fec1 	bl	8002874 <computeNewSpeed>
    return _speed != 0.0 || distanceToGo() != 0;
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <run+0x3c>)
 8002af4:	edd3 7a00 	vldr	s15, [r3]
 8002af8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b00:	d104      	bne.n	8002b0c <run+0x2c>
 8002b02:	f7ff fe75 	bl	80027f0 <distanceToGo>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <run+0x30>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <run+0x32>
 8002b10:	2300      	movs	r3, #0
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	b2db      	uxtb	r3, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	200009ec 	.word	0x200009ec

08002b20 <setMaxSpeed>:


void setMaxSpeed(float speed)
{
 8002b20:	b5b0      	push	{r4, r5, r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	ed87 0a01 	vstr	s0, [r7, #4]
    if (speed < 0.0)
 8002b2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b36:	d505      	bpl.n	8002b44 <setMaxSpeed+0x24>
       speed = -speed;
 8002b38:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b3c:	eef1 7a67 	vneg.f32	s15, s15
 8002b40:	edc7 7a01 	vstr	s15, [r7, #4]
    if (_maxSpeed != speed)
 8002b44:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <setMaxSpeed+0xb0>)
 8002b46:	edd3 7a00 	vldr	s15, [r3]
 8002b4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b4e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b56:	d037      	beq.n	8002bc8 <setMaxSpeed+0xa8>
    {
	_maxSpeed = speed;
 8002b58:	4a1d      	ldr	r2, [pc, #116]	; (8002bd0 <setMaxSpeed+0xb0>)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6013      	str	r3, [r2, #0]
	_cmin = 1000000.0 / speed;
 8002b5e:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002bd4 <setMaxSpeed+0xb4>
 8002b62:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b6a:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <setMaxSpeed+0xb8>)
 8002b6c:	edc3 7a00 	vstr	s15, [r3]
	// Recompute _n from current speed and adjust speed if accelerating or cruising
	if (_n > 0)
 8002b70:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <setMaxSpeed+0xbc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	dd27      	ble.n	8002bc8 <setMaxSpeed+0xa8>
	{
	    _n = (int32_t)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
 8002b78:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <setMaxSpeed+0xc0>)
 8002b7a:	ed93 7a00 	vldr	s14, [r3]
 8002b7e:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <setMaxSpeed+0xc0>)
 8002b80:	edd3 7a00 	vldr	s15, [r3]
 8002b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b88:	ee17 0a90 	vmov	r0, s15
 8002b8c:	f7fd fd0c 	bl	80005a8 <__aeabi_f2d>
 8002b90:	4604      	mov	r4, r0
 8002b92:	460d      	mov	r5, r1
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <setMaxSpeed+0xc4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fd05 	bl	80005a8 <__aeabi_f2d>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	f7fd fba3 	bl	80002ec <__adddf3>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4620      	mov	r0, r4
 8002bac:	4629      	mov	r1, r5
 8002bae:	f7fd fe7d 	bl	80008ac <__aeabi_ddiv>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f7fd fffd 	bl	8000bb8 <__aeabi_d2iz>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4a06      	ldr	r2, [pc, #24]	; (8002bdc <setMaxSpeed+0xbc>)
 8002bc2:	6013      	str	r3, [r2, #0]
	    computeNewSpeed();
 8002bc4:	f7ff fe56 	bl	8002874 <computeNewSpeed>
	}
    }
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bdb0      	pop	{r4, r5, r7, pc}
 8002bd0:	200009f0 	.word	0x200009f0
 8002bd4:	49742400 	.word	0x49742400
 8002bd8:	20000a14 	.word	0x20000a14
 8002bdc:	20000a08 	.word	0x20000a08
 8002be0:	200009ec 	.word	0x200009ec
 8002be4:	200009f4 	.word	0x200009f4

08002be8 <setAcceleration>:
{
    return _maxSpeed;
}

void setAcceleration(float acceleration)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	ed87 0a01 	vstr	s0, [r7, #4]
    if (acceleration == 0.0)
 8002bf2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bf6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfe:	d05f      	beq.n	8002cc0 <setAcceleration+0xd8>
	return;
    if (acceleration < 0.0)
 8002c00:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0c:	d505      	bpl.n	8002c1a <setAcceleration+0x32>
      acceleration = -acceleration;
 8002c0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c12:	eef1 7a67 	vneg.f32	s15, s15
 8002c16:	edc7 7a01 	vstr	s15, [r7, #4]
    if (_acceleration != acceleration)
 8002c1a:	4b2f      	ldr	r3, [pc, #188]	; (8002cd8 <setAcceleration+0xf0>)
 8002c1c:	edd3 7a00 	vldr	s15, [r3]
 8002c20:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c24:	eeb4 7a67 	vcmp.f32	s14, s15
 8002c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2c:	d049      	beq.n	8002cc2 <setAcceleration+0xda>
    {
	// Recompute _n per Equation 17
	_n = _n * (_acceleration / acceleration);
 8002c2e:	4b2b      	ldr	r3, [pc, #172]	; (8002cdc <setAcceleration+0xf4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	ee07 3a90 	vmov	s15, r3
 8002c36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c3a:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <setAcceleration+0xf0>)
 8002c3c:	ed93 6a00 	vldr	s12, [r3]
 8002c40:	edd7 6a01 	vldr	s13, [r7, #4]
 8002c44:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c50:	ee17 2a90 	vmov	r2, s15
 8002c54:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <setAcceleration+0xf4>)
 8002c56:	601a      	str	r2, [r3, #0]
	// New c0 per Equation 7, with correction per Equation 15
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7fd fca5 	bl	80005a8 <__aeabi_f2d>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	f04f 0000 	mov.w	r0, #0
 8002c66:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002c6a:	f7fd fe1f 	bl	80008ac <__aeabi_ddiv>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	ec43 2b17 	vmov	d7, r2, r3
 8002c76:	eeb0 0a47 	vmov.f32	s0, s14
 8002c7a:	eef0 0a67 	vmov.f32	s1, s15
 8002c7e:	f007 ff2b 	bl	800aad8 <sqrt>
 8002c82:	ec51 0b10 	vmov	r0, r1, d0
 8002c86:	a310      	add	r3, pc, #64	; (adr r3, 8002cc8 <setAcceleration+0xe0>)
 8002c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8c:	f7fd fce4 	bl	8000658 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4610      	mov	r0, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	a30d      	add	r3, pc, #52	; (adr r3, 8002cd0 <setAcceleration+0xe8>)
 8002c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9e:	f7fd fcdb 	bl	8000658 <__aeabi_dmul>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f7fd ffcd 	bl	8000c48 <__aeabi_d2f>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4a0b      	ldr	r2, [pc, #44]	; (8002ce0 <setAcceleration+0xf8>)
 8002cb2:	6013      	str	r3, [r2, #0]
	_acceleration = acceleration;
 8002cb4:	4a08      	ldr	r2, [pc, #32]	; (8002cd8 <setAcceleration+0xf0>)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6013      	str	r3, [r2, #0]
	computeNewSpeed();
 8002cba:	f7ff fddb 	bl	8002874 <computeNewSpeed>
 8002cbe:	e000      	b.n	8002cc2 <setAcceleration+0xda>
	return;
 8002cc0:	bf00      	nop
    }
}
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	c083126f 	.word	0xc083126f
 8002ccc:	3fe5a1ca 	.word	0x3fe5a1ca
 8002cd0:	00000000 	.word	0x00000000
 8002cd4:	412e8480 	.word	0x412e8480
 8002cd8:	200009f4 	.word	0x200009f4
 8002cdc:	20000a08 	.word	0x20000a08
 8002ce0:	20000a0c 	.word	0x20000a0c
 8002ce4:	00000000 	.word	0x00000000

08002ce8 <setSpeed>:
{
    return _acceleration;
}

void setSpeed(float speed)
{
 8002ce8:	b5b0      	push	{r4, r5, r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	ed87 0a01 	vstr	s0, [r7, #4]
    if (speed == _speed)
 8002cf2:	4b33      	ldr	r3, [pc, #204]	; (8002dc0 <setSpeed+0xd8>)
 8002cf4:	edd3 7a00 	vldr	s15, [r3]
 8002cf8:	ed97 7a01 	vldr	s14, [r7, #4]
 8002cfc:	eeb4 7a67 	vcmp.f32	s14, s15
 8002d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d04:	d054      	beq.n	8002db0 <setSpeed+0xc8>
        return;
    speed = (speed) > (-_maxSpeed) ? ( (speed < _maxSpeed)?(speed):(_maxSpeed) ) : (-_maxSpeed) ; //constrain(speed, -_maxSpeed, _maxSpeed);
 8002d06:	4b2f      	ldr	r3, [pc, #188]	; (8002dc4 <setSpeed+0xdc>)
 8002d08:	edd3 7a00 	vldr	s15, [r3]
 8002d0c:	eef1 7a67 	vneg.f32	s15, s15
 8002d10:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1c:	dd10      	ble.n	8002d40 <setSpeed+0x58>
 8002d1e:	4b29      	ldr	r3, [pc, #164]	; (8002dc4 <setSpeed+0xdc>)
 8002d20:	edd3 7a00 	vldr	s15, [r3]
 8002d24:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d30:	d502      	bpl.n	8002d38 <setSpeed+0x50>
 8002d32:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d36:	e008      	b.n	8002d4a <setSpeed+0x62>
 8002d38:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <setSpeed+0xdc>)
 8002d3a:	edd3 7a00 	vldr	s15, [r3]
 8002d3e:	e004      	b.n	8002d4a <setSpeed+0x62>
 8002d40:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <setSpeed+0xdc>)
 8002d42:	edd3 7a00 	vldr	s15, [r3]
 8002d46:	eef1 7a67 	vneg.f32	s15, s15
 8002d4a:	edc7 7a01 	vstr	s15, [r7, #4]

    if (speed == 0.0)
 8002d4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5a:	d103      	bne.n	8002d64 <setSpeed+0x7c>
	_stepInterval = 0;
 8002d5c:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <setSpeed+0xe0>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e021      	b.n	8002da8 <setSpeed+0xc0>
    else
    {
	_stepInterval = fabs(1000000.0 / speed);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7fd fc1f 	bl	80005a8 <__aeabi_f2d>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	a112      	add	r1, pc, #72	; (adr r1, 8002db8 <setSpeed+0xd0>)
 8002d70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d74:	f7fd fd9a 	bl	80008ac <__aeabi_ddiv>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4614      	mov	r4, r2
 8002d7e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002d82:	4620      	mov	r0, r4
 8002d84:	4629      	mov	r1, r5
 8002d86:	f7fd ff3f 	bl	8000c08 <__aeabi_d2uiz>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4a0e      	ldr	r2, [pc, #56]	; (8002dc8 <setSpeed+0xe0>)
 8002d8e:	6013      	str	r3, [r2, #0]
	_direction = (speed > 0.0) ? DIRECTION_CW : DIRECTION_CCW;
 8002d90:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9c:	bfcc      	ite	gt
 8002d9e:	2301      	movgt	r3, #1
 8002da0:	2300      	movle	r3, #0
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <setSpeed+0xe4>)
 8002da6:	701a      	strb	r2, [r3, #0]
    }
    _speed = speed;
 8002da8:	4a05      	ldr	r2, [pc, #20]	; (8002dc0 <setSpeed+0xd8>)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e000      	b.n	8002db2 <setSpeed+0xca>
        return;
 8002db0:	bf00      	nop
    //added
//    computeNewSpeed();
}
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bdb0      	pop	{r4, r5, r7, pc}
 8002db8:	00000000 	.word	0x00000000
 8002dbc:	412e8480 	.word	0x412e8480
 8002dc0:	200009ec 	.word	0x200009ec
 8002dc4:	200009f0 	.word	0x200009f0
 8002dc8:	200009dc 	.word	0x200009dc
 8002dcc:	200009da 	.word	0x200009da

08002dd0 <setOutputPins>:

void setOutputPins(uint8_t mask)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
    uint8_t numpins = 2;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	73bb      	strb	r3, [r7, #14]

    uint8_t i;
    for (i = 0; i < numpins; i++)
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
 8002de2:	e038      	b.n	8002e56 <setOutputPins+0x86>
    	if(i==1){ //step pin
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d119      	bne.n	8002e1e <setOutputPins+0x4e>
    		HAL_GPIO_WritePin( step_port, step_pin, (mask & (1 << i)) ? ( 1  ^ _pinInverted[i]) : (0 ^ _pinInverted[i]) );
 8002dea:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <setOutputPins+0x98>)
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	4b1f      	ldr	r3, [pc, #124]	; (8002e6c <setOutputPins+0x9c>)
 8002df0:	8819      	ldrh	r1, [r3, #0]
 8002df2:	79fa      	ldrb	r2, [r7, #7]
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	fa42 f303 	asr.w	r3, r2, r3
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d006      	beq.n	8002e10 <setOutputPins+0x40>
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	4a1a      	ldr	r2, [pc, #104]	; (8002e70 <setOutputPins+0xa0>)
 8002e06:	5cd3      	ldrb	r3, [r2, r3]
 8002e08:	f083 0301 	eor.w	r3, r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e002      	b.n	8002e16 <setOutputPins+0x46>
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	4a17      	ldr	r2, [pc, #92]	; (8002e70 <setOutputPins+0xa0>)
 8002e14:	5cd3      	ldrb	r3, [r2, r3]
 8002e16:	461a      	mov	r2, r3
 8002e18:	f000 ff76 	bl	8003d08 <HAL_GPIO_WritePin>
 8002e1c:	e018      	b.n	8002e50 <setOutputPins+0x80>
    	}
    	else{
    		HAL_GPIO_WritePin( dir_port, dir_pin, (mask & (1 << i)) ? ( 1  ^ _pinInverted[i]) : (0 ^ _pinInverted[i]) );
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <setOutputPins+0xa4>)
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <setOutputPins+0xa8>)
 8002e24:	8819      	ldrh	r1, [r3, #0]
 8002e26:	79fa      	ldrb	r2, [r7, #7]
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	fa42 f303 	asr.w	r3, r2, r3
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d006      	beq.n	8002e44 <setOutputPins+0x74>
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	4a0d      	ldr	r2, [pc, #52]	; (8002e70 <setOutputPins+0xa0>)
 8002e3a:	5cd3      	ldrb	r3, [r2, r3]
 8002e3c:	f083 0301 	eor.w	r3, r3, #1
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	e002      	b.n	8002e4a <setOutputPins+0x7a>
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	4a0a      	ldr	r2, [pc, #40]	; (8002e70 <setOutputPins+0xa0>)
 8002e48:	5cd3      	ldrb	r3, [r2, r3]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f000 ff5c 	bl	8003d08 <HAL_GPIO_WritePin>
    for (i = 0; i < numpins; i++)
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	3301      	adds	r3, #1
 8002e54:	73fb      	strb	r3, [r7, #15]
 8002e56:	7bfa      	ldrb	r2, [r7, #15]
 8002e58:	7bbb      	ldrb	r3, [r7, #14]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d3c2      	bcc.n	8002de4 <setOutputPins+0x14>
    	}
}
 8002e5e:	bf00      	nop
 8002e60:	bf00      	nop
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	200009cc 	.word	0x200009cc
 8002e6c:	200009d0 	.word	0x200009d0
 8002e70:	200009e0 	.word	0x200009e0
 8002e74:	200009d4 	.word	0x200009d4
 8002e78:	200009d8 	.word	0x200009d8

08002e7c <step>:
float speed()
{
    return _speed;
}

void step(uint32_t step){
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

	//making step with driver
	step1(step);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f805 	bl	8002e94 <step1>

}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <step1>:

// 1 pin step function (ie for stepper drivers)
// This is passed the current step number (0 to 7)
// Subclasses can override
void step1(uint32_t step)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	(void)(step); // Unused

	// _pin[0] is step, _pin[1] is direction
	setOutputPins(_direction ? 0b10 : 0b00); // Set direction first else get rogue pulses
 8002e9c:	4b13      	ldr	r3, [pc, #76]	; (8002eec <step1+0x58>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <step1+0x14>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e000      	b.n	8002eaa <step1+0x16>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff90 	bl	8002dd0 <setOutputPins>
	setOutputPins(_direction ? 0b11 : 0b01); // step HIGH
 8002eb0:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <step1+0x58>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <step1+0x28>
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e000      	b.n	8002ebe <step1+0x2a>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff ff86 	bl	8002dd0 <setOutputPins>
	// Caution 200ns setup time
	// Delay the minimum allowed pulse width

	delay_us(_minPulseWidth);
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <step1+0x5c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 f868 	bl	8002fa0 <delay_us>
	setOutputPins(_direction ? 0b10 : 0b00); // step LOW
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <step1+0x58>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <step1+0x48>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e000      	b.n	8002ede <step1+0x4a>
 8002edc:	2300      	movs	r3, #0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff ff76 	bl	8002dd0 <setOutputPins>
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	200009da 	.word	0x200009da
 8002ef0:	20000a00 	.word	0x20000a00

08002ef4 <runToPosition>:
    _pinInverted[1] = directionInvert;
    _enableInverted = enableInvert;
}

void runToPosition()
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
    while (run());
 8002ef8:	bf00      	nop
 8002efa:	f7ff fdf1 	bl	8002ae0 <run>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1fa      	bne.n	8002efa <runToPosition+0x6>
//	YIELD; // Let system housekeeping occur
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <stop>:
    moveTo(position);
    runToPosition();
}

void stop()
{
 8002f0c:	b5b0      	push	{r4, r5, r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
    if (_speed != 0.0)
 8002f12:	4b21      	ldr	r3, [pc, #132]	; (8002f98 <stop+0x8c>)
 8002f14:	edd3 7a00 	vldr	s15, [r3]
 8002f18:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f20:	d036      	beq.n	8002f90 <stop+0x84>
    {
	int32_t stepsToStop = (int32_t)((_speed * _speed) / (2.0 * _acceleration)) + 1; // Equation 16 (+integer rounding)
 8002f22:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <stop+0x8c>)
 8002f24:	ed93 7a00 	vldr	s14, [r3]
 8002f28:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <stop+0x8c>)
 8002f2a:	edd3 7a00 	vldr	s15, [r3]
 8002f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f32:	ee17 0a90 	vmov	r0, s15
 8002f36:	f7fd fb37 	bl	80005a8 <__aeabi_f2d>
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	460d      	mov	r5, r1
 8002f3e:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <stop+0x90>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd fb30 	bl	80005a8 <__aeabi_f2d>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	f7fd f9ce 	bl	80002ec <__adddf3>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4620      	mov	r0, r4
 8002f56:	4629      	mov	r1, r5
 8002f58:	f7fd fca8 	bl	80008ac <__aeabi_ddiv>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	f7fd fe28 	bl	8000bb8 <__aeabi_d2iz>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	607b      	str	r3, [r7, #4]
	if (_speed > 0)
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <stop+0x8c>)
 8002f70:	edd3 7a00 	vldr	s15, [r3]
 8002f74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7c:	dd03      	ble.n	8002f86 <stop+0x7a>
	    move(stepsToStop);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff fb4e 	bl	8002620 <move>
	else
	    move(-stepsToStop);
    }
}
 8002f84:	e004      	b.n	8002f90 <stop+0x84>
	    move(-stepsToStop);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	425b      	negs	r3, r3
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fb48 	bl	8002620 <move>
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bdb0      	pop	{r4, r5, r7, pc}
 8002f98:	200009ec 	.word	0x200009ec
 8002f9c:	200009f4 	.word	0x200009f4

08002fa0 <delay_us>:
}



/*********** Helper Functions ************/
void delay_us (uint16_t us){
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	80fb      	strh	r3, [r7, #6]
//{	__HAL_TIM_DISABLE
//	HAL_TIM_Base_Stop(&htim7);
	__HAL_TIM_SET_COUNTER(&htim7,0x0000);  // set the counter value a 0
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <delay_us+0x30>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24
#if debug
	counter = __HAL_TIM_GET_COUNTER(&htim7);
#endif
//	HAL_TIM_Base_Start(&htim7);

	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 8002fb2:	bf00      	nop
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <delay_us+0x30>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d3f9      	bcc.n	8002fb4 <delay_us+0x14>
#if debug
	counter = __HAL_TIM_GET_COUNTER(&htim7);
#endif
}
 8002fc0:	bf00      	nop
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	200003e8 	.word	0x200003e8

08002fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]
 8002fde:	4b10      	ldr	r3, [pc, #64]	; (8003020 <HAL_MspInit+0x4c>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	4a0f      	ldr	r2, [pc, #60]	; (8003020 <HAL_MspInit+0x4c>)
 8002fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fea:	4b0d      	ldr	r3, [pc, #52]	; (8003020 <HAL_MspInit+0x4c>)
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff2:	607b      	str	r3, [r7, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	4b09      	ldr	r3, [pc, #36]	; (8003020 <HAL_MspInit+0x4c>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	4a08      	ldr	r2, [pc, #32]	; (8003020 <HAL_MspInit+0x4c>)
 8003000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003004:	6413      	str	r3, [r2, #64]	; 0x40
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_MspInit+0x4c>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800

08003024 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	; 0x28
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302c:	f107 0314 	add.w	r3, r7, #20
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a19      	ldr	r2, [pc, #100]	; (80030a8 <HAL_SPI_MspInit+0x84>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d12b      	bne.n	800309e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	4b18      	ldr	r3, [pc, #96]	; (80030ac <HAL_SPI_MspInit+0x88>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	4a17      	ldr	r2, [pc, #92]	; (80030ac <HAL_SPI_MspInit+0x88>)
 8003050:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003054:	6453      	str	r3, [r2, #68]	; 0x44
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <HAL_SPI_MspInit+0x88>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	4b11      	ldr	r3, [pc, #68]	; (80030ac <HAL_SPI_MspInit+0x88>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	4a10      	ldr	r2, [pc, #64]	; (80030ac <HAL_SPI_MspInit+0x88>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6313      	str	r3, [r2, #48]	; 0x30
 8003072:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <HAL_SPI_MspInit+0x88>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_Clk_Pin|SPI_MOSI_Pin;
 800307e:	23a0      	movs	r3, #160	; 0xa0
 8003080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003082:	2302      	movs	r3, #2
 8003084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308a:	2303      	movs	r3, #3
 800308c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800308e:	2305      	movs	r3, #5
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003092:	f107 0314 	add.w	r3, r7, #20
 8003096:	4619      	mov	r1, r3
 8003098:	4805      	ldr	r0, [pc, #20]	; (80030b0 <HAL_SPI_MspInit+0x8c>)
 800309a:	f000 fc89 	bl	80039b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800309e:	bf00      	nop
 80030a0:	3728      	adds	r7, #40	; 0x28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40013000 	.word	0x40013000
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40020000 	.word	0x40020000

080030b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]
 80030ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d4:	d133      	bne.n	800313e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <HAL_TIM_Encoder_MspInit+0x94>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	4a1a      	ldr	r2, [pc, #104]	; (8003148 <HAL_TIM_Encoder_MspInit+0x94>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6413      	str	r3, [r2, #64]	; 0x40
 80030e6:	4b18      	ldr	r3, [pc, #96]	; (8003148 <HAL_TIM_Encoder_MspInit+0x94>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	4b14      	ldr	r3, [pc, #80]	; (8003148 <HAL_TIM_Encoder_MspInit+0x94>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	4a13      	ldr	r2, [pc, #76]	; (8003148 <HAL_TIM_Encoder_MspInit+0x94>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6313      	str	r3, [r2, #48]	; 0x30
 8003102:	4b11      	ldr	r3, [pc, #68]	; (8003148 <HAL_TIM_Encoder_MspInit+0x94>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A_signal_Pin|B_signal_Pin;
 800310e:	2303      	movs	r3, #3
 8003110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003112:	2302      	movs	r3, #2
 8003114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311a:	2300      	movs	r3, #0
 800311c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800311e:	2301      	movs	r3, #1
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003122:	f107 0314 	add.w	r3, r7, #20
 8003126:	4619      	mov	r1, r3
 8003128:	4808      	ldr	r0, [pc, #32]	; (800314c <HAL_TIM_Encoder_MspInit+0x98>)
 800312a:	f000 fc41 	bl	80039b0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800312e:	2200      	movs	r2, #0
 8003130:	2100      	movs	r1, #0
 8003132:	201c      	movs	r0, #28
 8003134:	f000 fb65 	bl	8003802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003138:	201c      	movs	r0, #28
 800313a:	f000 fb7e 	bl	800383a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800313e:	bf00      	nop
 8003140:	3728      	adds	r7, #40	; 0x28
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800
 800314c:	40020000 	.word	0x40020000

08003150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a15      	ldr	r2, [pc, #84]	; (80031b4 <HAL_TIM_Base_MspInit+0x64>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d10e      	bne.n	8003180 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <HAL_TIM_Base_MspInit+0x68>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	4a13      	ldr	r2, [pc, #76]	; (80031b8 <HAL_TIM_Base_MspInit+0x68>)
 800316c:	f043 0310 	orr.w	r3, r3, #16
 8003170:	6413      	str	r3, [r2, #64]	; 0x40
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_TIM_Base_MspInit+0x68>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800317e:	e012      	b.n	80031a6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM7)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0d      	ldr	r2, [pc, #52]	; (80031bc <HAL_TIM_Base_MspInit+0x6c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d10d      	bne.n	80031a6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <HAL_TIM_Base_MspInit+0x68>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	4a09      	ldr	r2, [pc, #36]	; (80031b8 <HAL_TIM_Base_MspInit+0x68>)
 8003194:	f043 0320 	orr.w	r3, r3, #32
 8003198:	6413      	str	r3, [r2, #64]	; 0x40
 800319a:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <HAL_TIM_Base_MspInit+0x68>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
}
 80031a6:	bf00      	nop
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40001000 	.word	0x40001000
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40001400 	.word	0x40001400

080031c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	; 0x28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c8:	f107 0314 	add.w	r3, r7, #20
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1d      	ldr	r2, [pc, #116]	; (8003254 <HAL_UART_MspInit+0x94>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d133      	bne.n	800324a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <HAL_UART_MspInit+0x98>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	4a1b      	ldr	r2, [pc, #108]	; (8003258 <HAL_UART_MspInit+0x98>)
 80031ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f0:	6413      	str	r3, [r2, #64]	; 0x40
 80031f2:	4b19      	ldr	r3, [pc, #100]	; (8003258 <HAL_UART_MspInit+0x98>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	4b15      	ldr	r3, [pc, #84]	; (8003258 <HAL_UART_MspInit+0x98>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	4a14      	ldr	r2, [pc, #80]	; (8003258 <HAL_UART_MspInit+0x98>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6313      	str	r3, [r2, #48]	; 0x30
 800320e:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_UART_MspInit+0x98>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800321a:	230c      	movs	r3, #12
 800321c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321e:	2302      	movs	r3, #2
 8003220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003226:	2303      	movs	r3, #3
 8003228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800322a:	2307      	movs	r3, #7
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800322e:	f107 0314 	add.w	r3, r7, #20
 8003232:	4619      	mov	r1, r3
 8003234:	4809      	ldr	r0, [pc, #36]	; (800325c <HAL_UART_MspInit+0x9c>)
 8003236:	f000 fbbb 	bl	80039b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800323a:	2200      	movs	r2, #0
 800323c:	2100      	movs	r1, #0
 800323e:	2026      	movs	r0, #38	; 0x26
 8003240:	f000 fadf 	bl	8003802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003244:	2026      	movs	r0, #38	; 0x26
 8003246:	f000 faf8 	bl	800383a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800324a:	bf00      	nop
 800324c:	3728      	adds	r7, #40	; 0x28
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40004400 	.word	0x40004400
 8003258:	40023800 	.word	0x40023800
 800325c:	40020000 	.word	0x40020000

08003260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003264:	e7fe      	b.n	8003264 <NMI_Handler+0x4>

08003266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003266:	b480      	push	{r7}
 8003268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800326a:	e7fe      	b.n	800326a <HardFault_Handler+0x4>

0800326c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003270:	e7fe      	b.n	8003270 <MemManage_Handler+0x4>

08003272 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003272:	b480      	push	{r7}
 8003274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003276:	e7fe      	b.n	8003276 <BusFault_Handler+0x4>

08003278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800327c:	e7fe      	b.n	800327c <UsageFault_Handler+0x4>

0800327e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800327e:	b480      	push	{r7}
 8003280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003282:	bf00      	nop
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800329a:	b480      	push	{r7}
 800329c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032ac:	f000 f98a 	bl	80035c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Z_reference_Pin);
 80032b8:	2001      	movs	r0, #1
 80032ba:	f000 fd3f 	bl	8003d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Camera_input_Pin);
 80032c6:	2008      	movs	r0, #8
 80032c8:	f000 fd38 	bl	8003d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(P_limit_Pin);
 80032d4:	2010      	movs	r0, #16
 80032d6:	f000 fd31 	bl	8003d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}

080032de <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Q_limit_Pin);
 80032e2:	2020      	movs	r0, #32
 80032e4:	f000 fd2a 	bl	8003d3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Z_END_STOP_Pin);
 80032e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80032ec:	f000 fd26 	bl	8003d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80032f0:	bf00      	nop
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <TIM2_IRQHandler+0x10>)
 80032fa:	f001 fd93 	bl	8004e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000358 	.word	0x20000358

08003308 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800330c:	4802      	ldr	r0, [pc, #8]	; (8003318 <USART2_IRQHandler+0x10>)
 800330e:	f002 f98d 	bl	800562c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000430 	.word	0x20000430

0800331c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
	return 1;
 8003320:	2301      	movs	r3, #1
}
 8003322:	4618      	mov	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <_kill>:

int _kill(int pid, int sig)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003336:	f003 f8d5 	bl	80064e4 <__errno>
 800333a:	4603      	mov	r3, r0
 800333c:	2216      	movs	r2, #22
 800333e:	601a      	str	r2, [r3, #0]
	return -1;
 8003340:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <_exit>:

void _exit (int status)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003354:	f04f 31ff 	mov.w	r1, #4294967295
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ffe7 	bl	800332c <_kill>
	while (1) {}		/* Make sure we hang here */
 800335e:	e7fe      	b.n	800335e <_exit+0x12>

08003360 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	e00a      	b.n	8003388 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003372:	f3af 8000 	nop.w
 8003376:	4601      	mov	r1, r0
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	60ba      	str	r2, [r7, #8]
 800337e:	b2ca      	uxtb	r2, r1
 8003380:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	3301      	adds	r3, #1
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	429a      	cmp	r2, r3
 800338e:	dbf0      	blt.n	8003372 <_read+0x12>
	}

return len;
 8003390:	687b      	ldr	r3, [r7, #4]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b086      	sub	sp, #24
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	e009      	b.n	80033c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	60ba      	str	r2, [r7, #8]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	3301      	adds	r3, #1
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	dbf1      	blt.n	80033ac <_write+0x12>
	}
	return len;
 80033c8:	687b      	ldr	r3, [r7, #4]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <_close>:

int _close(int file)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
	return -1;
 80033da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033fa:	605a      	str	r2, [r3, #4]
	return 0;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <_isatty>:

int _isatty(int file)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
	return 1;
 8003412:	2301      	movs	r3, #1
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
	return 0;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
	...

0800343c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003444:	4a14      	ldr	r2, [pc, #80]	; (8003498 <_sbrk+0x5c>)
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <_sbrk+0x60>)
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003450:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <_sbrk+0x64>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d102      	bne.n	800345e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003458:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <_sbrk+0x64>)
 800345a:	4a12      	ldr	r2, [pc, #72]	; (80034a4 <_sbrk+0x68>)
 800345c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800345e:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <_sbrk+0x64>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4413      	add	r3, r2
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	429a      	cmp	r2, r3
 800346a:	d207      	bcs.n	800347c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800346c:	f003 f83a 	bl	80064e4 <__errno>
 8003470:	4603      	mov	r3, r0
 8003472:	220c      	movs	r2, #12
 8003474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003476:	f04f 33ff 	mov.w	r3, #4294967295
 800347a:	e009      	b.n	8003490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800347c:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <_sbrk+0x64>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003482:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <_sbrk+0x64>)
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4413      	add	r3, r2
 800348a:	4a05      	ldr	r2, [pc, #20]	; (80034a0 <_sbrk+0x64>)
 800348c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800348e:	68fb      	ldr	r3, [r7, #12]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	20020000 	.word	0x20020000
 800349c:	00000400 	.word	0x00000400
 80034a0:	20000a18 	.word	0x20000a18
 80034a4:	20000a30 	.word	0x20000a30

080034a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <SystemInit+0x20>)
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b2:	4a05      	ldr	r2, [pc, #20]	; (80034c8 <SystemInit+0x20>)
 80034b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80034cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003504 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034d0:	480d      	ldr	r0, [pc, #52]	; (8003508 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034d2:	490e      	ldr	r1, [pc, #56]	; (800350c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80034d4:	4a0e      	ldr	r2, [pc, #56]	; (8003510 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034d8:	e002      	b.n	80034e0 <LoopCopyDataInit>

080034da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034de:	3304      	adds	r3, #4

080034e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034e4:	d3f9      	bcc.n	80034da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034e6:	4a0b      	ldr	r2, [pc, #44]	; (8003514 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034e8:	4c0b      	ldr	r4, [pc, #44]	; (8003518 <LoopFillZerobss+0x26>)
  movs r3, #0
 80034ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034ec:	e001      	b.n	80034f2 <LoopFillZerobss>

080034ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034f0:	3204      	adds	r2, #4

080034f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034f4:	d3fb      	bcc.n	80034ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034f6:	f7ff ffd7 	bl	80034a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034fa:	f002 fff9 	bl	80064f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034fe:	f7fe fb0d 	bl	8001b1c <main>
  bx  lr    
 8003502:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003504:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800350c:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8003510:	0800b2e8 	.word	0x0800b2e8
  ldr r2, =_sbss
 8003514:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8003518:	20000a30 	.word	0x20000a30

0800351c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800351c:	e7fe      	b.n	800351c <ADC_IRQHandler>
	...

08003520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003524:	4b0e      	ldr	r3, [pc, #56]	; (8003560 <HAL_Init+0x40>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a0d      	ldr	r2, [pc, #52]	; (8003560 <HAL_Init+0x40>)
 800352a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800352e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_Init+0x40>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <HAL_Init+0x40>)
 8003536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800353a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800353c:	4b08      	ldr	r3, [pc, #32]	; (8003560 <HAL_Init+0x40>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a07      	ldr	r2, [pc, #28]	; (8003560 <HAL_Init+0x40>)
 8003542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003546:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003548:	2003      	movs	r0, #3
 800354a:	f000 f94f 	bl	80037ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800354e:	2000      	movs	r0, #0
 8003550:	f000 f808 	bl	8003564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003554:	f7ff fd3e 	bl	8002fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40023c00 	.word	0x40023c00

08003564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800356c:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <HAL_InitTick+0x54>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	4b12      	ldr	r3, [pc, #72]	; (80035bc <HAL_InitTick+0x58>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	4619      	mov	r1, r3
 8003576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800357a:	fbb3 f3f1 	udiv	r3, r3, r1
 800357e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f975 	bl	8003872 <HAL_SYSTICK_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e00e      	b.n	80035b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b0f      	cmp	r3, #15
 8003596:	d80a      	bhi.n	80035ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003598:	2200      	movs	r2, #0
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	f000 f92f 	bl	8003802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035a4:	4a06      	ldr	r2, [pc, #24]	; (80035c0 <HAL_InitTick+0x5c>)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	e000      	b.n	80035b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	20000070 	.word	0x20000070
 80035bc:	20000078 	.word	0x20000078
 80035c0:	20000074 	.word	0x20000074

080035c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035c8:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <HAL_IncTick+0x20>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_IncTick+0x24>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4413      	add	r3, r2
 80035d4:	4a04      	ldr	r2, [pc, #16]	; (80035e8 <HAL_IncTick+0x24>)
 80035d6:	6013      	str	r3, [r2, #0]
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000078 	.word	0x20000078
 80035e8:	20000a1c 	.word	0x20000a1c

080035ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return uwTick;
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <HAL_GetTick+0x14>)
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000a1c 	.word	0x20000a1c

08003604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <__NVIC_SetPriorityGrouping+0x44>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003620:	4013      	ands	r3, r2
 8003622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800362c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003636:	4a04      	ldr	r2, [pc, #16]	; (8003648 <__NVIC_SetPriorityGrouping+0x44>)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	60d3      	str	r3, [r2, #12]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003650:	4b04      	ldr	r3, [pc, #16]	; (8003664 <__NVIC_GetPriorityGrouping+0x18>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	0a1b      	lsrs	r3, r3, #8
 8003656:	f003 0307 	and.w	r3, r3, #7
}
 800365a:	4618      	mov	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	2b00      	cmp	r3, #0
 8003678:	db0b      	blt.n	8003692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	f003 021f 	and.w	r2, r3, #31
 8003680:	4907      	ldr	r1, [pc, #28]	; (80036a0 <__NVIC_EnableIRQ+0x38>)
 8003682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	2001      	movs	r0, #1
 800368a:	fa00 f202 	lsl.w	r2, r0, r2
 800368e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	e000e100 	.word	0xe000e100

080036a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	db12      	blt.n	80036dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	f003 021f 	and.w	r2, r3, #31
 80036bc:	490a      	ldr	r1, [pc, #40]	; (80036e8 <__NVIC_DisableIRQ+0x44>)
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	2001      	movs	r0, #1
 80036c6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ca:	3320      	adds	r3, #32
 80036cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80036d0:	f3bf 8f4f 	dsb	sy
}
 80036d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80036d6:	f3bf 8f6f 	isb	sy
}
 80036da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	e000e100 	.word	0xe000e100

080036ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	6039      	str	r1, [r7, #0]
 80036f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	db0a      	blt.n	8003716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	b2da      	uxtb	r2, r3
 8003704:	490c      	ldr	r1, [pc, #48]	; (8003738 <__NVIC_SetPriority+0x4c>)
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	0112      	lsls	r2, r2, #4
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	440b      	add	r3, r1
 8003710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003714:	e00a      	b.n	800372c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4908      	ldr	r1, [pc, #32]	; (800373c <__NVIC_SetPriority+0x50>)
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	3b04      	subs	r3, #4
 8003724:	0112      	lsls	r2, r2, #4
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	440b      	add	r3, r1
 800372a:	761a      	strb	r2, [r3, #24]
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000e100 	.word	0xe000e100
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003740:	b480      	push	{r7}
 8003742:	b089      	sub	sp, #36	; 0x24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f1c3 0307 	rsb	r3, r3, #7
 800375a:	2b04      	cmp	r3, #4
 800375c:	bf28      	it	cs
 800375e:	2304      	movcs	r3, #4
 8003760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3304      	adds	r3, #4
 8003766:	2b06      	cmp	r3, #6
 8003768:	d902      	bls.n	8003770 <NVIC_EncodePriority+0x30>
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3b03      	subs	r3, #3
 800376e:	e000      	b.n	8003772 <NVIC_EncodePriority+0x32>
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003774:	f04f 32ff 	mov.w	r2, #4294967295
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43da      	mvns	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	401a      	ands	r2, r3
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003788:	f04f 31ff 	mov.w	r1, #4294967295
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	fa01 f303 	lsl.w	r3, r1, r3
 8003792:	43d9      	mvns	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003798:	4313      	orrs	r3, r2
         );
}
 800379a:	4618      	mov	r0, r3
 800379c:	3724      	adds	r7, #36	; 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b8:	d301      	bcc.n	80037be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ba:	2301      	movs	r3, #1
 80037bc:	e00f      	b.n	80037de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037be:	4a0a      	ldr	r2, [pc, #40]	; (80037e8 <SysTick_Config+0x40>)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037c6:	210f      	movs	r1, #15
 80037c8:	f04f 30ff 	mov.w	r0, #4294967295
 80037cc:	f7ff ff8e 	bl	80036ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d0:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <SysTick_Config+0x40>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037d6:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <SysTick_Config+0x40>)
 80037d8:	2207      	movs	r2, #7
 80037da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	e000e010 	.word	0xe000e010

080037ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ff05 	bl	8003604 <__NVIC_SetPriorityGrouping>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003802:	b580      	push	{r7, lr}
 8003804:	b086      	sub	sp, #24
 8003806:	af00      	add	r7, sp, #0
 8003808:	4603      	mov	r3, r0
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	607a      	str	r2, [r7, #4]
 800380e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003814:	f7ff ff1a 	bl	800364c <__NVIC_GetPriorityGrouping>
 8003818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	6978      	ldr	r0, [r7, #20]
 8003820:	f7ff ff8e 	bl	8003740 <NVIC_EncodePriority>
 8003824:	4602      	mov	r2, r0
 8003826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800382a:	4611      	mov	r1, r2
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff ff5d 	bl	80036ec <__NVIC_SetPriority>
}
 8003832:	bf00      	nop
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	4603      	mov	r3, r0
 8003842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff0d 	bl	8003668 <__NVIC_EnableIRQ>
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	4603      	mov	r3, r0
 800385e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff ff1d 	bl	80036a4 <__NVIC_DisableIRQ>
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff ff94 	bl	80037a8 <SysTick_Config>
 8003880:	4603      	mov	r3, r0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003898:	f7ff fea8 	bl	80035ec <HAL_GetTick>
 800389c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d008      	beq.n	80038bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2280      	movs	r2, #128	; 0x80
 80038ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e052      	b.n	8003962 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0216 	bic.w	r2, r2, #22
 80038ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d103      	bne.n	80038ec <HAL_DMA_Abort+0x62>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0208 	bic.w	r2, r2, #8
 80038fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800390c:	e013      	b.n	8003936 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800390e:	f7ff fe6d 	bl	80035ec <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b05      	cmp	r3, #5
 800391a:	d90c      	bls.n	8003936 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2203      	movs	r2, #3
 8003926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e015      	b.n	8003962 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1e4      	bne.n	800390e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	223f      	movs	r2, #63	; 0x3f
 800394a:	409a      	lsls	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d004      	beq.n	8003988 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2280      	movs	r2, #128	; 0x80
 8003982:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e00c      	b.n	80039a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2205      	movs	r2, #5
 800398c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0201 	bic.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
	...

080039b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	; 0x24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	e165      	b.n	8003c98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039cc:	2201      	movs	r2, #1
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4013      	ands	r3, r2
 80039de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	f040 8154 	bne.w	8003c92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d005      	beq.n	8003a02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d130      	bne.n	8003a64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a38:	2201      	movs	r2, #1
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43db      	mvns	r3, r3
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4013      	ands	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f003 0201 	and.w	r2, r3, #1
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d017      	beq.n	8003aa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d123      	bne.n	8003af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	08da      	lsrs	r2, r3, #3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3208      	adds	r2, #8
 8003ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	220f      	movs	r2, #15
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	691a      	ldr	r2, [r3, #16]
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	08da      	lsrs	r2, r3, #3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3208      	adds	r2, #8
 8003aee:	69b9      	ldr	r1, [r7, #24]
 8003af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	2203      	movs	r2, #3
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 0203 	and.w	r2, r3, #3
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 80ae 	beq.w	8003c92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	4b5d      	ldr	r3, [pc, #372]	; (8003cb0 <HAL_GPIO_Init+0x300>)
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	4a5c      	ldr	r2, [pc, #368]	; (8003cb0 <HAL_GPIO_Init+0x300>)
 8003b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b44:	6453      	str	r3, [r2, #68]	; 0x44
 8003b46:	4b5a      	ldr	r3, [pc, #360]	; (8003cb0 <HAL_GPIO_Init+0x300>)
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b52:	4a58      	ldr	r2, [pc, #352]	; (8003cb4 <HAL_GPIO_Init+0x304>)
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	089b      	lsrs	r3, r3, #2
 8003b58:	3302      	adds	r3, #2
 8003b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	220f      	movs	r2, #15
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4013      	ands	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a4f      	ldr	r2, [pc, #316]	; (8003cb8 <HAL_GPIO_Init+0x308>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d025      	beq.n	8003bca <HAL_GPIO_Init+0x21a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a4e      	ldr	r2, [pc, #312]	; (8003cbc <HAL_GPIO_Init+0x30c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d01f      	beq.n	8003bc6 <HAL_GPIO_Init+0x216>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a4d      	ldr	r2, [pc, #308]	; (8003cc0 <HAL_GPIO_Init+0x310>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d019      	beq.n	8003bc2 <HAL_GPIO_Init+0x212>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a4c      	ldr	r2, [pc, #304]	; (8003cc4 <HAL_GPIO_Init+0x314>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d013      	beq.n	8003bbe <HAL_GPIO_Init+0x20e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a4b      	ldr	r2, [pc, #300]	; (8003cc8 <HAL_GPIO_Init+0x318>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d00d      	beq.n	8003bba <HAL_GPIO_Init+0x20a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a4a      	ldr	r2, [pc, #296]	; (8003ccc <HAL_GPIO_Init+0x31c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d007      	beq.n	8003bb6 <HAL_GPIO_Init+0x206>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a49      	ldr	r2, [pc, #292]	; (8003cd0 <HAL_GPIO_Init+0x320>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d101      	bne.n	8003bb2 <HAL_GPIO_Init+0x202>
 8003bae:	2306      	movs	r3, #6
 8003bb0:	e00c      	b.n	8003bcc <HAL_GPIO_Init+0x21c>
 8003bb2:	2307      	movs	r3, #7
 8003bb4:	e00a      	b.n	8003bcc <HAL_GPIO_Init+0x21c>
 8003bb6:	2305      	movs	r3, #5
 8003bb8:	e008      	b.n	8003bcc <HAL_GPIO_Init+0x21c>
 8003bba:	2304      	movs	r3, #4
 8003bbc:	e006      	b.n	8003bcc <HAL_GPIO_Init+0x21c>
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e004      	b.n	8003bcc <HAL_GPIO_Init+0x21c>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e002      	b.n	8003bcc <HAL_GPIO_Init+0x21c>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <HAL_GPIO_Init+0x21c>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	69fa      	ldr	r2, [r7, #28]
 8003bce:	f002 0203 	and.w	r2, r2, #3
 8003bd2:	0092      	lsls	r2, r2, #2
 8003bd4:	4093      	lsls	r3, r2
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bdc:	4935      	ldr	r1, [pc, #212]	; (8003cb4 <HAL_GPIO_Init+0x304>)
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	089b      	lsrs	r3, r3, #2
 8003be2:	3302      	adds	r3, #2
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bea:	4b3a      	ldr	r3, [pc, #232]	; (8003cd4 <HAL_GPIO_Init+0x324>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c0e:	4a31      	ldr	r2, [pc, #196]	; (8003cd4 <HAL_GPIO_Init+0x324>)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c14:	4b2f      	ldr	r3, [pc, #188]	; (8003cd4 <HAL_GPIO_Init+0x324>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c38:	4a26      	ldr	r2, [pc, #152]	; (8003cd4 <HAL_GPIO_Init+0x324>)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c3e:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <HAL_GPIO_Init+0x324>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	43db      	mvns	r3, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c62:	4a1c      	ldr	r2, [pc, #112]	; (8003cd4 <HAL_GPIO_Init+0x324>)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c68:	4b1a      	ldr	r3, [pc, #104]	; (8003cd4 <HAL_GPIO_Init+0x324>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c8c:	4a11      	ldr	r2, [pc, #68]	; (8003cd4 <HAL_GPIO_Init+0x324>)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3301      	adds	r3, #1
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b0f      	cmp	r3, #15
 8003c9c:	f67f ae96 	bls.w	80039cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	3724      	adds	r7, #36	; 0x24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40013800 	.word	0x40013800
 8003cb8:	40020000 	.word	0x40020000
 8003cbc:	40020400 	.word	0x40020400
 8003cc0:	40020800 	.word	0x40020800
 8003cc4:	40020c00 	.word	0x40020c00
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40021400 	.word	0x40021400
 8003cd0:	40021800 	.word	0x40021800
 8003cd4:	40013c00 	.word	0x40013c00

08003cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	887b      	ldrh	r3, [r7, #2]
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
 8003cf4:	e001      	b.n	8003cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	807b      	strh	r3, [r7, #2]
 8003d14:	4613      	mov	r3, r2
 8003d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d18:	787b      	ldrb	r3, [r7, #1]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d1e:	887a      	ldrh	r2, [r7, #2]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d24:	e003      	b.n	8003d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d26:	887b      	ldrh	r3, [r7, #2]
 8003d28:	041a      	lsls	r2, r3, #16
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	619a      	str	r2, [r3, #24]
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d46:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d48:	695a      	ldr	r2, [r3, #20]
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d006      	beq.n	8003d60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d52:	4a05      	ldr	r2, [pc, #20]	; (8003d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d58:	88fb      	ldrh	r3, [r7, #6]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe fa46 	bl	80021ec <HAL_GPIO_EXTI_Callback>
  }
}
 8003d60:	bf00      	nop
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40013c00 	.word	0x40013c00

08003d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0cc      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d80:	4b68      	ldr	r3, [pc, #416]	; (8003f24 <HAL_RCC_ClockConfig+0x1b8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d90c      	bls.n	8003da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8e:	4b65      	ldr	r3, [pc, #404]	; (8003f24 <HAL_RCC_ClockConfig+0x1b8>)
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d96:	4b63      	ldr	r3, [pc, #396]	; (8003f24 <HAL_RCC_ClockConfig+0x1b8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0b8      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d020      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dc0:	4b59      	ldr	r3, [pc, #356]	; (8003f28 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	4a58      	ldr	r2, [pc, #352]	; (8003f28 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dd8:	4b53      	ldr	r3, [pc, #332]	; (8003f28 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	4a52      	ldr	r2, [pc, #328]	; (8003f28 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de4:	4b50      	ldr	r3, [pc, #320]	; (8003f28 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	494d      	ldr	r1, [pc, #308]	; (8003f28 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d044      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d107      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0a:	4b47      	ldr	r3, [pc, #284]	; (8003f28 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d119      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e07f      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d003      	beq.n	8003e2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	d107      	bne.n	8003e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e2a:	4b3f      	ldr	r3, [pc, #252]	; (8003f28 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e06f      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3a:	4b3b      	ldr	r3, [pc, #236]	; (8003f28 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e067      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e4a:	4b37      	ldr	r3, [pc, #220]	; (8003f28 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f023 0203 	bic.w	r2, r3, #3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	4934      	ldr	r1, [pc, #208]	; (8003f28 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e5c:	f7ff fbc6 	bl	80035ec <HAL_GetTick>
 8003e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e62:	e00a      	b.n	8003e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e64:	f7ff fbc2 	bl	80035ec <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e04f      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7a:	4b2b      	ldr	r3, [pc, #172]	; (8003f28 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 020c 	and.w	r2, r3, #12
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d1eb      	bne.n	8003e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e8c:	4b25      	ldr	r3, [pc, #148]	; (8003f24 <HAL_RCC_ClockConfig+0x1b8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d20c      	bcs.n	8003eb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9a:	4b22      	ldr	r3, [pc, #136]	; (8003f24 <HAL_RCC_ClockConfig+0x1b8>)
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea2:	4b20      	ldr	r3, [pc, #128]	; (8003f24 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d001      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e032      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ec0:	4b19      	ldr	r3, [pc, #100]	; (8003f28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	4916      	ldr	r1, [pc, #88]	; (8003f28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d009      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ede:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	490e      	ldr	r1, [pc, #56]	; (8003f28 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ef2:	f000 f855 	bl	8003fa0 <HAL_RCC_GetSysClockFreq>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	091b      	lsrs	r3, r3, #4
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	490a      	ldr	r1, [pc, #40]	; (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003f04:	5ccb      	ldrb	r3, [r1, r3]
 8003f06:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0a:	4a09      	ldr	r2, [pc, #36]	; (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f0e:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fb26 	bl	8003564 <HAL_InitTick>

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40023c00 	.word	0x40023c00
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	0800adbc 	.word	0x0800adbc
 8003f30:	20000070 	.word	0x20000070
 8003f34:	20000074 	.word	0x20000074

08003f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f3c:	4b03      	ldr	r3, [pc, #12]	; (8003f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	20000070 	.word	0x20000070

08003f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f54:	f7ff fff0 	bl	8003f38 <HAL_RCC_GetHCLKFreq>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	0a9b      	lsrs	r3, r3, #10
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	4903      	ldr	r1, [pc, #12]	; (8003f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f66:	5ccb      	ldrb	r3, [r1, r3]
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40023800 	.word	0x40023800
 8003f74:	0800adcc 	.word	0x0800adcc

08003f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f7c:	f7ff ffdc 	bl	8003f38 <HAL_RCC_GetHCLKFreq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	0b5b      	lsrs	r3, r3, #13
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	4903      	ldr	r1, [pc, #12]	; (8003f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f8e:	5ccb      	ldrb	r3, [r1, r3]
 8003f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	0800adcc 	.word	0x0800adcc

08003fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fa4:	b0ae      	sub	sp, #184	; 0xb8
 8003fa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc6:	4bcb      	ldr	r3, [pc, #812]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
 8003fce:	2b0c      	cmp	r3, #12
 8003fd0:	f200 8206 	bhi.w	80043e0 <HAL_RCC_GetSysClockFreq+0x440>
 8003fd4:	a201      	add	r2, pc, #4	; (adr r2, 8003fdc <HAL_RCC_GetSysClockFreq+0x3c>)
 8003fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fda:	bf00      	nop
 8003fdc:	08004011 	.word	0x08004011
 8003fe0:	080043e1 	.word	0x080043e1
 8003fe4:	080043e1 	.word	0x080043e1
 8003fe8:	080043e1 	.word	0x080043e1
 8003fec:	08004019 	.word	0x08004019
 8003ff0:	080043e1 	.word	0x080043e1
 8003ff4:	080043e1 	.word	0x080043e1
 8003ff8:	080043e1 	.word	0x080043e1
 8003ffc:	08004021 	.word	0x08004021
 8004000:	080043e1 	.word	0x080043e1
 8004004:	080043e1 	.word	0x080043e1
 8004008:	080043e1 	.word	0x080043e1
 800400c:	08004211 	.word	0x08004211
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004010:	4bb9      	ldr	r3, [pc, #740]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004012:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004016:	e1e7      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004018:	4bb8      	ldr	r3, [pc, #736]	; (80042fc <HAL_RCC_GetSysClockFreq+0x35c>)
 800401a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800401e:	e1e3      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004020:	4bb4      	ldr	r3, [pc, #720]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800402c:	4bb1      	ldr	r3, [pc, #708]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d071      	beq.n	800411c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004038:	4bae      	ldr	r3, [pc, #696]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	099b      	lsrs	r3, r3, #6
 800403e:	2200      	movs	r2, #0
 8004040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004044:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004048:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800404c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004050:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004054:	2300      	movs	r3, #0
 8004056:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800405a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800405e:	4622      	mov	r2, r4
 8004060:	462b      	mov	r3, r5
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f04f 0100 	mov.w	r1, #0
 800406a:	0159      	lsls	r1, r3, #5
 800406c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004070:	0150      	lsls	r0, r2, #5
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4621      	mov	r1, r4
 8004078:	1a51      	subs	r1, r2, r1
 800407a:	6439      	str	r1, [r7, #64]	; 0x40
 800407c:	4629      	mov	r1, r5
 800407e:	eb63 0301 	sbc.w	r3, r3, r1
 8004082:	647b      	str	r3, [r7, #68]	; 0x44
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004090:	4649      	mov	r1, r9
 8004092:	018b      	lsls	r3, r1, #6
 8004094:	4641      	mov	r1, r8
 8004096:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800409a:	4641      	mov	r1, r8
 800409c:	018a      	lsls	r2, r1, #6
 800409e:	4641      	mov	r1, r8
 80040a0:	1a51      	subs	r1, r2, r1
 80040a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80040a4:	4649      	mov	r1, r9
 80040a6:	eb63 0301 	sbc.w	r3, r3, r1
 80040aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80040b8:	4649      	mov	r1, r9
 80040ba:	00cb      	lsls	r3, r1, #3
 80040bc:	4641      	mov	r1, r8
 80040be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040c2:	4641      	mov	r1, r8
 80040c4:	00ca      	lsls	r2, r1, #3
 80040c6:	4610      	mov	r0, r2
 80040c8:	4619      	mov	r1, r3
 80040ca:	4603      	mov	r3, r0
 80040cc:	4622      	mov	r2, r4
 80040ce:	189b      	adds	r3, r3, r2
 80040d0:	633b      	str	r3, [r7, #48]	; 0x30
 80040d2:	462b      	mov	r3, r5
 80040d4:	460a      	mov	r2, r1
 80040d6:	eb42 0303 	adc.w	r3, r2, r3
 80040da:	637b      	str	r3, [r7, #52]	; 0x34
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040e8:	4629      	mov	r1, r5
 80040ea:	024b      	lsls	r3, r1, #9
 80040ec:	4621      	mov	r1, r4
 80040ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040f2:	4621      	mov	r1, r4
 80040f4:	024a      	lsls	r2, r1, #9
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040fe:	2200      	movs	r2, #0
 8004100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004104:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004108:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800410c:	f7fc fdec 	bl	8000ce8 <__aeabi_uldivmod>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4613      	mov	r3, r2
 8004116:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800411a:	e067      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800411c:	4b75      	ldr	r3, [pc, #468]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	099b      	lsrs	r3, r3, #6
 8004122:	2200      	movs	r2, #0
 8004124:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004128:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800412c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004134:	67bb      	str	r3, [r7, #120]	; 0x78
 8004136:	2300      	movs	r3, #0
 8004138:	67fb      	str	r3, [r7, #124]	; 0x7c
 800413a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800413e:	4622      	mov	r2, r4
 8004140:	462b      	mov	r3, r5
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f04f 0100 	mov.w	r1, #0
 800414a:	0159      	lsls	r1, r3, #5
 800414c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004150:	0150      	lsls	r0, r2, #5
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4621      	mov	r1, r4
 8004158:	1a51      	subs	r1, r2, r1
 800415a:	62b9      	str	r1, [r7, #40]	; 0x28
 800415c:	4629      	mov	r1, r5
 800415e:	eb63 0301 	sbc.w	r3, r3, r1
 8004162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004170:	4649      	mov	r1, r9
 8004172:	018b      	lsls	r3, r1, #6
 8004174:	4641      	mov	r1, r8
 8004176:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800417a:	4641      	mov	r1, r8
 800417c:	018a      	lsls	r2, r1, #6
 800417e:	4641      	mov	r1, r8
 8004180:	ebb2 0a01 	subs.w	sl, r2, r1
 8004184:	4649      	mov	r1, r9
 8004186:	eb63 0b01 	sbc.w	fp, r3, r1
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004196:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800419a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800419e:	4692      	mov	sl, r2
 80041a0:	469b      	mov	fp, r3
 80041a2:	4623      	mov	r3, r4
 80041a4:	eb1a 0303 	adds.w	r3, sl, r3
 80041a8:	623b      	str	r3, [r7, #32]
 80041aa:	462b      	mov	r3, r5
 80041ac:	eb4b 0303 	adc.w	r3, fp, r3
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80041be:	4629      	mov	r1, r5
 80041c0:	028b      	lsls	r3, r1, #10
 80041c2:	4621      	mov	r1, r4
 80041c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041c8:	4621      	mov	r1, r4
 80041ca:	028a      	lsls	r2, r1, #10
 80041cc:	4610      	mov	r0, r2
 80041ce:	4619      	mov	r1, r3
 80041d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041d4:	2200      	movs	r2, #0
 80041d6:	673b      	str	r3, [r7, #112]	; 0x70
 80041d8:	677a      	str	r2, [r7, #116]	; 0x74
 80041da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80041de:	f7fc fd83 	bl	8000ce8 <__aeabi_uldivmod>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4613      	mov	r3, r2
 80041e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041ec:	4b41      	ldr	r3, [pc, #260]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	3301      	adds	r3, #1
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80041fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004202:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004206:	fbb2 f3f3 	udiv	r3, r2, r3
 800420a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800420e:	e0eb      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004210:	4b38      	ldr	r3, [pc, #224]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800421c:	4b35      	ldr	r3, [pc, #212]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d06b      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004228:	4b32      	ldr	r3, [pc, #200]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	099b      	lsrs	r3, r3, #6
 800422e:	2200      	movs	r2, #0
 8004230:	66bb      	str	r3, [r7, #104]	; 0x68
 8004232:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004234:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800423a:	663b      	str	r3, [r7, #96]	; 0x60
 800423c:	2300      	movs	r3, #0
 800423e:	667b      	str	r3, [r7, #100]	; 0x64
 8004240:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004244:	4622      	mov	r2, r4
 8004246:	462b      	mov	r3, r5
 8004248:	f04f 0000 	mov.w	r0, #0
 800424c:	f04f 0100 	mov.w	r1, #0
 8004250:	0159      	lsls	r1, r3, #5
 8004252:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004256:	0150      	lsls	r0, r2, #5
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4621      	mov	r1, r4
 800425e:	1a51      	subs	r1, r2, r1
 8004260:	61b9      	str	r1, [r7, #24]
 8004262:	4629      	mov	r1, r5
 8004264:	eb63 0301 	sbc.w	r3, r3, r1
 8004268:	61fb      	str	r3, [r7, #28]
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004276:	4659      	mov	r1, fp
 8004278:	018b      	lsls	r3, r1, #6
 800427a:	4651      	mov	r1, sl
 800427c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004280:	4651      	mov	r1, sl
 8004282:	018a      	lsls	r2, r1, #6
 8004284:	4651      	mov	r1, sl
 8004286:	ebb2 0801 	subs.w	r8, r2, r1
 800428a:	4659      	mov	r1, fp
 800428c:	eb63 0901 	sbc.w	r9, r3, r1
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800429c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042a4:	4690      	mov	r8, r2
 80042a6:	4699      	mov	r9, r3
 80042a8:	4623      	mov	r3, r4
 80042aa:	eb18 0303 	adds.w	r3, r8, r3
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	462b      	mov	r3, r5
 80042b2:	eb49 0303 	adc.w	r3, r9, r3
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80042c4:	4629      	mov	r1, r5
 80042c6:	024b      	lsls	r3, r1, #9
 80042c8:	4621      	mov	r1, r4
 80042ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042ce:	4621      	mov	r1, r4
 80042d0:	024a      	lsls	r2, r1, #9
 80042d2:	4610      	mov	r0, r2
 80042d4:	4619      	mov	r1, r3
 80042d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042da:	2200      	movs	r2, #0
 80042dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80042de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80042e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042e4:	f7fc fd00 	bl	8000ce8 <__aeabi_uldivmod>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	4613      	mov	r3, r2
 80042ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042f2:	e065      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0x420>
 80042f4:	40023800 	.word	0x40023800
 80042f8:	00f42400 	.word	0x00f42400
 80042fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004300:	4b3d      	ldr	r3, [pc, #244]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	099b      	lsrs	r3, r3, #6
 8004306:	2200      	movs	r2, #0
 8004308:	4618      	mov	r0, r3
 800430a:	4611      	mov	r1, r2
 800430c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004310:	653b      	str	r3, [r7, #80]	; 0x50
 8004312:	2300      	movs	r3, #0
 8004314:	657b      	str	r3, [r7, #84]	; 0x54
 8004316:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800431a:	4642      	mov	r2, r8
 800431c:	464b      	mov	r3, r9
 800431e:	f04f 0000 	mov.w	r0, #0
 8004322:	f04f 0100 	mov.w	r1, #0
 8004326:	0159      	lsls	r1, r3, #5
 8004328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800432c:	0150      	lsls	r0, r2, #5
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4641      	mov	r1, r8
 8004334:	1a51      	subs	r1, r2, r1
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	4649      	mov	r1, r9
 800433a:	eb63 0301 	sbc.w	r3, r3, r1
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800434c:	4659      	mov	r1, fp
 800434e:	018b      	lsls	r3, r1, #6
 8004350:	4651      	mov	r1, sl
 8004352:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004356:	4651      	mov	r1, sl
 8004358:	018a      	lsls	r2, r1, #6
 800435a:	4651      	mov	r1, sl
 800435c:	1a54      	subs	r4, r2, r1
 800435e:	4659      	mov	r1, fp
 8004360:	eb63 0501 	sbc.w	r5, r3, r1
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	00eb      	lsls	r3, r5, #3
 800436e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004372:	00e2      	lsls	r2, r4, #3
 8004374:	4614      	mov	r4, r2
 8004376:	461d      	mov	r5, r3
 8004378:	4643      	mov	r3, r8
 800437a:	18e3      	adds	r3, r4, r3
 800437c:	603b      	str	r3, [r7, #0]
 800437e:	464b      	mov	r3, r9
 8004380:	eb45 0303 	adc.w	r3, r5, r3
 8004384:	607b      	str	r3, [r7, #4]
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004392:	4629      	mov	r1, r5
 8004394:	028b      	lsls	r3, r1, #10
 8004396:	4621      	mov	r1, r4
 8004398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800439c:	4621      	mov	r1, r4
 800439e:	028a      	lsls	r2, r1, #10
 80043a0:	4610      	mov	r0, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043a8:	2200      	movs	r2, #0
 80043aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80043ac:	64fa      	str	r2, [r7, #76]	; 0x4c
 80043ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043b2:	f7fc fc99 	bl	8000ce8 <__aeabi_uldivmod>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4613      	mov	r3, r2
 80043bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80043c0:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	0f1b      	lsrs	r3, r3, #28
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80043ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043de:	e003      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80043e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	37b8      	adds	r7, #184	; 0xb8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043f6:	bf00      	nop
 80043f8:	40023800 	.word	0x40023800
 80043fc:	00f42400 	.word	0x00f42400

08004400 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e28d      	b.n	800492e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 8083 	beq.w	8004526 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004420:	4b94      	ldr	r3, [pc, #592]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 030c 	and.w	r3, r3, #12
 8004428:	2b04      	cmp	r3, #4
 800442a:	d019      	beq.n	8004460 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800442c:	4b91      	ldr	r3, [pc, #580]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004434:	2b08      	cmp	r3, #8
 8004436:	d106      	bne.n	8004446 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004438:	4b8e      	ldr	r3, [pc, #568]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004444:	d00c      	beq.n	8004460 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004446:	4b8b      	ldr	r3, [pc, #556]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800444e:	2b0c      	cmp	r3, #12
 8004450:	d112      	bne.n	8004478 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004452:	4b88      	ldr	r3, [pc, #544]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800445a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800445e:	d10b      	bne.n	8004478 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004460:	4b84      	ldr	r3, [pc, #528]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d05b      	beq.n	8004524 <HAL_RCC_OscConfig+0x124>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d157      	bne.n	8004524 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e25a      	b.n	800492e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004480:	d106      	bne.n	8004490 <HAL_RCC_OscConfig+0x90>
 8004482:	4b7c      	ldr	r3, [pc, #496]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a7b      	ldr	r2, [pc, #492]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 8004488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	e01d      	b.n	80044cc <HAL_RCC_OscConfig+0xcc>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004498:	d10c      	bne.n	80044b4 <HAL_RCC_OscConfig+0xb4>
 800449a:	4b76      	ldr	r3, [pc, #472]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a75      	ldr	r2, [pc, #468]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 80044a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	4b73      	ldr	r3, [pc, #460]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a72      	ldr	r2, [pc, #456]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 80044ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	e00b      	b.n	80044cc <HAL_RCC_OscConfig+0xcc>
 80044b4:	4b6f      	ldr	r3, [pc, #444]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a6e      	ldr	r2, [pc, #440]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 80044ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	4b6c      	ldr	r3, [pc, #432]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a6b      	ldr	r2, [pc, #428]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 80044c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d013      	beq.n	80044fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d4:	f7ff f88a 	bl	80035ec <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044dc:	f7ff f886 	bl	80035ec <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b64      	cmp	r3, #100	; 0x64
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e21f      	b.n	800492e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ee:	4b61      	ldr	r3, [pc, #388]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0xdc>
 80044fa:	e014      	b.n	8004526 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7ff f876 	bl	80035ec <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004504:	f7ff f872 	bl	80035ec <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	; 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e20b      	b.n	800492e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004516:	4b57      	ldr	r3, [pc, #348]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0x104>
 8004522:	e000      	b.n	8004526 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d06f      	beq.n	8004612 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004532:	4b50      	ldr	r3, [pc, #320]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b00      	cmp	r3, #0
 800453c:	d017      	beq.n	800456e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800453e:	4b4d      	ldr	r3, [pc, #308]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004546:	2b08      	cmp	r3, #8
 8004548:	d105      	bne.n	8004556 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800454a:	4b4a      	ldr	r3, [pc, #296]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00b      	beq.n	800456e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004556:	4b47      	ldr	r3, [pc, #284]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800455e:	2b0c      	cmp	r3, #12
 8004560:	d11c      	bne.n	800459c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004562:	4b44      	ldr	r3, [pc, #272]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d116      	bne.n	800459c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456e:	4b41      	ldr	r3, [pc, #260]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d005      	beq.n	8004586 <HAL_RCC_OscConfig+0x186>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d001      	beq.n	8004586 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e1d3      	b.n	800492e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004586:	4b3b      	ldr	r3, [pc, #236]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4937      	ldr	r1, [pc, #220]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 8004596:	4313      	orrs	r3, r2
 8004598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459a:	e03a      	b.n	8004612 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d020      	beq.n	80045e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045a4:	4b34      	ldr	r3, [pc, #208]	; (8004678 <HAL_RCC_OscConfig+0x278>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045aa:	f7ff f81f 	bl	80035ec <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045b2:	f7ff f81b 	bl	80035ec <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e1b4      	b.n	800492e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c4:	4b2b      	ldr	r3, [pc, #172]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d0:	4b28      	ldr	r3, [pc, #160]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	4925      	ldr	r1, [pc, #148]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	600b      	str	r3, [r1, #0]
 80045e4:	e015      	b.n	8004612 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e6:	4b24      	ldr	r3, [pc, #144]	; (8004678 <HAL_RCC_OscConfig+0x278>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7fe fffe 	bl	80035ec <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f4:	f7fe fffa 	bl	80035ec <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e193      	b.n	800492e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004606:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d036      	beq.n	800468c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d016      	beq.n	8004654 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004626:	4b15      	ldr	r3, [pc, #84]	; (800467c <HAL_RCC_OscConfig+0x27c>)
 8004628:	2201      	movs	r2, #1
 800462a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462c:	f7fe ffde 	bl	80035ec <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004634:	f7fe ffda 	bl	80035ec <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e173      	b.n	800492e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004646:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <HAL_RCC_OscConfig+0x274>)
 8004648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0x234>
 8004652:	e01b      	b.n	800468c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004654:	4b09      	ldr	r3, [pc, #36]	; (800467c <HAL_RCC_OscConfig+0x27c>)
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465a:	f7fe ffc7 	bl	80035ec <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004660:	e00e      	b.n	8004680 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004662:	f7fe ffc3 	bl	80035ec <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d907      	bls.n	8004680 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e15c      	b.n	800492e <HAL_RCC_OscConfig+0x52e>
 8004674:	40023800 	.word	0x40023800
 8004678:	42470000 	.word	0x42470000
 800467c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004680:	4b8a      	ldr	r3, [pc, #552]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 8004682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1ea      	bne.n	8004662 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 8097 	beq.w	80047c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800469a:	2300      	movs	r3, #0
 800469c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800469e:	4b83      	ldr	r3, [pc, #524]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10f      	bne.n	80046ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046aa:	2300      	movs	r3, #0
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	4b7f      	ldr	r3, [pc, #508]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	4a7e      	ldr	r2, [pc, #504]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 80046b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ba:	4b7c      	ldr	r3, [pc, #496]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c6:	2301      	movs	r3, #1
 80046c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ca:	4b79      	ldr	r3, [pc, #484]	; (80048b0 <HAL_RCC_OscConfig+0x4b0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d118      	bne.n	8004708 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046d6:	4b76      	ldr	r3, [pc, #472]	; (80048b0 <HAL_RCC_OscConfig+0x4b0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a75      	ldr	r2, [pc, #468]	; (80048b0 <HAL_RCC_OscConfig+0x4b0>)
 80046dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046e2:	f7fe ff83 	bl	80035ec <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ea:	f7fe ff7f 	bl	80035ec <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e118      	b.n	800492e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fc:	4b6c      	ldr	r3, [pc, #432]	; (80048b0 <HAL_RCC_OscConfig+0x4b0>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d106      	bne.n	800471e <HAL_RCC_OscConfig+0x31e>
 8004710:	4b66      	ldr	r3, [pc, #408]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	4a65      	ldr	r2, [pc, #404]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	6713      	str	r3, [r2, #112]	; 0x70
 800471c:	e01c      	b.n	8004758 <HAL_RCC_OscConfig+0x358>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b05      	cmp	r3, #5
 8004724:	d10c      	bne.n	8004740 <HAL_RCC_OscConfig+0x340>
 8004726:	4b61      	ldr	r3, [pc, #388]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	4a60      	ldr	r2, [pc, #384]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 800472c:	f043 0304 	orr.w	r3, r3, #4
 8004730:	6713      	str	r3, [r2, #112]	; 0x70
 8004732:	4b5e      	ldr	r3, [pc, #376]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	4a5d      	ldr	r2, [pc, #372]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	6713      	str	r3, [r2, #112]	; 0x70
 800473e:	e00b      	b.n	8004758 <HAL_RCC_OscConfig+0x358>
 8004740:	4b5a      	ldr	r3, [pc, #360]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 8004742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004744:	4a59      	ldr	r2, [pc, #356]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 8004746:	f023 0301 	bic.w	r3, r3, #1
 800474a:	6713      	str	r3, [r2, #112]	; 0x70
 800474c:	4b57      	ldr	r3, [pc, #348]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 800474e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004750:	4a56      	ldr	r2, [pc, #344]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 8004752:	f023 0304 	bic.w	r3, r3, #4
 8004756:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d015      	beq.n	800478c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004760:	f7fe ff44 	bl	80035ec <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004766:	e00a      	b.n	800477e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004768:	f7fe ff40 	bl	80035ec <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	f241 3288 	movw	r2, #5000	; 0x1388
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e0d7      	b.n	800492e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800477e:	4b4b      	ldr	r3, [pc, #300]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0ee      	beq.n	8004768 <HAL_RCC_OscConfig+0x368>
 800478a:	e014      	b.n	80047b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478c:	f7fe ff2e 	bl	80035ec <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004792:	e00a      	b.n	80047aa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004794:	f7fe ff2a 	bl	80035ec <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e0c1      	b.n	800492e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047aa:	4b40      	ldr	r3, [pc, #256]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 80047ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1ee      	bne.n	8004794 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047b6:	7dfb      	ldrb	r3, [r7, #23]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d105      	bne.n	80047c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047bc:	4b3b      	ldr	r3, [pc, #236]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	4a3a      	ldr	r2, [pc, #232]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 80047c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 80ad 	beq.w	800492c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047d2:	4b36      	ldr	r3, [pc, #216]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 030c 	and.w	r3, r3, #12
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d060      	beq.n	80048a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d145      	bne.n	8004872 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e6:	4b33      	ldr	r3, [pc, #204]	; (80048b4 <HAL_RCC_OscConfig+0x4b4>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ec:	f7fe fefe 	bl	80035ec <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f4:	f7fe fefa 	bl	80035ec <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e093      	b.n	800492e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004806:	4b29      	ldr	r3, [pc, #164]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69da      	ldr	r2, [r3, #28]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	019b      	lsls	r3, r3, #6
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	085b      	lsrs	r3, r3, #1
 800482a:	3b01      	subs	r3, #1
 800482c:	041b      	lsls	r3, r3, #16
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	061b      	lsls	r3, r3, #24
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483c:	071b      	lsls	r3, r3, #28
 800483e:	491b      	ldr	r1, [pc, #108]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 8004840:	4313      	orrs	r3, r2
 8004842:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004844:	4b1b      	ldr	r3, [pc, #108]	; (80048b4 <HAL_RCC_OscConfig+0x4b4>)
 8004846:	2201      	movs	r2, #1
 8004848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484a:	f7fe fecf 	bl	80035ec <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004852:	f7fe fecb 	bl	80035ec <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e064      	b.n	800492e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004864:	4b11      	ldr	r3, [pc, #68]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x452>
 8004870:	e05c      	b.n	800492c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004872:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <HAL_RCC_OscConfig+0x4b4>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fe feb8 	bl	80035ec <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004880:	f7fe feb4 	bl	80035ec <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e04d      	b.n	800492e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004892:	4b06      	ldr	r3, [pc, #24]	; (80048ac <HAL_RCC_OscConfig+0x4ac>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x480>
 800489e:	e045      	b.n	800492c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d107      	bne.n	80048b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e040      	b.n	800492e <HAL_RCC_OscConfig+0x52e>
 80048ac:	40023800 	.word	0x40023800
 80048b0:	40007000 	.word	0x40007000
 80048b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048b8:	4b1f      	ldr	r3, [pc, #124]	; (8004938 <HAL_RCC_OscConfig+0x538>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d030      	beq.n	8004928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d129      	bne.n	8004928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048de:	429a      	cmp	r2, r3
 80048e0:	d122      	bne.n	8004928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048e8:	4013      	ands	r3, r2
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d119      	bne.n	8004928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	085b      	lsrs	r3, r3, #1
 8004900:	3b01      	subs	r3, #1
 8004902:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004904:	429a      	cmp	r2, r3
 8004906:	d10f      	bne.n	8004928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004912:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004914:	429a      	cmp	r2, r3
 8004916:	d107      	bne.n	8004928 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004924:	429a      	cmp	r2, r3
 8004926:	d001      	beq.n	800492c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e000      	b.n	800492e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40023800 	.word	0x40023800

0800493c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e07b      	b.n	8004a46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	2b00      	cmp	r3, #0
 8004954:	d108      	bne.n	8004968 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800495e:	d009      	beq.n	8004974 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	61da      	str	r2, [r3, #28]
 8004966:	e005      	b.n	8004974 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fe fb48 	bl	8003024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f8:	ea42 0103 	orr.w	r1, r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	0c1b      	lsrs	r3, r3, #16
 8004a12:	f003 0104 	and.w	r1, r3, #4
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	f003 0210 	and.w	r2, r3, #16
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e041      	b.n	8004ae4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d106      	bne.n	8004a7a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fe fb6b 	bl	8003150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	f000 fb03 	bl	8005098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d001      	beq.n	8004b04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e046      	b.n	8004b92 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a23      	ldr	r2, [pc, #140]	; (8004ba0 <HAL_TIM_Base_Start+0xb4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d022      	beq.n	8004b5c <HAL_TIM_Base_Start+0x70>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b1e:	d01d      	beq.n	8004b5c <HAL_TIM_Base_Start+0x70>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a1f      	ldr	r2, [pc, #124]	; (8004ba4 <HAL_TIM_Base_Start+0xb8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d018      	beq.n	8004b5c <HAL_TIM_Base_Start+0x70>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a1e      	ldr	r2, [pc, #120]	; (8004ba8 <HAL_TIM_Base_Start+0xbc>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d013      	beq.n	8004b5c <HAL_TIM_Base_Start+0x70>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a1c      	ldr	r2, [pc, #112]	; (8004bac <HAL_TIM_Base_Start+0xc0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00e      	beq.n	8004b5c <HAL_TIM_Base_Start+0x70>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a1b      	ldr	r2, [pc, #108]	; (8004bb0 <HAL_TIM_Base_Start+0xc4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d009      	beq.n	8004b5c <HAL_TIM_Base_Start+0x70>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a19      	ldr	r2, [pc, #100]	; (8004bb4 <HAL_TIM_Base_Start+0xc8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d004      	beq.n	8004b5c <HAL_TIM_Base_Start+0x70>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a18      	ldr	r2, [pc, #96]	; (8004bb8 <HAL_TIM_Base_Start+0xcc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d111      	bne.n	8004b80 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b06      	cmp	r3, #6
 8004b6c:	d010      	beq.n	8004b90 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 0201 	orr.w	r2, r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7e:	e007      	b.n	8004b90 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0201 	orr.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40010000 	.word	0x40010000
 8004ba4:	40000400 	.word	0x40000400
 8004ba8:	40000800 	.word	0x40000800
 8004bac:	40000c00 	.word	0x40000c00
 8004bb0:	40010400 	.word	0x40010400
 8004bb4:	40014000 	.word	0x40014000
 8004bb8:	40001800 	.word	0x40001800

08004bbc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e097      	b.n	8004d00 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d106      	bne.n	8004bea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7fe fa65 	bl	80030b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2202      	movs	r2, #2
 8004bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c00:	f023 0307 	bic.w	r3, r3, #7
 8004c04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4610      	mov	r0, r2
 8004c12:	f000 fa41 	bl	8005098 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3e:	f023 0303 	bic.w	r3, r3, #3
 8004c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004c5c:	f023 030c 	bic.w	r3, r3, #12
 8004c60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	021b      	lsls	r3, r3, #8
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	011a      	lsls	r2, r3, #4
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	031b      	lsls	r3, r3, #12
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c9a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004ca2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d18:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d20:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d28:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d30:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d110      	bne.n	8004d5a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d102      	bne.n	8004d44 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d3e:	7b7b      	ldrb	r3, [r7, #13]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d001      	beq.n	8004d48 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e069      	b.n	8004e1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d58:	e031      	b.n	8004dbe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d110      	bne.n	8004d82 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d60:	7bbb      	ldrb	r3, [r7, #14]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d102      	bne.n	8004d6c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d66:	7b3b      	ldrb	r3, [r7, #12]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d001      	beq.n	8004d70 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e055      	b.n	8004e1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d80:	e01d      	b.n	8004dbe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d108      	bne.n	8004d9a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d88:	7bbb      	ldrb	r3, [r7, #14]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d105      	bne.n	8004d9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d8e:	7b7b      	ldrb	r3, [r7, #13]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d102      	bne.n	8004d9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d94:	7b3b      	ldrb	r3, [r7, #12]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d001      	beq.n	8004d9e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e03e      	b.n	8004e1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2202      	movs	r2, #2
 8004da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2202      	movs	r2, #2
 8004daa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2202      	movs	r2, #2
 8004db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2202      	movs	r2, #2
 8004dba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <HAL_TIM_Encoder_Start+0xc4>
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d008      	beq.n	8004ddc <HAL_TIM_Encoder_Start+0xd4>
 8004dca:	e00f      	b.n	8004dec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 f9ff 	bl	80051d8 <TIM_CCxChannelCmd>
      break;
 8004dda:	e016      	b.n	8004e0a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2201      	movs	r2, #1
 8004de2:	2104      	movs	r1, #4
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 f9f7 	bl	80051d8 <TIM_CCxChannelCmd>
      break;
 8004dea:	e00e      	b.n	8004e0a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2201      	movs	r2, #1
 8004df2:	2100      	movs	r1, #0
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 f9ef 	bl	80051d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	2104      	movs	r1, #4
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 f9e8 	bl	80051d8 <TIM_CCxChannelCmd>
      break;
 8004e08:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0201 	orr.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d122      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d11b      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0202 	mvn.w	r2, #2
 8004e50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f8f8 	bl	800505c <HAL_TIM_IC_CaptureCallback>
 8004e6c:	e005      	b.n	8004e7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f8ea 	bl	8005048 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f8fb 	bl	8005070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d122      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d11b      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0204 	mvn.w	r2, #4
 8004ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f8ce 	bl	800505c <HAL_TIM_IC_CaptureCallback>
 8004ec0:	e005      	b.n	8004ece <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f8c0 	bl	8005048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f8d1 	bl	8005070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d122      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d11b      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f06f 0208 	mvn.w	r2, #8
 8004ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2204      	movs	r2, #4
 8004efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f8a4 	bl	800505c <HAL_TIM_IC_CaptureCallback>
 8004f14:	e005      	b.n	8004f22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f896 	bl	8005048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f8a7 	bl	8005070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f003 0310 	and.w	r3, r3, #16
 8004f32:	2b10      	cmp	r3, #16
 8004f34:	d122      	bne.n	8004f7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f003 0310 	and.w	r3, r3, #16
 8004f40:	2b10      	cmp	r3, #16
 8004f42:	d11b      	bne.n	8004f7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0210 	mvn.w	r2, #16
 8004f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2208      	movs	r2, #8
 8004f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f87a 	bl	800505c <HAL_TIM_IC_CaptureCallback>
 8004f68:	e005      	b.n	8004f76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f86c 	bl	8005048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f87d 	bl	8005070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d10e      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d107      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0201 	mvn.w	r2, #1
 8004fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f846 	bl	8005034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb2:	2b80      	cmp	r3, #128	; 0x80
 8004fb4:	d10e      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc0:	2b80      	cmp	r3, #128	; 0x80
 8004fc2:	d107      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f9ae 	bl	8005330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fde:	2b40      	cmp	r3, #64	; 0x40
 8004fe0:	d10e      	bne.n	8005000 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fec:	2b40      	cmp	r3, #64	; 0x40
 8004fee:	d107      	bne.n	8005000 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f842 	bl	8005084 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b20      	cmp	r3, #32
 800500c:	d10e      	bne.n	800502c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0320 	and.w	r3, r3, #32
 8005018:	2b20      	cmp	r3, #32
 800501a:	d107      	bne.n	800502c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0220 	mvn.w	r2, #32
 8005024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f978 	bl	800531c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800502c:	bf00      	nop
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a40      	ldr	r2, [pc, #256]	; (80051ac <TIM_Base_SetConfig+0x114>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d013      	beq.n	80050d8 <TIM_Base_SetConfig+0x40>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b6:	d00f      	beq.n	80050d8 <TIM_Base_SetConfig+0x40>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a3d      	ldr	r2, [pc, #244]	; (80051b0 <TIM_Base_SetConfig+0x118>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00b      	beq.n	80050d8 <TIM_Base_SetConfig+0x40>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a3c      	ldr	r2, [pc, #240]	; (80051b4 <TIM_Base_SetConfig+0x11c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d007      	beq.n	80050d8 <TIM_Base_SetConfig+0x40>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a3b      	ldr	r2, [pc, #236]	; (80051b8 <TIM_Base_SetConfig+0x120>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d003      	beq.n	80050d8 <TIM_Base_SetConfig+0x40>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a3a      	ldr	r2, [pc, #232]	; (80051bc <TIM_Base_SetConfig+0x124>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d108      	bne.n	80050ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a2f      	ldr	r2, [pc, #188]	; (80051ac <TIM_Base_SetConfig+0x114>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d02b      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f8:	d027      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a2c      	ldr	r2, [pc, #176]	; (80051b0 <TIM_Base_SetConfig+0x118>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d023      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a2b      	ldr	r2, [pc, #172]	; (80051b4 <TIM_Base_SetConfig+0x11c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d01f      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a2a      	ldr	r2, [pc, #168]	; (80051b8 <TIM_Base_SetConfig+0x120>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d01b      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a29      	ldr	r2, [pc, #164]	; (80051bc <TIM_Base_SetConfig+0x124>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d017      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a28      	ldr	r2, [pc, #160]	; (80051c0 <TIM_Base_SetConfig+0x128>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d013      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a27      	ldr	r2, [pc, #156]	; (80051c4 <TIM_Base_SetConfig+0x12c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00f      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a26      	ldr	r2, [pc, #152]	; (80051c8 <TIM_Base_SetConfig+0x130>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d00b      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a25      	ldr	r2, [pc, #148]	; (80051cc <TIM_Base_SetConfig+0x134>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d007      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a24      	ldr	r2, [pc, #144]	; (80051d0 <TIM_Base_SetConfig+0x138>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d003      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a23      	ldr	r2, [pc, #140]	; (80051d4 <TIM_Base_SetConfig+0x13c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d108      	bne.n	800515c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a0a      	ldr	r2, [pc, #40]	; (80051ac <TIM_Base_SetConfig+0x114>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d003      	beq.n	8005190 <TIM_Base_SetConfig+0xf8>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a0c      	ldr	r2, [pc, #48]	; (80051bc <TIM_Base_SetConfig+0x124>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d103      	bne.n	8005198 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	615a      	str	r2, [r3, #20]
}
 800519e:	bf00      	nop
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40010000 	.word	0x40010000
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800
 80051b8:	40000c00 	.word	0x40000c00
 80051bc:	40010400 	.word	0x40010400
 80051c0:	40014000 	.word	0x40014000
 80051c4:	40014400 	.word	0x40014400
 80051c8:	40014800 	.word	0x40014800
 80051cc:	40001800 	.word	0x40001800
 80051d0:	40001c00 	.word	0x40001c00
 80051d4:	40002000 	.word	0x40002000

080051d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f003 031f 	and.w	r3, r3, #31
 80051ea:	2201      	movs	r2, #1
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a1a      	ldr	r2, [r3, #32]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	43db      	mvns	r3, r3
 80051fa:	401a      	ands	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a1a      	ldr	r2, [r3, #32]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f003 031f 	and.w	r3, r3, #31
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	fa01 f303 	lsl.w	r3, r1, r3
 8005210:	431a      	orrs	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	621a      	str	r2, [r3, #32]
}
 8005216:	bf00      	nop
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
	...

08005224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005234:	2b01      	cmp	r3, #1
 8005236:	d101      	bne.n	800523c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005238:	2302      	movs	r3, #2
 800523a:	e05a      	b.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a21      	ldr	r2, [pc, #132]	; (8005300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d022      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005288:	d01d      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1d      	ldr	r2, [pc, #116]	; (8005304 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d018      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1b      	ldr	r2, [pc, #108]	; (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d013      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a1a      	ldr	r2, [pc, #104]	; (800530c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00e      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a18      	ldr	r2, [pc, #96]	; (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d009      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a17      	ldr	r2, [pc, #92]	; (8005314 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d004      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a15      	ldr	r2, [pc, #84]	; (8005318 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d10c      	bne.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40010000 	.word	0x40010000
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800
 800530c:	40000c00 	.word	0x40000c00
 8005310:	40010400 	.word	0x40010400
 8005314:	40014000 	.word	0x40014000
 8005318:	40001800 	.word	0x40001800

0800531c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e03f      	b.n	80053d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7fd ff28 	bl	80031c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2224      	movs	r2, #36	; 0x24
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fe37 	bl	8005ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800539c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695a      	ldr	r2, [r3, #20]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b08a      	sub	sp, #40	; 0x28
 80053e2:	af02      	add	r7, sp, #8
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	603b      	str	r3, [r7, #0]
 80053ea:	4613      	mov	r3, r2
 80053ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b20      	cmp	r3, #32
 80053fc:	d17c      	bne.n	80054f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_UART_Transmit+0x2c>
 8005404:	88fb      	ldrh	r3, [r7, #6]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e075      	b.n	80054fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_UART_Transmit+0x3e>
 8005418:	2302      	movs	r3, #2
 800541a:	e06e      	b.n	80054fa <HAL_UART_Transmit+0x11c>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2221      	movs	r2, #33	; 0x21
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005432:	f7fe f8db 	bl	80035ec <HAL_GetTick>
 8005436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	88fa      	ldrh	r2, [r7, #6]
 800543c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	88fa      	ldrh	r2, [r7, #6]
 8005442:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544c:	d108      	bne.n	8005460 <HAL_UART_Transmit+0x82>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d104      	bne.n	8005460 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	e003      	b.n	8005468 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005464:	2300      	movs	r3, #0
 8005466:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005470:	e02a      	b.n	80054c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2200      	movs	r2, #0
 800547a:	2180      	movs	r1, #128	; 0x80
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 fb77 	bl	8005b70 <UART_WaitOnFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e036      	b.n	80054fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10b      	bne.n	80054aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	3302      	adds	r3, #2
 80054a6:	61bb      	str	r3, [r7, #24]
 80054a8:	e007      	b.n	80054ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	781a      	ldrb	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	3301      	adds	r3, #1
 80054b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054be:	b29b      	uxth	r3, r3
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1cf      	bne.n	8005472 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2200      	movs	r2, #0
 80054da:	2140      	movs	r1, #64	; 0x40
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 fb47 	bl	8005b70 <UART_WaitOnFlagUntilTimeout>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e006      	b.n	80054fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	e000      	b.n	80054fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054f8:	2302      	movs	r3, #2
  }
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3720      	adds	r7, #32
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	4613      	mov	r3, r2
 800550e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b20      	cmp	r3, #32
 800551a:	d11d      	bne.n	8005558 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <HAL_UART_Receive_IT+0x26>
 8005522:	88fb      	ldrh	r3, [r7, #6]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e016      	b.n	800555a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005532:	2b01      	cmp	r3, #1
 8005534:	d101      	bne.n	800553a <HAL_UART_Receive_IT+0x38>
 8005536:	2302      	movs	r3, #2
 8005538:	e00f      	b.n	800555a <HAL_UART_Receive_IT+0x58>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005548:	88fb      	ldrh	r3, [r7, #6]
 800554a:	461a      	mov	r2, r3
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 fb7c 	bl	8005c4c <UART_Start_Receive_IT>
 8005554:	4603      	mov	r3, r0
 8005556:	e000      	b.n	800555a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005558:	2302      	movs	r3, #2
  }
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b08c      	sub	sp, #48	; 0x30
 8005566:	af00      	add	r7, sp, #0
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	4613      	mov	r3, r2
 800556e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b20      	cmp	r3, #32
 800557a:	d152      	bne.n	8005622 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8005582:	88fb      	ldrh	r3, [r7, #6]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e04b      	b.n	8005624 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005592:	2b01      	cmp	r3, #1
 8005594:	d101      	bne.n	800559a <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8005596:	2302      	movs	r3, #2
 8005598:	e044      	b.n	8005624 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2201      	movs	r2, #1
 80055a6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80055a8:	88fb      	ldrh	r3, [r7, #6]
 80055aa:	461a      	mov	r2, r3
 80055ac:	68b9      	ldr	r1, [r7, #8]
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 fb4c 	bl	8005c4c <UART_Start_Receive_IT>
 80055b4:	4603      	mov	r3, r0
 80055b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80055ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d12c      	bne.n	800561c <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d125      	bne.n	8005616 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055ca:	2300      	movs	r3, #0
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	330c      	adds	r3, #12
 80055e6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	617b      	str	r3, [r7, #20]
   return(result);
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f043 0310 	orr.w	r3, r3, #16
 80055f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	330c      	adds	r3, #12
 80055fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005600:	627a      	str	r2, [r7, #36]	; 0x24
 8005602:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6a39      	ldr	r1, [r7, #32]
 8005606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	61fb      	str	r3, [r7, #28]
   return(result);
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e5      	bne.n	80055e0 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 8005614:	e002      	b.n	800561c <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800561c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005620:	e000      	b.n	8005624 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005622:	2302      	movs	r3, #2
  }
}
 8005624:	4618      	mov	r0, r3
 8005626:	3730      	adds	r7, #48	; 0x30
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b0ba      	sub	sp, #232	; 0xe8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005652:	2300      	movs	r3, #0
 8005654:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005658:	2300      	movs	r3, #0
 800565a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800566a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10f      	bne.n	8005692 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	2b00      	cmp	r3, #0
 800567c:	d009      	beq.n	8005692 <HAL_UART_IRQHandler+0x66>
 800567e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fbfb 	bl	8005e86 <UART_Receive_IT>
      return;
 8005690:	e256      	b.n	8005b40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005692:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80de 	beq.w	8005858 <HAL_UART_IRQHandler+0x22c>
 800569c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d106      	bne.n	80056b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 80d1 	beq.w	8005858 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00b      	beq.n	80056da <HAL_UART_IRQHandler+0xae>
 80056c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d005      	beq.n	80056da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	f043 0201 	orr.w	r2, r3, #1
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00b      	beq.n	80056fe <HAL_UART_IRQHandler+0xd2>
 80056e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d005      	beq.n	80056fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f043 0202 	orr.w	r2, r3, #2
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00b      	beq.n	8005722 <HAL_UART_IRQHandler+0xf6>
 800570a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f043 0204 	orr.w	r2, r3, #4
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d011      	beq.n	8005752 <HAL_UART_IRQHandler+0x126>
 800572e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b00      	cmp	r3, #0
 8005738:	d105      	bne.n	8005746 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800573a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d005      	beq.n	8005752 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	f043 0208 	orr.w	r2, r3, #8
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 81ed 	beq.w	8005b36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800575c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005760:	f003 0320 	and.w	r3, r3, #32
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <HAL_UART_IRQHandler+0x14e>
 8005768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800576c:	f003 0320 	and.w	r3, r3, #32
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fb86 	bl	8005e86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005784:	2b40      	cmp	r3, #64	; 0x40
 8005786:	bf0c      	ite	eq
 8005788:	2301      	moveq	r3, #1
 800578a:	2300      	movne	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	f003 0308 	and.w	r3, r3, #8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d103      	bne.n	80057a6 <HAL_UART_IRQHandler+0x17a>
 800579e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d04f      	beq.n	8005846 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fa8e 	bl	8005cc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b6:	2b40      	cmp	r3, #64	; 0x40
 80057b8:	d141      	bne.n	800583e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3314      	adds	r3, #20
 80057c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3314      	adds	r3, #20
 80057e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1d9      	bne.n	80057ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	2b00      	cmp	r3, #0
 800580c:	d013      	beq.n	8005836 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005812:	4a7d      	ldr	r2, [pc, #500]	; (8005a08 <HAL_UART_IRQHandler+0x3dc>)
 8005814:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	4618      	mov	r0, r3
 800581c:	f7fe f8a5 	bl	800396a <HAL_DMA_Abort_IT>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d016      	beq.n	8005854 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005830:	4610      	mov	r0, r2
 8005832:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005834:	e00e      	b.n	8005854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f990 	bl	8005b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583c:	e00a      	b.n	8005854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f98c 	bl	8005b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005844:	e006      	b.n	8005854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f988 	bl	8005b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005852:	e170      	b.n	8005b36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005854:	bf00      	nop
    return;
 8005856:	e16e      	b.n	8005b36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585c:	2b01      	cmp	r3, #1
 800585e:	f040 814a 	bne.w	8005af6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005866:	f003 0310 	and.w	r3, r3, #16
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 8143 	beq.w	8005af6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005874:	f003 0310 	and.w	r3, r3, #16
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 813c 	beq.w	8005af6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800587e:	2300      	movs	r3, #0
 8005880:	60bb      	str	r3, [r7, #8]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	60bb      	str	r3, [r7, #8]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	60bb      	str	r3, [r7, #8]
 8005892:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589e:	2b40      	cmp	r3, #64	; 0x40
 80058a0:	f040 80b4 	bne.w	8005a0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 8140 	beq.w	8005b3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058c2:	429a      	cmp	r2, r3
 80058c4:	f080 8139 	bcs.w	8005b3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058da:	f000 8088 	beq.w	80059ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	330c      	adds	r3, #12
 80058e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	330c      	adds	r3, #12
 8005906:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800590a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800590e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005916:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1d9      	bne.n	80058de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3314      	adds	r3, #20
 8005930:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800593a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800593c:	f023 0301 	bic.w	r3, r3, #1
 8005940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3314      	adds	r3, #20
 800594a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800594e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005952:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005956:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e1      	bne.n	800592a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3314      	adds	r3, #20
 800596c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800597c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3314      	adds	r3, #20
 8005986:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800598a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800598c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005990:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e3      	bne.n	8005966 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	330c      	adds	r3, #12
 80059b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b6:	e853 3f00 	ldrex	r3, [r3]
 80059ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059be:	f023 0310 	bic.w	r3, r3, #16
 80059c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	330c      	adds	r3, #12
 80059cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80059d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80059d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059d8:	e841 2300 	strex	r3, r2, [r1]
 80059dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1e3      	bne.n	80059ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fd ff4e 	bl	800388a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fc fc3e 	bl	8002280 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a04:	e099      	b.n	8005b3a <HAL_UART_IRQHandler+0x50e>
 8005a06:	bf00      	nop
 8005a08:	08005d8f 	.word	0x08005d8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 808b 	beq.w	8005b3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 8086 	beq.w	8005b3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	330c      	adds	r3, #12
 8005a38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	330c      	adds	r3, #12
 8005a52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a56:	647a      	str	r2, [r7, #68]	; 0x44
 8005a58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e3      	bne.n	8005a32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3314      	adds	r3, #20
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	623b      	str	r3, [r7, #32]
   return(result);
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3314      	adds	r3, #20
 8005a8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a8e:	633a      	str	r2, [r7, #48]	; 0x30
 8005a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e3      	bne.n	8005a6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	330c      	adds	r3, #12
 8005ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0310 	bic.w	r3, r3, #16
 8005ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	330c      	adds	r3, #12
 8005ad0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ad4:	61fa      	str	r2, [r7, #28]
 8005ad6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad8:	69b9      	ldr	r1, [r7, #24]
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	e841 2300 	strex	r3, r2, [r1]
 8005ae0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1e3      	bne.n	8005ab0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7fc fbc6 	bl	8002280 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005af4:	e023      	b.n	8005b3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d009      	beq.n	8005b16 <HAL_UART_IRQHandler+0x4ea>
 8005b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f951 	bl	8005db6 <UART_Transmit_IT>
    return;
 8005b14:	e014      	b.n	8005b40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00e      	beq.n	8005b40 <HAL_UART_IRQHandler+0x514>
 8005b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d008      	beq.n	8005b40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f991 	bl	8005e56 <UART_EndTransmit_IT>
    return;
 8005b34:	e004      	b.n	8005b40 <HAL_UART_IRQHandler+0x514>
    return;
 8005b36:	bf00      	nop
 8005b38:	e002      	b.n	8005b40 <HAL_UART_IRQHandler+0x514>
      return;
 8005b3a:	bf00      	nop
 8005b3c:	e000      	b.n	8005b40 <HAL_UART_IRQHandler+0x514>
      return;
 8005b3e:	bf00      	nop
  }
}
 8005b40:	37e8      	adds	r7, #232	; 0xe8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop

08005b48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b090      	sub	sp, #64	; 0x40
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b80:	e050      	b.n	8005c24 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d04c      	beq.n	8005c24 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d007      	beq.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b90:	f7fd fd2c 	bl	80035ec <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d241      	bcs.n	8005c24 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bc0:	637a      	str	r2, [r7, #52]	; 0x34
 8005bc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bc8:	e841 2300 	strex	r3, r2, [r1]
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1e5      	bne.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3314      	adds	r3, #20
 8005bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	e853 3f00 	ldrex	r3, [r3]
 8005be2:	613b      	str	r3, [r7, #16]
   return(result);
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f023 0301 	bic.w	r3, r3, #1
 8005bea:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3314      	adds	r3, #20
 8005bf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bf4:	623a      	str	r2, [r7, #32]
 8005bf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	69f9      	ldr	r1, [r7, #28]
 8005bfa:	6a3a      	ldr	r2, [r7, #32]
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e5      	bne.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e00f      	b.n	8005c44 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	bf0c      	ite	eq
 8005c34:	2301      	moveq	r3, #1
 8005c36:	2300      	movne	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d09f      	beq.n	8005b82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3740      	adds	r7, #64	; 0x40
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	4613      	mov	r3, r2
 8005c58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	88fa      	ldrh	r2, [r7, #6]
 8005c64:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	88fa      	ldrh	r2, [r7, #6]
 8005c6a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2222      	movs	r2, #34	; 0x22
 8005c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d007      	beq.n	8005c9a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c98:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695a      	ldr	r2, [r3, #20]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0201 	orr.w	r2, r2, #1
 8005ca8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 0220 	orr.w	r2, r2, #32
 8005cb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b095      	sub	sp, #84	; 0x54
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	330c      	adds	r3, #12
 8005cd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cf0:	643a      	str	r2, [r7, #64]	; 0x40
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e5      	bne.n	8005cd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3314      	adds	r3, #20
 8005d0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	e853 3f00 	ldrex	r3, [r3]
 8005d12:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	f023 0301 	bic.w	r3, r3, #1
 8005d1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3314      	adds	r3, #20
 8005d22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d2c:	e841 2300 	strex	r3, r2, [r1]
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e5      	bne.n	8005d04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d119      	bne.n	8005d74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	330c      	adds	r3, #12
 8005d46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f023 0310 	bic.w	r3, r3, #16
 8005d56:	647b      	str	r3, [r7, #68]	; 0x44
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d60:	61ba      	str	r2, [r7, #24]
 8005d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	6979      	ldr	r1, [r7, #20]
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e5      	bne.n	8005d40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d82:	bf00      	nop
 8005d84:	3754      	adds	r7, #84	; 0x54
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f7ff fed7 	bl	8005b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dae:	bf00      	nop
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b085      	sub	sp, #20
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b21      	cmp	r3, #33	; 0x21
 8005dc8:	d13e      	bne.n	8005e48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd2:	d114      	bne.n	8005dfe <UART_Transmit_IT+0x48>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d110      	bne.n	8005dfe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005df0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	1c9a      	adds	r2, r3, #2
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	621a      	str	r2, [r3, #32]
 8005dfc:	e008      	b.n	8005e10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	1c59      	adds	r1, r3, #1
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6211      	str	r1, [r2, #32]
 8005e08:	781a      	ldrb	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10f      	bne.n	8005e44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e44:	2300      	movs	r3, #0
 8005e46:	e000      	b.n	8005e4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e48:	2302      	movs	r3, #2
  }
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b082      	sub	sp, #8
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff fe66 	bl	8005b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b08c      	sub	sp, #48	; 0x30
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b22      	cmp	r3, #34	; 0x22
 8005e98:	f040 80ab 	bne.w	8005ff2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea4:	d117      	bne.n	8005ed6 <UART_Receive_IT+0x50>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d113      	bne.n	8005ed6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ece:	1c9a      	adds	r2, r3, #2
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8005ed4:	e026      	b.n	8005f24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee8:	d007      	beq.n	8005efa <UART_Receive_IT+0x74>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10a      	bne.n	8005f08 <UART_Receive_IT+0x82>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	e008      	b.n	8005f1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	4619      	mov	r1, r3
 8005f32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d15a      	bne.n	8005fee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0220 	bic.w	r2, r2, #32
 8005f46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695a      	ldr	r2, [r3, #20]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0201 	bic.w	r2, r2, #1
 8005f66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d135      	bne.n	8005fe4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	330c      	adds	r3, #12
 8005f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f023 0310 	bic.w	r3, r3, #16
 8005f94:	627b      	str	r3, [r7, #36]	; 0x24
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	330c      	adds	r3, #12
 8005f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9e:	623a      	str	r2, [r7, #32]
 8005fa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	69f9      	ldr	r1, [r7, #28]
 8005fa4:	6a3a      	ldr	r2, [r7, #32]
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e5      	bne.n	8005f7e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0310 	and.w	r3, r3, #16
 8005fbc:	2b10      	cmp	r3, #16
 8005fbe:	d10a      	bne.n	8005fd6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7fc f94f 	bl	8002280 <HAL_UARTEx_RxEventCallback>
 8005fe2:	e002      	b.n	8005fea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7fc fa3d 	bl	8002464 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	e002      	b.n	8005ff4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e000      	b.n	8005ff4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005ff2:	2302      	movs	r3, #2
  }
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3730      	adds	r7, #48	; 0x30
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006000:	b0c0      	sub	sp, #256	; 0x100
 8006002:	af00      	add	r7, sp, #0
 8006004:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006018:	68d9      	ldr	r1, [r3, #12]
 800601a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	ea40 0301 	orr.w	r3, r0, r1
 8006024:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	431a      	orrs	r2, r3
 8006034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	431a      	orrs	r2, r3
 800603c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006054:	f021 010c 	bic.w	r1, r1, #12
 8006058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006062:	430b      	orrs	r3, r1
 8006064:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006076:	6999      	ldr	r1, [r3, #24]
 8006078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	ea40 0301 	orr.w	r3, r0, r1
 8006082:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	4b8f      	ldr	r3, [pc, #572]	; (80062c8 <UART_SetConfig+0x2cc>)
 800608c:	429a      	cmp	r2, r3
 800608e:	d005      	beq.n	800609c <UART_SetConfig+0xa0>
 8006090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	4b8d      	ldr	r3, [pc, #564]	; (80062cc <UART_SetConfig+0x2d0>)
 8006098:	429a      	cmp	r2, r3
 800609a:	d104      	bne.n	80060a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800609c:	f7fd ff6c 	bl	8003f78 <HAL_RCC_GetPCLK2Freq>
 80060a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80060a4:	e003      	b.n	80060ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060a6:	f7fd ff53 	bl	8003f50 <HAL_RCC_GetPCLK1Freq>
 80060aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b8:	f040 810c 	bne.w	80062d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060c0:	2200      	movs	r2, #0
 80060c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060ce:	4622      	mov	r2, r4
 80060d0:	462b      	mov	r3, r5
 80060d2:	1891      	adds	r1, r2, r2
 80060d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80060d6:	415b      	adcs	r3, r3
 80060d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060de:	4621      	mov	r1, r4
 80060e0:	eb12 0801 	adds.w	r8, r2, r1
 80060e4:	4629      	mov	r1, r5
 80060e6:	eb43 0901 	adc.w	r9, r3, r1
 80060ea:	f04f 0200 	mov.w	r2, #0
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060fe:	4690      	mov	r8, r2
 8006100:	4699      	mov	r9, r3
 8006102:	4623      	mov	r3, r4
 8006104:	eb18 0303 	adds.w	r3, r8, r3
 8006108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800610c:	462b      	mov	r3, r5
 800610e:	eb49 0303 	adc.w	r3, r9, r3
 8006112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006122:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006126:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800612a:	460b      	mov	r3, r1
 800612c:	18db      	adds	r3, r3, r3
 800612e:	653b      	str	r3, [r7, #80]	; 0x50
 8006130:	4613      	mov	r3, r2
 8006132:	eb42 0303 	adc.w	r3, r2, r3
 8006136:	657b      	str	r3, [r7, #84]	; 0x54
 8006138:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800613c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006140:	f7fa fdd2 	bl	8000ce8 <__aeabi_uldivmod>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4b61      	ldr	r3, [pc, #388]	; (80062d0 <UART_SetConfig+0x2d4>)
 800614a:	fba3 2302 	umull	r2, r3, r3, r2
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	011c      	lsls	r4, r3, #4
 8006152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006156:	2200      	movs	r2, #0
 8006158:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800615c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006160:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006164:	4642      	mov	r2, r8
 8006166:	464b      	mov	r3, r9
 8006168:	1891      	adds	r1, r2, r2
 800616a:	64b9      	str	r1, [r7, #72]	; 0x48
 800616c:	415b      	adcs	r3, r3
 800616e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006170:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006174:	4641      	mov	r1, r8
 8006176:	eb12 0a01 	adds.w	sl, r2, r1
 800617a:	4649      	mov	r1, r9
 800617c:	eb43 0b01 	adc.w	fp, r3, r1
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800618c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006190:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006194:	4692      	mov	sl, r2
 8006196:	469b      	mov	fp, r3
 8006198:	4643      	mov	r3, r8
 800619a:	eb1a 0303 	adds.w	r3, sl, r3
 800619e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061a2:	464b      	mov	r3, r9
 80061a4:	eb4b 0303 	adc.w	r3, fp, r3
 80061a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80061bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061c0:	460b      	mov	r3, r1
 80061c2:	18db      	adds	r3, r3, r3
 80061c4:	643b      	str	r3, [r7, #64]	; 0x40
 80061c6:	4613      	mov	r3, r2
 80061c8:	eb42 0303 	adc.w	r3, r2, r3
 80061cc:	647b      	str	r3, [r7, #68]	; 0x44
 80061ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061d6:	f7fa fd87 	bl	8000ce8 <__aeabi_uldivmod>
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4611      	mov	r1, r2
 80061e0:	4b3b      	ldr	r3, [pc, #236]	; (80062d0 <UART_SetConfig+0x2d4>)
 80061e2:	fba3 2301 	umull	r2, r3, r3, r1
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	2264      	movs	r2, #100	; 0x64
 80061ea:	fb02 f303 	mul.w	r3, r2, r3
 80061ee:	1acb      	subs	r3, r1, r3
 80061f0:	00db      	lsls	r3, r3, #3
 80061f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061f6:	4b36      	ldr	r3, [pc, #216]	; (80062d0 <UART_SetConfig+0x2d4>)
 80061f8:	fba3 2302 	umull	r2, r3, r3, r2
 80061fc:	095b      	lsrs	r3, r3, #5
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006204:	441c      	add	r4, r3
 8006206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800620a:	2200      	movs	r2, #0
 800620c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006210:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006214:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006218:	4642      	mov	r2, r8
 800621a:	464b      	mov	r3, r9
 800621c:	1891      	adds	r1, r2, r2
 800621e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006220:	415b      	adcs	r3, r3
 8006222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006224:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006228:	4641      	mov	r1, r8
 800622a:	1851      	adds	r1, r2, r1
 800622c:	6339      	str	r1, [r7, #48]	; 0x30
 800622e:	4649      	mov	r1, r9
 8006230:	414b      	adcs	r3, r1
 8006232:	637b      	str	r3, [r7, #52]	; 0x34
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006240:	4659      	mov	r1, fp
 8006242:	00cb      	lsls	r3, r1, #3
 8006244:	4651      	mov	r1, sl
 8006246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800624a:	4651      	mov	r1, sl
 800624c:	00ca      	lsls	r2, r1, #3
 800624e:	4610      	mov	r0, r2
 8006250:	4619      	mov	r1, r3
 8006252:	4603      	mov	r3, r0
 8006254:	4642      	mov	r2, r8
 8006256:	189b      	adds	r3, r3, r2
 8006258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800625c:	464b      	mov	r3, r9
 800625e:	460a      	mov	r2, r1
 8006260:	eb42 0303 	adc.w	r3, r2, r3
 8006264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006274:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006278:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800627c:	460b      	mov	r3, r1
 800627e:	18db      	adds	r3, r3, r3
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
 8006282:	4613      	mov	r3, r2
 8006284:	eb42 0303 	adc.w	r3, r2, r3
 8006288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800628a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800628e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006292:	f7fa fd29 	bl	8000ce8 <__aeabi_uldivmod>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4b0d      	ldr	r3, [pc, #52]	; (80062d0 <UART_SetConfig+0x2d4>)
 800629c:	fba3 1302 	umull	r1, r3, r3, r2
 80062a0:	095b      	lsrs	r3, r3, #5
 80062a2:	2164      	movs	r1, #100	; 0x64
 80062a4:	fb01 f303 	mul.w	r3, r1, r3
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	3332      	adds	r3, #50	; 0x32
 80062ae:	4a08      	ldr	r2, [pc, #32]	; (80062d0 <UART_SetConfig+0x2d4>)
 80062b0:	fba2 2303 	umull	r2, r3, r2, r3
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	f003 0207 	and.w	r2, r3, #7
 80062ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4422      	add	r2, r4
 80062c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062c4:	e105      	b.n	80064d2 <UART_SetConfig+0x4d6>
 80062c6:	bf00      	nop
 80062c8:	40011000 	.word	0x40011000
 80062cc:	40011400 	.word	0x40011400
 80062d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062d8:	2200      	movs	r2, #0
 80062da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062e6:	4642      	mov	r2, r8
 80062e8:	464b      	mov	r3, r9
 80062ea:	1891      	adds	r1, r2, r2
 80062ec:	6239      	str	r1, [r7, #32]
 80062ee:	415b      	adcs	r3, r3
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
 80062f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062f6:	4641      	mov	r1, r8
 80062f8:	1854      	adds	r4, r2, r1
 80062fa:	4649      	mov	r1, r9
 80062fc:	eb43 0501 	adc.w	r5, r3, r1
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	00eb      	lsls	r3, r5, #3
 800630a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800630e:	00e2      	lsls	r2, r4, #3
 8006310:	4614      	mov	r4, r2
 8006312:	461d      	mov	r5, r3
 8006314:	4643      	mov	r3, r8
 8006316:	18e3      	adds	r3, r4, r3
 8006318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800631c:	464b      	mov	r3, r9
 800631e:	eb45 0303 	adc.w	r3, r5, r3
 8006322:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006332:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006336:	f04f 0200 	mov.w	r2, #0
 800633a:	f04f 0300 	mov.w	r3, #0
 800633e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006342:	4629      	mov	r1, r5
 8006344:	008b      	lsls	r3, r1, #2
 8006346:	4621      	mov	r1, r4
 8006348:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800634c:	4621      	mov	r1, r4
 800634e:	008a      	lsls	r2, r1, #2
 8006350:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006354:	f7fa fcc8 	bl	8000ce8 <__aeabi_uldivmod>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	4b60      	ldr	r3, [pc, #384]	; (80064e0 <UART_SetConfig+0x4e4>)
 800635e:	fba3 2302 	umull	r2, r3, r3, r2
 8006362:	095b      	lsrs	r3, r3, #5
 8006364:	011c      	lsls	r4, r3, #4
 8006366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800636a:	2200      	movs	r2, #0
 800636c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006370:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006374:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006378:	4642      	mov	r2, r8
 800637a:	464b      	mov	r3, r9
 800637c:	1891      	adds	r1, r2, r2
 800637e:	61b9      	str	r1, [r7, #24]
 8006380:	415b      	adcs	r3, r3
 8006382:	61fb      	str	r3, [r7, #28]
 8006384:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006388:	4641      	mov	r1, r8
 800638a:	1851      	adds	r1, r2, r1
 800638c:	6139      	str	r1, [r7, #16]
 800638e:	4649      	mov	r1, r9
 8006390:	414b      	adcs	r3, r1
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	f04f 0300 	mov.w	r3, #0
 800639c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063a0:	4659      	mov	r1, fp
 80063a2:	00cb      	lsls	r3, r1, #3
 80063a4:	4651      	mov	r1, sl
 80063a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063aa:	4651      	mov	r1, sl
 80063ac:	00ca      	lsls	r2, r1, #3
 80063ae:	4610      	mov	r0, r2
 80063b0:	4619      	mov	r1, r3
 80063b2:	4603      	mov	r3, r0
 80063b4:	4642      	mov	r2, r8
 80063b6:	189b      	adds	r3, r3, r2
 80063b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063bc:	464b      	mov	r3, r9
 80063be:	460a      	mov	r2, r1
 80063c0:	eb42 0303 	adc.w	r3, r2, r3
 80063c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80063d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	f04f 0300 	mov.w	r3, #0
 80063dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063e0:	4649      	mov	r1, r9
 80063e2:	008b      	lsls	r3, r1, #2
 80063e4:	4641      	mov	r1, r8
 80063e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063ea:	4641      	mov	r1, r8
 80063ec:	008a      	lsls	r2, r1, #2
 80063ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063f2:	f7fa fc79 	bl	8000ce8 <__aeabi_uldivmod>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4b39      	ldr	r3, [pc, #228]	; (80064e0 <UART_SetConfig+0x4e4>)
 80063fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006400:	095b      	lsrs	r3, r3, #5
 8006402:	2164      	movs	r1, #100	; 0x64
 8006404:	fb01 f303 	mul.w	r3, r1, r3
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	011b      	lsls	r3, r3, #4
 800640c:	3332      	adds	r3, #50	; 0x32
 800640e:	4a34      	ldr	r2, [pc, #208]	; (80064e0 <UART_SetConfig+0x4e4>)
 8006410:	fba2 2303 	umull	r2, r3, r2, r3
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800641a:	441c      	add	r4, r3
 800641c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006420:	2200      	movs	r2, #0
 8006422:	673b      	str	r3, [r7, #112]	; 0x70
 8006424:	677a      	str	r2, [r7, #116]	; 0x74
 8006426:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800642a:	4642      	mov	r2, r8
 800642c:	464b      	mov	r3, r9
 800642e:	1891      	adds	r1, r2, r2
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	415b      	adcs	r3, r3
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800643a:	4641      	mov	r1, r8
 800643c:	1851      	adds	r1, r2, r1
 800643e:	6039      	str	r1, [r7, #0]
 8006440:	4649      	mov	r1, r9
 8006442:	414b      	adcs	r3, r1
 8006444:	607b      	str	r3, [r7, #4]
 8006446:	f04f 0200 	mov.w	r2, #0
 800644a:	f04f 0300 	mov.w	r3, #0
 800644e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006452:	4659      	mov	r1, fp
 8006454:	00cb      	lsls	r3, r1, #3
 8006456:	4651      	mov	r1, sl
 8006458:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800645c:	4651      	mov	r1, sl
 800645e:	00ca      	lsls	r2, r1, #3
 8006460:	4610      	mov	r0, r2
 8006462:	4619      	mov	r1, r3
 8006464:	4603      	mov	r3, r0
 8006466:	4642      	mov	r2, r8
 8006468:	189b      	adds	r3, r3, r2
 800646a:	66bb      	str	r3, [r7, #104]	; 0x68
 800646c:	464b      	mov	r3, r9
 800646e:	460a      	mov	r2, r1
 8006470:	eb42 0303 	adc.w	r3, r2, r3
 8006474:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	663b      	str	r3, [r7, #96]	; 0x60
 8006480:	667a      	str	r2, [r7, #100]	; 0x64
 8006482:	f04f 0200 	mov.w	r2, #0
 8006486:	f04f 0300 	mov.w	r3, #0
 800648a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800648e:	4649      	mov	r1, r9
 8006490:	008b      	lsls	r3, r1, #2
 8006492:	4641      	mov	r1, r8
 8006494:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006498:	4641      	mov	r1, r8
 800649a:	008a      	lsls	r2, r1, #2
 800649c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80064a0:	f7fa fc22 	bl	8000ce8 <__aeabi_uldivmod>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4b0d      	ldr	r3, [pc, #52]	; (80064e0 <UART_SetConfig+0x4e4>)
 80064aa:	fba3 1302 	umull	r1, r3, r3, r2
 80064ae:	095b      	lsrs	r3, r3, #5
 80064b0:	2164      	movs	r1, #100	; 0x64
 80064b2:	fb01 f303 	mul.w	r3, r1, r3
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	011b      	lsls	r3, r3, #4
 80064ba:	3332      	adds	r3, #50	; 0x32
 80064bc:	4a08      	ldr	r2, [pc, #32]	; (80064e0 <UART_SetConfig+0x4e4>)
 80064be:	fba2 2303 	umull	r2, r3, r2, r3
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	f003 020f 	and.w	r2, r3, #15
 80064c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4422      	add	r2, r4
 80064d0:	609a      	str	r2, [r3, #8]
}
 80064d2:	bf00      	nop
 80064d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064d8:	46bd      	mov	sp, r7
 80064da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064de:	bf00      	nop
 80064e0:	51eb851f 	.word	0x51eb851f

080064e4 <__errno>:
 80064e4:	4b01      	ldr	r3, [pc, #4]	; (80064ec <__errno+0x8>)
 80064e6:	6818      	ldr	r0, [r3, #0]
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	2000007c 	.word	0x2000007c

080064f0 <__libc_init_array>:
 80064f0:	b570      	push	{r4, r5, r6, lr}
 80064f2:	4d0d      	ldr	r5, [pc, #52]	; (8006528 <__libc_init_array+0x38>)
 80064f4:	4c0d      	ldr	r4, [pc, #52]	; (800652c <__libc_init_array+0x3c>)
 80064f6:	1b64      	subs	r4, r4, r5
 80064f8:	10a4      	asrs	r4, r4, #2
 80064fa:	2600      	movs	r6, #0
 80064fc:	42a6      	cmp	r6, r4
 80064fe:	d109      	bne.n	8006514 <__libc_init_array+0x24>
 8006500:	4d0b      	ldr	r5, [pc, #44]	; (8006530 <__libc_init_array+0x40>)
 8006502:	4c0c      	ldr	r4, [pc, #48]	; (8006534 <__libc_init_array+0x44>)
 8006504:	f004 fbc6 	bl	800ac94 <_init>
 8006508:	1b64      	subs	r4, r4, r5
 800650a:	10a4      	asrs	r4, r4, #2
 800650c:	2600      	movs	r6, #0
 800650e:	42a6      	cmp	r6, r4
 8006510:	d105      	bne.n	800651e <__libc_init_array+0x2e>
 8006512:	bd70      	pop	{r4, r5, r6, pc}
 8006514:	f855 3b04 	ldr.w	r3, [r5], #4
 8006518:	4798      	blx	r3
 800651a:	3601      	adds	r6, #1
 800651c:	e7ee      	b.n	80064fc <__libc_init_array+0xc>
 800651e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006522:	4798      	blx	r3
 8006524:	3601      	adds	r6, #1
 8006526:	e7f2      	b.n	800650e <__libc_init_array+0x1e>
 8006528:	0800b2e0 	.word	0x0800b2e0
 800652c:	0800b2e0 	.word	0x0800b2e0
 8006530:	0800b2e0 	.word	0x0800b2e0
 8006534:	0800b2e4 	.word	0x0800b2e4

08006538 <malloc>:
 8006538:	4b02      	ldr	r3, [pc, #8]	; (8006544 <malloc+0xc>)
 800653a:	4601      	mov	r1, r0
 800653c:	6818      	ldr	r0, [r3, #0]
 800653e:	f000 b899 	b.w	8006674 <_malloc_r>
 8006542:	bf00      	nop
 8006544:	2000007c 	.word	0x2000007c

08006548 <free>:
 8006548:	4b02      	ldr	r3, [pc, #8]	; (8006554 <free+0xc>)
 800654a:	4601      	mov	r1, r0
 800654c:	6818      	ldr	r0, [r3, #0]
 800654e:	f000 b825 	b.w	800659c <_free_r>
 8006552:	bf00      	nop
 8006554:	2000007c 	.word	0x2000007c

08006558 <memmove>:
 8006558:	4288      	cmp	r0, r1
 800655a:	b510      	push	{r4, lr}
 800655c:	eb01 0402 	add.w	r4, r1, r2
 8006560:	d902      	bls.n	8006568 <memmove+0x10>
 8006562:	4284      	cmp	r4, r0
 8006564:	4623      	mov	r3, r4
 8006566:	d807      	bhi.n	8006578 <memmove+0x20>
 8006568:	1e43      	subs	r3, r0, #1
 800656a:	42a1      	cmp	r1, r4
 800656c:	d008      	beq.n	8006580 <memmove+0x28>
 800656e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006572:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006576:	e7f8      	b.n	800656a <memmove+0x12>
 8006578:	4402      	add	r2, r0
 800657a:	4601      	mov	r1, r0
 800657c:	428a      	cmp	r2, r1
 800657e:	d100      	bne.n	8006582 <memmove+0x2a>
 8006580:	bd10      	pop	{r4, pc}
 8006582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006586:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800658a:	e7f7      	b.n	800657c <memmove+0x24>

0800658c <memset>:
 800658c:	4402      	add	r2, r0
 800658e:	4603      	mov	r3, r0
 8006590:	4293      	cmp	r3, r2
 8006592:	d100      	bne.n	8006596 <memset+0xa>
 8006594:	4770      	bx	lr
 8006596:	f803 1b01 	strb.w	r1, [r3], #1
 800659a:	e7f9      	b.n	8006590 <memset+0x4>

0800659c <_free_r>:
 800659c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800659e:	2900      	cmp	r1, #0
 80065a0:	d044      	beq.n	800662c <_free_r+0x90>
 80065a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065a6:	9001      	str	r0, [sp, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f1a1 0404 	sub.w	r4, r1, #4
 80065ae:	bfb8      	it	lt
 80065b0:	18e4      	addlt	r4, r4, r3
 80065b2:	f003 f99f 	bl	80098f4 <__malloc_lock>
 80065b6:	4a1e      	ldr	r2, [pc, #120]	; (8006630 <_free_r+0x94>)
 80065b8:	9801      	ldr	r0, [sp, #4]
 80065ba:	6813      	ldr	r3, [r2, #0]
 80065bc:	b933      	cbnz	r3, 80065cc <_free_r+0x30>
 80065be:	6063      	str	r3, [r4, #4]
 80065c0:	6014      	str	r4, [r2, #0]
 80065c2:	b003      	add	sp, #12
 80065c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065c8:	f003 b99a 	b.w	8009900 <__malloc_unlock>
 80065cc:	42a3      	cmp	r3, r4
 80065ce:	d908      	bls.n	80065e2 <_free_r+0x46>
 80065d0:	6825      	ldr	r5, [r4, #0]
 80065d2:	1961      	adds	r1, r4, r5
 80065d4:	428b      	cmp	r3, r1
 80065d6:	bf01      	itttt	eq
 80065d8:	6819      	ldreq	r1, [r3, #0]
 80065da:	685b      	ldreq	r3, [r3, #4]
 80065dc:	1949      	addeq	r1, r1, r5
 80065de:	6021      	streq	r1, [r4, #0]
 80065e0:	e7ed      	b.n	80065be <_free_r+0x22>
 80065e2:	461a      	mov	r2, r3
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	b10b      	cbz	r3, 80065ec <_free_r+0x50>
 80065e8:	42a3      	cmp	r3, r4
 80065ea:	d9fa      	bls.n	80065e2 <_free_r+0x46>
 80065ec:	6811      	ldr	r1, [r2, #0]
 80065ee:	1855      	adds	r5, r2, r1
 80065f0:	42a5      	cmp	r5, r4
 80065f2:	d10b      	bne.n	800660c <_free_r+0x70>
 80065f4:	6824      	ldr	r4, [r4, #0]
 80065f6:	4421      	add	r1, r4
 80065f8:	1854      	adds	r4, r2, r1
 80065fa:	42a3      	cmp	r3, r4
 80065fc:	6011      	str	r1, [r2, #0]
 80065fe:	d1e0      	bne.n	80065c2 <_free_r+0x26>
 8006600:	681c      	ldr	r4, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	6053      	str	r3, [r2, #4]
 8006606:	4421      	add	r1, r4
 8006608:	6011      	str	r1, [r2, #0]
 800660a:	e7da      	b.n	80065c2 <_free_r+0x26>
 800660c:	d902      	bls.n	8006614 <_free_r+0x78>
 800660e:	230c      	movs	r3, #12
 8006610:	6003      	str	r3, [r0, #0]
 8006612:	e7d6      	b.n	80065c2 <_free_r+0x26>
 8006614:	6825      	ldr	r5, [r4, #0]
 8006616:	1961      	adds	r1, r4, r5
 8006618:	428b      	cmp	r3, r1
 800661a:	bf04      	itt	eq
 800661c:	6819      	ldreq	r1, [r3, #0]
 800661e:	685b      	ldreq	r3, [r3, #4]
 8006620:	6063      	str	r3, [r4, #4]
 8006622:	bf04      	itt	eq
 8006624:	1949      	addeq	r1, r1, r5
 8006626:	6021      	streq	r1, [r4, #0]
 8006628:	6054      	str	r4, [r2, #4]
 800662a:	e7ca      	b.n	80065c2 <_free_r+0x26>
 800662c:	b003      	add	sp, #12
 800662e:	bd30      	pop	{r4, r5, pc}
 8006630:	20000a20 	.word	0x20000a20

08006634 <sbrk_aligned>:
 8006634:	b570      	push	{r4, r5, r6, lr}
 8006636:	4e0e      	ldr	r6, [pc, #56]	; (8006670 <sbrk_aligned+0x3c>)
 8006638:	460c      	mov	r4, r1
 800663a:	6831      	ldr	r1, [r6, #0]
 800663c:	4605      	mov	r5, r0
 800663e:	b911      	cbnz	r1, 8006646 <sbrk_aligned+0x12>
 8006640:	f000 fd6c 	bl	800711c <_sbrk_r>
 8006644:	6030      	str	r0, [r6, #0]
 8006646:	4621      	mov	r1, r4
 8006648:	4628      	mov	r0, r5
 800664a:	f000 fd67 	bl	800711c <_sbrk_r>
 800664e:	1c43      	adds	r3, r0, #1
 8006650:	d00a      	beq.n	8006668 <sbrk_aligned+0x34>
 8006652:	1cc4      	adds	r4, r0, #3
 8006654:	f024 0403 	bic.w	r4, r4, #3
 8006658:	42a0      	cmp	r0, r4
 800665a:	d007      	beq.n	800666c <sbrk_aligned+0x38>
 800665c:	1a21      	subs	r1, r4, r0
 800665e:	4628      	mov	r0, r5
 8006660:	f000 fd5c 	bl	800711c <_sbrk_r>
 8006664:	3001      	adds	r0, #1
 8006666:	d101      	bne.n	800666c <sbrk_aligned+0x38>
 8006668:	f04f 34ff 	mov.w	r4, #4294967295
 800666c:	4620      	mov	r0, r4
 800666e:	bd70      	pop	{r4, r5, r6, pc}
 8006670:	20000a24 	.word	0x20000a24

08006674 <_malloc_r>:
 8006674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006678:	1ccd      	adds	r5, r1, #3
 800667a:	f025 0503 	bic.w	r5, r5, #3
 800667e:	3508      	adds	r5, #8
 8006680:	2d0c      	cmp	r5, #12
 8006682:	bf38      	it	cc
 8006684:	250c      	movcc	r5, #12
 8006686:	2d00      	cmp	r5, #0
 8006688:	4607      	mov	r7, r0
 800668a:	db01      	blt.n	8006690 <_malloc_r+0x1c>
 800668c:	42a9      	cmp	r1, r5
 800668e:	d905      	bls.n	800669c <_malloc_r+0x28>
 8006690:	230c      	movs	r3, #12
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	2600      	movs	r6, #0
 8006696:	4630      	mov	r0, r6
 8006698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800669c:	4e2e      	ldr	r6, [pc, #184]	; (8006758 <_malloc_r+0xe4>)
 800669e:	f003 f929 	bl	80098f4 <__malloc_lock>
 80066a2:	6833      	ldr	r3, [r6, #0]
 80066a4:	461c      	mov	r4, r3
 80066a6:	bb34      	cbnz	r4, 80066f6 <_malloc_r+0x82>
 80066a8:	4629      	mov	r1, r5
 80066aa:	4638      	mov	r0, r7
 80066ac:	f7ff ffc2 	bl	8006634 <sbrk_aligned>
 80066b0:	1c43      	adds	r3, r0, #1
 80066b2:	4604      	mov	r4, r0
 80066b4:	d14d      	bne.n	8006752 <_malloc_r+0xde>
 80066b6:	6834      	ldr	r4, [r6, #0]
 80066b8:	4626      	mov	r6, r4
 80066ba:	2e00      	cmp	r6, #0
 80066bc:	d140      	bne.n	8006740 <_malloc_r+0xcc>
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	4631      	mov	r1, r6
 80066c2:	4638      	mov	r0, r7
 80066c4:	eb04 0803 	add.w	r8, r4, r3
 80066c8:	f000 fd28 	bl	800711c <_sbrk_r>
 80066cc:	4580      	cmp	r8, r0
 80066ce:	d13a      	bne.n	8006746 <_malloc_r+0xd2>
 80066d0:	6821      	ldr	r1, [r4, #0]
 80066d2:	3503      	adds	r5, #3
 80066d4:	1a6d      	subs	r5, r5, r1
 80066d6:	f025 0503 	bic.w	r5, r5, #3
 80066da:	3508      	adds	r5, #8
 80066dc:	2d0c      	cmp	r5, #12
 80066de:	bf38      	it	cc
 80066e0:	250c      	movcc	r5, #12
 80066e2:	4629      	mov	r1, r5
 80066e4:	4638      	mov	r0, r7
 80066e6:	f7ff ffa5 	bl	8006634 <sbrk_aligned>
 80066ea:	3001      	adds	r0, #1
 80066ec:	d02b      	beq.n	8006746 <_malloc_r+0xd2>
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	442b      	add	r3, r5
 80066f2:	6023      	str	r3, [r4, #0]
 80066f4:	e00e      	b.n	8006714 <_malloc_r+0xa0>
 80066f6:	6822      	ldr	r2, [r4, #0]
 80066f8:	1b52      	subs	r2, r2, r5
 80066fa:	d41e      	bmi.n	800673a <_malloc_r+0xc6>
 80066fc:	2a0b      	cmp	r2, #11
 80066fe:	d916      	bls.n	800672e <_malloc_r+0xba>
 8006700:	1961      	adds	r1, r4, r5
 8006702:	42a3      	cmp	r3, r4
 8006704:	6025      	str	r5, [r4, #0]
 8006706:	bf18      	it	ne
 8006708:	6059      	strne	r1, [r3, #4]
 800670a:	6863      	ldr	r3, [r4, #4]
 800670c:	bf08      	it	eq
 800670e:	6031      	streq	r1, [r6, #0]
 8006710:	5162      	str	r2, [r4, r5]
 8006712:	604b      	str	r3, [r1, #4]
 8006714:	4638      	mov	r0, r7
 8006716:	f104 060b 	add.w	r6, r4, #11
 800671a:	f003 f8f1 	bl	8009900 <__malloc_unlock>
 800671e:	f026 0607 	bic.w	r6, r6, #7
 8006722:	1d23      	adds	r3, r4, #4
 8006724:	1af2      	subs	r2, r6, r3
 8006726:	d0b6      	beq.n	8006696 <_malloc_r+0x22>
 8006728:	1b9b      	subs	r3, r3, r6
 800672a:	50a3      	str	r3, [r4, r2]
 800672c:	e7b3      	b.n	8006696 <_malloc_r+0x22>
 800672e:	6862      	ldr	r2, [r4, #4]
 8006730:	42a3      	cmp	r3, r4
 8006732:	bf0c      	ite	eq
 8006734:	6032      	streq	r2, [r6, #0]
 8006736:	605a      	strne	r2, [r3, #4]
 8006738:	e7ec      	b.n	8006714 <_malloc_r+0xa0>
 800673a:	4623      	mov	r3, r4
 800673c:	6864      	ldr	r4, [r4, #4]
 800673e:	e7b2      	b.n	80066a6 <_malloc_r+0x32>
 8006740:	4634      	mov	r4, r6
 8006742:	6876      	ldr	r6, [r6, #4]
 8006744:	e7b9      	b.n	80066ba <_malloc_r+0x46>
 8006746:	230c      	movs	r3, #12
 8006748:	603b      	str	r3, [r7, #0]
 800674a:	4638      	mov	r0, r7
 800674c:	f003 f8d8 	bl	8009900 <__malloc_unlock>
 8006750:	e7a1      	b.n	8006696 <_malloc_r+0x22>
 8006752:	6025      	str	r5, [r4, #0]
 8006754:	e7de      	b.n	8006714 <_malloc_r+0xa0>
 8006756:	bf00      	nop
 8006758:	20000a20 	.word	0x20000a20

0800675c <__cvt>:
 800675c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006760:	ec55 4b10 	vmov	r4, r5, d0
 8006764:	2d00      	cmp	r5, #0
 8006766:	460e      	mov	r6, r1
 8006768:	4619      	mov	r1, r3
 800676a:	462b      	mov	r3, r5
 800676c:	bfbb      	ittet	lt
 800676e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006772:	461d      	movlt	r5, r3
 8006774:	2300      	movge	r3, #0
 8006776:	232d      	movlt	r3, #45	; 0x2d
 8006778:	700b      	strb	r3, [r1, #0]
 800677a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800677c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006780:	4691      	mov	r9, r2
 8006782:	f023 0820 	bic.w	r8, r3, #32
 8006786:	bfbc      	itt	lt
 8006788:	4622      	movlt	r2, r4
 800678a:	4614      	movlt	r4, r2
 800678c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006790:	d005      	beq.n	800679e <__cvt+0x42>
 8006792:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006796:	d100      	bne.n	800679a <__cvt+0x3e>
 8006798:	3601      	adds	r6, #1
 800679a:	2102      	movs	r1, #2
 800679c:	e000      	b.n	80067a0 <__cvt+0x44>
 800679e:	2103      	movs	r1, #3
 80067a0:	ab03      	add	r3, sp, #12
 80067a2:	9301      	str	r3, [sp, #4]
 80067a4:	ab02      	add	r3, sp, #8
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	ec45 4b10 	vmov	d0, r4, r5
 80067ac:	4653      	mov	r3, sl
 80067ae:	4632      	mov	r2, r6
 80067b0:	f001 fcee 	bl	8008190 <_dtoa_r>
 80067b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067b8:	4607      	mov	r7, r0
 80067ba:	d102      	bne.n	80067c2 <__cvt+0x66>
 80067bc:	f019 0f01 	tst.w	r9, #1
 80067c0:	d022      	beq.n	8006808 <__cvt+0xac>
 80067c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067c6:	eb07 0906 	add.w	r9, r7, r6
 80067ca:	d110      	bne.n	80067ee <__cvt+0x92>
 80067cc:	783b      	ldrb	r3, [r7, #0]
 80067ce:	2b30      	cmp	r3, #48	; 0x30
 80067d0:	d10a      	bne.n	80067e8 <__cvt+0x8c>
 80067d2:	2200      	movs	r2, #0
 80067d4:	2300      	movs	r3, #0
 80067d6:	4620      	mov	r0, r4
 80067d8:	4629      	mov	r1, r5
 80067da:	f7fa f9a5 	bl	8000b28 <__aeabi_dcmpeq>
 80067de:	b918      	cbnz	r0, 80067e8 <__cvt+0x8c>
 80067e0:	f1c6 0601 	rsb	r6, r6, #1
 80067e4:	f8ca 6000 	str.w	r6, [sl]
 80067e8:	f8da 3000 	ldr.w	r3, [sl]
 80067ec:	4499      	add	r9, r3
 80067ee:	2200      	movs	r2, #0
 80067f0:	2300      	movs	r3, #0
 80067f2:	4620      	mov	r0, r4
 80067f4:	4629      	mov	r1, r5
 80067f6:	f7fa f997 	bl	8000b28 <__aeabi_dcmpeq>
 80067fa:	b108      	cbz	r0, 8006800 <__cvt+0xa4>
 80067fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006800:	2230      	movs	r2, #48	; 0x30
 8006802:	9b03      	ldr	r3, [sp, #12]
 8006804:	454b      	cmp	r3, r9
 8006806:	d307      	bcc.n	8006818 <__cvt+0xbc>
 8006808:	9b03      	ldr	r3, [sp, #12]
 800680a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800680c:	1bdb      	subs	r3, r3, r7
 800680e:	4638      	mov	r0, r7
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	b004      	add	sp, #16
 8006814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006818:	1c59      	adds	r1, r3, #1
 800681a:	9103      	str	r1, [sp, #12]
 800681c:	701a      	strb	r2, [r3, #0]
 800681e:	e7f0      	b.n	8006802 <__cvt+0xa6>

08006820 <__exponent>:
 8006820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006822:	4603      	mov	r3, r0
 8006824:	2900      	cmp	r1, #0
 8006826:	bfb8      	it	lt
 8006828:	4249      	neglt	r1, r1
 800682a:	f803 2b02 	strb.w	r2, [r3], #2
 800682e:	bfb4      	ite	lt
 8006830:	222d      	movlt	r2, #45	; 0x2d
 8006832:	222b      	movge	r2, #43	; 0x2b
 8006834:	2909      	cmp	r1, #9
 8006836:	7042      	strb	r2, [r0, #1]
 8006838:	dd2a      	ble.n	8006890 <__exponent+0x70>
 800683a:	f10d 0407 	add.w	r4, sp, #7
 800683e:	46a4      	mov	ip, r4
 8006840:	270a      	movs	r7, #10
 8006842:	46a6      	mov	lr, r4
 8006844:	460a      	mov	r2, r1
 8006846:	fb91 f6f7 	sdiv	r6, r1, r7
 800684a:	fb07 1516 	mls	r5, r7, r6, r1
 800684e:	3530      	adds	r5, #48	; 0x30
 8006850:	2a63      	cmp	r2, #99	; 0x63
 8006852:	f104 34ff 	add.w	r4, r4, #4294967295
 8006856:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800685a:	4631      	mov	r1, r6
 800685c:	dcf1      	bgt.n	8006842 <__exponent+0x22>
 800685e:	3130      	adds	r1, #48	; 0x30
 8006860:	f1ae 0502 	sub.w	r5, lr, #2
 8006864:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006868:	1c44      	adds	r4, r0, #1
 800686a:	4629      	mov	r1, r5
 800686c:	4561      	cmp	r1, ip
 800686e:	d30a      	bcc.n	8006886 <__exponent+0x66>
 8006870:	f10d 0209 	add.w	r2, sp, #9
 8006874:	eba2 020e 	sub.w	r2, r2, lr
 8006878:	4565      	cmp	r5, ip
 800687a:	bf88      	it	hi
 800687c:	2200      	movhi	r2, #0
 800687e:	4413      	add	r3, r2
 8006880:	1a18      	subs	r0, r3, r0
 8006882:	b003      	add	sp, #12
 8006884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800688a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800688e:	e7ed      	b.n	800686c <__exponent+0x4c>
 8006890:	2330      	movs	r3, #48	; 0x30
 8006892:	3130      	adds	r1, #48	; 0x30
 8006894:	7083      	strb	r3, [r0, #2]
 8006896:	70c1      	strb	r1, [r0, #3]
 8006898:	1d03      	adds	r3, r0, #4
 800689a:	e7f1      	b.n	8006880 <__exponent+0x60>

0800689c <_printf_float>:
 800689c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a0:	ed2d 8b02 	vpush	{d8}
 80068a4:	b08d      	sub	sp, #52	; 0x34
 80068a6:	460c      	mov	r4, r1
 80068a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80068ac:	4616      	mov	r6, r2
 80068ae:	461f      	mov	r7, r3
 80068b0:	4605      	mov	r5, r0
 80068b2:	f002 ff93 	bl	80097dc <_localeconv_r>
 80068b6:	f8d0 a000 	ldr.w	sl, [r0]
 80068ba:	4650      	mov	r0, sl
 80068bc:	f7f9 fcb2 	bl	8000224 <strlen>
 80068c0:	2300      	movs	r3, #0
 80068c2:	930a      	str	r3, [sp, #40]	; 0x28
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	9305      	str	r3, [sp, #20]
 80068c8:	f8d8 3000 	ldr.w	r3, [r8]
 80068cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80068d0:	3307      	adds	r3, #7
 80068d2:	f023 0307 	bic.w	r3, r3, #7
 80068d6:	f103 0208 	add.w	r2, r3, #8
 80068da:	f8c8 2000 	str.w	r2, [r8]
 80068de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80068e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80068ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068ee:	9307      	str	r3, [sp, #28]
 80068f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80068f4:	ee08 0a10 	vmov	s16, r0
 80068f8:	4b9f      	ldr	r3, [pc, #636]	; (8006b78 <_printf_float+0x2dc>)
 80068fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006902:	f7fa f943 	bl	8000b8c <__aeabi_dcmpun>
 8006906:	bb88      	cbnz	r0, 800696c <_printf_float+0xd0>
 8006908:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800690c:	4b9a      	ldr	r3, [pc, #616]	; (8006b78 <_printf_float+0x2dc>)
 800690e:	f04f 32ff 	mov.w	r2, #4294967295
 8006912:	f7fa f91d 	bl	8000b50 <__aeabi_dcmple>
 8006916:	bb48      	cbnz	r0, 800696c <_printf_float+0xd0>
 8006918:	2200      	movs	r2, #0
 800691a:	2300      	movs	r3, #0
 800691c:	4640      	mov	r0, r8
 800691e:	4649      	mov	r1, r9
 8006920:	f7fa f90c 	bl	8000b3c <__aeabi_dcmplt>
 8006924:	b110      	cbz	r0, 800692c <_printf_float+0x90>
 8006926:	232d      	movs	r3, #45	; 0x2d
 8006928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800692c:	4b93      	ldr	r3, [pc, #588]	; (8006b7c <_printf_float+0x2e0>)
 800692e:	4894      	ldr	r0, [pc, #592]	; (8006b80 <_printf_float+0x2e4>)
 8006930:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006934:	bf94      	ite	ls
 8006936:	4698      	movls	r8, r3
 8006938:	4680      	movhi	r8, r0
 800693a:	2303      	movs	r3, #3
 800693c:	6123      	str	r3, [r4, #16]
 800693e:	9b05      	ldr	r3, [sp, #20]
 8006940:	f023 0204 	bic.w	r2, r3, #4
 8006944:	6022      	str	r2, [r4, #0]
 8006946:	f04f 0900 	mov.w	r9, #0
 800694a:	9700      	str	r7, [sp, #0]
 800694c:	4633      	mov	r3, r6
 800694e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006950:	4621      	mov	r1, r4
 8006952:	4628      	mov	r0, r5
 8006954:	f000 f9d8 	bl	8006d08 <_printf_common>
 8006958:	3001      	adds	r0, #1
 800695a:	f040 8090 	bne.w	8006a7e <_printf_float+0x1e2>
 800695e:	f04f 30ff 	mov.w	r0, #4294967295
 8006962:	b00d      	add	sp, #52	; 0x34
 8006964:	ecbd 8b02 	vpop	{d8}
 8006968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696c:	4642      	mov	r2, r8
 800696e:	464b      	mov	r3, r9
 8006970:	4640      	mov	r0, r8
 8006972:	4649      	mov	r1, r9
 8006974:	f7fa f90a 	bl	8000b8c <__aeabi_dcmpun>
 8006978:	b140      	cbz	r0, 800698c <_printf_float+0xf0>
 800697a:	464b      	mov	r3, r9
 800697c:	2b00      	cmp	r3, #0
 800697e:	bfbc      	itt	lt
 8006980:	232d      	movlt	r3, #45	; 0x2d
 8006982:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006986:	487f      	ldr	r0, [pc, #508]	; (8006b84 <_printf_float+0x2e8>)
 8006988:	4b7f      	ldr	r3, [pc, #508]	; (8006b88 <_printf_float+0x2ec>)
 800698a:	e7d1      	b.n	8006930 <_printf_float+0x94>
 800698c:	6863      	ldr	r3, [r4, #4]
 800698e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006992:	9206      	str	r2, [sp, #24]
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	d13f      	bne.n	8006a18 <_printf_float+0x17c>
 8006998:	2306      	movs	r3, #6
 800699a:	6063      	str	r3, [r4, #4]
 800699c:	9b05      	ldr	r3, [sp, #20]
 800699e:	6861      	ldr	r1, [r4, #4]
 80069a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80069a4:	2300      	movs	r3, #0
 80069a6:	9303      	str	r3, [sp, #12]
 80069a8:	ab0a      	add	r3, sp, #40	; 0x28
 80069aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80069ae:	ab09      	add	r3, sp, #36	; 0x24
 80069b0:	ec49 8b10 	vmov	d0, r8, r9
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	6022      	str	r2, [r4, #0]
 80069b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80069bc:	4628      	mov	r0, r5
 80069be:	f7ff fecd 	bl	800675c <__cvt>
 80069c2:	9b06      	ldr	r3, [sp, #24]
 80069c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069c6:	2b47      	cmp	r3, #71	; 0x47
 80069c8:	4680      	mov	r8, r0
 80069ca:	d108      	bne.n	80069de <_printf_float+0x142>
 80069cc:	1cc8      	adds	r0, r1, #3
 80069ce:	db02      	blt.n	80069d6 <_printf_float+0x13a>
 80069d0:	6863      	ldr	r3, [r4, #4]
 80069d2:	4299      	cmp	r1, r3
 80069d4:	dd41      	ble.n	8006a5a <_printf_float+0x1be>
 80069d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80069da:	fa5f fb8b 	uxtb.w	fp, fp
 80069de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069e2:	d820      	bhi.n	8006a26 <_printf_float+0x18a>
 80069e4:	3901      	subs	r1, #1
 80069e6:	465a      	mov	r2, fp
 80069e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069ec:	9109      	str	r1, [sp, #36]	; 0x24
 80069ee:	f7ff ff17 	bl	8006820 <__exponent>
 80069f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069f4:	1813      	adds	r3, r2, r0
 80069f6:	2a01      	cmp	r2, #1
 80069f8:	4681      	mov	r9, r0
 80069fa:	6123      	str	r3, [r4, #16]
 80069fc:	dc02      	bgt.n	8006a04 <_printf_float+0x168>
 80069fe:	6822      	ldr	r2, [r4, #0]
 8006a00:	07d2      	lsls	r2, r2, #31
 8006a02:	d501      	bpl.n	8006a08 <_printf_float+0x16c>
 8006a04:	3301      	adds	r3, #1
 8006a06:	6123      	str	r3, [r4, #16]
 8006a08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d09c      	beq.n	800694a <_printf_float+0xae>
 8006a10:	232d      	movs	r3, #45	; 0x2d
 8006a12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a16:	e798      	b.n	800694a <_printf_float+0xae>
 8006a18:	9a06      	ldr	r2, [sp, #24]
 8006a1a:	2a47      	cmp	r2, #71	; 0x47
 8006a1c:	d1be      	bne.n	800699c <_printf_float+0x100>
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1bc      	bne.n	800699c <_printf_float+0x100>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e7b9      	b.n	800699a <_printf_float+0xfe>
 8006a26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a2a:	d118      	bne.n	8006a5e <_printf_float+0x1c2>
 8006a2c:	2900      	cmp	r1, #0
 8006a2e:	6863      	ldr	r3, [r4, #4]
 8006a30:	dd0b      	ble.n	8006a4a <_printf_float+0x1ae>
 8006a32:	6121      	str	r1, [r4, #16]
 8006a34:	b913      	cbnz	r3, 8006a3c <_printf_float+0x1a0>
 8006a36:	6822      	ldr	r2, [r4, #0]
 8006a38:	07d0      	lsls	r0, r2, #31
 8006a3a:	d502      	bpl.n	8006a42 <_printf_float+0x1a6>
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	440b      	add	r3, r1
 8006a40:	6123      	str	r3, [r4, #16]
 8006a42:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a44:	f04f 0900 	mov.w	r9, #0
 8006a48:	e7de      	b.n	8006a08 <_printf_float+0x16c>
 8006a4a:	b913      	cbnz	r3, 8006a52 <_printf_float+0x1b6>
 8006a4c:	6822      	ldr	r2, [r4, #0]
 8006a4e:	07d2      	lsls	r2, r2, #31
 8006a50:	d501      	bpl.n	8006a56 <_printf_float+0x1ba>
 8006a52:	3302      	adds	r3, #2
 8006a54:	e7f4      	b.n	8006a40 <_printf_float+0x1a4>
 8006a56:	2301      	movs	r3, #1
 8006a58:	e7f2      	b.n	8006a40 <_printf_float+0x1a4>
 8006a5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a60:	4299      	cmp	r1, r3
 8006a62:	db05      	blt.n	8006a70 <_printf_float+0x1d4>
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	6121      	str	r1, [r4, #16]
 8006a68:	07d8      	lsls	r0, r3, #31
 8006a6a:	d5ea      	bpl.n	8006a42 <_printf_float+0x1a6>
 8006a6c:	1c4b      	adds	r3, r1, #1
 8006a6e:	e7e7      	b.n	8006a40 <_printf_float+0x1a4>
 8006a70:	2900      	cmp	r1, #0
 8006a72:	bfd4      	ite	le
 8006a74:	f1c1 0202 	rsble	r2, r1, #2
 8006a78:	2201      	movgt	r2, #1
 8006a7a:	4413      	add	r3, r2
 8006a7c:	e7e0      	b.n	8006a40 <_printf_float+0x1a4>
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	055a      	lsls	r2, r3, #21
 8006a82:	d407      	bmi.n	8006a94 <_printf_float+0x1f8>
 8006a84:	6923      	ldr	r3, [r4, #16]
 8006a86:	4642      	mov	r2, r8
 8006a88:	4631      	mov	r1, r6
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	47b8      	blx	r7
 8006a8e:	3001      	adds	r0, #1
 8006a90:	d12c      	bne.n	8006aec <_printf_float+0x250>
 8006a92:	e764      	b.n	800695e <_printf_float+0xc2>
 8006a94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a98:	f240 80e0 	bls.w	8006c5c <_printf_float+0x3c0>
 8006a9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f7fa f840 	bl	8000b28 <__aeabi_dcmpeq>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d034      	beq.n	8006b16 <_printf_float+0x27a>
 8006aac:	4a37      	ldr	r2, [pc, #220]	; (8006b8c <_printf_float+0x2f0>)
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b8      	blx	r7
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	f43f af51 	beq.w	800695e <_printf_float+0xc2>
 8006abc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	db02      	blt.n	8006aca <_printf_float+0x22e>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	07d8      	lsls	r0, r3, #31
 8006ac8:	d510      	bpl.n	8006aec <_printf_float+0x250>
 8006aca:	ee18 3a10 	vmov	r3, s16
 8006ace:	4652      	mov	r2, sl
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	47b8      	blx	r7
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	f43f af41 	beq.w	800695e <_printf_float+0xc2>
 8006adc:	f04f 0800 	mov.w	r8, #0
 8006ae0:	f104 091a 	add.w	r9, r4, #26
 8006ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	4543      	cmp	r3, r8
 8006aea:	dc09      	bgt.n	8006b00 <_printf_float+0x264>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	079b      	lsls	r3, r3, #30
 8006af0:	f100 8105 	bmi.w	8006cfe <_printf_float+0x462>
 8006af4:	68e0      	ldr	r0, [r4, #12]
 8006af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af8:	4298      	cmp	r0, r3
 8006afa:	bfb8      	it	lt
 8006afc:	4618      	movlt	r0, r3
 8006afe:	e730      	b.n	8006962 <_printf_float+0xc6>
 8006b00:	2301      	movs	r3, #1
 8006b02:	464a      	mov	r2, r9
 8006b04:	4631      	mov	r1, r6
 8006b06:	4628      	mov	r0, r5
 8006b08:	47b8      	blx	r7
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	f43f af27 	beq.w	800695e <_printf_float+0xc2>
 8006b10:	f108 0801 	add.w	r8, r8, #1
 8006b14:	e7e6      	b.n	8006ae4 <_printf_float+0x248>
 8006b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	dc39      	bgt.n	8006b90 <_printf_float+0x2f4>
 8006b1c:	4a1b      	ldr	r2, [pc, #108]	; (8006b8c <_printf_float+0x2f0>)
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4631      	mov	r1, r6
 8006b22:	4628      	mov	r0, r5
 8006b24:	47b8      	blx	r7
 8006b26:	3001      	adds	r0, #1
 8006b28:	f43f af19 	beq.w	800695e <_printf_float+0xc2>
 8006b2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b30:	4313      	orrs	r3, r2
 8006b32:	d102      	bne.n	8006b3a <_printf_float+0x29e>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	07d9      	lsls	r1, r3, #31
 8006b38:	d5d8      	bpl.n	8006aec <_printf_float+0x250>
 8006b3a:	ee18 3a10 	vmov	r3, s16
 8006b3e:	4652      	mov	r2, sl
 8006b40:	4631      	mov	r1, r6
 8006b42:	4628      	mov	r0, r5
 8006b44:	47b8      	blx	r7
 8006b46:	3001      	adds	r0, #1
 8006b48:	f43f af09 	beq.w	800695e <_printf_float+0xc2>
 8006b4c:	f04f 0900 	mov.w	r9, #0
 8006b50:	f104 0a1a 	add.w	sl, r4, #26
 8006b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b56:	425b      	negs	r3, r3
 8006b58:	454b      	cmp	r3, r9
 8006b5a:	dc01      	bgt.n	8006b60 <_printf_float+0x2c4>
 8006b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b5e:	e792      	b.n	8006a86 <_printf_float+0x1ea>
 8006b60:	2301      	movs	r3, #1
 8006b62:	4652      	mov	r2, sl
 8006b64:	4631      	mov	r1, r6
 8006b66:	4628      	mov	r0, r5
 8006b68:	47b8      	blx	r7
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	f43f aef7 	beq.w	800695e <_printf_float+0xc2>
 8006b70:	f109 0901 	add.w	r9, r9, #1
 8006b74:	e7ee      	b.n	8006b54 <_printf_float+0x2b8>
 8006b76:	bf00      	nop
 8006b78:	7fefffff 	.word	0x7fefffff
 8006b7c:	0800aedc 	.word	0x0800aedc
 8006b80:	0800aee0 	.word	0x0800aee0
 8006b84:	0800aee8 	.word	0x0800aee8
 8006b88:	0800aee4 	.word	0x0800aee4
 8006b8c:	0800aeec 	.word	0x0800aeec
 8006b90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b94:	429a      	cmp	r2, r3
 8006b96:	bfa8      	it	ge
 8006b98:	461a      	movge	r2, r3
 8006b9a:	2a00      	cmp	r2, #0
 8006b9c:	4691      	mov	r9, r2
 8006b9e:	dc37      	bgt.n	8006c10 <_printf_float+0x374>
 8006ba0:	f04f 0b00 	mov.w	fp, #0
 8006ba4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ba8:	f104 021a 	add.w	r2, r4, #26
 8006bac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bae:	9305      	str	r3, [sp, #20]
 8006bb0:	eba3 0309 	sub.w	r3, r3, r9
 8006bb4:	455b      	cmp	r3, fp
 8006bb6:	dc33      	bgt.n	8006c20 <_printf_float+0x384>
 8006bb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	db3b      	blt.n	8006c38 <_printf_float+0x39c>
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	07da      	lsls	r2, r3, #31
 8006bc4:	d438      	bmi.n	8006c38 <_printf_float+0x39c>
 8006bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc8:	9a05      	ldr	r2, [sp, #20]
 8006bca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bcc:	1a9a      	subs	r2, r3, r2
 8006bce:	eba3 0901 	sub.w	r9, r3, r1
 8006bd2:	4591      	cmp	r9, r2
 8006bd4:	bfa8      	it	ge
 8006bd6:	4691      	movge	r9, r2
 8006bd8:	f1b9 0f00 	cmp.w	r9, #0
 8006bdc:	dc35      	bgt.n	8006c4a <_printf_float+0x3ae>
 8006bde:	f04f 0800 	mov.w	r8, #0
 8006be2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006be6:	f104 0a1a 	add.w	sl, r4, #26
 8006bea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bee:	1a9b      	subs	r3, r3, r2
 8006bf0:	eba3 0309 	sub.w	r3, r3, r9
 8006bf4:	4543      	cmp	r3, r8
 8006bf6:	f77f af79 	ble.w	8006aec <_printf_float+0x250>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	4652      	mov	r2, sl
 8006bfe:	4631      	mov	r1, r6
 8006c00:	4628      	mov	r0, r5
 8006c02:	47b8      	blx	r7
 8006c04:	3001      	adds	r0, #1
 8006c06:	f43f aeaa 	beq.w	800695e <_printf_float+0xc2>
 8006c0a:	f108 0801 	add.w	r8, r8, #1
 8006c0e:	e7ec      	b.n	8006bea <_printf_float+0x34e>
 8006c10:	4613      	mov	r3, r2
 8006c12:	4631      	mov	r1, r6
 8006c14:	4642      	mov	r2, r8
 8006c16:	4628      	mov	r0, r5
 8006c18:	47b8      	blx	r7
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	d1c0      	bne.n	8006ba0 <_printf_float+0x304>
 8006c1e:	e69e      	b.n	800695e <_printf_float+0xc2>
 8006c20:	2301      	movs	r3, #1
 8006c22:	4631      	mov	r1, r6
 8006c24:	4628      	mov	r0, r5
 8006c26:	9205      	str	r2, [sp, #20]
 8006c28:	47b8      	blx	r7
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	f43f ae97 	beq.w	800695e <_printf_float+0xc2>
 8006c30:	9a05      	ldr	r2, [sp, #20]
 8006c32:	f10b 0b01 	add.w	fp, fp, #1
 8006c36:	e7b9      	b.n	8006bac <_printf_float+0x310>
 8006c38:	ee18 3a10 	vmov	r3, s16
 8006c3c:	4652      	mov	r2, sl
 8006c3e:	4631      	mov	r1, r6
 8006c40:	4628      	mov	r0, r5
 8006c42:	47b8      	blx	r7
 8006c44:	3001      	adds	r0, #1
 8006c46:	d1be      	bne.n	8006bc6 <_printf_float+0x32a>
 8006c48:	e689      	b.n	800695e <_printf_float+0xc2>
 8006c4a:	9a05      	ldr	r2, [sp, #20]
 8006c4c:	464b      	mov	r3, r9
 8006c4e:	4442      	add	r2, r8
 8006c50:	4631      	mov	r1, r6
 8006c52:	4628      	mov	r0, r5
 8006c54:	47b8      	blx	r7
 8006c56:	3001      	adds	r0, #1
 8006c58:	d1c1      	bne.n	8006bde <_printf_float+0x342>
 8006c5a:	e680      	b.n	800695e <_printf_float+0xc2>
 8006c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c5e:	2a01      	cmp	r2, #1
 8006c60:	dc01      	bgt.n	8006c66 <_printf_float+0x3ca>
 8006c62:	07db      	lsls	r3, r3, #31
 8006c64:	d538      	bpl.n	8006cd8 <_printf_float+0x43c>
 8006c66:	2301      	movs	r3, #1
 8006c68:	4642      	mov	r2, r8
 8006c6a:	4631      	mov	r1, r6
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	47b8      	blx	r7
 8006c70:	3001      	adds	r0, #1
 8006c72:	f43f ae74 	beq.w	800695e <_printf_float+0xc2>
 8006c76:	ee18 3a10 	vmov	r3, s16
 8006c7a:	4652      	mov	r2, sl
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	4628      	mov	r0, r5
 8006c80:	47b8      	blx	r7
 8006c82:	3001      	adds	r0, #1
 8006c84:	f43f ae6b 	beq.w	800695e <_printf_float+0xc2>
 8006c88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f7f9 ff4a 	bl	8000b28 <__aeabi_dcmpeq>
 8006c94:	b9d8      	cbnz	r0, 8006cce <_printf_float+0x432>
 8006c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c98:	f108 0201 	add.w	r2, r8, #1
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	47b8      	blx	r7
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	d10e      	bne.n	8006cc6 <_printf_float+0x42a>
 8006ca8:	e659      	b.n	800695e <_printf_float+0xc2>
 8006caa:	2301      	movs	r3, #1
 8006cac:	4652      	mov	r2, sl
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	47b8      	blx	r7
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	f43f ae52 	beq.w	800695e <_printf_float+0xc2>
 8006cba:	f108 0801 	add.w	r8, r8, #1
 8006cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	4543      	cmp	r3, r8
 8006cc4:	dcf1      	bgt.n	8006caa <_printf_float+0x40e>
 8006cc6:	464b      	mov	r3, r9
 8006cc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ccc:	e6dc      	b.n	8006a88 <_printf_float+0x1ec>
 8006cce:	f04f 0800 	mov.w	r8, #0
 8006cd2:	f104 0a1a 	add.w	sl, r4, #26
 8006cd6:	e7f2      	b.n	8006cbe <_printf_float+0x422>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	4642      	mov	r2, r8
 8006cdc:	e7df      	b.n	8006c9e <_printf_float+0x402>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	464a      	mov	r2, r9
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	47b8      	blx	r7
 8006ce8:	3001      	adds	r0, #1
 8006cea:	f43f ae38 	beq.w	800695e <_printf_float+0xc2>
 8006cee:	f108 0801 	add.w	r8, r8, #1
 8006cf2:	68e3      	ldr	r3, [r4, #12]
 8006cf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cf6:	1a5b      	subs	r3, r3, r1
 8006cf8:	4543      	cmp	r3, r8
 8006cfa:	dcf0      	bgt.n	8006cde <_printf_float+0x442>
 8006cfc:	e6fa      	b.n	8006af4 <_printf_float+0x258>
 8006cfe:	f04f 0800 	mov.w	r8, #0
 8006d02:	f104 0919 	add.w	r9, r4, #25
 8006d06:	e7f4      	b.n	8006cf2 <_printf_float+0x456>

08006d08 <_printf_common>:
 8006d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d0c:	4616      	mov	r6, r2
 8006d0e:	4699      	mov	r9, r3
 8006d10:	688a      	ldr	r2, [r1, #8]
 8006d12:	690b      	ldr	r3, [r1, #16]
 8006d14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	bfb8      	it	lt
 8006d1c:	4613      	movlt	r3, r2
 8006d1e:	6033      	str	r3, [r6, #0]
 8006d20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d24:	4607      	mov	r7, r0
 8006d26:	460c      	mov	r4, r1
 8006d28:	b10a      	cbz	r2, 8006d2e <_printf_common+0x26>
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	6033      	str	r3, [r6, #0]
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	0699      	lsls	r1, r3, #26
 8006d32:	bf42      	ittt	mi
 8006d34:	6833      	ldrmi	r3, [r6, #0]
 8006d36:	3302      	addmi	r3, #2
 8006d38:	6033      	strmi	r3, [r6, #0]
 8006d3a:	6825      	ldr	r5, [r4, #0]
 8006d3c:	f015 0506 	ands.w	r5, r5, #6
 8006d40:	d106      	bne.n	8006d50 <_printf_common+0x48>
 8006d42:	f104 0a19 	add.w	sl, r4, #25
 8006d46:	68e3      	ldr	r3, [r4, #12]
 8006d48:	6832      	ldr	r2, [r6, #0]
 8006d4a:	1a9b      	subs	r3, r3, r2
 8006d4c:	42ab      	cmp	r3, r5
 8006d4e:	dc26      	bgt.n	8006d9e <_printf_common+0x96>
 8006d50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d54:	1e13      	subs	r3, r2, #0
 8006d56:	6822      	ldr	r2, [r4, #0]
 8006d58:	bf18      	it	ne
 8006d5a:	2301      	movne	r3, #1
 8006d5c:	0692      	lsls	r2, r2, #26
 8006d5e:	d42b      	bmi.n	8006db8 <_printf_common+0xb0>
 8006d60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d64:	4649      	mov	r1, r9
 8006d66:	4638      	mov	r0, r7
 8006d68:	47c0      	blx	r8
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	d01e      	beq.n	8006dac <_printf_common+0xa4>
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	68e5      	ldr	r5, [r4, #12]
 8006d72:	6832      	ldr	r2, [r6, #0]
 8006d74:	f003 0306 	and.w	r3, r3, #6
 8006d78:	2b04      	cmp	r3, #4
 8006d7a:	bf08      	it	eq
 8006d7c:	1aad      	subeq	r5, r5, r2
 8006d7e:	68a3      	ldr	r3, [r4, #8]
 8006d80:	6922      	ldr	r2, [r4, #16]
 8006d82:	bf0c      	ite	eq
 8006d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d88:	2500      	movne	r5, #0
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	bfc4      	itt	gt
 8006d8e:	1a9b      	subgt	r3, r3, r2
 8006d90:	18ed      	addgt	r5, r5, r3
 8006d92:	2600      	movs	r6, #0
 8006d94:	341a      	adds	r4, #26
 8006d96:	42b5      	cmp	r5, r6
 8006d98:	d11a      	bne.n	8006dd0 <_printf_common+0xc8>
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	e008      	b.n	8006db0 <_printf_common+0xa8>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	4652      	mov	r2, sl
 8006da2:	4649      	mov	r1, r9
 8006da4:	4638      	mov	r0, r7
 8006da6:	47c0      	blx	r8
 8006da8:	3001      	adds	r0, #1
 8006daa:	d103      	bne.n	8006db4 <_printf_common+0xac>
 8006dac:	f04f 30ff 	mov.w	r0, #4294967295
 8006db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db4:	3501      	adds	r5, #1
 8006db6:	e7c6      	b.n	8006d46 <_printf_common+0x3e>
 8006db8:	18e1      	adds	r1, r4, r3
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	2030      	movs	r0, #48	; 0x30
 8006dbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dc2:	4422      	add	r2, r4
 8006dc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dcc:	3302      	adds	r3, #2
 8006dce:	e7c7      	b.n	8006d60 <_printf_common+0x58>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	4622      	mov	r2, r4
 8006dd4:	4649      	mov	r1, r9
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	47c0      	blx	r8
 8006dda:	3001      	adds	r0, #1
 8006ddc:	d0e6      	beq.n	8006dac <_printf_common+0xa4>
 8006dde:	3601      	adds	r6, #1
 8006de0:	e7d9      	b.n	8006d96 <_printf_common+0x8e>
	...

08006de4 <_printf_i>:
 8006de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006de8:	7e0f      	ldrb	r7, [r1, #24]
 8006dea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006dec:	2f78      	cmp	r7, #120	; 0x78
 8006dee:	4691      	mov	r9, r2
 8006df0:	4680      	mov	r8, r0
 8006df2:	460c      	mov	r4, r1
 8006df4:	469a      	mov	sl, r3
 8006df6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006dfa:	d807      	bhi.n	8006e0c <_printf_i+0x28>
 8006dfc:	2f62      	cmp	r7, #98	; 0x62
 8006dfe:	d80a      	bhi.n	8006e16 <_printf_i+0x32>
 8006e00:	2f00      	cmp	r7, #0
 8006e02:	f000 80d8 	beq.w	8006fb6 <_printf_i+0x1d2>
 8006e06:	2f58      	cmp	r7, #88	; 0x58
 8006e08:	f000 80a3 	beq.w	8006f52 <_printf_i+0x16e>
 8006e0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e14:	e03a      	b.n	8006e8c <_printf_i+0xa8>
 8006e16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e1a:	2b15      	cmp	r3, #21
 8006e1c:	d8f6      	bhi.n	8006e0c <_printf_i+0x28>
 8006e1e:	a101      	add	r1, pc, #4	; (adr r1, 8006e24 <_printf_i+0x40>)
 8006e20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e24:	08006e7d 	.word	0x08006e7d
 8006e28:	08006e91 	.word	0x08006e91
 8006e2c:	08006e0d 	.word	0x08006e0d
 8006e30:	08006e0d 	.word	0x08006e0d
 8006e34:	08006e0d 	.word	0x08006e0d
 8006e38:	08006e0d 	.word	0x08006e0d
 8006e3c:	08006e91 	.word	0x08006e91
 8006e40:	08006e0d 	.word	0x08006e0d
 8006e44:	08006e0d 	.word	0x08006e0d
 8006e48:	08006e0d 	.word	0x08006e0d
 8006e4c:	08006e0d 	.word	0x08006e0d
 8006e50:	08006f9d 	.word	0x08006f9d
 8006e54:	08006ec1 	.word	0x08006ec1
 8006e58:	08006f7f 	.word	0x08006f7f
 8006e5c:	08006e0d 	.word	0x08006e0d
 8006e60:	08006e0d 	.word	0x08006e0d
 8006e64:	08006fbf 	.word	0x08006fbf
 8006e68:	08006e0d 	.word	0x08006e0d
 8006e6c:	08006ec1 	.word	0x08006ec1
 8006e70:	08006e0d 	.word	0x08006e0d
 8006e74:	08006e0d 	.word	0x08006e0d
 8006e78:	08006f87 	.word	0x08006f87
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	1d1a      	adds	r2, r3, #4
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	602a      	str	r2, [r5, #0]
 8006e84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e0a3      	b.n	8006fd8 <_printf_i+0x1f4>
 8006e90:	6820      	ldr	r0, [r4, #0]
 8006e92:	6829      	ldr	r1, [r5, #0]
 8006e94:	0606      	lsls	r6, r0, #24
 8006e96:	f101 0304 	add.w	r3, r1, #4
 8006e9a:	d50a      	bpl.n	8006eb2 <_printf_i+0xce>
 8006e9c:	680e      	ldr	r6, [r1, #0]
 8006e9e:	602b      	str	r3, [r5, #0]
 8006ea0:	2e00      	cmp	r6, #0
 8006ea2:	da03      	bge.n	8006eac <_printf_i+0xc8>
 8006ea4:	232d      	movs	r3, #45	; 0x2d
 8006ea6:	4276      	negs	r6, r6
 8006ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eac:	485e      	ldr	r0, [pc, #376]	; (8007028 <_printf_i+0x244>)
 8006eae:	230a      	movs	r3, #10
 8006eb0:	e019      	b.n	8006ee6 <_printf_i+0x102>
 8006eb2:	680e      	ldr	r6, [r1, #0]
 8006eb4:	602b      	str	r3, [r5, #0]
 8006eb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006eba:	bf18      	it	ne
 8006ebc:	b236      	sxthne	r6, r6
 8006ebe:	e7ef      	b.n	8006ea0 <_printf_i+0xbc>
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	6820      	ldr	r0, [r4, #0]
 8006ec4:	1d19      	adds	r1, r3, #4
 8006ec6:	6029      	str	r1, [r5, #0]
 8006ec8:	0601      	lsls	r1, r0, #24
 8006eca:	d501      	bpl.n	8006ed0 <_printf_i+0xec>
 8006ecc:	681e      	ldr	r6, [r3, #0]
 8006ece:	e002      	b.n	8006ed6 <_printf_i+0xf2>
 8006ed0:	0646      	lsls	r6, r0, #25
 8006ed2:	d5fb      	bpl.n	8006ecc <_printf_i+0xe8>
 8006ed4:	881e      	ldrh	r6, [r3, #0]
 8006ed6:	4854      	ldr	r0, [pc, #336]	; (8007028 <_printf_i+0x244>)
 8006ed8:	2f6f      	cmp	r7, #111	; 0x6f
 8006eda:	bf0c      	ite	eq
 8006edc:	2308      	moveq	r3, #8
 8006ede:	230a      	movne	r3, #10
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ee6:	6865      	ldr	r5, [r4, #4]
 8006ee8:	60a5      	str	r5, [r4, #8]
 8006eea:	2d00      	cmp	r5, #0
 8006eec:	bfa2      	ittt	ge
 8006eee:	6821      	ldrge	r1, [r4, #0]
 8006ef0:	f021 0104 	bicge.w	r1, r1, #4
 8006ef4:	6021      	strge	r1, [r4, #0]
 8006ef6:	b90e      	cbnz	r6, 8006efc <_printf_i+0x118>
 8006ef8:	2d00      	cmp	r5, #0
 8006efa:	d04d      	beq.n	8006f98 <_printf_i+0x1b4>
 8006efc:	4615      	mov	r5, r2
 8006efe:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f02:	fb03 6711 	mls	r7, r3, r1, r6
 8006f06:	5dc7      	ldrb	r7, [r0, r7]
 8006f08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f0c:	4637      	mov	r7, r6
 8006f0e:	42bb      	cmp	r3, r7
 8006f10:	460e      	mov	r6, r1
 8006f12:	d9f4      	bls.n	8006efe <_printf_i+0x11a>
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d10b      	bne.n	8006f30 <_printf_i+0x14c>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	07de      	lsls	r6, r3, #31
 8006f1c:	d508      	bpl.n	8006f30 <_printf_i+0x14c>
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	6861      	ldr	r1, [r4, #4]
 8006f22:	4299      	cmp	r1, r3
 8006f24:	bfde      	ittt	le
 8006f26:	2330      	movle	r3, #48	; 0x30
 8006f28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f30:	1b52      	subs	r2, r2, r5
 8006f32:	6122      	str	r2, [r4, #16]
 8006f34:	f8cd a000 	str.w	sl, [sp]
 8006f38:	464b      	mov	r3, r9
 8006f3a:	aa03      	add	r2, sp, #12
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	4640      	mov	r0, r8
 8006f40:	f7ff fee2 	bl	8006d08 <_printf_common>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d14c      	bne.n	8006fe2 <_printf_i+0x1fe>
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4c:	b004      	add	sp, #16
 8006f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f52:	4835      	ldr	r0, [pc, #212]	; (8007028 <_printf_i+0x244>)
 8006f54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f58:	6829      	ldr	r1, [r5, #0]
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f60:	6029      	str	r1, [r5, #0]
 8006f62:	061d      	lsls	r5, r3, #24
 8006f64:	d514      	bpl.n	8006f90 <_printf_i+0x1ac>
 8006f66:	07df      	lsls	r7, r3, #31
 8006f68:	bf44      	itt	mi
 8006f6a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f6e:	6023      	strmi	r3, [r4, #0]
 8006f70:	b91e      	cbnz	r6, 8006f7a <_printf_i+0x196>
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	f023 0320 	bic.w	r3, r3, #32
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	2310      	movs	r3, #16
 8006f7c:	e7b0      	b.n	8006ee0 <_printf_i+0xfc>
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	f043 0320 	orr.w	r3, r3, #32
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	2378      	movs	r3, #120	; 0x78
 8006f88:	4828      	ldr	r0, [pc, #160]	; (800702c <_printf_i+0x248>)
 8006f8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f8e:	e7e3      	b.n	8006f58 <_printf_i+0x174>
 8006f90:	0659      	lsls	r1, r3, #25
 8006f92:	bf48      	it	mi
 8006f94:	b2b6      	uxthmi	r6, r6
 8006f96:	e7e6      	b.n	8006f66 <_printf_i+0x182>
 8006f98:	4615      	mov	r5, r2
 8006f9a:	e7bb      	b.n	8006f14 <_printf_i+0x130>
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	6826      	ldr	r6, [r4, #0]
 8006fa0:	6961      	ldr	r1, [r4, #20]
 8006fa2:	1d18      	adds	r0, r3, #4
 8006fa4:	6028      	str	r0, [r5, #0]
 8006fa6:	0635      	lsls	r5, r6, #24
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	d501      	bpl.n	8006fb0 <_printf_i+0x1cc>
 8006fac:	6019      	str	r1, [r3, #0]
 8006fae:	e002      	b.n	8006fb6 <_printf_i+0x1d2>
 8006fb0:	0670      	lsls	r0, r6, #25
 8006fb2:	d5fb      	bpl.n	8006fac <_printf_i+0x1c8>
 8006fb4:	8019      	strh	r1, [r3, #0]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	6123      	str	r3, [r4, #16]
 8006fba:	4615      	mov	r5, r2
 8006fbc:	e7ba      	b.n	8006f34 <_printf_i+0x150>
 8006fbe:	682b      	ldr	r3, [r5, #0]
 8006fc0:	1d1a      	adds	r2, r3, #4
 8006fc2:	602a      	str	r2, [r5, #0]
 8006fc4:	681d      	ldr	r5, [r3, #0]
 8006fc6:	6862      	ldr	r2, [r4, #4]
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4628      	mov	r0, r5
 8006fcc:	f7f9 f938 	bl	8000240 <memchr>
 8006fd0:	b108      	cbz	r0, 8006fd6 <_printf_i+0x1f2>
 8006fd2:	1b40      	subs	r0, r0, r5
 8006fd4:	6060      	str	r0, [r4, #4]
 8006fd6:	6863      	ldr	r3, [r4, #4]
 8006fd8:	6123      	str	r3, [r4, #16]
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fe0:	e7a8      	b.n	8006f34 <_printf_i+0x150>
 8006fe2:	6923      	ldr	r3, [r4, #16]
 8006fe4:	462a      	mov	r2, r5
 8006fe6:	4649      	mov	r1, r9
 8006fe8:	4640      	mov	r0, r8
 8006fea:	47d0      	blx	sl
 8006fec:	3001      	adds	r0, #1
 8006fee:	d0ab      	beq.n	8006f48 <_printf_i+0x164>
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	079b      	lsls	r3, r3, #30
 8006ff4:	d413      	bmi.n	800701e <_printf_i+0x23a>
 8006ff6:	68e0      	ldr	r0, [r4, #12]
 8006ff8:	9b03      	ldr	r3, [sp, #12]
 8006ffa:	4298      	cmp	r0, r3
 8006ffc:	bfb8      	it	lt
 8006ffe:	4618      	movlt	r0, r3
 8007000:	e7a4      	b.n	8006f4c <_printf_i+0x168>
 8007002:	2301      	movs	r3, #1
 8007004:	4632      	mov	r2, r6
 8007006:	4649      	mov	r1, r9
 8007008:	4640      	mov	r0, r8
 800700a:	47d0      	blx	sl
 800700c:	3001      	adds	r0, #1
 800700e:	d09b      	beq.n	8006f48 <_printf_i+0x164>
 8007010:	3501      	adds	r5, #1
 8007012:	68e3      	ldr	r3, [r4, #12]
 8007014:	9903      	ldr	r1, [sp, #12]
 8007016:	1a5b      	subs	r3, r3, r1
 8007018:	42ab      	cmp	r3, r5
 800701a:	dcf2      	bgt.n	8007002 <_printf_i+0x21e>
 800701c:	e7eb      	b.n	8006ff6 <_printf_i+0x212>
 800701e:	2500      	movs	r5, #0
 8007020:	f104 0619 	add.w	r6, r4, #25
 8007024:	e7f5      	b.n	8007012 <_printf_i+0x22e>
 8007026:	bf00      	nop
 8007028:	0800aeee 	.word	0x0800aeee
 800702c:	0800aeff 	.word	0x0800aeff

08007030 <_puts_r>:
 8007030:	b570      	push	{r4, r5, r6, lr}
 8007032:	460e      	mov	r6, r1
 8007034:	4605      	mov	r5, r0
 8007036:	b118      	cbz	r0, 8007040 <_puts_r+0x10>
 8007038:	6983      	ldr	r3, [r0, #24]
 800703a:	b90b      	cbnz	r3, 8007040 <_puts_r+0x10>
 800703c:	f001 ffb0 	bl	8008fa0 <__sinit>
 8007040:	69ab      	ldr	r3, [r5, #24]
 8007042:	68ac      	ldr	r4, [r5, #8]
 8007044:	b913      	cbnz	r3, 800704c <_puts_r+0x1c>
 8007046:	4628      	mov	r0, r5
 8007048:	f001 ffaa 	bl	8008fa0 <__sinit>
 800704c:	4b2c      	ldr	r3, [pc, #176]	; (8007100 <_puts_r+0xd0>)
 800704e:	429c      	cmp	r4, r3
 8007050:	d120      	bne.n	8007094 <_puts_r+0x64>
 8007052:	686c      	ldr	r4, [r5, #4]
 8007054:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007056:	07db      	lsls	r3, r3, #31
 8007058:	d405      	bmi.n	8007066 <_puts_r+0x36>
 800705a:	89a3      	ldrh	r3, [r4, #12]
 800705c:	0598      	lsls	r0, r3, #22
 800705e:	d402      	bmi.n	8007066 <_puts_r+0x36>
 8007060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007062:	f002 fbc0 	bl	80097e6 <__retarget_lock_acquire_recursive>
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	0719      	lsls	r1, r3, #28
 800706a:	d51d      	bpl.n	80070a8 <_puts_r+0x78>
 800706c:	6923      	ldr	r3, [r4, #16]
 800706e:	b1db      	cbz	r3, 80070a8 <_puts_r+0x78>
 8007070:	3e01      	subs	r6, #1
 8007072:	68a3      	ldr	r3, [r4, #8]
 8007074:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007078:	3b01      	subs	r3, #1
 800707a:	60a3      	str	r3, [r4, #8]
 800707c:	bb39      	cbnz	r1, 80070ce <_puts_r+0x9e>
 800707e:	2b00      	cmp	r3, #0
 8007080:	da38      	bge.n	80070f4 <_puts_r+0xc4>
 8007082:	4622      	mov	r2, r4
 8007084:	210a      	movs	r1, #10
 8007086:	4628      	mov	r0, r5
 8007088:	f000 ff18 	bl	8007ebc <__swbuf_r>
 800708c:	3001      	adds	r0, #1
 800708e:	d011      	beq.n	80070b4 <_puts_r+0x84>
 8007090:	250a      	movs	r5, #10
 8007092:	e011      	b.n	80070b8 <_puts_r+0x88>
 8007094:	4b1b      	ldr	r3, [pc, #108]	; (8007104 <_puts_r+0xd4>)
 8007096:	429c      	cmp	r4, r3
 8007098:	d101      	bne.n	800709e <_puts_r+0x6e>
 800709a:	68ac      	ldr	r4, [r5, #8]
 800709c:	e7da      	b.n	8007054 <_puts_r+0x24>
 800709e:	4b1a      	ldr	r3, [pc, #104]	; (8007108 <_puts_r+0xd8>)
 80070a0:	429c      	cmp	r4, r3
 80070a2:	bf08      	it	eq
 80070a4:	68ec      	ldreq	r4, [r5, #12]
 80070a6:	e7d5      	b.n	8007054 <_puts_r+0x24>
 80070a8:	4621      	mov	r1, r4
 80070aa:	4628      	mov	r0, r5
 80070ac:	f000 ff58 	bl	8007f60 <__swsetup_r>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	d0dd      	beq.n	8007070 <_puts_r+0x40>
 80070b4:	f04f 35ff 	mov.w	r5, #4294967295
 80070b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070ba:	07da      	lsls	r2, r3, #31
 80070bc:	d405      	bmi.n	80070ca <_puts_r+0x9a>
 80070be:	89a3      	ldrh	r3, [r4, #12]
 80070c0:	059b      	lsls	r3, r3, #22
 80070c2:	d402      	bmi.n	80070ca <_puts_r+0x9a>
 80070c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070c6:	f002 fb8f 	bl	80097e8 <__retarget_lock_release_recursive>
 80070ca:	4628      	mov	r0, r5
 80070cc:	bd70      	pop	{r4, r5, r6, pc}
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	da04      	bge.n	80070dc <_puts_r+0xac>
 80070d2:	69a2      	ldr	r2, [r4, #24]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	dc06      	bgt.n	80070e6 <_puts_r+0xb6>
 80070d8:	290a      	cmp	r1, #10
 80070da:	d004      	beq.n	80070e6 <_puts_r+0xb6>
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	6022      	str	r2, [r4, #0]
 80070e2:	7019      	strb	r1, [r3, #0]
 80070e4:	e7c5      	b.n	8007072 <_puts_r+0x42>
 80070e6:	4622      	mov	r2, r4
 80070e8:	4628      	mov	r0, r5
 80070ea:	f000 fee7 	bl	8007ebc <__swbuf_r>
 80070ee:	3001      	adds	r0, #1
 80070f0:	d1bf      	bne.n	8007072 <_puts_r+0x42>
 80070f2:	e7df      	b.n	80070b4 <_puts_r+0x84>
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	250a      	movs	r5, #10
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	6022      	str	r2, [r4, #0]
 80070fc:	701d      	strb	r5, [r3, #0]
 80070fe:	e7db      	b.n	80070b8 <_puts_r+0x88>
 8007100:	0800b0ac 	.word	0x0800b0ac
 8007104:	0800b0cc 	.word	0x0800b0cc
 8007108:	0800b08c 	.word	0x0800b08c

0800710c <puts>:
 800710c:	4b02      	ldr	r3, [pc, #8]	; (8007118 <puts+0xc>)
 800710e:	4601      	mov	r1, r0
 8007110:	6818      	ldr	r0, [r3, #0]
 8007112:	f7ff bf8d 	b.w	8007030 <_puts_r>
 8007116:	bf00      	nop
 8007118:	2000007c 	.word	0x2000007c

0800711c <_sbrk_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4d06      	ldr	r5, [pc, #24]	; (8007138 <_sbrk_r+0x1c>)
 8007120:	2300      	movs	r3, #0
 8007122:	4604      	mov	r4, r0
 8007124:	4608      	mov	r0, r1
 8007126:	602b      	str	r3, [r5, #0]
 8007128:	f7fc f988 	bl	800343c <_sbrk>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	d102      	bne.n	8007136 <_sbrk_r+0x1a>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	b103      	cbz	r3, 8007136 <_sbrk_r+0x1a>
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	bd38      	pop	{r3, r4, r5, pc}
 8007138:	20000a2c 	.word	0x20000a2c

0800713c <siprintf>:
 800713c:	b40e      	push	{r1, r2, r3}
 800713e:	b500      	push	{lr}
 8007140:	b09c      	sub	sp, #112	; 0x70
 8007142:	ab1d      	add	r3, sp, #116	; 0x74
 8007144:	9002      	str	r0, [sp, #8]
 8007146:	9006      	str	r0, [sp, #24]
 8007148:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800714c:	4809      	ldr	r0, [pc, #36]	; (8007174 <siprintf+0x38>)
 800714e:	9107      	str	r1, [sp, #28]
 8007150:	9104      	str	r1, [sp, #16]
 8007152:	4909      	ldr	r1, [pc, #36]	; (8007178 <siprintf+0x3c>)
 8007154:	f853 2b04 	ldr.w	r2, [r3], #4
 8007158:	9105      	str	r1, [sp, #20]
 800715a:	6800      	ldr	r0, [r0, #0]
 800715c:	9301      	str	r3, [sp, #4]
 800715e:	a902      	add	r1, sp, #8
 8007160:	f003 f906 	bl	800a370 <_svfiprintf_r>
 8007164:	9b02      	ldr	r3, [sp, #8]
 8007166:	2200      	movs	r2, #0
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	b01c      	add	sp, #112	; 0x70
 800716c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007170:	b003      	add	sp, #12
 8007172:	4770      	bx	lr
 8007174:	2000007c 	.word	0x2000007c
 8007178:	ffff0208 	.word	0xffff0208

0800717c <strchr>:
 800717c:	b2c9      	uxtb	r1, r1
 800717e:	4603      	mov	r3, r0
 8007180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007184:	b11a      	cbz	r2, 800718e <strchr+0x12>
 8007186:	428a      	cmp	r2, r1
 8007188:	d1f9      	bne.n	800717e <strchr+0x2>
 800718a:	4618      	mov	r0, r3
 800718c:	4770      	bx	lr
 800718e:	2900      	cmp	r1, #0
 8007190:	bf18      	it	ne
 8007192:	2300      	movne	r3, #0
 8007194:	e7f9      	b.n	800718a <strchr+0xe>

08007196 <strcpy>:
 8007196:	4603      	mov	r3, r0
 8007198:	f811 2b01 	ldrb.w	r2, [r1], #1
 800719c:	f803 2b01 	strb.w	r2, [r3], #1
 80071a0:	2a00      	cmp	r2, #0
 80071a2:	d1f9      	bne.n	8007198 <strcpy+0x2>
 80071a4:	4770      	bx	lr

080071a6 <sulp>:
 80071a6:	b570      	push	{r4, r5, r6, lr}
 80071a8:	4604      	mov	r4, r0
 80071aa:	460d      	mov	r5, r1
 80071ac:	ec45 4b10 	vmov	d0, r4, r5
 80071b0:	4616      	mov	r6, r2
 80071b2:	f002 ff1d 	bl	8009ff0 <__ulp>
 80071b6:	ec51 0b10 	vmov	r0, r1, d0
 80071ba:	b17e      	cbz	r6, 80071dc <sulp+0x36>
 80071bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80071c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	dd09      	ble.n	80071dc <sulp+0x36>
 80071c8:	051b      	lsls	r3, r3, #20
 80071ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80071ce:	2400      	movs	r4, #0
 80071d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80071d4:	4622      	mov	r2, r4
 80071d6:	462b      	mov	r3, r5
 80071d8:	f7f9 fa3e 	bl	8000658 <__aeabi_dmul>
 80071dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080071e0 <_strtod_l>:
 80071e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	ed2d 8b02 	vpush	{d8}
 80071e8:	b09d      	sub	sp, #116	; 0x74
 80071ea:	461f      	mov	r7, r3
 80071ec:	2300      	movs	r3, #0
 80071ee:	9318      	str	r3, [sp, #96]	; 0x60
 80071f0:	4ba2      	ldr	r3, [pc, #648]	; (800747c <_strtod_l+0x29c>)
 80071f2:	9213      	str	r2, [sp, #76]	; 0x4c
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	9305      	str	r3, [sp, #20]
 80071f8:	4604      	mov	r4, r0
 80071fa:	4618      	mov	r0, r3
 80071fc:	4688      	mov	r8, r1
 80071fe:	f7f9 f811 	bl	8000224 <strlen>
 8007202:	f04f 0a00 	mov.w	sl, #0
 8007206:	4605      	mov	r5, r0
 8007208:	f04f 0b00 	mov.w	fp, #0
 800720c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007212:	781a      	ldrb	r2, [r3, #0]
 8007214:	2a2b      	cmp	r2, #43	; 0x2b
 8007216:	d04e      	beq.n	80072b6 <_strtod_l+0xd6>
 8007218:	d83b      	bhi.n	8007292 <_strtod_l+0xb2>
 800721a:	2a0d      	cmp	r2, #13
 800721c:	d834      	bhi.n	8007288 <_strtod_l+0xa8>
 800721e:	2a08      	cmp	r2, #8
 8007220:	d834      	bhi.n	800728c <_strtod_l+0xac>
 8007222:	2a00      	cmp	r2, #0
 8007224:	d03e      	beq.n	80072a4 <_strtod_l+0xc4>
 8007226:	2300      	movs	r3, #0
 8007228:	930a      	str	r3, [sp, #40]	; 0x28
 800722a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800722c:	7833      	ldrb	r3, [r6, #0]
 800722e:	2b30      	cmp	r3, #48	; 0x30
 8007230:	f040 80b0 	bne.w	8007394 <_strtod_l+0x1b4>
 8007234:	7873      	ldrb	r3, [r6, #1]
 8007236:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800723a:	2b58      	cmp	r3, #88	; 0x58
 800723c:	d168      	bne.n	8007310 <_strtod_l+0x130>
 800723e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007240:	9301      	str	r3, [sp, #4]
 8007242:	ab18      	add	r3, sp, #96	; 0x60
 8007244:	9702      	str	r7, [sp, #8]
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	4a8d      	ldr	r2, [pc, #564]	; (8007480 <_strtod_l+0x2a0>)
 800724a:	ab19      	add	r3, sp, #100	; 0x64
 800724c:	a917      	add	r1, sp, #92	; 0x5c
 800724e:	4620      	mov	r0, r4
 8007250:	f001 ffbc 	bl	80091cc <__gethex>
 8007254:	f010 0707 	ands.w	r7, r0, #7
 8007258:	4605      	mov	r5, r0
 800725a:	d005      	beq.n	8007268 <_strtod_l+0x88>
 800725c:	2f06      	cmp	r7, #6
 800725e:	d12c      	bne.n	80072ba <_strtod_l+0xda>
 8007260:	3601      	adds	r6, #1
 8007262:	2300      	movs	r3, #0
 8007264:	9617      	str	r6, [sp, #92]	; 0x5c
 8007266:	930a      	str	r3, [sp, #40]	; 0x28
 8007268:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800726a:	2b00      	cmp	r3, #0
 800726c:	f040 8590 	bne.w	8007d90 <_strtod_l+0xbb0>
 8007270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007272:	b1eb      	cbz	r3, 80072b0 <_strtod_l+0xd0>
 8007274:	4652      	mov	r2, sl
 8007276:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800727a:	ec43 2b10 	vmov	d0, r2, r3
 800727e:	b01d      	add	sp, #116	; 0x74
 8007280:	ecbd 8b02 	vpop	{d8}
 8007284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007288:	2a20      	cmp	r2, #32
 800728a:	d1cc      	bne.n	8007226 <_strtod_l+0x46>
 800728c:	3301      	adds	r3, #1
 800728e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007290:	e7be      	b.n	8007210 <_strtod_l+0x30>
 8007292:	2a2d      	cmp	r2, #45	; 0x2d
 8007294:	d1c7      	bne.n	8007226 <_strtod_l+0x46>
 8007296:	2201      	movs	r2, #1
 8007298:	920a      	str	r2, [sp, #40]	; 0x28
 800729a:	1c5a      	adds	r2, r3, #1
 800729c:	9217      	str	r2, [sp, #92]	; 0x5c
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1c2      	bne.n	800722a <_strtod_l+0x4a>
 80072a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f040 856e 	bne.w	8007d8c <_strtod_l+0xbac>
 80072b0:	4652      	mov	r2, sl
 80072b2:	465b      	mov	r3, fp
 80072b4:	e7e1      	b.n	800727a <_strtod_l+0x9a>
 80072b6:	2200      	movs	r2, #0
 80072b8:	e7ee      	b.n	8007298 <_strtod_l+0xb8>
 80072ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80072bc:	b13a      	cbz	r2, 80072ce <_strtod_l+0xee>
 80072be:	2135      	movs	r1, #53	; 0x35
 80072c0:	a81a      	add	r0, sp, #104	; 0x68
 80072c2:	f002 ffa0 	bl	800a206 <__copybits>
 80072c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80072c8:	4620      	mov	r0, r4
 80072ca:	f002 fb5f 	bl	800998c <_Bfree>
 80072ce:	3f01      	subs	r7, #1
 80072d0:	2f04      	cmp	r7, #4
 80072d2:	d806      	bhi.n	80072e2 <_strtod_l+0x102>
 80072d4:	e8df f007 	tbb	[pc, r7]
 80072d8:	1714030a 	.word	0x1714030a
 80072dc:	0a          	.byte	0x0a
 80072dd:	00          	.byte	0x00
 80072de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80072e2:	0728      	lsls	r0, r5, #28
 80072e4:	d5c0      	bpl.n	8007268 <_strtod_l+0x88>
 80072e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80072ea:	e7bd      	b.n	8007268 <_strtod_l+0x88>
 80072ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80072f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80072f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80072f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80072fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80072fe:	e7f0      	b.n	80072e2 <_strtod_l+0x102>
 8007300:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007484 <_strtod_l+0x2a4>
 8007304:	e7ed      	b.n	80072e2 <_strtod_l+0x102>
 8007306:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800730a:	f04f 3aff 	mov.w	sl, #4294967295
 800730e:	e7e8      	b.n	80072e2 <_strtod_l+0x102>
 8007310:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	9217      	str	r2, [sp, #92]	; 0x5c
 8007316:	785b      	ldrb	r3, [r3, #1]
 8007318:	2b30      	cmp	r3, #48	; 0x30
 800731a:	d0f9      	beq.n	8007310 <_strtod_l+0x130>
 800731c:	2b00      	cmp	r3, #0
 800731e:	d0a3      	beq.n	8007268 <_strtod_l+0x88>
 8007320:	2301      	movs	r3, #1
 8007322:	f04f 0900 	mov.w	r9, #0
 8007326:	9304      	str	r3, [sp, #16]
 8007328:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800732a:	9308      	str	r3, [sp, #32]
 800732c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007330:	464f      	mov	r7, r9
 8007332:	220a      	movs	r2, #10
 8007334:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007336:	7806      	ldrb	r6, [r0, #0]
 8007338:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800733c:	b2d9      	uxtb	r1, r3
 800733e:	2909      	cmp	r1, #9
 8007340:	d92a      	bls.n	8007398 <_strtod_l+0x1b8>
 8007342:	9905      	ldr	r1, [sp, #20]
 8007344:	462a      	mov	r2, r5
 8007346:	f003 faba 	bl	800a8be <strncmp>
 800734a:	b398      	cbz	r0, 80073b4 <_strtod_l+0x1d4>
 800734c:	2000      	movs	r0, #0
 800734e:	4632      	mov	r2, r6
 8007350:	463d      	mov	r5, r7
 8007352:	9005      	str	r0, [sp, #20]
 8007354:	4603      	mov	r3, r0
 8007356:	2a65      	cmp	r2, #101	; 0x65
 8007358:	d001      	beq.n	800735e <_strtod_l+0x17e>
 800735a:	2a45      	cmp	r2, #69	; 0x45
 800735c:	d118      	bne.n	8007390 <_strtod_l+0x1b0>
 800735e:	b91d      	cbnz	r5, 8007368 <_strtod_l+0x188>
 8007360:	9a04      	ldr	r2, [sp, #16]
 8007362:	4302      	orrs	r2, r0
 8007364:	d09e      	beq.n	80072a4 <_strtod_l+0xc4>
 8007366:	2500      	movs	r5, #0
 8007368:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800736c:	f108 0201 	add.w	r2, r8, #1
 8007370:	9217      	str	r2, [sp, #92]	; 0x5c
 8007372:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007376:	2a2b      	cmp	r2, #43	; 0x2b
 8007378:	d075      	beq.n	8007466 <_strtod_l+0x286>
 800737a:	2a2d      	cmp	r2, #45	; 0x2d
 800737c:	d07b      	beq.n	8007476 <_strtod_l+0x296>
 800737e:	f04f 0c00 	mov.w	ip, #0
 8007382:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007386:	2909      	cmp	r1, #9
 8007388:	f240 8082 	bls.w	8007490 <_strtod_l+0x2b0>
 800738c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007390:	2600      	movs	r6, #0
 8007392:	e09d      	b.n	80074d0 <_strtod_l+0x2f0>
 8007394:	2300      	movs	r3, #0
 8007396:	e7c4      	b.n	8007322 <_strtod_l+0x142>
 8007398:	2f08      	cmp	r7, #8
 800739a:	bfd8      	it	le
 800739c:	9907      	ldrle	r1, [sp, #28]
 800739e:	f100 0001 	add.w	r0, r0, #1
 80073a2:	bfda      	itte	le
 80073a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80073a8:	9307      	strle	r3, [sp, #28]
 80073aa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80073ae:	3701      	adds	r7, #1
 80073b0:	9017      	str	r0, [sp, #92]	; 0x5c
 80073b2:	e7bf      	b.n	8007334 <_strtod_l+0x154>
 80073b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073b6:	195a      	adds	r2, r3, r5
 80073b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80073ba:	5d5a      	ldrb	r2, [r3, r5]
 80073bc:	2f00      	cmp	r7, #0
 80073be:	d037      	beq.n	8007430 <_strtod_l+0x250>
 80073c0:	9005      	str	r0, [sp, #20]
 80073c2:	463d      	mov	r5, r7
 80073c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80073c8:	2b09      	cmp	r3, #9
 80073ca:	d912      	bls.n	80073f2 <_strtod_l+0x212>
 80073cc:	2301      	movs	r3, #1
 80073ce:	e7c2      	b.n	8007356 <_strtod_l+0x176>
 80073d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073d2:	1c5a      	adds	r2, r3, #1
 80073d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80073d6:	785a      	ldrb	r2, [r3, #1]
 80073d8:	3001      	adds	r0, #1
 80073da:	2a30      	cmp	r2, #48	; 0x30
 80073dc:	d0f8      	beq.n	80073d0 <_strtod_l+0x1f0>
 80073de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80073e2:	2b08      	cmp	r3, #8
 80073e4:	f200 84d9 	bhi.w	8007d9a <_strtod_l+0xbba>
 80073e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073ea:	9005      	str	r0, [sp, #20]
 80073ec:	2000      	movs	r0, #0
 80073ee:	9308      	str	r3, [sp, #32]
 80073f0:	4605      	mov	r5, r0
 80073f2:	3a30      	subs	r2, #48	; 0x30
 80073f4:	f100 0301 	add.w	r3, r0, #1
 80073f8:	d014      	beq.n	8007424 <_strtod_l+0x244>
 80073fa:	9905      	ldr	r1, [sp, #20]
 80073fc:	4419      	add	r1, r3
 80073fe:	9105      	str	r1, [sp, #20]
 8007400:	462b      	mov	r3, r5
 8007402:	eb00 0e05 	add.w	lr, r0, r5
 8007406:	210a      	movs	r1, #10
 8007408:	4573      	cmp	r3, lr
 800740a:	d113      	bne.n	8007434 <_strtod_l+0x254>
 800740c:	182b      	adds	r3, r5, r0
 800740e:	2b08      	cmp	r3, #8
 8007410:	f105 0501 	add.w	r5, r5, #1
 8007414:	4405      	add	r5, r0
 8007416:	dc1c      	bgt.n	8007452 <_strtod_l+0x272>
 8007418:	9907      	ldr	r1, [sp, #28]
 800741a:	230a      	movs	r3, #10
 800741c:	fb03 2301 	mla	r3, r3, r1, r2
 8007420:	9307      	str	r3, [sp, #28]
 8007422:	2300      	movs	r3, #0
 8007424:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007426:	1c51      	adds	r1, r2, #1
 8007428:	9117      	str	r1, [sp, #92]	; 0x5c
 800742a:	7852      	ldrb	r2, [r2, #1]
 800742c:	4618      	mov	r0, r3
 800742e:	e7c9      	b.n	80073c4 <_strtod_l+0x1e4>
 8007430:	4638      	mov	r0, r7
 8007432:	e7d2      	b.n	80073da <_strtod_l+0x1fa>
 8007434:	2b08      	cmp	r3, #8
 8007436:	dc04      	bgt.n	8007442 <_strtod_l+0x262>
 8007438:	9e07      	ldr	r6, [sp, #28]
 800743a:	434e      	muls	r6, r1
 800743c:	9607      	str	r6, [sp, #28]
 800743e:	3301      	adds	r3, #1
 8007440:	e7e2      	b.n	8007408 <_strtod_l+0x228>
 8007442:	f103 0c01 	add.w	ip, r3, #1
 8007446:	f1bc 0f10 	cmp.w	ip, #16
 800744a:	bfd8      	it	le
 800744c:	fb01 f909 	mulle.w	r9, r1, r9
 8007450:	e7f5      	b.n	800743e <_strtod_l+0x25e>
 8007452:	2d10      	cmp	r5, #16
 8007454:	bfdc      	itt	le
 8007456:	230a      	movle	r3, #10
 8007458:	fb03 2909 	mlale	r9, r3, r9, r2
 800745c:	e7e1      	b.n	8007422 <_strtod_l+0x242>
 800745e:	2300      	movs	r3, #0
 8007460:	9305      	str	r3, [sp, #20]
 8007462:	2301      	movs	r3, #1
 8007464:	e77c      	b.n	8007360 <_strtod_l+0x180>
 8007466:	f04f 0c00 	mov.w	ip, #0
 800746a:	f108 0202 	add.w	r2, r8, #2
 800746e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007470:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007474:	e785      	b.n	8007382 <_strtod_l+0x1a2>
 8007476:	f04f 0c01 	mov.w	ip, #1
 800747a:	e7f6      	b.n	800746a <_strtod_l+0x28a>
 800747c:	0800b154 	.word	0x0800b154
 8007480:	0800af10 	.word	0x0800af10
 8007484:	7ff00000 	.word	0x7ff00000
 8007488:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800748a:	1c51      	adds	r1, r2, #1
 800748c:	9117      	str	r1, [sp, #92]	; 0x5c
 800748e:	7852      	ldrb	r2, [r2, #1]
 8007490:	2a30      	cmp	r2, #48	; 0x30
 8007492:	d0f9      	beq.n	8007488 <_strtod_l+0x2a8>
 8007494:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007498:	2908      	cmp	r1, #8
 800749a:	f63f af79 	bhi.w	8007390 <_strtod_l+0x1b0>
 800749e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80074a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074a4:	9206      	str	r2, [sp, #24]
 80074a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074a8:	1c51      	adds	r1, r2, #1
 80074aa:	9117      	str	r1, [sp, #92]	; 0x5c
 80074ac:	7852      	ldrb	r2, [r2, #1]
 80074ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80074b2:	2e09      	cmp	r6, #9
 80074b4:	d937      	bls.n	8007526 <_strtod_l+0x346>
 80074b6:	9e06      	ldr	r6, [sp, #24]
 80074b8:	1b89      	subs	r1, r1, r6
 80074ba:	2908      	cmp	r1, #8
 80074bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80074c0:	dc02      	bgt.n	80074c8 <_strtod_l+0x2e8>
 80074c2:	4576      	cmp	r6, lr
 80074c4:	bfa8      	it	ge
 80074c6:	4676      	movge	r6, lr
 80074c8:	f1bc 0f00 	cmp.w	ip, #0
 80074cc:	d000      	beq.n	80074d0 <_strtod_l+0x2f0>
 80074ce:	4276      	negs	r6, r6
 80074d0:	2d00      	cmp	r5, #0
 80074d2:	d14d      	bne.n	8007570 <_strtod_l+0x390>
 80074d4:	9904      	ldr	r1, [sp, #16]
 80074d6:	4301      	orrs	r1, r0
 80074d8:	f47f aec6 	bne.w	8007268 <_strtod_l+0x88>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f47f aee1 	bne.w	80072a4 <_strtod_l+0xc4>
 80074e2:	2a69      	cmp	r2, #105	; 0x69
 80074e4:	d027      	beq.n	8007536 <_strtod_l+0x356>
 80074e6:	dc24      	bgt.n	8007532 <_strtod_l+0x352>
 80074e8:	2a49      	cmp	r2, #73	; 0x49
 80074ea:	d024      	beq.n	8007536 <_strtod_l+0x356>
 80074ec:	2a4e      	cmp	r2, #78	; 0x4e
 80074ee:	f47f aed9 	bne.w	80072a4 <_strtod_l+0xc4>
 80074f2:	499f      	ldr	r1, [pc, #636]	; (8007770 <_strtod_l+0x590>)
 80074f4:	a817      	add	r0, sp, #92	; 0x5c
 80074f6:	f002 f8c1 	bl	800967c <__match>
 80074fa:	2800      	cmp	r0, #0
 80074fc:	f43f aed2 	beq.w	80072a4 <_strtod_l+0xc4>
 8007500:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	2b28      	cmp	r3, #40	; 0x28
 8007506:	d12d      	bne.n	8007564 <_strtod_l+0x384>
 8007508:	499a      	ldr	r1, [pc, #616]	; (8007774 <_strtod_l+0x594>)
 800750a:	aa1a      	add	r2, sp, #104	; 0x68
 800750c:	a817      	add	r0, sp, #92	; 0x5c
 800750e:	f002 f8c9 	bl	80096a4 <__hexnan>
 8007512:	2805      	cmp	r0, #5
 8007514:	d126      	bne.n	8007564 <_strtod_l+0x384>
 8007516:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007518:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800751c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007520:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007524:	e6a0      	b.n	8007268 <_strtod_l+0x88>
 8007526:	210a      	movs	r1, #10
 8007528:	fb01 2e0e 	mla	lr, r1, lr, r2
 800752c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007530:	e7b9      	b.n	80074a6 <_strtod_l+0x2c6>
 8007532:	2a6e      	cmp	r2, #110	; 0x6e
 8007534:	e7db      	b.n	80074ee <_strtod_l+0x30e>
 8007536:	4990      	ldr	r1, [pc, #576]	; (8007778 <_strtod_l+0x598>)
 8007538:	a817      	add	r0, sp, #92	; 0x5c
 800753a:	f002 f89f 	bl	800967c <__match>
 800753e:	2800      	cmp	r0, #0
 8007540:	f43f aeb0 	beq.w	80072a4 <_strtod_l+0xc4>
 8007544:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007546:	498d      	ldr	r1, [pc, #564]	; (800777c <_strtod_l+0x59c>)
 8007548:	3b01      	subs	r3, #1
 800754a:	a817      	add	r0, sp, #92	; 0x5c
 800754c:	9317      	str	r3, [sp, #92]	; 0x5c
 800754e:	f002 f895 	bl	800967c <__match>
 8007552:	b910      	cbnz	r0, 800755a <_strtod_l+0x37a>
 8007554:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007556:	3301      	adds	r3, #1
 8007558:	9317      	str	r3, [sp, #92]	; 0x5c
 800755a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800778c <_strtod_l+0x5ac>
 800755e:	f04f 0a00 	mov.w	sl, #0
 8007562:	e681      	b.n	8007268 <_strtod_l+0x88>
 8007564:	4886      	ldr	r0, [pc, #536]	; (8007780 <_strtod_l+0x5a0>)
 8007566:	f003 f95f 	bl	800a828 <nan>
 800756a:	ec5b ab10 	vmov	sl, fp, d0
 800756e:	e67b      	b.n	8007268 <_strtod_l+0x88>
 8007570:	9b05      	ldr	r3, [sp, #20]
 8007572:	9807      	ldr	r0, [sp, #28]
 8007574:	1af3      	subs	r3, r6, r3
 8007576:	2f00      	cmp	r7, #0
 8007578:	bf08      	it	eq
 800757a:	462f      	moveq	r7, r5
 800757c:	2d10      	cmp	r5, #16
 800757e:	9306      	str	r3, [sp, #24]
 8007580:	46a8      	mov	r8, r5
 8007582:	bfa8      	it	ge
 8007584:	f04f 0810 	movge.w	r8, #16
 8007588:	f7f8 ffec 	bl	8000564 <__aeabi_ui2d>
 800758c:	2d09      	cmp	r5, #9
 800758e:	4682      	mov	sl, r0
 8007590:	468b      	mov	fp, r1
 8007592:	dd13      	ble.n	80075bc <_strtod_l+0x3dc>
 8007594:	4b7b      	ldr	r3, [pc, #492]	; (8007784 <_strtod_l+0x5a4>)
 8007596:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800759a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800759e:	f7f9 f85b 	bl	8000658 <__aeabi_dmul>
 80075a2:	4682      	mov	sl, r0
 80075a4:	4648      	mov	r0, r9
 80075a6:	468b      	mov	fp, r1
 80075a8:	f7f8 ffdc 	bl	8000564 <__aeabi_ui2d>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4650      	mov	r0, sl
 80075b2:	4659      	mov	r1, fp
 80075b4:	f7f8 fe9a 	bl	80002ec <__adddf3>
 80075b8:	4682      	mov	sl, r0
 80075ba:	468b      	mov	fp, r1
 80075bc:	2d0f      	cmp	r5, #15
 80075be:	dc38      	bgt.n	8007632 <_strtod_l+0x452>
 80075c0:	9b06      	ldr	r3, [sp, #24]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f43f ae50 	beq.w	8007268 <_strtod_l+0x88>
 80075c8:	dd24      	ble.n	8007614 <_strtod_l+0x434>
 80075ca:	2b16      	cmp	r3, #22
 80075cc:	dc0b      	bgt.n	80075e6 <_strtod_l+0x406>
 80075ce:	496d      	ldr	r1, [pc, #436]	; (8007784 <_strtod_l+0x5a4>)
 80075d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075d8:	4652      	mov	r2, sl
 80075da:	465b      	mov	r3, fp
 80075dc:	f7f9 f83c 	bl	8000658 <__aeabi_dmul>
 80075e0:	4682      	mov	sl, r0
 80075e2:	468b      	mov	fp, r1
 80075e4:	e640      	b.n	8007268 <_strtod_l+0x88>
 80075e6:	9a06      	ldr	r2, [sp, #24]
 80075e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80075ec:	4293      	cmp	r3, r2
 80075ee:	db20      	blt.n	8007632 <_strtod_l+0x452>
 80075f0:	4c64      	ldr	r4, [pc, #400]	; (8007784 <_strtod_l+0x5a4>)
 80075f2:	f1c5 050f 	rsb	r5, r5, #15
 80075f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80075fa:	4652      	mov	r2, sl
 80075fc:	465b      	mov	r3, fp
 80075fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007602:	f7f9 f829 	bl	8000658 <__aeabi_dmul>
 8007606:	9b06      	ldr	r3, [sp, #24]
 8007608:	1b5d      	subs	r5, r3, r5
 800760a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800760e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007612:	e7e3      	b.n	80075dc <_strtod_l+0x3fc>
 8007614:	9b06      	ldr	r3, [sp, #24]
 8007616:	3316      	adds	r3, #22
 8007618:	db0b      	blt.n	8007632 <_strtod_l+0x452>
 800761a:	9b05      	ldr	r3, [sp, #20]
 800761c:	1b9e      	subs	r6, r3, r6
 800761e:	4b59      	ldr	r3, [pc, #356]	; (8007784 <_strtod_l+0x5a4>)
 8007620:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007624:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007628:	4650      	mov	r0, sl
 800762a:	4659      	mov	r1, fp
 800762c:	f7f9 f93e 	bl	80008ac <__aeabi_ddiv>
 8007630:	e7d6      	b.n	80075e0 <_strtod_l+0x400>
 8007632:	9b06      	ldr	r3, [sp, #24]
 8007634:	eba5 0808 	sub.w	r8, r5, r8
 8007638:	4498      	add	r8, r3
 800763a:	f1b8 0f00 	cmp.w	r8, #0
 800763e:	dd74      	ble.n	800772a <_strtod_l+0x54a>
 8007640:	f018 030f 	ands.w	r3, r8, #15
 8007644:	d00a      	beq.n	800765c <_strtod_l+0x47c>
 8007646:	494f      	ldr	r1, [pc, #316]	; (8007784 <_strtod_l+0x5a4>)
 8007648:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800764c:	4652      	mov	r2, sl
 800764e:	465b      	mov	r3, fp
 8007650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007654:	f7f9 f800 	bl	8000658 <__aeabi_dmul>
 8007658:	4682      	mov	sl, r0
 800765a:	468b      	mov	fp, r1
 800765c:	f038 080f 	bics.w	r8, r8, #15
 8007660:	d04f      	beq.n	8007702 <_strtod_l+0x522>
 8007662:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007666:	dd22      	ble.n	80076ae <_strtod_l+0x4ce>
 8007668:	2500      	movs	r5, #0
 800766a:	462e      	mov	r6, r5
 800766c:	9507      	str	r5, [sp, #28]
 800766e:	9505      	str	r5, [sp, #20]
 8007670:	2322      	movs	r3, #34	; 0x22
 8007672:	f8df b118 	ldr.w	fp, [pc, #280]	; 800778c <_strtod_l+0x5ac>
 8007676:	6023      	str	r3, [r4, #0]
 8007678:	f04f 0a00 	mov.w	sl, #0
 800767c:	9b07      	ldr	r3, [sp, #28]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f43f adf2 	beq.w	8007268 <_strtod_l+0x88>
 8007684:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007686:	4620      	mov	r0, r4
 8007688:	f002 f980 	bl	800998c <_Bfree>
 800768c:	9905      	ldr	r1, [sp, #20]
 800768e:	4620      	mov	r0, r4
 8007690:	f002 f97c 	bl	800998c <_Bfree>
 8007694:	4631      	mov	r1, r6
 8007696:	4620      	mov	r0, r4
 8007698:	f002 f978 	bl	800998c <_Bfree>
 800769c:	9907      	ldr	r1, [sp, #28]
 800769e:	4620      	mov	r0, r4
 80076a0:	f002 f974 	bl	800998c <_Bfree>
 80076a4:	4629      	mov	r1, r5
 80076a6:	4620      	mov	r0, r4
 80076a8:	f002 f970 	bl	800998c <_Bfree>
 80076ac:	e5dc      	b.n	8007268 <_strtod_l+0x88>
 80076ae:	4b36      	ldr	r3, [pc, #216]	; (8007788 <_strtod_l+0x5a8>)
 80076b0:	9304      	str	r3, [sp, #16]
 80076b2:	2300      	movs	r3, #0
 80076b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80076b8:	4650      	mov	r0, sl
 80076ba:	4659      	mov	r1, fp
 80076bc:	4699      	mov	r9, r3
 80076be:	f1b8 0f01 	cmp.w	r8, #1
 80076c2:	dc21      	bgt.n	8007708 <_strtod_l+0x528>
 80076c4:	b10b      	cbz	r3, 80076ca <_strtod_l+0x4ea>
 80076c6:	4682      	mov	sl, r0
 80076c8:	468b      	mov	fp, r1
 80076ca:	4b2f      	ldr	r3, [pc, #188]	; (8007788 <_strtod_l+0x5a8>)
 80076cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80076d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80076d4:	4652      	mov	r2, sl
 80076d6:	465b      	mov	r3, fp
 80076d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80076dc:	f7f8 ffbc 	bl	8000658 <__aeabi_dmul>
 80076e0:	4b2a      	ldr	r3, [pc, #168]	; (800778c <_strtod_l+0x5ac>)
 80076e2:	460a      	mov	r2, r1
 80076e4:	400b      	ands	r3, r1
 80076e6:	492a      	ldr	r1, [pc, #168]	; (8007790 <_strtod_l+0x5b0>)
 80076e8:	428b      	cmp	r3, r1
 80076ea:	4682      	mov	sl, r0
 80076ec:	d8bc      	bhi.n	8007668 <_strtod_l+0x488>
 80076ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80076f2:	428b      	cmp	r3, r1
 80076f4:	bf86      	itte	hi
 80076f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007794 <_strtod_l+0x5b4>
 80076fa:	f04f 3aff 	movhi.w	sl, #4294967295
 80076fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007702:	2300      	movs	r3, #0
 8007704:	9304      	str	r3, [sp, #16]
 8007706:	e084      	b.n	8007812 <_strtod_l+0x632>
 8007708:	f018 0f01 	tst.w	r8, #1
 800770c:	d005      	beq.n	800771a <_strtod_l+0x53a>
 800770e:	9b04      	ldr	r3, [sp, #16]
 8007710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007714:	f7f8 ffa0 	bl	8000658 <__aeabi_dmul>
 8007718:	2301      	movs	r3, #1
 800771a:	9a04      	ldr	r2, [sp, #16]
 800771c:	3208      	adds	r2, #8
 800771e:	f109 0901 	add.w	r9, r9, #1
 8007722:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007726:	9204      	str	r2, [sp, #16]
 8007728:	e7c9      	b.n	80076be <_strtod_l+0x4de>
 800772a:	d0ea      	beq.n	8007702 <_strtod_l+0x522>
 800772c:	f1c8 0800 	rsb	r8, r8, #0
 8007730:	f018 020f 	ands.w	r2, r8, #15
 8007734:	d00a      	beq.n	800774c <_strtod_l+0x56c>
 8007736:	4b13      	ldr	r3, [pc, #76]	; (8007784 <_strtod_l+0x5a4>)
 8007738:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800773c:	4650      	mov	r0, sl
 800773e:	4659      	mov	r1, fp
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	f7f9 f8b2 	bl	80008ac <__aeabi_ddiv>
 8007748:	4682      	mov	sl, r0
 800774a:	468b      	mov	fp, r1
 800774c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007750:	d0d7      	beq.n	8007702 <_strtod_l+0x522>
 8007752:	f1b8 0f1f 	cmp.w	r8, #31
 8007756:	dd1f      	ble.n	8007798 <_strtod_l+0x5b8>
 8007758:	2500      	movs	r5, #0
 800775a:	462e      	mov	r6, r5
 800775c:	9507      	str	r5, [sp, #28]
 800775e:	9505      	str	r5, [sp, #20]
 8007760:	2322      	movs	r3, #34	; 0x22
 8007762:	f04f 0a00 	mov.w	sl, #0
 8007766:	f04f 0b00 	mov.w	fp, #0
 800776a:	6023      	str	r3, [r4, #0]
 800776c:	e786      	b.n	800767c <_strtod_l+0x49c>
 800776e:	bf00      	nop
 8007770:	0800aee9 	.word	0x0800aee9
 8007774:	0800af24 	.word	0x0800af24
 8007778:	0800aee1 	.word	0x0800aee1
 800777c:	0800b013 	.word	0x0800b013
 8007780:	0800b00f 	.word	0x0800b00f
 8007784:	0800b1f0 	.word	0x0800b1f0
 8007788:	0800b1c8 	.word	0x0800b1c8
 800778c:	7ff00000 	.word	0x7ff00000
 8007790:	7ca00000 	.word	0x7ca00000
 8007794:	7fefffff 	.word	0x7fefffff
 8007798:	f018 0310 	ands.w	r3, r8, #16
 800779c:	bf18      	it	ne
 800779e:	236a      	movne	r3, #106	; 0x6a
 80077a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007b50 <_strtod_l+0x970>
 80077a4:	9304      	str	r3, [sp, #16]
 80077a6:	4650      	mov	r0, sl
 80077a8:	4659      	mov	r1, fp
 80077aa:	2300      	movs	r3, #0
 80077ac:	f018 0f01 	tst.w	r8, #1
 80077b0:	d004      	beq.n	80077bc <_strtod_l+0x5dc>
 80077b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80077b6:	f7f8 ff4f 	bl	8000658 <__aeabi_dmul>
 80077ba:	2301      	movs	r3, #1
 80077bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80077c0:	f109 0908 	add.w	r9, r9, #8
 80077c4:	d1f2      	bne.n	80077ac <_strtod_l+0x5cc>
 80077c6:	b10b      	cbz	r3, 80077cc <_strtod_l+0x5ec>
 80077c8:	4682      	mov	sl, r0
 80077ca:	468b      	mov	fp, r1
 80077cc:	9b04      	ldr	r3, [sp, #16]
 80077ce:	b1c3      	cbz	r3, 8007802 <_strtod_l+0x622>
 80077d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80077d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80077d8:	2b00      	cmp	r3, #0
 80077da:	4659      	mov	r1, fp
 80077dc:	dd11      	ble.n	8007802 <_strtod_l+0x622>
 80077de:	2b1f      	cmp	r3, #31
 80077e0:	f340 8124 	ble.w	8007a2c <_strtod_l+0x84c>
 80077e4:	2b34      	cmp	r3, #52	; 0x34
 80077e6:	bfde      	ittt	le
 80077e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80077ec:	f04f 33ff 	movle.w	r3, #4294967295
 80077f0:	fa03 f202 	lslle.w	r2, r3, r2
 80077f4:	f04f 0a00 	mov.w	sl, #0
 80077f8:	bfcc      	ite	gt
 80077fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80077fe:	ea02 0b01 	andle.w	fp, r2, r1
 8007802:	2200      	movs	r2, #0
 8007804:	2300      	movs	r3, #0
 8007806:	4650      	mov	r0, sl
 8007808:	4659      	mov	r1, fp
 800780a:	f7f9 f98d 	bl	8000b28 <__aeabi_dcmpeq>
 800780e:	2800      	cmp	r0, #0
 8007810:	d1a2      	bne.n	8007758 <_strtod_l+0x578>
 8007812:	9b07      	ldr	r3, [sp, #28]
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	9908      	ldr	r1, [sp, #32]
 8007818:	462b      	mov	r3, r5
 800781a:	463a      	mov	r2, r7
 800781c:	4620      	mov	r0, r4
 800781e:	f002 f91d 	bl	8009a5c <__s2b>
 8007822:	9007      	str	r0, [sp, #28]
 8007824:	2800      	cmp	r0, #0
 8007826:	f43f af1f 	beq.w	8007668 <_strtod_l+0x488>
 800782a:	9b05      	ldr	r3, [sp, #20]
 800782c:	1b9e      	subs	r6, r3, r6
 800782e:	9b06      	ldr	r3, [sp, #24]
 8007830:	2b00      	cmp	r3, #0
 8007832:	bfb4      	ite	lt
 8007834:	4633      	movlt	r3, r6
 8007836:	2300      	movge	r3, #0
 8007838:	930c      	str	r3, [sp, #48]	; 0x30
 800783a:	9b06      	ldr	r3, [sp, #24]
 800783c:	2500      	movs	r5, #0
 800783e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007842:	9312      	str	r3, [sp, #72]	; 0x48
 8007844:	462e      	mov	r6, r5
 8007846:	9b07      	ldr	r3, [sp, #28]
 8007848:	4620      	mov	r0, r4
 800784a:	6859      	ldr	r1, [r3, #4]
 800784c:	f002 f85e 	bl	800990c <_Balloc>
 8007850:	9005      	str	r0, [sp, #20]
 8007852:	2800      	cmp	r0, #0
 8007854:	f43f af0c 	beq.w	8007670 <_strtod_l+0x490>
 8007858:	9b07      	ldr	r3, [sp, #28]
 800785a:	691a      	ldr	r2, [r3, #16]
 800785c:	3202      	adds	r2, #2
 800785e:	f103 010c 	add.w	r1, r3, #12
 8007862:	0092      	lsls	r2, r2, #2
 8007864:	300c      	adds	r0, #12
 8007866:	f002 f837 	bl	80098d8 <memcpy>
 800786a:	ec4b ab10 	vmov	d0, sl, fp
 800786e:	aa1a      	add	r2, sp, #104	; 0x68
 8007870:	a919      	add	r1, sp, #100	; 0x64
 8007872:	4620      	mov	r0, r4
 8007874:	f002 fc38 	bl	800a0e8 <__d2b>
 8007878:	ec4b ab18 	vmov	d8, sl, fp
 800787c:	9018      	str	r0, [sp, #96]	; 0x60
 800787e:	2800      	cmp	r0, #0
 8007880:	f43f aef6 	beq.w	8007670 <_strtod_l+0x490>
 8007884:	2101      	movs	r1, #1
 8007886:	4620      	mov	r0, r4
 8007888:	f002 f982 	bl	8009b90 <__i2b>
 800788c:	4606      	mov	r6, r0
 800788e:	2800      	cmp	r0, #0
 8007890:	f43f aeee 	beq.w	8007670 <_strtod_l+0x490>
 8007894:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007896:	9904      	ldr	r1, [sp, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	bfab      	itete	ge
 800789c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800789e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80078a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80078a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80078a6:	bfac      	ite	ge
 80078a8:	eb03 0902 	addge.w	r9, r3, r2
 80078ac:	1ad7      	sublt	r7, r2, r3
 80078ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80078b0:	eba3 0801 	sub.w	r8, r3, r1
 80078b4:	4490      	add	r8, r2
 80078b6:	4ba1      	ldr	r3, [pc, #644]	; (8007b3c <_strtod_l+0x95c>)
 80078b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80078bc:	4598      	cmp	r8, r3
 80078be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80078c2:	f280 80c7 	bge.w	8007a54 <_strtod_l+0x874>
 80078c6:	eba3 0308 	sub.w	r3, r3, r8
 80078ca:	2b1f      	cmp	r3, #31
 80078cc:	eba2 0203 	sub.w	r2, r2, r3
 80078d0:	f04f 0101 	mov.w	r1, #1
 80078d4:	f300 80b1 	bgt.w	8007a3a <_strtod_l+0x85a>
 80078d8:	fa01 f303 	lsl.w	r3, r1, r3
 80078dc:	930d      	str	r3, [sp, #52]	; 0x34
 80078de:	2300      	movs	r3, #0
 80078e0:	9308      	str	r3, [sp, #32]
 80078e2:	eb09 0802 	add.w	r8, r9, r2
 80078e6:	9b04      	ldr	r3, [sp, #16]
 80078e8:	45c1      	cmp	r9, r8
 80078ea:	4417      	add	r7, r2
 80078ec:	441f      	add	r7, r3
 80078ee:	464b      	mov	r3, r9
 80078f0:	bfa8      	it	ge
 80078f2:	4643      	movge	r3, r8
 80078f4:	42bb      	cmp	r3, r7
 80078f6:	bfa8      	it	ge
 80078f8:	463b      	movge	r3, r7
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	bfc2      	ittt	gt
 80078fe:	eba8 0803 	subgt.w	r8, r8, r3
 8007902:	1aff      	subgt	r7, r7, r3
 8007904:	eba9 0903 	subgt.w	r9, r9, r3
 8007908:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800790a:	2b00      	cmp	r3, #0
 800790c:	dd17      	ble.n	800793e <_strtod_l+0x75e>
 800790e:	4631      	mov	r1, r6
 8007910:	461a      	mov	r2, r3
 8007912:	4620      	mov	r0, r4
 8007914:	f002 f9fc 	bl	8009d10 <__pow5mult>
 8007918:	4606      	mov	r6, r0
 800791a:	2800      	cmp	r0, #0
 800791c:	f43f aea8 	beq.w	8007670 <_strtod_l+0x490>
 8007920:	4601      	mov	r1, r0
 8007922:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007924:	4620      	mov	r0, r4
 8007926:	f002 f949 	bl	8009bbc <__multiply>
 800792a:	900b      	str	r0, [sp, #44]	; 0x2c
 800792c:	2800      	cmp	r0, #0
 800792e:	f43f ae9f 	beq.w	8007670 <_strtod_l+0x490>
 8007932:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007934:	4620      	mov	r0, r4
 8007936:	f002 f829 	bl	800998c <_Bfree>
 800793a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800793c:	9318      	str	r3, [sp, #96]	; 0x60
 800793e:	f1b8 0f00 	cmp.w	r8, #0
 8007942:	f300 808c 	bgt.w	8007a5e <_strtod_l+0x87e>
 8007946:	9b06      	ldr	r3, [sp, #24]
 8007948:	2b00      	cmp	r3, #0
 800794a:	dd08      	ble.n	800795e <_strtod_l+0x77e>
 800794c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800794e:	9905      	ldr	r1, [sp, #20]
 8007950:	4620      	mov	r0, r4
 8007952:	f002 f9dd 	bl	8009d10 <__pow5mult>
 8007956:	9005      	str	r0, [sp, #20]
 8007958:	2800      	cmp	r0, #0
 800795a:	f43f ae89 	beq.w	8007670 <_strtod_l+0x490>
 800795e:	2f00      	cmp	r7, #0
 8007960:	dd08      	ble.n	8007974 <_strtod_l+0x794>
 8007962:	9905      	ldr	r1, [sp, #20]
 8007964:	463a      	mov	r2, r7
 8007966:	4620      	mov	r0, r4
 8007968:	f002 fa2c 	bl	8009dc4 <__lshift>
 800796c:	9005      	str	r0, [sp, #20]
 800796e:	2800      	cmp	r0, #0
 8007970:	f43f ae7e 	beq.w	8007670 <_strtod_l+0x490>
 8007974:	f1b9 0f00 	cmp.w	r9, #0
 8007978:	dd08      	ble.n	800798c <_strtod_l+0x7ac>
 800797a:	4631      	mov	r1, r6
 800797c:	464a      	mov	r2, r9
 800797e:	4620      	mov	r0, r4
 8007980:	f002 fa20 	bl	8009dc4 <__lshift>
 8007984:	4606      	mov	r6, r0
 8007986:	2800      	cmp	r0, #0
 8007988:	f43f ae72 	beq.w	8007670 <_strtod_l+0x490>
 800798c:	9a05      	ldr	r2, [sp, #20]
 800798e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007990:	4620      	mov	r0, r4
 8007992:	f002 faa3 	bl	8009edc <__mdiff>
 8007996:	4605      	mov	r5, r0
 8007998:	2800      	cmp	r0, #0
 800799a:	f43f ae69 	beq.w	8007670 <_strtod_l+0x490>
 800799e:	68c3      	ldr	r3, [r0, #12]
 80079a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80079a2:	2300      	movs	r3, #0
 80079a4:	60c3      	str	r3, [r0, #12]
 80079a6:	4631      	mov	r1, r6
 80079a8:	f002 fa7c 	bl	8009ea4 <__mcmp>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	da60      	bge.n	8007a72 <_strtod_l+0x892>
 80079b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079b2:	ea53 030a 	orrs.w	r3, r3, sl
 80079b6:	f040 8082 	bne.w	8007abe <_strtod_l+0x8de>
 80079ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d17d      	bne.n	8007abe <_strtod_l+0x8de>
 80079c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80079c6:	0d1b      	lsrs	r3, r3, #20
 80079c8:	051b      	lsls	r3, r3, #20
 80079ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80079ce:	d976      	bls.n	8007abe <_strtod_l+0x8de>
 80079d0:	696b      	ldr	r3, [r5, #20]
 80079d2:	b913      	cbnz	r3, 80079da <_strtod_l+0x7fa>
 80079d4:	692b      	ldr	r3, [r5, #16]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	dd71      	ble.n	8007abe <_strtod_l+0x8de>
 80079da:	4629      	mov	r1, r5
 80079dc:	2201      	movs	r2, #1
 80079de:	4620      	mov	r0, r4
 80079e0:	f002 f9f0 	bl	8009dc4 <__lshift>
 80079e4:	4631      	mov	r1, r6
 80079e6:	4605      	mov	r5, r0
 80079e8:	f002 fa5c 	bl	8009ea4 <__mcmp>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	dd66      	ble.n	8007abe <_strtod_l+0x8de>
 80079f0:	9904      	ldr	r1, [sp, #16]
 80079f2:	4a53      	ldr	r2, [pc, #332]	; (8007b40 <_strtod_l+0x960>)
 80079f4:	465b      	mov	r3, fp
 80079f6:	2900      	cmp	r1, #0
 80079f8:	f000 8081 	beq.w	8007afe <_strtod_l+0x91e>
 80079fc:	ea02 010b 	and.w	r1, r2, fp
 8007a00:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007a04:	dc7b      	bgt.n	8007afe <_strtod_l+0x91e>
 8007a06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007a0a:	f77f aea9 	ble.w	8007760 <_strtod_l+0x580>
 8007a0e:	4b4d      	ldr	r3, [pc, #308]	; (8007b44 <_strtod_l+0x964>)
 8007a10:	4650      	mov	r0, sl
 8007a12:	4659      	mov	r1, fp
 8007a14:	2200      	movs	r2, #0
 8007a16:	f7f8 fe1f 	bl	8000658 <__aeabi_dmul>
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	4303      	orrs	r3, r0
 8007a1e:	bf08      	it	eq
 8007a20:	2322      	moveq	r3, #34	; 0x22
 8007a22:	4682      	mov	sl, r0
 8007a24:	468b      	mov	fp, r1
 8007a26:	bf08      	it	eq
 8007a28:	6023      	streq	r3, [r4, #0]
 8007a2a:	e62b      	b.n	8007684 <_strtod_l+0x4a4>
 8007a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a30:	fa02 f303 	lsl.w	r3, r2, r3
 8007a34:	ea03 0a0a 	and.w	sl, r3, sl
 8007a38:	e6e3      	b.n	8007802 <_strtod_l+0x622>
 8007a3a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007a3e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007a42:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007a46:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007a4a:	fa01 f308 	lsl.w	r3, r1, r8
 8007a4e:	9308      	str	r3, [sp, #32]
 8007a50:	910d      	str	r1, [sp, #52]	; 0x34
 8007a52:	e746      	b.n	80078e2 <_strtod_l+0x702>
 8007a54:	2300      	movs	r3, #0
 8007a56:	9308      	str	r3, [sp, #32]
 8007a58:	2301      	movs	r3, #1
 8007a5a:	930d      	str	r3, [sp, #52]	; 0x34
 8007a5c:	e741      	b.n	80078e2 <_strtod_l+0x702>
 8007a5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a60:	4642      	mov	r2, r8
 8007a62:	4620      	mov	r0, r4
 8007a64:	f002 f9ae 	bl	8009dc4 <__lshift>
 8007a68:	9018      	str	r0, [sp, #96]	; 0x60
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	f47f af6b 	bne.w	8007946 <_strtod_l+0x766>
 8007a70:	e5fe      	b.n	8007670 <_strtod_l+0x490>
 8007a72:	465f      	mov	r7, fp
 8007a74:	d16e      	bne.n	8007b54 <_strtod_l+0x974>
 8007a76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a7c:	b342      	cbz	r2, 8007ad0 <_strtod_l+0x8f0>
 8007a7e:	4a32      	ldr	r2, [pc, #200]	; (8007b48 <_strtod_l+0x968>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d128      	bne.n	8007ad6 <_strtod_l+0x8f6>
 8007a84:	9b04      	ldr	r3, [sp, #16]
 8007a86:	4651      	mov	r1, sl
 8007a88:	b1eb      	cbz	r3, 8007ac6 <_strtod_l+0x8e6>
 8007a8a:	4b2d      	ldr	r3, [pc, #180]	; (8007b40 <_strtod_l+0x960>)
 8007a8c:	403b      	ands	r3, r7
 8007a8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a92:	f04f 32ff 	mov.w	r2, #4294967295
 8007a96:	d819      	bhi.n	8007acc <_strtod_l+0x8ec>
 8007a98:	0d1b      	lsrs	r3, r3, #20
 8007a9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa2:	4299      	cmp	r1, r3
 8007aa4:	d117      	bne.n	8007ad6 <_strtod_l+0x8f6>
 8007aa6:	4b29      	ldr	r3, [pc, #164]	; (8007b4c <_strtod_l+0x96c>)
 8007aa8:	429f      	cmp	r7, r3
 8007aaa:	d102      	bne.n	8007ab2 <_strtod_l+0x8d2>
 8007aac:	3101      	adds	r1, #1
 8007aae:	f43f addf 	beq.w	8007670 <_strtod_l+0x490>
 8007ab2:	4b23      	ldr	r3, [pc, #140]	; (8007b40 <_strtod_l+0x960>)
 8007ab4:	403b      	ands	r3, r7
 8007ab6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007aba:	f04f 0a00 	mov.w	sl, #0
 8007abe:	9b04      	ldr	r3, [sp, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1a4      	bne.n	8007a0e <_strtod_l+0x82e>
 8007ac4:	e5de      	b.n	8007684 <_strtod_l+0x4a4>
 8007ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8007aca:	e7ea      	b.n	8007aa2 <_strtod_l+0x8c2>
 8007acc:	4613      	mov	r3, r2
 8007ace:	e7e8      	b.n	8007aa2 <_strtod_l+0x8c2>
 8007ad0:	ea53 030a 	orrs.w	r3, r3, sl
 8007ad4:	d08c      	beq.n	80079f0 <_strtod_l+0x810>
 8007ad6:	9b08      	ldr	r3, [sp, #32]
 8007ad8:	b1db      	cbz	r3, 8007b12 <_strtod_l+0x932>
 8007ada:	423b      	tst	r3, r7
 8007adc:	d0ef      	beq.n	8007abe <_strtod_l+0x8de>
 8007ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ae0:	9a04      	ldr	r2, [sp, #16]
 8007ae2:	4650      	mov	r0, sl
 8007ae4:	4659      	mov	r1, fp
 8007ae6:	b1c3      	cbz	r3, 8007b1a <_strtod_l+0x93a>
 8007ae8:	f7ff fb5d 	bl	80071a6 <sulp>
 8007aec:	4602      	mov	r2, r0
 8007aee:	460b      	mov	r3, r1
 8007af0:	ec51 0b18 	vmov	r0, r1, d8
 8007af4:	f7f8 fbfa 	bl	80002ec <__adddf3>
 8007af8:	4682      	mov	sl, r0
 8007afa:	468b      	mov	fp, r1
 8007afc:	e7df      	b.n	8007abe <_strtod_l+0x8de>
 8007afe:	4013      	ands	r3, r2
 8007b00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007b04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007b08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007b0c:	f04f 3aff 	mov.w	sl, #4294967295
 8007b10:	e7d5      	b.n	8007abe <_strtod_l+0x8de>
 8007b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b14:	ea13 0f0a 	tst.w	r3, sl
 8007b18:	e7e0      	b.n	8007adc <_strtod_l+0x8fc>
 8007b1a:	f7ff fb44 	bl	80071a6 <sulp>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	ec51 0b18 	vmov	r0, r1, d8
 8007b26:	f7f8 fbdf 	bl	80002e8 <__aeabi_dsub>
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	4682      	mov	sl, r0
 8007b30:	468b      	mov	fp, r1
 8007b32:	f7f8 fff9 	bl	8000b28 <__aeabi_dcmpeq>
 8007b36:	2800      	cmp	r0, #0
 8007b38:	d0c1      	beq.n	8007abe <_strtod_l+0x8de>
 8007b3a:	e611      	b.n	8007760 <_strtod_l+0x580>
 8007b3c:	fffffc02 	.word	0xfffffc02
 8007b40:	7ff00000 	.word	0x7ff00000
 8007b44:	39500000 	.word	0x39500000
 8007b48:	000fffff 	.word	0x000fffff
 8007b4c:	7fefffff 	.word	0x7fefffff
 8007b50:	0800af38 	.word	0x0800af38
 8007b54:	4631      	mov	r1, r6
 8007b56:	4628      	mov	r0, r5
 8007b58:	f002 fb22 	bl	800a1a0 <__ratio>
 8007b5c:	ec59 8b10 	vmov	r8, r9, d0
 8007b60:	ee10 0a10 	vmov	r0, s0
 8007b64:	2200      	movs	r2, #0
 8007b66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b6a:	4649      	mov	r1, r9
 8007b6c:	f7f8 fff0 	bl	8000b50 <__aeabi_dcmple>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	d07a      	beq.n	8007c6a <_strtod_l+0xa8a>
 8007b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d04a      	beq.n	8007c10 <_strtod_l+0xa30>
 8007b7a:	4b95      	ldr	r3, [pc, #596]	; (8007dd0 <_strtod_l+0xbf0>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b82:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007dd0 <_strtod_l+0xbf0>
 8007b86:	f04f 0800 	mov.w	r8, #0
 8007b8a:	4b92      	ldr	r3, [pc, #584]	; (8007dd4 <_strtod_l+0xbf4>)
 8007b8c:	403b      	ands	r3, r7
 8007b8e:	930d      	str	r3, [sp, #52]	; 0x34
 8007b90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b92:	4b91      	ldr	r3, [pc, #580]	; (8007dd8 <_strtod_l+0xbf8>)
 8007b94:	429a      	cmp	r2, r3
 8007b96:	f040 80b0 	bne.w	8007cfa <_strtod_l+0xb1a>
 8007b9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b9e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007ba2:	ec4b ab10 	vmov	d0, sl, fp
 8007ba6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007baa:	f002 fa21 	bl	8009ff0 <__ulp>
 8007bae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007bb2:	ec53 2b10 	vmov	r2, r3, d0
 8007bb6:	f7f8 fd4f 	bl	8000658 <__aeabi_dmul>
 8007bba:	4652      	mov	r2, sl
 8007bbc:	465b      	mov	r3, fp
 8007bbe:	f7f8 fb95 	bl	80002ec <__adddf3>
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4983      	ldr	r1, [pc, #524]	; (8007dd4 <_strtod_l+0xbf4>)
 8007bc6:	4a85      	ldr	r2, [pc, #532]	; (8007ddc <_strtod_l+0xbfc>)
 8007bc8:	4019      	ands	r1, r3
 8007bca:	4291      	cmp	r1, r2
 8007bcc:	4682      	mov	sl, r0
 8007bce:	d960      	bls.n	8007c92 <_strtod_l+0xab2>
 8007bd0:	ee18 3a90 	vmov	r3, s17
 8007bd4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d104      	bne.n	8007be6 <_strtod_l+0xa06>
 8007bdc:	ee18 3a10 	vmov	r3, s16
 8007be0:	3301      	adds	r3, #1
 8007be2:	f43f ad45 	beq.w	8007670 <_strtod_l+0x490>
 8007be6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007de8 <_strtod_l+0xc08>
 8007bea:	f04f 3aff 	mov.w	sl, #4294967295
 8007bee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f001 fecb 	bl	800998c <_Bfree>
 8007bf6:	9905      	ldr	r1, [sp, #20]
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f001 fec7 	bl	800998c <_Bfree>
 8007bfe:	4631      	mov	r1, r6
 8007c00:	4620      	mov	r0, r4
 8007c02:	f001 fec3 	bl	800998c <_Bfree>
 8007c06:	4629      	mov	r1, r5
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f001 febf 	bl	800998c <_Bfree>
 8007c0e:	e61a      	b.n	8007846 <_strtod_l+0x666>
 8007c10:	f1ba 0f00 	cmp.w	sl, #0
 8007c14:	d11b      	bne.n	8007c4e <_strtod_l+0xa6e>
 8007c16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c1a:	b9f3      	cbnz	r3, 8007c5a <_strtod_l+0xa7a>
 8007c1c:	4b6c      	ldr	r3, [pc, #432]	; (8007dd0 <_strtod_l+0xbf0>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	4640      	mov	r0, r8
 8007c22:	4649      	mov	r1, r9
 8007c24:	f7f8 ff8a 	bl	8000b3c <__aeabi_dcmplt>
 8007c28:	b9d0      	cbnz	r0, 8007c60 <_strtod_l+0xa80>
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	4b6c      	ldr	r3, [pc, #432]	; (8007de0 <_strtod_l+0xc00>)
 8007c30:	2200      	movs	r2, #0
 8007c32:	f7f8 fd11 	bl	8000658 <__aeabi_dmul>
 8007c36:	4680      	mov	r8, r0
 8007c38:	4689      	mov	r9, r1
 8007c3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007c3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007c42:	9315      	str	r3, [sp, #84]	; 0x54
 8007c44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007c48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c4c:	e79d      	b.n	8007b8a <_strtod_l+0x9aa>
 8007c4e:	f1ba 0f01 	cmp.w	sl, #1
 8007c52:	d102      	bne.n	8007c5a <_strtod_l+0xa7a>
 8007c54:	2f00      	cmp	r7, #0
 8007c56:	f43f ad83 	beq.w	8007760 <_strtod_l+0x580>
 8007c5a:	4b62      	ldr	r3, [pc, #392]	; (8007de4 <_strtod_l+0xc04>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	e78e      	b.n	8007b7e <_strtod_l+0x99e>
 8007c60:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007de0 <_strtod_l+0xc00>
 8007c64:	f04f 0800 	mov.w	r8, #0
 8007c68:	e7e7      	b.n	8007c3a <_strtod_l+0xa5a>
 8007c6a:	4b5d      	ldr	r3, [pc, #372]	; (8007de0 <_strtod_l+0xc00>)
 8007c6c:	4640      	mov	r0, r8
 8007c6e:	4649      	mov	r1, r9
 8007c70:	2200      	movs	r2, #0
 8007c72:	f7f8 fcf1 	bl	8000658 <__aeabi_dmul>
 8007c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c78:	4680      	mov	r8, r0
 8007c7a:	4689      	mov	r9, r1
 8007c7c:	b933      	cbnz	r3, 8007c8c <_strtod_l+0xaac>
 8007c7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c82:	900e      	str	r0, [sp, #56]	; 0x38
 8007c84:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007c8a:	e7dd      	b.n	8007c48 <_strtod_l+0xa68>
 8007c8c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007c90:	e7f9      	b.n	8007c86 <_strtod_l+0xaa6>
 8007c92:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007c96:	9b04      	ldr	r3, [sp, #16]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1a8      	bne.n	8007bee <_strtod_l+0xa0e>
 8007c9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ca0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ca2:	0d1b      	lsrs	r3, r3, #20
 8007ca4:	051b      	lsls	r3, r3, #20
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d1a1      	bne.n	8007bee <_strtod_l+0xa0e>
 8007caa:	4640      	mov	r0, r8
 8007cac:	4649      	mov	r1, r9
 8007cae:	f7f9 f833 	bl	8000d18 <__aeabi_d2lz>
 8007cb2:	f7f8 fca3 	bl	80005fc <__aeabi_l2d>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	4640      	mov	r0, r8
 8007cbc:	4649      	mov	r1, r9
 8007cbe:	f7f8 fb13 	bl	80002e8 <__aeabi_dsub>
 8007cc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007cc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cc8:	ea43 030a 	orr.w	r3, r3, sl
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	4680      	mov	r8, r0
 8007cd0:	4689      	mov	r9, r1
 8007cd2:	d055      	beq.n	8007d80 <_strtod_l+0xba0>
 8007cd4:	a336      	add	r3, pc, #216	; (adr r3, 8007db0 <_strtod_l+0xbd0>)
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	f7f8 ff2f 	bl	8000b3c <__aeabi_dcmplt>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	f47f acd0 	bne.w	8007684 <_strtod_l+0x4a4>
 8007ce4:	a334      	add	r3, pc, #208	; (adr r3, 8007db8 <_strtod_l+0xbd8>)
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	4640      	mov	r0, r8
 8007cec:	4649      	mov	r1, r9
 8007cee:	f7f8 ff43 	bl	8000b78 <__aeabi_dcmpgt>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	f43f af7b 	beq.w	8007bee <_strtod_l+0xa0e>
 8007cf8:	e4c4      	b.n	8007684 <_strtod_l+0x4a4>
 8007cfa:	9b04      	ldr	r3, [sp, #16]
 8007cfc:	b333      	cbz	r3, 8007d4c <_strtod_l+0xb6c>
 8007cfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d04:	d822      	bhi.n	8007d4c <_strtod_l+0xb6c>
 8007d06:	a32e      	add	r3, pc, #184	; (adr r3, 8007dc0 <_strtod_l+0xbe0>)
 8007d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0c:	4640      	mov	r0, r8
 8007d0e:	4649      	mov	r1, r9
 8007d10:	f7f8 ff1e 	bl	8000b50 <__aeabi_dcmple>
 8007d14:	b1a0      	cbz	r0, 8007d40 <_strtod_l+0xb60>
 8007d16:	4649      	mov	r1, r9
 8007d18:	4640      	mov	r0, r8
 8007d1a:	f7f8 ff75 	bl	8000c08 <__aeabi_d2uiz>
 8007d1e:	2801      	cmp	r0, #1
 8007d20:	bf38      	it	cc
 8007d22:	2001      	movcc	r0, #1
 8007d24:	f7f8 fc1e 	bl	8000564 <__aeabi_ui2d>
 8007d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d2a:	4680      	mov	r8, r0
 8007d2c:	4689      	mov	r9, r1
 8007d2e:	bb23      	cbnz	r3, 8007d7a <_strtod_l+0xb9a>
 8007d30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d34:	9010      	str	r0, [sp, #64]	; 0x40
 8007d36:	9311      	str	r3, [sp, #68]	; 0x44
 8007d38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d44:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007d48:	1a9b      	subs	r3, r3, r2
 8007d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d50:	eeb0 0a48 	vmov.f32	s0, s16
 8007d54:	eef0 0a68 	vmov.f32	s1, s17
 8007d58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d5c:	f002 f948 	bl	8009ff0 <__ulp>
 8007d60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d64:	ec53 2b10 	vmov	r2, r3, d0
 8007d68:	f7f8 fc76 	bl	8000658 <__aeabi_dmul>
 8007d6c:	ec53 2b18 	vmov	r2, r3, d8
 8007d70:	f7f8 fabc 	bl	80002ec <__adddf3>
 8007d74:	4682      	mov	sl, r0
 8007d76:	468b      	mov	fp, r1
 8007d78:	e78d      	b.n	8007c96 <_strtod_l+0xab6>
 8007d7a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007d7e:	e7db      	b.n	8007d38 <_strtod_l+0xb58>
 8007d80:	a311      	add	r3, pc, #68	; (adr r3, 8007dc8 <_strtod_l+0xbe8>)
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	f7f8 fed9 	bl	8000b3c <__aeabi_dcmplt>
 8007d8a:	e7b2      	b.n	8007cf2 <_strtod_l+0xb12>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	f7ff ba6b 	b.w	8007270 <_strtod_l+0x90>
 8007d9a:	2a65      	cmp	r2, #101	; 0x65
 8007d9c:	f43f ab5f 	beq.w	800745e <_strtod_l+0x27e>
 8007da0:	2a45      	cmp	r2, #69	; 0x45
 8007da2:	f43f ab5c 	beq.w	800745e <_strtod_l+0x27e>
 8007da6:	2301      	movs	r3, #1
 8007da8:	f7ff bb94 	b.w	80074d4 <_strtod_l+0x2f4>
 8007dac:	f3af 8000 	nop.w
 8007db0:	94a03595 	.word	0x94a03595
 8007db4:	3fdfffff 	.word	0x3fdfffff
 8007db8:	35afe535 	.word	0x35afe535
 8007dbc:	3fe00000 	.word	0x3fe00000
 8007dc0:	ffc00000 	.word	0xffc00000
 8007dc4:	41dfffff 	.word	0x41dfffff
 8007dc8:	94a03595 	.word	0x94a03595
 8007dcc:	3fcfffff 	.word	0x3fcfffff
 8007dd0:	3ff00000 	.word	0x3ff00000
 8007dd4:	7ff00000 	.word	0x7ff00000
 8007dd8:	7fe00000 	.word	0x7fe00000
 8007ddc:	7c9fffff 	.word	0x7c9fffff
 8007de0:	3fe00000 	.word	0x3fe00000
 8007de4:	bff00000 	.word	0xbff00000
 8007de8:	7fefffff 	.word	0x7fefffff

08007dec <strtod>:
 8007dec:	460a      	mov	r2, r1
 8007dee:	4601      	mov	r1, r0
 8007df0:	4802      	ldr	r0, [pc, #8]	; (8007dfc <strtod+0x10>)
 8007df2:	4b03      	ldr	r3, [pc, #12]	; (8007e00 <strtod+0x14>)
 8007df4:	6800      	ldr	r0, [r0, #0]
 8007df6:	f7ff b9f3 	b.w	80071e0 <_strtod_l>
 8007dfa:	bf00      	nop
 8007dfc:	2000007c 	.word	0x2000007c
 8007e00:	200000e4 	.word	0x200000e4

08007e04 <strtok>:
 8007e04:	4b16      	ldr	r3, [pc, #88]	; (8007e60 <strtok+0x5c>)
 8007e06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e08:	681e      	ldr	r6, [r3, #0]
 8007e0a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	b9fc      	cbnz	r4, 8007e50 <strtok+0x4c>
 8007e10:	2050      	movs	r0, #80	; 0x50
 8007e12:	9101      	str	r1, [sp, #4]
 8007e14:	f7fe fb90 	bl	8006538 <malloc>
 8007e18:	9901      	ldr	r1, [sp, #4]
 8007e1a:	65b0      	str	r0, [r6, #88]	; 0x58
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	b920      	cbnz	r0, 8007e2a <strtok+0x26>
 8007e20:	4b10      	ldr	r3, [pc, #64]	; (8007e64 <strtok+0x60>)
 8007e22:	4811      	ldr	r0, [pc, #68]	; (8007e68 <strtok+0x64>)
 8007e24:	2157      	movs	r1, #87	; 0x57
 8007e26:	f000 f909 	bl	800803c <__assert_func>
 8007e2a:	e9c0 4400 	strd	r4, r4, [r0]
 8007e2e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007e32:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007e36:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007e3a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007e3e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007e42:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007e46:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007e4a:	6184      	str	r4, [r0, #24]
 8007e4c:	7704      	strb	r4, [r0, #28]
 8007e4e:	6244      	str	r4, [r0, #36]	; 0x24
 8007e50:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8007e52:	2301      	movs	r3, #1
 8007e54:	4628      	mov	r0, r5
 8007e56:	b002      	add	sp, #8
 8007e58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e5c:	f000 b806 	b.w	8007e6c <__strtok_r>
 8007e60:	2000007c 	.word	0x2000007c
 8007e64:	0800af60 	.word	0x0800af60
 8007e68:	0800af77 	.word	0x0800af77

08007e6c <__strtok_r>:
 8007e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e6e:	b908      	cbnz	r0, 8007e74 <__strtok_r+0x8>
 8007e70:	6810      	ldr	r0, [r2, #0]
 8007e72:	b188      	cbz	r0, 8007e98 <__strtok_r+0x2c>
 8007e74:	4604      	mov	r4, r0
 8007e76:	4620      	mov	r0, r4
 8007e78:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007e7c:	460f      	mov	r7, r1
 8007e7e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007e82:	b91e      	cbnz	r6, 8007e8c <__strtok_r+0x20>
 8007e84:	b965      	cbnz	r5, 8007ea0 <__strtok_r+0x34>
 8007e86:	6015      	str	r5, [r2, #0]
 8007e88:	4628      	mov	r0, r5
 8007e8a:	e005      	b.n	8007e98 <__strtok_r+0x2c>
 8007e8c:	42b5      	cmp	r5, r6
 8007e8e:	d1f6      	bne.n	8007e7e <__strtok_r+0x12>
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1f0      	bne.n	8007e76 <__strtok_r+0xa>
 8007e94:	6014      	str	r4, [r2, #0]
 8007e96:	7003      	strb	r3, [r0, #0]
 8007e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e9a:	461c      	mov	r4, r3
 8007e9c:	e00c      	b.n	8007eb8 <__strtok_r+0x4c>
 8007e9e:	b915      	cbnz	r5, 8007ea6 <__strtok_r+0x3a>
 8007ea0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007ea4:	460e      	mov	r6, r1
 8007ea6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007eaa:	42ab      	cmp	r3, r5
 8007eac:	d1f7      	bne.n	8007e9e <__strtok_r+0x32>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0f3      	beq.n	8007e9a <__strtok_r+0x2e>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007eb8:	6014      	str	r4, [r2, #0]
 8007eba:	e7ed      	b.n	8007e98 <__strtok_r+0x2c>

08007ebc <__swbuf_r>:
 8007ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ebe:	460e      	mov	r6, r1
 8007ec0:	4614      	mov	r4, r2
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	b118      	cbz	r0, 8007ece <__swbuf_r+0x12>
 8007ec6:	6983      	ldr	r3, [r0, #24]
 8007ec8:	b90b      	cbnz	r3, 8007ece <__swbuf_r+0x12>
 8007eca:	f001 f869 	bl	8008fa0 <__sinit>
 8007ece:	4b21      	ldr	r3, [pc, #132]	; (8007f54 <__swbuf_r+0x98>)
 8007ed0:	429c      	cmp	r4, r3
 8007ed2:	d12b      	bne.n	8007f2c <__swbuf_r+0x70>
 8007ed4:	686c      	ldr	r4, [r5, #4]
 8007ed6:	69a3      	ldr	r3, [r4, #24]
 8007ed8:	60a3      	str	r3, [r4, #8]
 8007eda:	89a3      	ldrh	r3, [r4, #12]
 8007edc:	071a      	lsls	r2, r3, #28
 8007ede:	d52f      	bpl.n	8007f40 <__swbuf_r+0x84>
 8007ee0:	6923      	ldr	r3, [r4, #16]
 8007ee2:	b36b      	cbz	r3, 8007f40 <__swbuf_r+0x84>
 8007ee4:	6923      	ldr	r3, [r4, #16]
 8007ee6:	6820      	ldr	r0, [r4, #0]
 8007ee8:	1ac0      	subs	r0, r0, r3
 8007eea:	6963      	ldr	r3, [r4, #20]
 8007eec:	b2f6      	uxtb	r6, r6
 8007eee:	4283      	cmp	r3, r0
 8007ef0:	4637      	mov	r7, r6
 8007ef2:	dc04      	bgt.n	8007efe <__swbuf_r+0x42>
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	f000 ffbe 	bl	8008e78 <_fflush_r>
 8007efc:	bb30      	cbnz	r0, 8007f4c <__swbuf_r+0x90>
 8007efe:	68a3      	ldr	r3, [r4, #8]
 8007f00:	3b01      	subs	r3, #1
 8007f02:	60a3      	str	r3, [r4, #8]
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	6022      	str	r2, [r4, #0]
 8007f0a:	701e      	strb	r6, [r3, #0]
 8007f0c:	6963      	ldr	r3, [r4, #20]
 8007f0e:	3001      	adds	r0, #1
 8007f10:	4283      	cmp	r3, r0
 8007f12:	d004      	beq.n	8007f1e <__swbuf_r+0x62>
 8007f14:	89a3      	ldrh	r3, [r4, #12]
 8007f16:	07db      	lsls	r3, r3, #31
 8007f18:	d506      	bpl.n	8007f28 <__swbuf_r+0x6c>
 8007f1a:	2e0a      	cmp	r6, #10
 8007f1c:	d104      	bne.n	8007f28 <__swbuf_r+0x6c>
 8007f1e:	4621      	mov	r1, r4
 8007f20:	4628      	mov	r0, r5
 8007f22:	f000 ffa9 	bl	8008e78 <_fflush_r>
 8007f26:	b988      	cbnz	r0, 8007f4c <__swbuf_r+0x90>
 8007f28:	4638      	mov	r0, r7
 8007f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f2c:	4b0a      	ldr	r3, [pc, #40]	; (8007f58 <__swbuf_r+0x9c>)
 8007f2e:	429c      	cmp	r4, r3
 8007f30:	d101      	bne.n	8007f36 <__swbuf_r+0x7a>
 8007f32:	68ac      	ldr	r4, [r5, #8]
 8007f34:	e7cf      	b.n	8007ed6 <__swbuf_r+0x1a>
 8007f36:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <__swbuf_r+0xa0>)
 8007f38:	429c      	cmp	r4, r3
 8007f3a:	bf08      	it	eq
 8007f3c:	68ec      	ldreq	r4, [r5, #12]
 8007f3e:	e7ca      	b.n	8007ed6 <__swbuf_r+0x1a>
 8007f40:	4621      	mov	r1, r4
 8007f42:	4628      	mov	r0, r5
 8007f44:	f000 f80c 	bl	8007f60 <__swsetup_r>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d0cb      	beq.n	8007ee4 <__swbuf_r+0x28>
 8007f4c:	f04f 37ff 	mov.w	r7, #4294967295
 8007f50:	e7ea      	b.n	8007f28 <__swbuf_r+0x6c>
 8007f52:	bf00      	nop
 8007f54:	0800b0ac 	.word	0x0800b0ac
 8007f58:	0800b0cc 	.word	0x0800b0cc
 8007f5c:	0800b08c 	.word	0x0800b08c

08007f60 <__swsetup_r>:
 8007f60:	4b32      	ldr	r3, [pc, #200]	; (800802c <__swsetup_r+0xcc>)
 8007f62:	b570      	push	{r4, r5, r6, lr}
 8007f64:	681d      	ldr	r5, [r3, #0]
 8007f66:	4606      	mov	r6, r0
 8007f68:	460c      	mov	r4, r1
 8007f6a:	b125      	cbz	r5, 8007f76 <__swsetup_r+0x16>
 8007f6c:	69ab      	ldr	r3, [r5, #24]
 8007f6e:	b913      	cbnz	r3, 8007f76 <__swsetup_r+0x16>
 8007f70:	4628      	mov	r0, r5
 8007f72:	f001 f815 	bl	8008fa0 <__sinit>
 8007f76:	4b2e      	ldr	r3, [pc, #184]	; (8008030 <__swsetup_r+0xd0>)
 8007f78:	429c      	cmp	r4, r3
 8007f7a:	d10f      	bne.n	8007f9c <__swsetup_r+0x3c>
 8007f7c:	686c      	ldr	r4, [r5, #4]
 8007f7e:	89a3      	ldrh	r3, [r4, #12]
 8007f80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f84:	0719      	lsls	r1, r3, #28
 8007f86:	d42c      	bmi.n	8007fe2 <__swsetup_r+0x82>
 8007f88:	06dd      	lsls	r5, r3, #27
 8007f8a:	d411      	bmi.n	8007fb0 <__swsetup_r+0x50>
 8007f8c:	2309      	movs	r3, #9
 8007f8e:	6033      	str	r3, [r6, #0]
 8007f90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f94:	81a3      	strh	r3, [r4, #12]
 8007f96:	f04f 30ff 	mov.w	r0, #4294967295
 8007f9a:	e03e      	b.n	800801a <__swsetup_r+0xba>
 8007f9c:	4b25      	ldr	r3, [pc, #148]	; (8008034 <__swsetup_r+0xd4>)
 8007f9e:	429c      	cmp	r4, r3
 8007fa0:	d101      	bne.n	8007fa6 <__swsetup_r+0x46>
 8007fa2:	68ac      	ldr	r4, [r5, #8]
 8007fa4:	e7eb      	b.n	8007f7e <__swsetup_r+0x1e>
 8007fa6:	4b24      	ldr	r3, [pc, #144]	; (8008038 <__swsetup_r+0xd8>)
 8007fa8:	429c      	cmp	r4, r3
 8007faa:	bf08      	it	eq
 8007fac:	68ec      	ldreq	r4, [r5, #12]
 8007fae:	e7e6      	b.n	8007f7e <__swsetup_r+0x1e>
 8007fb0:	0758      	lsls	r0, r3, #29
 8007fb2:	d512      	bpl.n	8007fda <__swsetup_r+0x7a>
 8007fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fb6:	b141      	cbz	r1, 8007fca <__swsetup_r+0x6a>
 8007fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fbc:	4299      	cmp	r1, r3
 8007fbe:	d002      	beq.n	8007fc6 <__swsetup_r+0x66>
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	f7fe faeb 	bl	800659c <_free_r>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	6363      	str	r3, [r4, #52]	; 0x34
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fd0:	81a3      	strh	r3, [r4, #12]
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	6063      	str	r3, [r4, #4]
 8007fd6:	6923      	ldr	r3, [r4, #16]
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	89a3      	ldrh	r3, [r4, #12]
 8007fdc:	f043 0308 	orr.w	r3, r3, #8
 8007fe0:	81a3      	strh	r3, [r4, #12]
 8007fe2:	6923      	ldr	r3, [r4, #16]
 8007fe4:	b94b      	cbnz	r3, 8007ffa <__swsetup_r+0x9a>
 8007fe6:	89a3      	ldrh	r3, [r4, #12]
 8007fe8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ff0:	d003      	beq.n	8007ffa <__swsetup_r+0x9a>
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	f001 fc1d 	bl	8009834 <__smakebuf_r>
 8007ffa:	89a0      	ldrh	r0, [r4, #12]
 8007ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008000:	f010 0301 	ands.w	r3, r0, #1
 8008004:	d00a      	beq.n	800801c <__swsetup_r+0xbc>
 8008006:	2300      	movs	r3, #0
 8008008:	60a3      	str	r3, [r4, #8]
 800800a:	6963      	ldr	r3, [r4, #20]
 800800c:	425b      	negs	r3, r3
 800800e:	61a3      	str	r3, [r4, #24]
 8008010:	6923      	ldr	r3, [r4, #16]
 8008012:	b943      	cbnz	r3, 8008026 <__swsetup_r+0xc6>
 8008014:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008018:	d1ba      	bne.n	8007f90 <__swsetup_r+0x30>
 800801a:	bd70      	pop	{r4, r5, r6, pc}
 800801c:	0781      	lsls	r1, r0, #30
 800801e:	bf58      	it	pl
 8008020:	6963      	ldrpl	r3, [r4, #20]
 8008022:	60a3      	str	r3, [r4, #8]
 8008024:	e7f4      	b.n	8008010 <__swsetup_r+0xb0>
 8008026:	2000      	movs	r0, #0
 8008028:	e7f7      	b.n	800801a <__swsetup_r+0xba>
 800802a:	bf00      	nop
 800802c:	2000007c 	.word	0x2000007c
 8008030:	0800b0ac 	.word	0x0800b0ac
 8008034:	0800b0cc 	.word	0x0800b0cc
 8008038:	0800b08c 	.word	0x0800b08c

0800803c <__assert_func>:
 800803c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800803e:	4614      	mov	r4, r2
 8008040:	461a      	mov	r2, r3
 8008042:	4b09      	ldr	r3, [pc, #36]	; (8008068 <__assert_func+0x2c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4605      	mov	r5, r0
 8008048:	68d8      	ldr	r0, [r3, #12]
 800804a:	b14c      	cbz	r4, 8008060 <__assert_func+0x24>
 800804c:	4b07      	ldr	r3, [pc, #28]	; (800806c <__assert_func+0x30>)
 800804e:	9100      	str	r1, [sp, #0]
 8008050:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008054:	4906      	ldr	r1, [pc, #24]	; (8008070 <__assert_func+0x34>)
 8008056:	462b      	mov	r3, r5
 8008058:	f001 f820 	bl	800909c <fiprintf>
 800805c:	f002 fc62 	bl	800a924 <abort>
 8008060:	4b04      	ldr	r3, [pc, #16]	; (8008074 <__assert_func+0x38>)
 8008062:	461c      	mov	r4, r3
 8008064:	e7f3      	b.n	800804e <__assert_func+0x12>
 8008066:	bf00      	nop
 8008068:	2000007c 	.word	0x2000007c
 800806c:	0800afd4 	.word	0x0800afd4
 8008070:	0800afe1 	.word	0x0800afe1
 8008074:	0800b00f 	.word	0x0800b00f

08008078 <quorem>:
 8008078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807c:	6903      	ldr	r3, [r0, #16]
 800807e:	690c      	ldr	r4, [r1, #16]
 8008080:	42a3      	cmp	r3, r4
 8008082:	4607      	mov	r7, r0
 8008084:	f2c0 8081 	blt.w	800818a <quorem+0x112>
 8008088:	3c01      	subs	r4, #1
 800808a:	f101 0814 	add.w	r8, r1, #20
 800808e:	f100 0514 	add.w	r5, r0, #20
 8008092:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008096:	9301      	str	r3, [sp, #4]
 8008098:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800809c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080a0:	3301      	adds	r3, #1
 80080a2:	429a      	cmp	r2, r3
 80080a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80080b0:	d331      	bcc.n	8008116 <quorem+0x9e>
 80080b2:	f04f 0e00 	mov.w	lr, #0
 80080b6:	4640      	mov	r0, r8
 80080b8:	46ac      	mov	ip, r5
 80080ba:	46f2      	mov	sl, lr
 80080bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80080c0:	b293      	uxth	r3, r2
 80080c2:	fb06 e303 	mla	r3, r6, r3, lr
 80080c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	ebaa 0303 	sub.w	r3, sl, r3
 80080d0:	f8dc a000 	ldr.w	sl, [ip]
 80080d4:	0c12      	lsrs	r2, r2, #16
 80080d6:	fa13 f38a 	uxtah	r3, r3, sl
 80080da:	fb06 e202 	mla	r2, r6, r2, lr
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	9b00      	ldr	r3, [sp, #0]
 80080e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080e6:	b292      	uxth	r2, r2
 80080e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80080ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80080f4:	4581      	cmp	r9, r0
 80080f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080fa:	f84c 3b04 	str.w	r3, [ip], #4
 80080fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008102:	d2db      	bcs.n	80080bc <quorem+0x44>
 8008104:	f855 300b 	ldr.w	r3, [r5, fp]
 8008108:	b92b      	cbnz	r3, 8008116 <quorem+0x9e>
 800810a:	9b01      	ldr	r3, [sp, #4]
 800810c:	3b04      	subs	r3, #4
 800810e:	429d      	cmp	r5, r3
 8008110:	461a      	mov	r2, r3
 8008112:	d32e      	bcc.n	8008172 <quorem+0xfa>
 8008114:	613c      	str	r4, [r7, #16]
 8008116:	4638      	mov	r0, r7
 8008118:	f001 fec4 	bl	8009ea4 <__mcmp>
 800811c:	2800      	cmp	r0, #0
 800811e:	db24      	blt.n	800816a <quorem+0xf2>
 8008120:	3601      	adds	r6, #1
 8008122:	4628      	mov	r0, r5
 8008124:	f04f 0c00 	mov.w	ip, #0
 8008128:	f858 2b04 	ldr.w	r2, [r8], #4
 800812c:	f8d0 e000 	ldr.w	lr, [r0]
 8008130:	b293      	uxth	r3, r2
 8008132:	ebac 0303 	sub.w	r3, ip, r3
 8008136:	0c12      	lsrs	r2, r2, #16
 8008138:	fa13 f38e 	uxtah	r3, r3, lr
 800813c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008140:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008144:	b29b      	uxth	r3, r3
 8008146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800814a:	45c1      	cmp	r9, r8
 800814c:	f840 3b04 	str.w	r3, [r0], #4
 8008150:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008154:	d2e8      	bcs.n	8008128 <quorem+0xb0>
 8008156:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800815a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800815e:	b922      	cbnz	r2, 800816a <quorem+0xf2>
 8008160:	3b04      	subs	r3, #4
 8008162:	429d      	cmp	r5, r3
 8008164:	461a      	mov	r2, r3
 8008166:	d30a      	bcc.n	800817e <quorem+0x106>
 8008168:	613c      	str	r4, [r7, #16]
 800816a:	4630      	mov	r0, r6
 800816c:	b003      	add	sp, #12
 800816e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008172:	6812      	ldr	r2, [r2, #0]
 8008174:	3b04      	subs	r3, #4
 8008176:	2a00      	cmp	r2, #0
 8008178:	d1cc      	bne.n	8008114 <quorem+0x9c>
 800817a:	3c01      	subs	r4, #1
 800817c:	e7c7      	b.n	800810e <quorem+0x96>
 800817e:	6812      	ldr	r2, [r2, #0]
 8008180:	3b04      	subs	r3, #4
 8008182:	2a00      	cmp	r2, #0
 8008184:	d1f0      	bne.n	8008168 <quorem+0xf0>
 8008186:	3c01      	subs	r4, #1
 8008188:	e7eb      	b.n	8008162 <quorem+0xea>
 800818a:	2000      	movs	r0, #0
 800818c:	e7ee      	b.n	800816c <quorem+0xf4>
	...

08008190 <_dtoa_r>:
 8008190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008194:	ed2d 8b04 	vpush	{d8-d9}
 8008198:	ec57 6b10 	vmov	r6, r7, d0
 800819c:	b093      	sub	sp, #76	; 0x4c
 800819e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80081a4:	9106      	str	r1, [sp, #24]
 80081a6:	ee10 aa10 	vmov	sl, s0
 80081aa:	4604      	mov	r4, r0
 80081ac:	9209      	str	r2, [sp, #36]	; 0x24
 80081ae:	930c      	str	r3, [sp, #48]	; 0x30
 80081b0:	46bb      	mov	fp, r7
 80081b2:	b975      	cbnz	r5, 80081d2 <_dtoa_r+0x42>
 80081b4:	2010      	movs	r0, #16
 80081b6:	f7fe f9bf 	bl	8006538 <malloc>
 80081ba:	4602      	mov	r2, r0
 80081bc:	6260      	str	r0, [r4, #36]	; 0x24
 80081be:	b920      	cbnz	r0, 80081ca <_dtoa_r+0x3a>
 80081c0:	4ba7      	ldr	r3, [pc, #668]	; (8008460 <_dtoa_r+0x2d0>)
 80081c2:	21ea      	movs	r1, #234	; 0xea
 80081c4:	48a7      	ldr	r0, [pc, #668]	; (8008464 <_dtoa_r+0x2d4>)
 80081c6:	f7ff ff39 	bl	800803c <__assert_func>
 80081ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081ce:	6005      	str	r5, [r0, #0]
 80081d0:	60c5      	str	r5, [r0, #12]
 80081d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081d4:	6819      	ldr	r1, [r3, #0]
 80081d6:	b151      	cbz	r1, 80081ee <_dtoa_r+0x5e>
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	604a      	str	r2, [r1, #4]
 80081dc:	2301      	movs	r3, #1
 80081de:	4093      	lsls	r3, r2
 80081e0:	608b      	str	r3, [r1, #8]
 80081e2:	4620      	mov	r0, r4
 80081e4:	f001 fbd2 	bl	800998c <_Bfree>
 80081e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	1e3b      	subs	r3, r7, #0
 80081f0:	bfaa      	itet	ge
 80081f2:	2300      	movge	r3, #0
 80081f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80081f8:	f8c8 3000 	strge.w	r3, [r8]
 80081fc:	4b9a      	ldr	r3, [pc, #616]	; (8008468 <_dtoa_r+0x2d8>)
 80081fe:	bfbc      	itt	lt
 8008200:	2201      	movlt	r2, #1
 8008202:	f8c8 2000 	strlt.w	r2, [r8]
 8008206:	ea33 030b 	bics.w	r3, r3, fp
 800820a:	d11b      	bne.n	8008244 <_dtoa_r+0xb4>
 800820c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800820e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008218:	4333      	orrs	r3, r6
 800821a:	f000 8592 	beq.w	8008d42 <_dtoa_r+0xbb2>
 800821e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008220:	b963      	cbnz	r3, 800823c <_dtoa_r+0xac>
 8008222:	4b92      	ldr	r3, [pc, #584]	; (800846c <_dtoa_r+0x2dc>)
 8008224:	e022      	b.n	800826c <_dtoa_r+0xdc>
 8008226:	4b92      	ldr	r3, [pc, #584]	; (8008470 <_dtoa_r+0x2e0>)
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	3308      	adds	r3, #8
 800822c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800822e:	6013      	str	r3, [r2, #0]
 8008230:	9801      	ldr	r0, [sp, #4]
 8008232:	b013      	add	sp, #76	; 0x4c
 8008234:	ecbd 8b04 	vpop	{d8-d9}
 8008238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823c:	4b8b      	ldr	r3, [pc, #556]	; (800846c <_dtoa_r+0x2dc>)
 800823e:	9301      	str	r3, [sp, #4]
 8008240:	3303      	adds	r3, #3
 8008242:	e7f3      	b.n	800822c <_dtoa_r+0x9c>
 8008244:	2200      	movs	r2, #0
 8008246:	2300      	movs	r3, #0
 8008248:	4650      	mov	r0, sl
 800824a:	4659      	mov	r1, fp
 800824c:	f7f8 fc6c 	bl	8000b28 <__aeabi_dcmpeq>
 8008250:	ec4b ab19 	vmov	d9, sl, fp
 8008254:	4680      	mov	r8, r0
 8008256:	b158      	cbz	r0, 8008270 <_dtoa_r+0xe0>
 8008258:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800825a:	2301      	movs	r3, #1
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 856b 	beq.w	8008d3c <_dtoa_r+0xbac>
 8008266:	4883      	ldr	r0, [pc, #524]	; (8008474 <_dtoa_r+0x2e4>)
 8008268:	6018      	str	r0, [r3, #0]
 800826a:	1e43      	subs	r3, r0, #1
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	e7df      	b.n	8008230 <_dtoa_r+0xa0>
 8008270:	ec4b ab10 	vmov	d0, sl, fp
 8008274:	aa10      	add	r2, sp, #64	; 0x40
 8008276:	a911      	add	r1, sp, #68	; 0x44
 8008278:	4620      	mov	r0, r4
 800827a:	f001 ff35 	bl	800a0e8 <__d2b>
 800827e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008282:	ee08 0a10 	vmov	s16, r0
 8008286:	2d00      	cmp	r5, #0
 8008288:	f000 8084 	beq.w	8008394 <_dtoa_r+0x204>
 800828c:	ee19 3a90 	vmov	r3, s19
 8008290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008294:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008298:	4656      	mov	r6, sl
 800829a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800829e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80082a6:	4b74      	ldr	r3, [pc, #464]	; (8008478 <_dtoa_r+0x2e8>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	4630      	mov	r0, r6
 80082ac:	4639      	mov	r1, r7
 80082ae:	f7f8 f81b 	bl	80002e8 <__aeabi_dsub>
 80082b2:	a365      	add	r3, pc, #404	; (adr r3, 8008448 <_dtoa_r+0x2b8>)
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	f7f8 f9ce 	bl	8000658 <__aeabi_dmul>
 80082bc:	a364      	add	r3, pc, #400	; (adr r3, 8008450 <_dtoa_r+0x2c0>)
 80082be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c2:	f7f8 f813 	bl	80002ec <__adddf3>
 80082c6:	4606      	mov	r6, r0
 80082c8:	4628      	mov	r0, r5
 80082ca:	460f      	mov	r7, r1
 80082cc:	f7f8 f95a 	bl	8000584 <__aeabi_i2d>
 80082d0:	a361      	add	r3, pc, #388	; (adr r3, 8008458 <_dtoa_r+0x2c8>)
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	f7f8 f9bf 	bl	8000658 <__aeabi_dmul>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	4630      	mov	r0, r6
 80082e0:	4639      	mov	r1, r7
 80082e2:	f7f8 f803 	bl	80002ec <__adddf3>
 80082e6:	4606      	mov	r6, r0
 80082e8:	460f      	mov	r7, r1
 80082ea:	f7f8 fc65 	bl	8000bb8 <__aeabi_d2iz>
 80082ee:	2200      	movs	r2, #0
 80082f0:	9000      	str	r0, [sp, #0]
 80082f2:	2300      	movs	r3, #0
 80082f4:	4630      	mov	r0, r6
 80082f6:	4639      	mov	r1, r7
 80082f8:	f7f8 fc20 	bl	8000b3c <__aeabi_dcmplt>
 80082fc:	b150      	cbz	r0, 8008314 <_dtoa_r+0x184>
 80082fe:	9800      	ldr	r0, [sp, #0]
 8008300:	f7f8 f940 	bl	8000584 <__aeabi_i2d>
 8008304:	4632      	mov	r2, r6
 8008306:	463b      	mov	r3, r7
 8008308:	f7f8 fc0e 	bl	8000b28 <__aeabi_dcmpeq>
 800830c:	b910      	cbnz	r0, 8008314 <_dtoa_r+0x184>
 800830e:	9b00      	ldr	r3, [sp, #0]
 8008310:	3b01      	subs	r3, #1
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	9b00      	ldr	r3, [sp, #0]
 8008316:	2b16      	cmp	r3, #22
 8008318:	d85a      	bhi.n	80083d0 <_dtoa_r+0x240>
 800831a:	9a00      	ldr	r2, [sp, #0]
 800831c:	4b57      	ldr	r3, [pc, #348]	; (800847c <_dtoa_r+0x2ec>)
 800831e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008326:	ec51 0b19 	vmov	r0, r1, d9
 800832a:	f7f8 fc07 	bl	8000b3c <__aeabi_dcmplt>
 800832e:	2800      	cmp	r0, #0
 8008330:	d050      	beq.n	80083d4 <_dtoa_r+0x244>
 8008332:	9b00      	ldr	r3, [sp, #0]
 8008334:	3b01      	subs	r3, #1
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	2300      	movs	r3, #0
 800833a:	930b      	str	r3, [sp, #44]	; 0x2c
 800833c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800833e:	1b5d      	subs	r5, r3, r5
 8008340:	1e6b      	subs	r3, r5, #1
 8008342:	9305      	str	r3, [sp, #20]
 8008344:	bf45      	ittet	mi
 8008346:	f1c5 0301 	rsbmi	r3, r5, #1
 800834a:	9304      	strmi	r3, [sp, #16]
 800834c:	2300      	movpl	r3, #0
 800834e:	2300      	movmi	r3, #0
 8008350:	bf4c      	ite	mi
 8008352:	9305      	strmi	r3, [sp, #20]
 8008354:	9304      	strpl	r3, [sp, #16]
 8008356:	9b00      	ldr	r3, [sp, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	db3d      	blt.n	80083d8 <_dtoa_r+0x248>
 800835c:	9b05      	ldr	r3, [sp, #20]
 800835e:	9a00      	ldr	r2, [sp, #0]
 8008360:	920a      	str	r2, [sp, #40]	; 0x28
 8008362:	4413      	add	r3, r2
 8008364:	9305      	str	r3, [sp, #20]
 8008366:	2300      	movs	r3, #0
 8008368:	9307      	str	r3, [sp, #28]
 800836a:	9b06      	ldr	r3, [sp, #24]
 800836c:	2b09      	cmp	r3, #9
 800836e:	f200 8089 	bhi.w	8008484 <_dtoa_r+0x2f4>
 8008372:	2b05      	cmp	r3, #5
 8008374:	bfc4      	itt	gt
 8008376:	3b04      	subgt	r3, #4
 8008378:	9306      	strgt	r3, [sp, #24]
 800837a:	9b06      	ldr	r3, [sp, #24]
 800837c:	f1a3 0302 	sub.w	r3, r3, #2
 8008380:	bfcc      	ite	gt
 8008382:	2500      	movgt	r5, #0
 8008384:	2501      	movle	r5, #1
 8008386:	2b03      	cmp	r3, #3
 8008388:	f200 8087 	bhi.w	800849a <_dtoa_r+0x30a>
 800838c:	e8df f003 	tbb	[pc, r3]
 8008390:	59383a2d 	.word	0x59383a2d
 8008394:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008398:	441d      	add	r5, r3
 800839a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800839e:	2b20      	cmp	r3, #32
 80083a0:	bfc1      	itttt	gt
 80083a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80083aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80083ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80083b2:	bfda      	itte	le
 80083b4:	f1c3 0320 	rsble	r3, r3, #32
 80083b8:	fa06 f003 	lslle.w	r0, r6, r3
 80083bc:	4318      	orrgt	r0, r3
 80083be:	f7f8 f8d1 	bl	8000564 <__aeabi_ui2d>
 80083c2:	2301      	movs	r3, #1
 80083c4:	4606      	mov	r6, r0
 80083c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80083ca:	3d01      	subs	r5, #1
 80083cc:	930e      	str	r3, [sp, #56]	; 0x38
 80083ce:	e76a      	b.n	80082a6 <_dtoa_r+0x116>
 80083d0:	2301      	movs	r3, #1
 80083d2:	e7b2      	b.n	800833a <_dtoa_r+0x1aa>
 80083d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80083d6:	e7b1      	b.n	800833c <_dtoa_r+0x1ac>
 80083d8:	9b04      	ldr	r3, [sp, #16]
 80083da:	9a00      	ldr	r2, [sp, #0]
 80083dc:	1a9b      	subs	r3, r3, r2
 80083de:	9304      	str	r3, [sp, #16]
 80083e0:	4253      	negs	r3, r2
 80083e2:	9307      	str	r3, [sp, #28]
 80083e4:	2300      	movs	r3, #0
 80083e6:	930a      	str	r3, [sp, #40]	; 0x28
 80083e8:	e7bf      	b.n	800836a <_dtoa_r+0x1da>
 80083ea:	2300      	movs	r3, #0
 80083ec:	9308      	str	r3, [sp, #32]
 80083ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	dc55      	bgt.n	80084a0 <_dtoa_r+0x310>
 80083f4:	2301      	movs	r3, #1
 80083f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083fa:	461a      	mov	r2, r3
 80083fc:	9209      	str	r2, [sp, #36]	; 0x24
 80083fe:	e00c      	b.n	800841a <_dtoa_r+0x28a>
 8008400:	2301      	movs	r3, #1
 8008402:	e7f3      	b.n	80083ec <_dtoa_r+0x25c>
 8008404:	2300      	movs	r3, #0
 8008406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008408:	9308      	str	r3, [sp, #32]
 800840a:	9b00      	ldr	r3, [sp, #0]
 800840c:	4413      	add	r3, r2
 800840e:	9302      	str	r3, [sp, #8]
 8008410:	3301      	adds	r3, #1
 8008412:	2b01      	cmp	r3, #1
 8008414:	9303      	str	r3, [sp, #12]
 8008416:	bfb8      	it	lt
 8008418:	2301      	movlt	r3, #1
 800841a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800841c:	2200      	movs	r2, #0
 800841e:	6042      	str	r2, [r0, #4]
 8008420:	2204      	movs	r2, #4
 8008422:	f102 0614 	add.w	r6, r2, #20
 8008426:	429e      	cmp	r6, r3
 8008428:	6841      	ldr	r1, [r0, #4]
 800842a:	d93d      	bls.n	80084a8 <_dtoa_r+0x318>
 800842c:	4620      	mov	r0, r4
 800842e:	f001 fa6d 	bl	800990c <_Balloc>
 8008432:	9001      	str	r0, [sp, #4]
 8008434:	2800      	cmp	r0, #0
 8008436:	d13b      	bne.n	80084b0 <_dtoa_r+0x320>
 8008438:	4b11      	ldr	r3, [pc, #68]	; (8008480 <_dtoa_r+0x2f0>)
 800843a:	4602      	mov	r2, r0
 800843c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008440:	e6c0      	b.n	80081c4 <_dtoa_r+0x34>
 8008442:	2301      	movs	r3, #1
 8008444:	e7df      	b.n	8008406 <_dtoa_r+0x276>
 8008446:	bf00      	nop
 8008448:	636f4361 	.word	0x636f4361
 800844c:	3fd287a7 	.word	0x3fd287a7
 8008450:	8b60c8b3 	.word	0x8b60c8b3
 8008454:	3fc68a28 	.word	0x3fc68a28
 8008458:	509f79fb 	.word	0x509f79fb
 800845c:	3fd34413 	.word	0x3fd34413
 8008460:	0800af60 	.word	0x0800af60
 8008464:	0800b01d 	.word	0x0800b01d
 8008468:	7ff00000 	.word	0x7ff00000
 800846c:	0800b019 	.word	0x0800b019
 8008470:	0800b010 	.word	0x0800b010
 8008474:	0800aeed 	.word	0x0800aeed
 8008478:	3ff80000 	.word	0x3ff80000
 800847c:	0800b1f0 	.word	0x0800b1f0
 8008480:	0800b078 	.word	0x0800b078
 8008484:	2501      	movs	r5, #1
 8008486:	2300      	movs	r3, #0
 8008488:	9306      	str	r3, [sp, #24]
 800848a:	9508      	str	r5, [sp, #32]
 800848c:	f04f 33ff 	mov.w	r3, #4294967295
 8008490:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008494:	2200      	movs	r2, #0
 8008496:	2312      	movs	r3, #18
 8008498:	e7b0      	b.n	80083fc <_dtoa_r+0x26c>
 800849a:	2301      	movs	r3, #1
 800849c:	9308      	str	r3, [sp, #32]
 800849e:	e7f5      	b.n	800848c <_dtoa_r+0x2fc>
 80084a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80084a6:	e7b8      	b.n	800841a <_dtoa_r+0x28a>
 80084a8:	3101      	adds	r1, #1
 80084aa:	6041      	str	r1, [r0, #4]
 80084ac:	0052      	lsls	r2, r2, #1
 80084ae:	e7b8      	b.n	8008422 <_dtoa_r+0x292>
 80084b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084b2:	9a01      	ldr	r2, [sp, #4]
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	9b03      	ldr	r3, [sp, #12]
 80084b8:	2b0e      	cmp	r3, #14
 80084ba:	f200 809d 	bhi.w	80085f8 <_dtoa_r+0x468>
 80084be:	2d00      	cmp	r5, #0
 80084c0:	f000 809a 	beq.w	80085f8 <_dtoa_r+0x468>
 80084c4:	9b00      	ldr	r3, [sp, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	dd32      	ble.n	8008530 <_dtoa_r+0x3a0>
 80084ca:	4ab7      	ldr	r2, [pc, #732]	; (80087a8 <_dtoa_r+0x618>)
 80084cc:	f003 030f 	and.w	r3, r3, #15
 80084d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80084d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084d8:	9b00      	ldr	r3, [sp, #0]
 80084da:	05d8      	lsls	r0, r3, #23
 80084dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80084e0:	d516      	bpl.n	8008510 <_dtoa_r+0x380>
 80084e2:	4bb2      	ldr	r3, [pc, #712]	; (80087ac <_dtoa_r+0x61c>)
 80084e4:	ec51 0b19 	vmov	r0, r1, d9
 80084e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084ec:	f7f8 f9de 	bl	80008ac <__aeabi_ddiv>
 80084f0:	f007 070f 	and.w	r7, r7, #15
 80084f4:	4682      	mov	sl, r0
 80084f6:	468b      	mov	fp, r1
 80084f8:	2503      	movs	r5, #3
 80084fa:	4eac      	ldr	r6, [pc, #688]	; (80087ac <_dtoa_r+0x61c>)
 80084fc:	b957      	cbnz	r7, 8008514 <_dtoa_r+0x384>
 80084fe:	4642      	mov	r2, r8
 8008500:	464b      	mov	r3, r9
 8008502:	4650      	mov	r0, sl
 8008504:	4659      	mov	r1, fp
 8008506:	f7f8 f9d1 	bl	80008ac <__aeabi_ddiv>
 800850a:	4682      	mov	sl, r0
 800850c:	468b      	mov	fp, r1
 800850e:	e028      	b.n	8008562 <_dtoa_r+0x3d2>
 8008510:	2502      	movs	r5, #2
 8008512:	e7f2      	b.n	80084fa <_dtoa_r+0x36a>
 8008514:	07f9      	lsls	r1, r7, #31
 8008516:	d508      	bpl.n	800852a <_dtoa_r+0x39a>
 8008518:	4640      	mov	r0, r8
 800851a:	4649      	mov	r1, r9
 800851c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008520:	f7f8 f89a 	bl	8000658 <__aeabi_dmul>
 8008524:	3501      	adds	r5, #1
 8008526:	4680      	mov	r8, r0
 8008528:	4689      	mov	r9, r1
 800852a:	107f      	asrs	r7, r7, #1
 800852c:	3608      	adds	r6, #8
 800852e:	e7e5      	b.n	80084fc <_dtoa_r+0x36c>
 8008530:	f000 809b 	beq.w	800866a <_dtoa_r+0x4da>
 8008534:	9b00      	ldr	r3, [sp, #0]
 8008536:	4f9d      	ldr	r7, [pc, #628]	; (80087ac <_dtoa_r+0x61c>)
 8008538:	425e      	negs	r6, r3
 800853a:	4b9b      	ldr	r3, [pc, #620]	; (80087a8 <_dtoa_r+0x618>)
 800853c:	f006 020f 	and.w	r2, r6, #15
 8008540:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	ec51 0b19 	vmov	r0, r1, d9
 800854c:	f7f8 f884 	bl	8000658 <__aeabi_dmul>
 8008550:	1136      	asrs	r6, r6, #4
 8008552:	4682      	mov	sl, r0
 8008554:	468b      	mov	fp, r1
 8008556:	2300      	movs	r3, #0
 8008558:	2502      	movs	r5, #2
 800855a:	2e00      	cmp	r6, #0
 800855c:	d17a      	bne.n	8008654 <_dtoa_r+0x4c4>
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1d3      	bne.n	800850a <_dtoa_r+0x37a>
 8008562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 8082 	beq.w	800866e <_dtoa_r+0x4de>
 800856a:	4b91      	ldr	r3, [pc, #580]	; (80087b0 <_dtoa_r+0x620>)
 800856c:	2200      	movs	r2, #0
 800856e:	4650      	mov	r0, sl
 8008570:	4659      	mov	r1, fp
 8008572:	f7f8 fae3 	bl	8000b3c <__aeabi_dcmplt>
 8008576:	2800      	cmp	r0, #0
 8008578:	d079      	beq.n	800866e <_dtoa_r+0x4de>
 800857a:	9b03      	ldr	r3, [sp, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d076      	beq.n	800866e <_dtoa_r+0x4de>
 8008580:	9b02      	ldr	r3, [sp, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	dd36      	ble.n	80085f4 <_dtoa_r+0x464>
 8008586:	9b00      	ldr	r3, [sp, #0]
 8008588:	4650      	mov	r0, sl
 800858a:	4659      	mov	r1, fp
 800858c:	1e5f      	subs	r7, r3, #1
 800858e:	2200      	movs	r2, #0
 8008590:	4b88      	ldr	r3, [pc, #544]	; (80087b4 <_dtoa_r+0x624>)
 8008592:	f7f8 f861 	bl	8000658 <__aeabi_dmul>
 8008596:	9e02      	ldr	r6, [sp, #8]
 8008598:	4682      	mov	sl, r0
 800859a:	468b      	mov	fp, r1
 800859c:	3501      	adds	r5, #1
 800859e:	4628      	mov	r0, r5
 80085a0:	f7f7 fff0 	bl	8000584 <__aeabi_i2d>
 80085a4:	4652      	mov	r2, sl
 80085a6:	465b      	mov	r3, fp
 80085a8:	f7f8 f856 	bl	8000658 <__aeabi_dmul>
 80085ac:	4b82      	ldr	r3, [pc, #520]	; (80087b8 <_dtoa_r+0x628>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	f7f7 fe9c 	bl	80002ec <__adddf3>
 80085b4:	46d0      	mov	r8, sl
 80085b6:	46d9      	mov	r9, fp
 80085b8:	4682      	mov	sl, r0
 80085ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80085be:	2e00      	cmp	r6, #0
 80085c0:	d158      	bne.n	8008674 <_dtoa_r+0x4e4>
 80085c2:	4b7e      	ldr	r3, [pc, #504]	; (80087bc <_dtoa_r+0x62c>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	4640      	mov	r0, r8
 80085c8:	4649      	mov	r1, r9
 80085ca:	f7f7 fe8d 	bl	80002e8 <__aeabi_dsub>
 80085ce:	4652      	mov	r2, sl
 80085d0:	465b      	mov	r3, fp
 80085d2:	4680      	mov	r8, r0
 80085d4:	4689      	mov	r9, r1
 80085d6:	f7f8 facf 	bl	8000b78 <__aeabi_dcmpgt>
 80085da:	2800      	cmp	r0, #0
 80085dc:	f040 8295 	bne.w	8008b0a <_dtoa_r+0x97a>
 80085e0:	4652      	mov	r2, sl
 80085e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80085e6:	4640      	mov	r0, r8
 80085e8:	4649      	mov	r1, r9
 80085ea:	f7f8 faa7 	bl	8000b3c <__aeabi_dcmplt>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	f040 8289 	bne.w	8008b06 <_dtoa_r+0x976>
 80085f4:	ec5b ab19 	vmov	sl, fp, d9
 80085f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f2c0 8148 	blt.w	8008890 <_dtoa_r+0x700>
 8008600:	9a00      	ldr	r2, [sp, #0]
 8008602:	2a0e      	cmp	r2, #14
 8008604:	f300 8144 	bgt.w	8008890 <_dtoa_r+0x700>
 8008608:	4b67      	ldr	r3, [pc, #412]	; (80087a8 <_dtoa_r+0x618>)
 800860a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800860e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008614:	2b00      	cmp	r3, #0
 8008616:	f280 80d5 	bge.w	80087c4 <_dtoa_r+0x634>
 800861a:	9b03      	ldr	r3, [sp, #12]
 800861c:	2b00      	cmp	r3, #0
 800861e:	f300 80d1 	bgt.w	80087c4 <_dtoa_r+0x634>
 8008622:	f040 826f 	bne.w	8008b04 <_dtoa_r+0x974>
 8008626:	4b65      	ldr	r3, [pc, #404]	; (80087bc <_dtoa_r+0x62c>)
 8008628:	2200      	movs	r2, #0
 800862a:	4640      	mov	r0, r8
 800862c:	4649      	mov	r1, r9
 800862e:	f7f8 f813 	bl	8000658 <__aeabi_dmul>
 8008632:	4652      	mov	r2, sl
 8008634:	465b      	mov	r3, fp
 8008636:	f7f8 fa95 	bl	8000b64 <__aeabi_dcmpge>
 800863a:	9e03      	ldr	r6, [sp, #12]
 800863c:	4637      	mov	r7, r6
 800863e:	2800      	cmp	r0, #0
 8008640:	f040 8245 	bne.w	8008ace <_dtoa_r+0x93e>
 8008644:	9d01      	ldr	r5, [sp, #4]
 8008646:	2331      	movs	r3, #49	; 0x31
 8008648:	f805 3b01 	strb.w	r3, [r5], #1
 800864c:	9b00      	ldr	r3, [sp, #0]
 800864e:	3301      	adds	r3, #1
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	e240      	b.n	8008ad6 <_dtoa_r+0x946>
 8008654:	07f2      	lsls	r2, r6, #31
 8008656:	d505      	bpl.n	8008664 <_dtoa_r+0x4d4>
 8008658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800865c:	f7f7 fffc 	bl	8000658 <__aeabi_dmul>
 8008660:	3501      	adds	r5, #1
 8008662:	2301      	movs	r3, #1
 8008664:	1076      	asrs	r6, r6, #1
 8008666:	3708      	adds	r7, #8
 8008668:	e777      	b.n	800855a <_dtoa_r+0x3ca>
 800866a:	2502      	movs	r5, #2
 800866c:	e779      	b.n	8008562 <_dtoa_r+0x3d2>
 800866e:	9f00      	ldr	r7, [sp, #0]
 8008670:	9e03      	ldr	r6, [sp, #12]
 8008672:	e794      	b.n	800859e <_dtoa_r+0x40e>
 8008674:	9901      	ldr	r1, [sp, #4]
 8008676:	4b4c      	ldr	r3, [pc, #304]	; (80087a8 <_dtoa_r+0x618>)
 8008678:	4431      	add	r1, r6
 800867a:	910d      	str	r1, [sp, #52]	; 0x34
 800867c:	9908      	ldr	r1, [sp, #32]
 800867e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008682:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008686:	2900      	cmp	r1, #0
 8008688:	d043      	beq.n	8008712 <_dtoa_r+0x582>
 800868a:	494d      	ldr	r1, [pc, #308]	; (80087c0 <_dtoa_r+0x630>)
 800868c:	2000      	movs	r0, #0
 800868e:	f7f8 f90d 	bl	80008ac <__aeabi_ddiv>
 8008692:	4652      	mov	r2, sl
 8008694:	465b      	mov	r3, fp
 8008696:	f7f7 fe27 	bl	80002e8 <__aeabi_dsub>
 800869a:	9d01      	ldr	r5, [sp, #4]
 800869c:	4682      	mov	sl, r0
 800869e:	468b      	mov	fp, r1
 80086a0:	4649      	mov	r1, r9
 80086a2:	4640      	mov	r0, r8
 80086a4:	f7f8 fa88 	bl	8000bb8 <__aeabi_d2iz>
 80086a8:	4606      	mov	r6, r0
 80086aa:	f7f7 ff6b 	bl	8000584 <__aeabi_i2d>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4640      	mov	r0, r8
 80086b4:	4649      	mov	r1, r9
 80086b6:	f7f7 fe17 	bl	80002e8 <__aeabi_dsub>
 80086ba:	3630      	adds	r6, #48	; 0x30
 80086bc:	f805 6b01 	strb.w	r6, [r5], #1
 80086c0:	4652      	mov	r2, sl
 80086c2:	465b      	mov	r3, fp
 80086c4:	4680      	mov	r8, r0
 80086c6:	4689      	mov	r9, r1
 80086c8:	f7f8 fa38 	bl	8000b3c <__aeabi_dcmplt>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d163      	bne.n	8008798 <_dtoa_r+0x608>
 80086d0:	4642      	mov	r2, r8
 80086d2:	464b      	mov	r3, r9
 80086d4:	4936      	ldr	r1, [pc, #216]	; (80087b0 <_dtoa_r+0x620>)
 80086d6:	2000      	movs	r0, #0
 80086d8:	f7f7 fe06 	bl	80002e8 <__aeabi_dsub>
 80086dc:	4652      	mov	r2, sl
 80086de:	465b      	mov	r3, fp
 80086e0:	f7f8 fa2c 	bl	8000b3c <__aeabi_dcmplt>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	f040 80b5 	bne.w	8008854 <_dtoa_r+0x6c4>
 80086ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ec:	429d      	cmp	r5, r3
 80086ee:	d081      	beq.n	80085f4 <_dtoa_r+0x464>
 80086f0:	4b30      	ldr	r3, [pc, #192]	; (80087b4 <_dtoa_r+0x624>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	4650      	mov	r0, sl
 80086f6:	4659      	mov	r1, fp
 80086f8:	f7f7 ffae 	bl	8000658 <__aeabi_dmul>
 80086fc:	4b2d      	ldr	r3, [pc, #180]	; (80087b4 <_dtoa_r+0x624>)
 80086fe:	4682      	mov	sl, r0
 8008700:	468b      	mov	fp, r1
 8008702:	4640      	mov	r0, r8
 8008704:	4649      	mov	r1, r9
 8008706:	2200      	movs	r2, #0
 8008708:	f7f7 ffa6 	bl	8000658 <__aeabi_dmul>
 800870c:	4680      	mov	r8, r0
 800870e:	4689      	mov	r9, r1
 8008710:	e7c6      	b.n	80086a0 <_dtoa_r+0x510>
 8008712:	4650      	mov	r0, sl
 8008714:	4659      	mov	r1, fp
 8008716:	f7f7 ff9f 	bl	8000658 <__aeabi_dmul>
 800871a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800871c:	9d01      	ldr	r5, [sp, #4]
 800871e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008720:	4682      	mov	sl, r0
 8008722:	468b      	mov	fp, r1
 8008724:	4649      	mov	r1, r9
 8008726:	4640      	mov	r0, r8
 8008728:	f7f8 fa46 	bl	8000bb8 <__aeabi_d2iz>
 800872c:	4606      	mov	r6, r0
 800872e:	f7f7 ff29 	bl	8000584 <__aeabi_i2d>
 8008732:	3630      	adds	r6, #48	; 0x30
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	4640      	mov	r0, r8
 800873a:	4649      	mov	r1, r9
 800873c:	f7f7 fdd4 	bl	80002e8 <__aeabi_dsub>
 8008740:	f805 6b01 	strb.w	r6, [r5], #1
 8008744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008746:	429d      	cmp	r5, r3
 8008748:	4680      	mov	r8, r0
 800874a:	4689      	mov	r9, r1
 800874c:	f04f 0200 	mov.w	r2, #0
 8008750:	d124      	bne.n	800879c <_dtoa_r+0x60c>
 8008752:	4b1b      	ldr	r3, [pc, #108]	; (80087c0 <_dtoa_r+0x630>)
 8008754:	4650      	mov	r0, sl
 8008756:	4659      	mov	r1, fp
 8008758:	f7f7 fdc8 	bl	80002ec <__adddf3>
 800875c:	4602      	mov	r2, r0
 800875e:	460b      	mov	r3, r1
 8008760:	4640      	mov	r0, r8
 8008762:	4649      	mov	r1, r9
 8008764:	f7f8 fa08 	bl	8000b78 <__aeabi_dcmpgt>
 8008768:	2800      	cmp	r0, #0
 800876a:	d173      	bne.n	8008854 <_dtoa_r+0x6c4>
 800876c:	4652      	mov	r2, sl
 800876e:	465b      	mov	r3, fp
 8008770:	4913      	ldr	r1, [pc, #76]	; (80087c0 <_dtoa_r+0x630>)
 8008772:	2000      	movs	r0, #0
 8008774:	f7f7 fdb8 	bl	80002e8 <__aeabi_dsub>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4640      	mov	r0, r8
 800877e:	4649      	mov	r1, r9
 8008780:	f7f8 f9dc 	bl	8000b3c <__aeabi_dcmplt>
 8008784:	2800      	cmp	r0, #0
 8008786:	f43f af35 	beq.w	80085f4 <_dtoa_r+0x464>
 800878a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800878c:	1e6b      	subs	r3, r5, #1
 800878e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008790:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008794:	2b30      	cmp	r3, #48	; 0x30
 8008796:	d0f8      	beq.n	800878a <_dtoa_r+0x5fa>
 8008798:	9700      	str	r7, [sp, #0]
 800879a:	e049      	b.n	8008830 <_dtoa_r+0x6a0>
 800879c:	4b05      	ldr	r3, [pc, #20]	; (80087b4 <_dtoa_r+0x624>)
 800879e:	f7f7 ff5b 	bl	8000658 <__aeabi_dmul>
 80087a2:	4680      	mov	r8, r0
 80087a4:	4689      	mov	r9, r1
 80087a6:	e7bd      	b.n	8008724 <_dtoa_r+0x594>
 80087a8:	0800b1f0 	.word	0x0800b1f0
 80087ac:	0800b1c8 	.word	0x0800b1c8
 80087b0:	3ff00000 	.word	0x3ff00000
 80087b4:	40240000 	.word	0x40240000
 80087b8:	401c0000 	.word	0x401c0000
 80087bc:	40140000 	.word	0x40140000
 80087c0:	3fe00000 	.word	0x3fe00000
 80087c4:	9d01      	ldr	r5, [sp, #4]
 80087c6:	4656      	mov	r6, sl
 80087c8:	465f      	mov	r7, fp
 80087ca:	4642      	mov	r2, r8
 80087cc:	464b      	mov	r3, r9
 80087ce:	4630      	mov	r0, r6
 80087d0:	4639      	mov	r1, r7
 80087d2:	f7f8 f86b 	bl	80008ac <__aeabi_ddiv>
 80087d6:	f7f8 f9ef 	bl	8000bb8 <__aeabi_d2iz>
 80087da:	4682      	mov	sl, r0
 80087dc:	f7f7 fed2 	bl	8000584 <__aeabi_i2d>
 80087e0:	4642      	mov	r2, r8
 80087e2:	464b      	mov	r3, r9
 80087e4:	f7f7 ff38 	bl	8000658 <__aeabi_dmul>
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	4630      	mov	r0, r6
 80087ee:	4639      	mov	r1, r7
 80087f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80087f4:	f7f7 fd78 	bl	80002e8 <__aeabi_dsub>
 80087f8:	f805 6b01 	strb.w	r6, [r5], #1
 80087fc:	9e01      	ldr	r6, [sp, #4]
 80087fe:	9f03      	ldr	r7, [sp, #12]
 8008800:	1bae      	subs	r6, r5, r6
 8008802:	42b7      	cmp	r7, r6
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	d135      	bne.n	8008876 <_dtoa_r+0x6e6>
 800880a:	f7f7 fd6f 	bl	80002ec <__adddf3>
 800880e:	4642      	mov	r2, r8
 8008810:	464b      	mov	r3, r9
 8008812:	4606      	mov	r6, r0
 8008814:	460f      	mov	r7, r1
 8008816:	f7f8 f9af 	bl	8000b78 <__aeabi_dcmpgt>
 800881a:	b9d0      	cbnz	r0, 8008852 <_dtoa_r+0x6c2>
 800881c:	4642      	mov	r2, r8
 800881e:	464b      	mov	r3, r9
 8008820:	4630      	mov	r0, r6
 8008822:	4639      	mov	r1, r7
 8008824:	f7f8 f980 	bl	8000b28 <__aeabi_dcmpeq>
 8008828:	b110      	cbz	r0, 8008830 <_dtoa_r+0x6a0>
 800882a:	f01a 0f01 	tst.w	sl, #1
 800882e:	d110      	bne.n	8008852 <_dtoa_r+0x6c2>
 8008830:	4620      	mov	r0, r4
 8008832:	ee18 1a10 	vmov	r1, s16
 8008836:	f001 f8a9 	bl	800998c <_Bfree>
 800883a:	2300      	movs	r3, #0
 800883c:	9800      	ldr	r0, [sp, #0]
 800883e:	702b      	strb	r3, [r5, #0]
 8008840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008842:	3001      	adds	r0, #1
 8008844:	6018      	str	r0, [r3, #0]
 8008846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008848:	2b00      	cmp	r3, #0
 800884a:	f43f acf1 	beq.w	8008230 <_dtoa_r+0xa0>
 800884e:	601d      	str	r5, [r3, #0]
 8008850:	e4ee      	b.n	8008230 <_dtoa_r+0xa0>
 8008852:	9f00      	ldr	r7, [sp, #0]
 8008854:	462b      	mov	r3, r5
 8008856:	461d      	mov	r5, r3
 8008858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800885c:	2a39      	cmp	r2, #57	; 0x39
 800885e:	d106      	bne.n	800886e <_dtoa_r+0x6de>
 8008860:	9a01      	ldr	r2, [sp, #4]
 8008862:	429a      	cmp	r2, r3
 8008864:	d1f7      	bne.n	8008856 <_dtoa_r+0x6c6>
 8008866:	9901      	ldr	r1, [sp, #4]
 8008868:	2230      	movs	r2, #48	; 0x30
 800886a:	3701      	adds	r7, #1
 800886c:	700a      	strb	r2, [r1, #0]
 800886e:	781a      	ldrb	r2, [r3, #0]
 8008870:	3201      	adds	r2, #1
 8008872:	701a      	strb	r2, [r3, #0]
 8008874:	e790      	b.n	8008798 <_dtoa_r+0x608>
 8008876:	4ba6      	ldr	r3, [pc, #664]	; (8008b10 <_dtoa_r+0x980>)
 8008878:	2200      	movs	r2, #0
 800887a:	f7f7 feed 	bl	8000658 <__aeabi_dmul>
 800887e:	2200      	movs	r2, #0
 8008880:	2300      	movs	r3, #0
 8008882:	4606      	mov	r6, r0
 8008884:	460f      	mov	r7, r1
 8008886:	f7f8 f94f 	bl	8000b28 <__aeabi_dcmpeq>
 800888a:	2800      	cmp	r0, #0
 800888c:	d09d      	beq.n	80087ca <_dtoa_r+0x63a>
 800888e:	e7cf      	b.n	8008830 <_dtoa_r+0x6a0>
 8008890:	9a08      	ldr	r2, [sp, #32]
 8008892:	2a00      	cmp	r2, #0
 8008894:	f000 80d7 	beq.w	8008a46 <_dtoa_r+0x8b6>
 8008898:	9a06      	ldr	r2, [sp, #24]
 800889a:	2a01      	cmp	r2, #1
 800889c:	f300 80ba 	bgt.w	8008a14 <_dtoa_r+0x884>
 80088a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088a2:	2a00      	cmp	r2, #0
 80088a4:	f000 80b2 	beq.w	8008a0c <_dtoa_r+0x87c>
 80088a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088ac:	9e07      	ldr	r6, [sp, #28]
 80088ae:	9d04      	ldr	r5, [sp, #16]
 80088b0:	9a04      	ldr	r2, [sp, #16]
 80088b2:	441a      	add	r2, r3
 80088b4:	9204      	str	r2, [sp, #16]
 80088b6:	9a05      	ldr	r2, [sp, #20]
 80088b8:	2101      	movs	r1, #1
 80088ba:	441a      	add	r2, r3
 80088bc:	4620      	mov	r0, r4
 80088be:	9205      	str	r2, [sp, #20]
 80088c0:	f001 f966 	bl	8009b90 <__i2b>
 80088c4:	4607      	mov	r7, r0
 80088c6:	2d00      	cmp	r5, #0
 80088c8:	dd0c      	ble.n	80088e4 <_dtoa_r+0x754>
 80088ca:	9b05      	ldr	r3, [sp, #20]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	dd09      	ble.n	80088e4 <_dtoa_r+0x754>
 80088d0:	42ab      	cmp	r3, r5
 80088d2:	9a04      	ldr	r2, [sp, #16]
 80088d4:	bfa8      	it	ge
 80088d6:	462b      	movge	r3, r5
 80088d8:	1ad2      	subs	r2, r2, r3
 80088da:	9204      	str	r2, [sp, #16]
 80088dc:	9a05      	ldr	r2, [sp, #20]
 80088de:	1aed      	subs	r5, r5, r3
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	9305      	str	r3, [sp, #20]
 80088e4:	9b07      	ldr	r3, [sp, #28]
 80088e6:	b31b      	cbz	r3, 8008930 <_dtoa_r+0x7a0>
 80088e8:	9b08      	ldr	r3, [sp, #32]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 80af 	beq.w	8008a4e <_dtoa_r+0x8be>
 80088f0:	2e00      	cmp	r6, #0
 80088f2:	dd13      	ble.n	800891c <_dtoa_r+0x78c>
 80088f4:	4639      	mov	r1, r7
 80088f6:	4632      	mov	r2, r6
 80088f8:	4620      	mov	r0, r4
 80088fa:	f001 fa09 	bl	8009d10 <__pow5mult>
 80088fe:	ee18 2a10 	vmov	r2, s16
 8008902:	4601      	mov	r1, r0
 8008904:	4607      	mov	r7, r0
 8008906:	4620      	mov	r0, r4
 8008908:	f001 f958 	bl	8009bbc <__multiply>
 800890c:	ee18 1a10 	vmov	r1, s16
 8008910:	4680      	mov	r8, r0
 8008912:	4620      	mov	r0, r4
 8008914:	f001 f83a 	bl	800998c <_Bfree>
 8008918:	ee08 8a10 	vmov	s16, r8
 800891c:	9b07      	ldr	r3, [sp, #28]
 800891e:	1b9a      	subs	r2, r3, r6
 8008920:	d006      	beq.n	8008930 <_dtoa_r+0x7a0>
 8008922:	ee18 1a10 	vmov	r1, s16
 8008926:	4620      	mov	r0, r4
 8008928:	f001 f9f2 	bl	8009d10 <__pow5mult>
 800892c:	ee08 0a10 	vmov	s16, r0
 8008930:	2101      	movs	r1, #1
 8008932:	4620      	mov	r0, r4
 8008934:	f001 f92c 	bl	8009b90 <__i2b>
 8008938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800893a:	2b00      	cmp	r3, #0
 800893c:	4606      	mov	r6, r0
 800893e:	f340 8088 	ble.w	8008a52 <_dtoa_r+0x8c2>
 8008942:	461a      	mov	r2, r3
 8008944:	4601      	mov	r1, r0
 8008946:	4620      	mov	r0, r4
 8008948:	f001 f9e2 	bl	8009d10 <__pow5mult>
 800894c:	9b06      	ldr	r3, [sp, #24]
 800894e:	2b01      	cmp	r3, #1
 8008950:	4606      	mov	r6, r0
 8008952:	f340 8081 	ble.w	8008a58 <_dtoa_r+0x8c8>
 8008956:	f04f 0800 	mov.w	r8, #0
 800895a:	6933      	ldr	r3, [r6, #16]
 800895c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008960:	6918      	ldr	r0, [r3, #16]
 8008962:	f001 f8c5 	bl	8009af0 <__hi0bits>
 8008966:	f1c0 0020 	rsb	r0, r0, #32
 800896a:	9b05      	ldr	r3, [sp, #20]
 800896c:	4418      	add	r0, r3
 800896e:	f010 001f 	ands.w	r0, r0, #31
 8008972:	f000 8092 	beq.w	8008a9a <_dtoa_r+0x90a>
 8008976:	f1c0 0320 	rsb	r3, r0, #32
 800897a:	2b04      	cmp	r3, #4
 800897c:	f340 808a 	ble.w	8008a94 <_dtoa_r+0x904>
 8008980:	f1c0 001c 	rsb	r0, r0, #28
 8008984:	9b04      	ldr	r3, [sp, #16]
 8008986:	4403      	add	r3, r0
 8008988:	9304      	str	r3, [sp, #16]
 800898a:	9b05      	ldr	r3, [sp, #20]
 800898c:	4403      	add	r3, r0
 800898e:	4405      	add	r5, r0
 8008990:	9305      	str	r3, [sp, #20]
 8008992:	9b04      	ldr	r3, [sp, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	dd07      	ble.n	80089a8 <_dtoa_r+0x818>
 8008998:	ee18 1a10 	vmov	r1, s16
 800899c:	461a      	mov	r2, r3
 800899e:	4620      	mov	r0, r4
 80089a0:	f001 fa10 	bl	8009dc4 <__lshift>
 80089a4:	ee08 0a10 	vmov	s16, r0
 80089a8:	9b05      	ldr	r3, [sp, #20]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	dd05      	ble.n	80089ba <_dtoa_r+0x82a>
 80089ae:	4631      	mov	r1, r6
 80089b0:	461a      	mov	r2, r3
 80089b2:	4620      	mov	r0, r4
 80089b4:	f001 fa06 	bl	8009dc4 <__lshift>
 80089b8:	4606      	mov	r6, r0
 80089ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d06e      	beq.n	8008a9e <_dtoa_r+0x90e>
 80089c0:	ee18 0a10 	vmov	r0, s16
 80089c4:	4631      	mov	r1, r6
 80089c6:	f001 fa6d 	bl	8009ea4 <__mcmp>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	da67      	bge.n	8008a9e <_dtoa_r+0x90e>
 80089ce:	9b00      	ldr	r3, [sp, #0]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	ee18 1a10 	vmov	r1, s16
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	220a      	movs	r2, #10
 80089da:	2300      	movs	r3, #0
 80089dc:	4620      	mov	r0, r4
 80089de:	f000 fff7 	bl	80099d0 <__multadd>
 80089e2:	9b08      	ldr	r3, [sp, #32]
 80089e4:	ee08 0a10 	vmov	s16, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 81b1 	beq.w	8008d50 <_dtoa_r+0xbc0>
 80089ee:	2300      	movs	r3, #0
 80089f0:	4639      	mov	r1, r7
 80089f2:	220a      	movs	r2, #10
 80089f4:	4620      	mov	r0, r4
 80089f6:	f000 ffeb 	bl	80099d0 <__multadd>
 80089fa:	9b02      	ldr	r3, [sp, #8]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	4607      	mov	r7, r0
 8008a00:	f300 808e 	bgt.w	8008b20 <_dtoa_r+0x990>
 8008a04:	9b06      	ldr	r3, [sp, #24]
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	dc51      	bgt.n	8008aae <_dtoa_r+0x91e>
 8008a0a:	e089      	b.n	8008b20 <_dtoa_r+0x990>
 8008a0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a12:	e74b      	b.n	80088ac <_dtoa_r+0x71c>
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	1e5e      	subs	r6, r3, #1
 8008a18:	9b07      	ldr	r3, [sp, #28]
 8008a1a:	42b3      	cmp	r3, r6
 8008a1c:	bfbf      	itttt	lt
 8008a1e:	9b07      	ldrlt	r3, [sp, #28]
 8008a20:	9607      	strlt	r6, [sp, #28]
 8008a22:	1af2      	sublt	r2, r6, r3
 8008a24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a26:	bfb6      	itet	lt
 8008a28:	189b      	addlt	r3, r3, r2
 8008a2a:	1b9e      	subge	r6, r3, r6
 8008a2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008a2e:	9b03      	ldr	r3, [sp, #12]
 8008a30:	bfb8      	it	lt
 8008a32:	2600      	movlt	r6, #0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	bfb7      	itett	lt
 8008a38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008a3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008a40:	1a9d      	sublt	r5, r3, r2
 8008a42:	2300      	movlt	r3, #0
 8008a44:	e734      	b.n	80088b0 <_dtoa_r+0x720>
 8008a46:	9e07      	ldr	r6, [sp, #28]
 8008a48:	9d04      	ldr	r5, [sp, #16]
 8008a4a:	9f08      	ldr	r7, [sp, #32]
 8008a4c:	e73b      	b.n	80088c6 <_dtoa_r+0x736>
 8008a4e:	9a07      	ldr	r2, [sp, #28]
 8008a50:	e767      	b.n	8008922 <_dtoa_r+0x792>
 8008a52:	9b06      	ldr	r3, [sp, #24]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	dc18      	bgt.n	8008a8a <_dtoa_r+0x8fa>
 8008a58:	f1ba 0f00 	cmp.w	sl, #0
 8008a5c:	d115      	bne.n	8008a8a <_dtoa_r+0x8fa>
 8008a5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a62:	b993      	cbnz	r3, 8008a8a <_dtoa_r+0x8fa>
 8008a64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a68:	0d1b      	lsrs	r3, r3, #20
 8008a6a:	051b      	lsls	r3, r3, #20
 8008a6c:	b183      	cbz	r3, 8008a90 <_dtoa_r+0x900>
 8008a6e:	9b04      	ldr	r3, [sp, #16]
 8008a70:	3301      	adds	r3, #1
 8008a72:	9304      	str	r3, [sp, #16]
 8008a74:	9b05      	ldr	r3, [sp, #20]
 8008a76:	3301      	adds	r3, #1
 8008a78:	9305      	str	r3, [sp, #20]
 8008a7a:	f04f 0801 	mov.w	r8, #1
 8008a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f47f af6a 	bne.w	800895a <_dtoa_r+0x7ca>
 8008a86:	2001      	movs	r0, #1
 8008a88:	e76f      	b.n	800896a <_dtoa_r+0x7da>
 8008a8a:	f04f 0800 	mov.w	r8, #0
 8008a8e:	e7f6      	b.n	8008a7e <_dtoa_r+0x8ee>
 8008a90:	4698      	mov	r8, r3
 8008a92:	e7f4      	b.n	8008a7e <_dtoa_r+0x8ee>
 8008a94:	f43f af7d 	beq.w	8008992 <_dtoa_r+0x802>
 8008a98:	4618      	mov	r0, r3
 8008a9a:	301c      	adds	r0, #28
 8008a9c:	e772      	b.n	8008984 <_dtoa_r+0x7f4>
 8008a9e:	9b03      	ldr	r3, [sp, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	dc37      	bgt.n	8008b14 <_dtoa_r+0x984>
 8008aa4:	9b06      	ldr	r3, [sp, #24]
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	dd34      	ble.n	8008b14 <_dtoa_r+0x984>
 8008aaa:	9b03      	ldr	r3, [sp, #12]
 8008aac:	9302      	str	r3, [sp, #8]
 8008aae:	9b02      	ldr	r3, [sp, #8]
 8008ab0:	b96b      	cbnz	r3, 8008ace <_dtoa_r+0x93e>
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	2205      	movs	r2, #5
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f000 ff8a 	bl	80099d0 <__multadd>
 8008abc:	4601      	mov	r1, r0
 8008abe:	4606      	mov	r6, r0
 8008ac0:	ee18 0a10 	vmov	r0, s16
 8008ac4:	f001 f9ee 	bl	8009ea4 <__mcmp>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	f73f adbb 	bgt.w	8008644 <_dtoa_r+0x4b4>
 8008ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad0:	9d01      	ldr	r5, [sp, #4]
 8008ad2:	43db      	mvns	r3, r3
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	f04f 0800 	mov.w	r8, #0
 8008ada:	4631      	mov	r1, r6
 8008adc:	4620      	mov	r0, r4
 8008ade:	f000 ff55 	bl	800998c <_Bfree>
 8008ae2:	2f00      	cmp	r7, #0
 8008ae4:	f43f aea4 	beq.w	8008830 <_dtoa_r+0x6a0>
 8008ae8:	f1b8 0f00 	cmp.w	r8, #0
 8008aec:	d005      	beq.n	8008afa <_dtoa_r+0x96a>
 8008aee:	45b8      	cmp	r8, r7
 8008af0:	d003      	beq.n	8008afa <_dtoa_r+0x96a>
 8008af2:	4641      	mov	r1, r8
 8008af4:	4620      	mov	r0, r4
 8008af6:	f000 ff49 	bl	800998c <_Bfree>
 8008afa:	4639      	mov	r1, r7
 8008afc:	4620      	mov	r0, r4
 8008afe:	f000 ff45 	bl	800998c <_Bfree>
 8008b02:	e695      	b.n	8008830 <_dtoa_r+0x6a0>
 8008b04:	2600      	movs	r6, #0
 8008b06:	4637      	mov	r7, r6
 8008b08:	e7e1      	b.n	8008ace <_dtoa_r+0x93e>
 8008b0a:	9700      	str	r7, [sp, #0]
 8008b0c:	4637      	mov	r7, r6
 8008b0e:	e599      	b.n	8008644 <_dtoa_r+0x4b4>
 8008b10:	40240000 	.word	0x40240000
 8008b14:	9b08      	ldr	r3, [sp, #32]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 80ca 	beq.w	8008cb0 <_dtoa_r+0xb20>
 8008b1c:	9b03      	ldr	r3, [sp, #12]
 8008b1e:	9302      	str	r3, [sp, #8]
 8008b20:	2d00      	cmp	r5, #0
 8008b22:	dd05      	ble.n	8008b30 <_dtoa_r+0x9a0>
 8008b24:	4639      	mov	r1, r7
 8008b26:	462a      	mov	r2, r5
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f001 f94b 	bl	8009dc4 <__lshift>
 8008b2e:	4607      	mov	r7, r0
 8008b30:	f1b8 0f00 	cmp.w	r8, #0
 8008b34:	d05b      	beq.n	8008bee <_dtoa_r+0xa5e>
 8008b36:	6879      	ldr	r1, [r7, #4]
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 fee7 	bl	800990c <_Balloc>
 8008b3e:	4605      	mov	r5, r0
 8008b40:	b928      	cbnz	r0, 8008b4e <_dtoa_r+0x9be>
 8008b42:	4b87      	ldr	r3, [pc, #540]	; (8008d60 <_dtoa_r+0xbd0>)
 8008b44:	4602      	mov	r2, r0
 8008b46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b4a:	f7ff bb3b 	b.w	80081c4 <_dtoa_r+0x34>
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	3202      	adds	r2, #2
 8008b52:	0092      	lsls	r2, r2, #2
 8008b54:	f107 010c 	add.w	r1, r7, #12
 8008b58:	300c      	adds	r0, #12
 8008b5a:	f000 febd 	bl	80098d8 <memcpy>
 8008b5e:	2201      	movs	r2, #1
 8008b60:	4629      	mov	r1, r5
 8008b62:	4620      	mov	r0, r4
 8008b64:	f001 f92e 	bl	8009dc4 <__lshift>
 8008b68:	9b01      	ldr	r3, [sp, #4]
 8008b6a:	f103 0901 	add.w	r9, r3, #1
 8008b6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008b72:	4413      	add	r3, r2
 8008b74:	9305      	str	r3, [sp, #20]
 8008b76:	f00a 0301 	and.w	r3, sl, #1
 8008b7a:	46b8      	mov	r8, r7
 8008b7c:	9304      	str	r3, [sp, #16]
 8008b7e:	4607      	mov	r7, r0
 8008b80:	4631      	mov	r1, r6
 8008b82:	ee18 0a10 	vmov	r0, s16
 8008b86:	f7ff fa77 	bl	8008078 <quorem>
 8008b8a:	4641      	mov	r1, r8
 8008b8c:	9002      	str	r0, [sp, #8]
 8008b8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b92:	ee18 0a10 	vmov	r0, s16
 8008b96:	f001 f985 	bl	8009ea4 <__mcmp>
 8008b9a:	463a      	mov	r2, r7
 8008b9c:	9003      	str	r0, [sp, #12]
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f001 f99b 	bl	8009edc <__mdiff>
 8008ba6:	68c2      	ldr	r2, [r0, #12]
 8008ba8:	f109 3bff 	add.w	fp, r9, #4294967295
 8008bac:	4605      	mov	r5, r0
 8008bae:	bb02      	cbnz	r2, 8008bf2 <_dtoa_r+0xa62>
 8008bb0:	4601      	mov	r1, r0
 8008bb2:	ee18 0a10 	vmov	r0, s16
 8008bb6:	f001 f975 	bl	8009ea4 <__mcmp>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	9207      	str	r2, [sp, #28]
 8008bc2:	f000 fee3 	bl	800998c <_Bfree>
 8008bc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008bca:	ea43 0102 	orr.w	r1, r3, r2
 8008bce:	9b04      	ldr	r3, [sp, #16]
 8008bd0:	430b      	orrs	r3, r1
 8008bd2:	464d      	mov	r5, r9
 8008bd4:	d10f      	bne.n	8008bf6 <_dtoa_r+0xa66>
 8008bd6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bda:	d02a      	beq.n	8008c32 <_dtoa_r+0xaa2>
 8008bdc:	9b03      	ldr	r3, [sp, #12]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	dd02      	ble.n	8008be8 <_dtoa_r+0xa58>
 8008be2:	9b02      	ldr	r3, [sp, #8]
 8008be4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008be8:	f88b a000 	strb.w	sl, [fp]
 8008bec:	e775      	b.n	8008ada <_dtoa_r+0x94a>
 8008bee:	4638      	mov	r0, r7
 8008bf0:	e7ba      	b.n	8008b68 <_dtoa_r+0x9d8>
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	e7e2      	b.n	8008bbc <_dtoa_r+0xa2c>
 8008bf6:	9b03      	ldr	r3, [sp, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	db04      	blt.n	8008c06 <_dtoa_r+0xa76>
 8008bfc:	9906      	ldr	r1, [sp, #24]
 8008bfe:	430b      	orrs	r3, r1
 8008c00:	9904      	ldr	r1, [sp, #16]
 8008c02:	430b      	orrs	r3, r1
 8008c04:	d122      	bne.n	8008c4c <_dtoa_r+0xabc>
 8008c06:	2a00      	cmp	r2, #0
 8008c08:	ddee      	ble.n	8008be8 <_dtoa_r+0xa58>
 8008c0a:	ee18 1a10 	vmov	r1, s16
 8008c0e:	2201      	movs	r2, #1
 8008c10:	4620      	mov	r0, r4
 8008c12:	f001 f8d7 	bl	8009dc4 <__lshift>
 8008c16:	4631      	mov	r1, r6
 8008c18:	ee08 0a10 	vmov	s16, r0
 8008c1c:	f001 f942 	bl	8009ea4 <__mcmp>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	dc03      	bgt.n	8008c2c <_dtoa_r+0xa9c>
 8008c24:	d1e0      	bne.n	8008be8 <_dtoa_r+0xa58>
 8008c26:	f01a 0f01 	tst.w	sl, #1
 8008c2a:	d0dd      	beq.n	8008be8 <_dtoa_r+0xa58>
 8008c2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c30:	d1d7      	bne.n	8008be2 <_dtoa_r+0xa52>
 8008c32:	2339      	movs	r3, #57	; 0x39
 8008c34:	f88b 3000 	strb.w	r3, [fp]
 8008c38:	462b      	mov	r3, r5
 8008c3a:	461d      	mov	r5, r3
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c42:	2a39      	cmp	r2, #57	; 0x39
 8008c44:	d071      	beq.n	8008d2a <_dtoa_r+0xb9a>
 8008c46:	3201      	adds	r2, #1
 8008c48:	701a      	strb	r2, [r3, #0]
 8008c4a:	e746      	b.n	8008ada <_dtoa_r+0x94a>
 8008c4c:	2a00      	cmp	r2, #0
 8008c4e:	dd07      	ble.n	8008c60 <_dtoa_r+0xad0>
 8008c50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c54:	d0ed      	beq.n	8008c32 <_dtoa_r+0xaa2>
 8008c56:	f10a 0301 	add.w	r3, sl, #1
 8008c5a:	f88b 3000 	strb.w	r3, [fp]
 8008c5e:	e73c      	b.n	8008ada <_dtoa_r+0x94a>
 8008c60:	9b05      	ldr	r3, [sp, #20]
 8008c62:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008c66:	4599      	cmp	r9, r3
 8008c68:	d047      	beq.n	8008cfa <_dtoa_r+0xb6a>
 8008c6a:	ee18 1a10 	vmov	r1, s16
 8008c6e:	2300      	movs	r3, #0
 8008c70:	220a      	movs	r2, #10
 8008c72:	4620      	mov	r0, r4
 8008c74:	f000 feac 	bl	80099d0 <__multadd>
 8008c78:	45b8      	cmp	r8, r7
 8008c7a:	ee08 0a10 	vmov	s16, r0
 8008c7e:	f04f 0300 	mov.w	r3, #0
 8008c82:	f04f 020a 	mov.w	r2, #10
 8008c86:	4641      	mov	r1, r8
 8008c88:	4620      	mov	r0, r4
 8008c8a:	d106      	bne.n	8008c9a <_dtoa_r+0xb0a>
 8008c8c:	f000 fea0 	bl	80099d0 <__multadd>
 8008c90:	4680      	mov	r8, r0
 8008c92:	4607      	mov	r7, r0
 8008c94:	f109 0901 	add.w	r9, r9, #1
 8008c98:	e772      	b.n	8008b80 <_dtoa_r+0x9f0>
 8008c9a:	f000 fe99 	bl	80099d0 <__multadd>
 8008c9e:	4639      	mov	r1, r7
 8008ca0:	4680      	mov	r8, r0
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	220a      	movs	r2, #10
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f000 fe92 	bl	80099d0 <__multadd>
 8008cac:	4607      	mov	r7, r0
 8008cae:	e7f1      	b.n	8008c94 <_dtoa_r+0xb04>
 8008cb0:	9b03      	ldr	r3, [sp, #12]
 8008cb2:	9302      	str	r3, [sp, #8]
 8008cb4:	9d01      	ldr	r5, [sp, #4]
 8008cb6:	ee18 0a10 	vmov	r0, s16
 8008cba:	4631      	mov	r1, r6
 8008cbc:	f7ff f9dc 	bl	8008078 <quorem>
 8008cc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008cc4:	9b01      	ldr	r3, [sp, #4]
 8008cc6:	f805 ab01 	strb.w	sl, [r5], #1
 8008cca:	1aea      	subs	r2, r5, r3
 8008ccc:	9b02      	ldr	r3, [sp, #8]
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	dd09      	ble.n	8008ce6 <_dtoa_r+0xb56>
 8008cd2:	ee18 1a10 	vmov	r1, s16
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	220a      	movs	r2, #10
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f000 fe78 	bl	80099d0 <__multadd>
 8008ce0:	ee08 0a10 	vmov	s16, r0
 8008ce4:	e7e7      	b.n	8008cb6 <_dtoa_r+0xb26>
 8008ce6:	9b02      	ldr	r3, [sp, #8]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	bfc8      	it	gt
 8008cec:	461d      	movgt	r5, r3
 8008cee:	9b01      	ldr	r3, [sp, #4]
 8008cf0:	bfd8      	it	le
 8008cf2:	2501      	movle	r5, #1
 8008cf4:	441d      	add	r5, r3
 8008cf6:	f04f 0800 	mov.w	r8, #0
 8008cfa:	ee18 1a10 	vmov	r1, s16
 8008cfe:	2201      	movs	r2, #1
 8008d00:	4620      	mov	r0, r4
 8008d02:	f001 f85f 	bl	8009dc4 <__lshift>
 8008d06:	4631      	mov	r1, r6
 8008d08:	ee08 0a10 	vmov	s16, r0
 8008d0c:	f001 f8ca 	bl	8009ea4 <__mcmp>
 8008d10:	2800      	cmp	r0, #0
 8008d12:	dc91      	bgt.n	8008c38 <_dtoa_r+0xaa8>
 8008d14:	d102      	bne.n	8008d1c <_dtoa_r+0xb8c>
 8008d16:	f01a 0f01 	tst.w	sl, #1
 8008d1a:	d18d      	bne.n	8008c38 <_dtoa_r+0xaa8>
 8008d1c:	462b      	mov	r3, r5
 8008d1e:	461d      	mov	r5, r3
 8008d20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d24:	2a30      	cmp	r2, #48	; 0x30
 8008d26:	d0fa      	beq.n	8008d1e <_dtoa_r+0xb8e>
 8008d28:	e6d7      	b.n	8008ada <_dtoa_r+0x94a>
 8008d2a:	9a01      	ldr	r2, [sp, #4]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d184      	bne.n	8008c3a <_dtoa_r+0xaaa>
 8008d30:	9b00      	ldr	r3, [sp, #0]
 8008d32:	3301      	adds	r3, #1
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	2331      	movs	r3, #49	; 0x31
 8008d38:	7013      	strb	r3, [r2, #0]
 8008d3a:	e6ce      	b.n	8008ada <_dtoa_r+0x94a>
 8008d3c:	4b09      	ldr	r3, [pc, #36]	; (8008d64 <_dtoa_r+0xbd4>)
 8008d3e:	f7ff ba95 	b.w	800826c <_dtoa_r+0xdc>
 8008d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f47f aa6e 	bne.w	8008226 <_dtoa_r+0x96>
 8008d4a:	4b07      	ldr	r3, [pc, #28]	; (8008d68 <_dtoa_r+0xbd8>)
 8008d4c:	f7ff ba8e 	b.w	800826c <_dtoa_r+0xdc>
 8008d50:	9b02      	ldr	r3, [sp, #8]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	dcae      	bgt.n	8008cb4 <_dtoa_r+0xb24>
 8008d56:	9b06      	ldr	r3, [sp, #24]
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	f73f aea8 	bgt.w	8008aae <_dtoa_r+0x91e>
 8008d5e:	e7a9      	b.n	8008cb4 <_dtoa_r+0xb24>
 8008d60:	0800b078 	.word	0x0800b078
 8008d64:	0800aeec 	.word	0x0800aeec
 8008d68:	0800b010 	.word	0x0800b010

08008d6c <__sflush_r>:
 8008d6c:	898a      	ldrh	r2, [r1, #12]
 8008d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d72:	4605      	mov	r5, r0
 8008d74:	0710      	lsls	r0, r2, #28
 8008d76:	460c      	mov	r4, r1
 8008d78:	d458      	bmi.n	8008e2c <__sflush_r+0xc0>
 8008d7a:	684b      	ldr	r3, [r1, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	dc05      	bgt.n	8008d8c <__sflush_r+0x20>
 8008d80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	dc02      	bgt.n	8008d8c <__sflush_r+0x20>
 8008d86:	2000      	movs	r0, #0
 8008d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d8e:	2e00      	cmp	r6, #0
 8008d90:	d0f9      	beq.n	8008d86 <__sflush_r+0x1a>
 8008d92:	2300      	movs	r3, #0
 8008d94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d98:	682f      	ldr	r7, [r5, #0]
 8008d9a:	602b      	str	r3, [r5, #0]
 8008d9c:	d032      	beq.n	8008e04 <__sflush_r+0x98>
 8008d9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008da0:	89a3      	ldrh	r3, [r4, #12]
 8008da2:	075a      	lsls	r2, r3, #29
 8008da4:	d505      	bpl.n	8008db2 <__sflush_r+0x46>
 8008da6:	6863      	ldr	r3, [r4, #4]
 8008da8:	1ac0      	subs	r0, r0, r3
 8008daa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dac:	b10b      	cbz	r3, 8008db2 <__sflush_r+0x46>
 8008dae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008db0:	1ac0      	subs	r0, r0, r3
 8008db2:	2300      	movs	r3, #0
 8008db4:	4602      	mov	r2, r0
 8008db6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008db8:	6a21      	ldr	r1, [r4, #32]
 8008dba:	4628      	mov	r0, r5
 8008dbc:	47b0      	blx	r6
 8008dbe:	1c43      	adds	r3, r0, #1
 8008dc0:	89a3      	ldrh	r3, [r4, #12]
 8008dc2:	d106      	bne.n	8008dd2 <__sflush_r+0x66>
 8008dc4:	6829      	ldr	r1, [r5, #0]
 8008dc6:	291d      	cmp	r1, #29
 8008dc8:	d82c      	bhi.n	8008e24 <__sflush_r+0xb8>
 8008dca:	4a2a      	ldr	r2, [pc, #168]	; (8008e74 <__sflush_r+0x108>)
 8008dcc:	40ca      	lsrs	r2, r1
 8008dce:	07d6      	lsls	r6, r2, #31
 8008dd0:	d528      	bpl.n	8008e24 <__sflush_r+0xb8>
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	6062      	str	r2, [r4, #4]
 8008dd6:	04d9      	lsls	r1, r3, #19
 8008dd8:	6922      	ldr	r2, [r4, #16]
 8008dda:	6022      	str	r2, [r4, #0]
 8008ddc:	d504      	bpl.n	8008de8 <__sflush_r+0x7c>
 8008dde:	1c42      	adds	r2, r0, #1
 8008de0:	d101      	bne.n	8008de6 <__sflush_r+0x7a>
 8008de2:	682b      	ldr	r3, [r5, #0]
 8008de4:	b903      	cbnz	r3, 8008de8 <__sflush_r+0x7c>
 8008de6:	6560      	str	r0, [r4, #84]	; 0x54
 8008de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dea:	602f      	str	r7, [r5, #0]
 8008dec:	2900      	cmp	r1, #0
 8008dee:	d0ca      	beq.n	8008d86 <__sflush_r+0x1a>
 8008df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008df4:	4299      	cmp	r1, r3
 8008df6:	d002      	beq.n	8008dfe <__sflush_r+0x92>
 8008df8:	4628      	mov	r0, r5
 8008dfa:	f7fd fbcf 	bl	800659c <_free_r>
 8008dfe:	2000      	movs	r0, #0
 8008e00:	6360      	str	r0, [r4, #52]	; 0x34
 8008e02:	e7c1      	b.n	8008d88 <__sflush_r+0x1c>
 8008e04:	6a21      	ldr	r1, [r4, #32]
 8008e06:	2301      	movs	r3, #1
 8008e08:	4628      	mov	r0, r5
 8008e0a:	47b0      	blx	r6
 8008e0c:	1c41      	adds	r1, r0, #1
 8008e0e:	d1c7      	bne.n	8008da0 <__sflush_r+0x34>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d0c4      	beq.n	8008da0 <__sflush_r+0x34>
 8008e16:	2b1d      	cmp	r3, #29
 8008e18:	d001      	beq.n	8008e1e <__sflush_r+0xb2>
 8008e1a:	2b16      	cmp	r3, #22
 8008e1c:	d101      	bne.n	8008e22 <__sflush_r+0xb6>
 8008e1e:	602f      	str	r7, [r5, #0]
 8008e20:	e7b1      	b.n	8008d86 <__sflush_r+0x1a>
 8008e22:	89a3      	ldrh	r3, [r4, #12]
 8008e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e28:	81a3      	strh	r3, [r4, #12]
 8008e2a:	e7ad      	b.n	8008d88 <__sflush_r+0x1c>
 8008e2c:	690f      	ldr	r7, [r1, #16]
 8008e2e:	2f00      	cmp	r7, #0
 8008e30:	d0a9      	beq.n	8008d86 <__sflush_r+0x1a>
 8008e32:	0793      	lsls	r3, r2, #30
 8008e34:	680e      	ldr	r6, [r1, #0]
 8008e36:	bf08      	it	eq
 8008e38:	694b      	ldreq	r3, [r1, #20]
 8008e3a:	600f      	str	r7, [r1, #0]
 8008e3c:	bf18      	it	ne
 8008e3e:	2300      	movne	r3, #0
 8008e40:	eba6 0807 	sub.w	r8, r6, r7
 8008e44:	608b      	str	r3, [r1, #8]
 8008e46:	f1b8 0f00 	cmp.w	r8, #0
 8008e4a:	dd9c      	ble.n	8008d86 <__sflush_r+0x1a>
 8008e4c:	6a21      	ldr	r1, [r4, #32]
 8008e4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e50:	4643      	mov	r3, r8
 8008e52:	463a      	mov	r2, r7
 8008e54:	4628      	mov	r0, r5
 8008e56:	47b0      	blx	r6
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	dc06      	bgt.n	8008e6a <__sflush_r+0xfe>
 8008e5c:	89a3      	ldrh	r3, [r4, #12]
 8008e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e62:	81a3      	strh	r3, [r4, #12]
 8008e64:	f04f 30ff 	mov.w	r0, #4294967295
 8008e68:	e78e      	b.n	8008d88 <__sflush_r+0x1c>
 8008e6a:	4407      	add	r7, r0
 8008e6c:	eba8 0800 	sub.w	r8, r8, r0
 8008e70:	e7e9      	b.n	8008e46 <__sflush_r+0xda>
 8008e72:	bf00      	nop
 8008e74:	20400001 	.word	0x20400001

08008e78 <_fflush_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	690b      	ldr	r3, [r1, #16]
 8008e7c:	4605      	mov	r5, r0
 8008e7e:	460c      	mov	r4, r1
 8008e80:	b913      	cbnz	r3, 8008e88 <_fflush_r+0x10>
 8008e82:	2500      	movs	r5, #0
 8008e84:	4628      	mov	r0, r5
 8008e86:	bd38      	pop	{r3, r4, r5, pc}
 8008e88:	b118      	cbz	r0, 8008e92 <_fflush_r+0x1a>
 8008e8a:	6983      	ldr	r3, [r0, #24]
 8008e8c:	b90b      	cbnz	r3, 8008e92 <_fflush_r+0x1a>
 8008e8e:	f000 f887 	bl	8008fa0 <__sinit>
 8008e92:	4b14      	ldr	r3, [pc, #80]	; (8008ee4 <_fflush_r+0x6c>)
 8008e94:	429c      	cmp	r4, r3
 8008e96:	d11b      	bne.n	8008ed0 <_fflush_r+0x58>
 8008e98:	686c      	ldr	r4, [r5, #4]
 8008e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d0ef      	beq.n	8008e82 <_fflush_r+0xa>
 8008ea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ea4:	07d0      	lsls	r0, r2, #31
 8008ea6:	d404      	bmi.n	8008eb2 <_fflush_r+0x3a>
 8008ea8:	0599      	lsls	r1, r3, #22
 8008eaa:	d402      	bmi.n	8008eb2 <_fflush_r+0x3a>
 8008eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eae:	f000 fc9a 	bl	80097e6 <__retarget_lock_acquire_recursive>
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	f7ff ff59 	bl	8008d6c <__sflush_r>
 8008eba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ebc:	07da      	lsls	r2, r3, #31
 8008ebe:	4605      	mov	r5, r0
 8008ec0:	d4e0      	bmi.n	8008e84 <_fflush_r+0xc>
 8008ec2:	89a3      	ldrh	r3, [r4, #12]
 8008ec4:	059b      	lsls	r3, r3, #22
 8008ec6:	d4dd      	bmi.n	8008e84 <_fflush_r+0xc>
 8008ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eca:	f000 fc8d 	bl	80097e8 <__retarget_lock_release_recursive>
 8008ece:	e7d9      	b.n	8008e84 <_fflush_r+0xc>
 8008ed0:	4b05      	ldr	r3, [pc, #20]	; (8008ee8 <_fflush_r+0x70>)
 8008ed2:	429c      	cmp	r4, r3
 8008ed4:	d101      	bne.n	8008eda <_fflush_r+0x62>
 8008ed6:	68ac      	ldr	r4, [r5, #8]
 8008ed8:	e7df      	b.n	8008e9a <_fflush_r+0x22>
 8008eda:	4b04      	ldr	r3, [pc, #16]	; (8008eec <_fflush_r+0x74>)
 8008edc:	429c      	cmp	r4, r3
 8008ede:	bf08      	it	eq
 8008ee0:	68ec      	ldreq	r4, [r5, #12]
 8008ee2:	e7da      	b.n	8008e9a <_fflush_r+0x22>
 8008ee4:	0800b0ac 	.word	0x0800b0ac
 8008ee8:	0800b0cc 	.word	0x0800b0cc
 8008eec:	0800b08c 	.word	0x0800b08c

08008ef0 <std>:
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	b510      	push	{r4, lr}
 8008ef4:	4604      	mov	r4, r0
 8008ef6:	e9c0 3300 	strd	r3, r3, [r0]
 8008efa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008efe:	6083      	str	r3, [r0, #8]
 8008f00:	8181      	strh	r1, [r0, #12]
 8008f02:	6643      	str	r3, [r0, #100]	; 0x64
 8008f04:	81c2      	strh	r2, [r0, #14]
 8008f06:	6183      	str	r3, [r0, #24]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	2208      	movs	r2, #8
 8008f0c:	305c      	adds	r0, #92	; 0x5c
 8008f0e:	f7fd fb3d 	bl	800658c <memset>
 8008f12:	4b05      	ldr	r3, [pc, #20]	; (8008f28 <std+0x38>)
 8008f14:	6263      	str	r3, [r4, #36]	; 0x24
 8008f16:	4b05      	ldr	r3, [pc, #20]	; (8008f2c <std+0x3c>)
 8008f18:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f1a:	4b05      	ldr	r3, [pc, #20]	; (8008f30 <std+0x40>)
 8008f1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f1e:	4b05      	ldr	r3, [pc, #20]	; (8008f34 <std+0x44>)
 8008f20:	6224      	str	r4, [r4, #32]
 8008f22:	6323      	str	r3, [r4, #48]	; 0x30
 8008f24:	bd10      	pop	{r4, pc}
 8008f26:	bf00      	nop
 8008f28:	0800a839 	.word	0x0800a839
 8008f2c:	0800a85b 	.word	0x0800a85b
 8008f30:	0800a893 	.word	0x0800a893
 8008f34:	0800a8b7 	.word	0x0800a8b7

08008f38 <_cleanup_r>:
 8008f38:	4901      	ldr	r1, [pc, #4]	; (8008f40 <_cleanup_r+0x8>)
 8008f3a:	f000 b8c1 	b.w	80090c0 <_fwalk_reent>
 8008f3e:	bf00      	nop
 8008f40:	08008e79 	.word	0x08008e79

08008f44 <__sfmoreglue>:
 8008f44:	b570      	push	{r4, r5, r6, lr}
 8008f46:	2268      	movs	r2, #104	; 0x68
 8008f48:	1e4d      	subs	r5, r1, #1
 8008f4a:	4355      	muls	r5, r2
 8008f4c:	460e      	mov	r6, r1
 8008f4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f52:	f7fd fb8f 	bl	8006674 <_malloc_r>
 8008f56:	4604      	mov	r4, r0
 8008f58:	b140      	cbz	r0, 8008f6c <__sfmoreglue+0x28>
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	e9c0 1600 	strd	r1, r6, [r0]
 8008f60:	300c      	adds	r0, #12
 8008f62:	60a0      	str	r0, [r4, #8]
 8008f64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f68:	f7fd fb10 	bl	800658c <memset>
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	bd70      	pop	{r4, r5, r6, pc}

08008f70 <__sfp_lock_acquire>:
 8008f70:	4801      	ldr	r0, [pc, #4]	; (8008f78 <__sfp_lock_acquire+0x8>)
 8008f72:	f000 bc38 	b.w	80097e6 <__retarget_lock_acquire_recursive>
 8008f76:	bf00      	nop
 8008f78:	20000a29 	.word	0x20000a29

08008f7c <__sfp_lock_release>:
 8008f7c:	4801      	ldr	r0, [pc, #4]	; (8008f84 <__sfp_lock_release+0x8>)
 8008f7e:	f000 bc33 	b.w	80097e8 <__retarget_lock_release_recursive>
 8008f82:	bf00      	nop
 8008f84:	20000a29 	.word	0x20000a29

08008f88 <__sinit_lock_acquire>:
 8008f88:	4801      	ldr	r0, [pc, #4]	; (8008f90 <__sinit_lock_acquire+0x8>)
 8008f8a:	f000 bc2c 	b.w	80097e6 <__retarget_lock_acquire_recursive>
 8008f8e:	bf00      	nop
 8008f90:	20000a2a 	.word	0x20000a2a

08008f94 <__sinit_lock_release>:
 8008f94:	4801      	ldr	r0, [pc, #4]	; (8008f9c <__sinit_lock_release+0x8>)
 8008f96:	f000 bc27 	b.w	80097e8 <__retarget_lock_release_recursive>
 8008f9a:	bf00      	nop
 8008f9c:	20000a2a 	.word	0x20000a2a

08008fa0 <__sinit>:
 8008fa0:	b510      	push	{r4, lr}
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	f7ff fff0 	bl	8008f88 <__sinit_lock_acquire>
 8008fa8:	69a3      	ldr	r3, [r4, #24]
 8008faa:	b11b      	cbz	r3, 8008fb4 <__sinit+0x14>
 8008fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fb0:	f7ff bff0 	b.w	8008f94 <__sinit_lock_release>
 8008fb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fb8:	6523      	str	r3, [r4, #80]	; 0x50
 8008fba:	4b13      	ldr	r3, [pc, #76]	; (8009008 <__sinit+0x68>)
 8008fbc:	4a13      	ldr	r2, [pc, #76]	; (800900c <__sinit+0x6c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fc2:	42a3      	cmp	r3, r4
 8008fc4:	bf04      	itt	eq
 8008fc6:	2301      	moveq	r3, #1
 8008fc8:	61a3      	streq	r3, [r4, #24]
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f000 f820 	bl	8009010 <__sfp>
 8008fd0:	6060      	str	r0, [r4, #4]
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	f000 f81c 	bl	8009010 <__sfp>
 8008fd8:	60a0      	str	r0, [r4, #8]
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f000 f818 	bl	8009010 <__sfp>
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	60e0      	str	r0, [r4, #12]
 8008fe4:	2104      	movs	r1, #4
 8008fe6:	6860      	ldr	r0, [r4, #4]
 8008fe8:	f7ff ff82 	bl	8008ef0 <std>
 8008fec:	68a0      	ldr	r0, [r4, #8]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	2109      	movs	r1, #9
 8008ff2:	f7ff ff7d 	bl	8008ef0 <std>
 8008ff6:	68e0      	ldr	r0, [r4, #12]
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	2112      	movs	r1, #18
 8008ffc:	f7ff ff78 	bl	8008ef0 <std>
 8009000:	2301      	movs	r3, #1
 8009002:	61a3      	str	r3, [r4, #24]
 8009004:	e7d2      	b.n	8008fac <__sinit+0xc>
 8009006:	bf00      	nop
 8009008:	0800aed8 	.word	0x0800aed8
 800900c:	08008f39 	.word	0x08008f39

08009010 <__sfp>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	4607      	mov	r7, r0
 8009014:	f7ff ffac 	bl	8008f70 <__sfp_lock_acquire>
 8009018:	4b1e      	ldr	r3, [pc, #120]	; (8009094 <__sfp+0x84>)
 800901a:	681e      	ldr	r6, [r3, #0]
 800901c:	69b3      	ldr	r3, [r6, #24]
 800901e:	b913      	cbnz	r3, 8009026 <__sfp+0x16>
 8009020:	4630      	mov	r0, r6
 8009022:	f7ff ffbd 	bl	8008fa0 <__sinit>
 8009026:	3648      	adds	r6, #72	; 0x48
 8009028:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800902c:	3b01      	subs	r3, #1
 800902e:	d503      	bpl.n	8009038 <__sfp+0x28>
 8009030:	6833      	ldr	r3, [r6, #0]
 8009032:	b30b      	cbz	r3, 8009078 <__sfp+0x68>
 8009034:	6836      	ldr	r6, [r6, #0]
 8009036:	e7f7      	b.n	8009028 <__sfp+0x18>
 8009038:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800903c:	b9d5      	cbnz	r5, 8009074 <__sfp+0x64>
 800903e:	4b16      	ldr	r3, [pc, #88]	; (8009098 <__sfp+0x88>)
 8009040:	60e3      	str	r3, [r4, #12]
 8009042:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009046:	6665      	str	r5, [r4, #100]	; 0x64
 8009048:	f000 fbcc 	bl	80097e4 <__retarget_lock_init_recursive>
 800904c:	f7ff ff96 	bl	8008f7c <__sfp_lock_release>
 8009050:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009054:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009058:	6025      	str	r5, [r4, #0]
 800905a:	61a5      	str	r5, [r4, #24]
 800905c:	2208      	movs	r2, #8
 800905e:	4629      	mov	r1, r5
 8009060:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009064:	f7fd fa92 	bl	800658c <memset>
 8009068:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800906c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009070:	4620      	mov	r0, r4
 8009072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009074:	3468      	adds	r4, #104	; 0x68
 8009076:	e7d9      	b.n	800902c <__sfp+0x1c>
 8009078:	2104      	movs	r1, #4
 800907a:	4638      	mov	r0, r7
 800907c:	f7ff ff62 	bl	8008f44 <__sfmoreglue>
 8009080:	4604      	mov	r4, r0
 8009082:	6030      	str	r0, [r6, #0]
 8009084:	2800      	cmp	r0, #0
 8009086:	d1d5      	bne.n	8009034 <__sfp+0x24>
 8009088:	f7ff ff78 	bl	8008f7c <__sfp_lock_release>
 800908c:	230c      	movs	r3, #12
 800908e:	603b      	str	r3, [r7, #0]
 8009090:	e7ee      	b.n	8009070 <__sfp+0x60>
 8009092:	bf00      	nop
 8009094:	0800aed8 	.word	0x0800aed8
 8009098:	ffff0001 	.word	0xffff0001

0800909c <fiprintf>:
 800909c:	b40e      	push	{r1, r2, r3}
 800909e:	b503      	push	{r0, r1, lr}
 80090a0:	4601      	mov	r1, r0
 80090a2:	ab03      	add	r3, sp, #12
 80090a4:	4805      	ldr	r0, [pc, #20]	; (80090bc <fiprintf+0x20>)
 80090a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80090aa:	6800      	ldr	r0, [r0, #0]
 80090ac:	9301      	str	r3, [sp, #4]
 80090ae:	f001 fa89 	bl	800a5c4 <_vfiprintf_r>
 80090b2:	b002      	add	sp, #8
 80090b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80090b8:	b003      	add	sp, #12
 80090ba:	4770      	bx	lr
 80090bc:	2000007c 	.word	0x2000007c

080090c0 <_fwalk_reent>:
 80090c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090c4:	4606      	mov	r6, r0
 80090c6:	4688      	mov	r8, r1
 80090c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80090cc:	2700      	movs	r7, #0
 80090ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090d2:	f1b9 0901 	subs.w	r9, r9, #1
 80090d6:	d505      	bpl.n	80090e4 <_fwalk_reent+0x24>
 80090d8:	6824      	ldr	r4, [r4, #0]
 80090da:	2c00      	cmp	r4, #0
 80090dc:	d1f7      	bne.n	80090ce <_fwalk_reent+0xe>
 80090de:	4638      	mov	r0, r7
 80090e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090e4:	89ab      	ldrh	r3, [r5, #12]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d907      	bls.n	80090fa <_fwalk_reent+0x3a>
 80090ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090ee:	3301      	adds	r3, #1
 80090f0:	d003      	beq.n	80090fa <_fwalk_reent+0x3a>
 80090f2:	4629      	mov	r1, r5
 80090f4:	4630      	mov	r0, r6
 80090f6:	47c0      	blx	r8
 80090f8:	4307      	orrs	r7, r0
 80090fa:	3568      	adds	r5, #104	; 0x68
 80090fc:	e7e9      	b.n	80090d2 <_fwalk_reent+0x12>

080090fe <rshift>:
 80090fe:	6903      	ldr	r3, [r0, #16]
 8009100:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009108:	ea4f 1261 	mov.w	r2, r1, asr #5
 800910c:	f100 0414 	add.w	r4, r0, #20
 8009110:	dd45      	ble.n	800919e <rshift+0xa0>
 8009112:	f011 011f 	ands.w	r1, r1, #31
 8009116:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800911a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800911e:	d10c      	bne.n	800913a <rshift+0x3c>
 8009120:	f100 0710 	add.w	r7, r0, #16
 8009124:	4629      	mov	r1, r5
 8009126:	42b1      	cmp	r1, r6
 8009128:	d334      	bcc.n	8009194 <rshift+0x96>
 800912a:	1a9b      	subs	r3, r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	1eea      	subs	r2, r5, #3
 8009130:	4296      	cmp	r6, r2
 8009132:	bf38      	it	cc
 8009134:	2300      	movcc	r3, #0
 8009136:	4423      	add	r3, r4
 8009138:	e015      	b.n	8009166 <rshift+0x68>
 800913a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800913e:	f1c1 0820 	rsb	r8, r1, #32
 8009142:	40cf      	lsrs	r7, r1
 8009144:	f105 0e04 	add.w	lr, r5, #4
 8009148:	46a1      	mov	r9, r4
 800914a:	4576      	cmp	r6, lr
 800914c:	46f4      	mov	ip, lr
 800914e:	d815      	bhi.n	800917c <rshift+0x7e>
 8009150:	1a9a      	subs	r2, r3, r2
 8009152:	0092      	lsls	r2, r2, #2
 8009154:	3a04      	subs	r2, #4
 8009156:	3501      	adds	r5, #1
 8009158:	42ae      	cmp	r6, r5
 800915a:	bf38      	it	cc
 800915c:	2200      	movcc	r2, #0
 800915e:	18a3      	adds	r3, r4, r2
 8009160:	50a7      	str	r7, [r4, r2]
 8009162:	b107      	cbz	r7, 8009166 <rshift+0x68>
 8009164:	3304      	adds	r3, #4
 8009166:	1b1a      	subs	r2, r3, r4
 8009168:	42a3      	cmp	r3, r4
 800916a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800916e:	bf08      	it	eq
 8009170:	2300      	moveq	r3, #0
 8009172:	6102      	str	r2, [r0, #16]
 8009174:	bf08      	it	eq
 8009176:	6143      	streq	r3, [r0, #20]
 8009178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800917c:	f8dc c000 	ldr.w	ip, [ip]
 8009180:	fa0c fc08 	lsl.w	ip, ip, r8
 8009184:	ea4c 0707 	orr.w	r7, ip, r7
 8009188:	f849 7b04 	str.w	r7, [r9], #4
 800918c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009190:	40cf      	lsrs	r7, r1
 8009192:	e7da      	b.n	800914a <rshift+0x4c>
 8009194:	f851 cb04 	ldr.w	ip, [r1], #4
 8009198:	f847 cf04 	str.w	ip, [r7, #4]!
 800919c:	e7c3      	b.n	8009126 <rshift+0x28>
 800919e:	4623      	mov	r3, r4
 80091a0:	e7e1      	b.n	8009166 <rshift+0x68>

080091a2 <__hexdig_fun>:
 80091a2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80091a6:	2b09      	cmp	r3, #9
 80091a8:	d802      	bhi.n	80091b0 <__hexdig_fun+0xe>
 80091aa:	3820      	subs	r0, #32
 80091ac:	b2c0      	uxtb	r0, r0
 80091ae:	4770      	bx	lr
 80091b0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80091b4:	2b05      	cmp	r3, #5
 80091b6:	d801      	bhi.n	80091bc <__hexdig_fun+0x1a>
 80091b8:	3847      	subs	r0, #71	; 0x47
 80091ba:	e7f7      	b.n	80091ac <__hexdig_fun+0xa>
 80091bc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80091c0:	2b05      	cmp	r3, #5
 80091c2:	d801      	bhi.n	80091c8 <__hexdig_fun+0x26>
 80091c4:	3827      	subs	r0, #39	; 0x27
 80091c6:	e7f1      	b.n	80091ac <__hexdig_fun+0xa>
 80091c8:	2000      	movs	r0, #0
 80091ca:	4770      	bx	lr

080091cc <__gethex>:
 80091cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d0:	ed2d 8b02 	vpush	{d8}
 80091d4:	b089      	sub	sp, #36	; 0x24
 80091d6:	ee08 0a10 	vmov	s16, r0
 80091da:	9304      	str	r3, [sp, #16]
 80091dc:	4bb4      	ldr	r3, [pc, #720]	; (80094b0 <__gethex+0x2e4>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	9301      	str	r3, [sp, #4]
 80091e2:	4618      	mov	r0, r3
 80091e4:	468b      	mov	fp, r1
 80091e6:	4690      	mov	r8, r2
 80091e8:	f7f7 f81c 	bl	8000224 <strlen>
 80091ec:	9b01      	ldr	r3, [sp, #4]
 80091ee:	f8db 2000 	ldr.w	r2, [fp]
 80091f2:	4403      	add	r3, r0
 80091f4:	4682      	mov	sl, r0
 80091f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80091fa:	9305      	str	r3, [sp, #20]
 80091fc:	1c93      	adds	r3, r2, #2
 80091fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009202:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009206:	32fe      	adds	r2, #254	; 0xfe
 8009208:	18d1      	adds	r1, r2, r3
 800920a:	461f      	mov	r7, r3
 800920c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009210:	9100      	str	r1, [sp, #0]
 8009212:	2830      	cmp	r0, #48	; 0x30
 8009214:	d0f8      	beq.n	8009208 <__gethex+0x3c>
 8009216:	f7ff ffc4 	bl	80091a2 <__hexdig_fun>
 800921a:	4604      	mov	r4, r0
 800921c:	2800      	cmp	r0, #0
 800921e:	d13a      	bne.n	8009296 <__gethex+0xca>
 8009220:	9901      	ldr	r1, [sp, #4]
 8009222:	4652      	mov	r2, sl
 8009224:	4638      	mov	r0, r7
 8009226:	f001 fb4a 	bl	800a8be <strncmp>
 800922a:	4605      	mov	r5, r0
 800922c:	2800      	cmp	r0, #0
 800922e:	d168      	bne.n	8009302 <__gethex+0x136>
 8009230:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009234:	eb07 060a 	add.w	r6, r7, sl
 8009238:	f7ff ffb3 	bl	80091a2 <__hexdig_fun>
 800923c:	2800      	cmp	r0, #0
 800923e:	d062      	beq.n	8009306 <__gethex+0x13a>
 8009240:	4633      	mov	r3, r6
 8009242:	7818      	ldrb	r0, [r3, #0]
 8009244:	2830      	cmp	r0, #48	; 0x30
 8009246:	461f      	mov	r7, r3
 8009248:	f103 0301 	add.w	r3, r3, #1
 800924c:	d0f9      	beq.n	8009242 <__gethex+0x76>
 800924e:	f7ff ffa8 	bl	80091a2 <__hexdig_fun>
 8009252:	2301      	movs	r3, #1
 8009254:	fab0 f480 	clz	r4, r0
 8009258:	0964      	lsrs	r4, r4, #5
 800925a:	4635      	mov	r5, r6
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	463a      	mov	r2, r7
 8009260:	4616      	mov	r6, r2
 8009262:	3201      	adds	r2, #1
 8009264:	7830      	ldrb	r0, [r6, #0]
 8009266:	f7ff ff9c 	bl	80091a2 <__hexdig_fun>
 800926a:	2800      	cmp	r0, #0
 800926c:	d1f8      	bne.n	8009260 <__gethex+0x94>
 800926e:	9901      	ldr	r1, [sp, #4]
 8009270:	4652      	mov	r2, sl
 8009272:	4630      	mov	r0, r6
 8009274:	f001 fb23 	bl	800a8be <strncmp>
 8009278:	b980      	cbnz	r0, 800929c <__gethex+0xd0>
 800927a:	b94d      	cbnz	r5, 8009290 <__gethex+0xc4>
 800927c:	eb06 050a 	add.w	r5, r6, sl
 8009280:	462a      	mov	r2, r5
 8009282:	4616      	mov	r6, r2
 8009284:	3201      	adds	r2, #1
 8009286:	7830      	ldrb	r0, [r6, #0]
 8009288:	f7ff ff8b 	bl	80091a2 <__hexdig_fun>
 800928c:	2800      	cmp	r0, #0
 800928e:	d1f8      	bne.n	8009282 <__gethex+0xb6>
 8009290:	1bad      	subs	r5, r5, r6
 8009292:	00ad      	lsls	r5, r5, #2
 8009294:	e004      	b.n	80092a0 <__gethex+0xd4>
 8009296:	2400      	movs	r4, #0
 8009298:	4625      	mov	r5, r4
 800929a:	e7e0      	b.n	800925e <__gethex+0x92>
 800929c:	2d00      	cmp	r5, #0
 800929e:	d1f7      	bne.n	8009290 <__gethex+0xc4>
 80092a0:	7833      	ldrb	r3, [r6, #0]
 80092a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80092a6:	2b50      	cmp	r3, #80	; 0x50
 80092a8:	d13b      	bne.n	8009322 <__gethex+0x156>
 80092aa:	7873      	ldrb	r3, [r6, #1]
 80092ac:	2b2b      	cmp	r3, #43	; 0x2b
 80092ae:	d02c      	beq.n	800930a <__gethex+0x13e>
 80092b0:	2b2d      	cmp	r3, #45	; 0x2d
 80092b2:	d02e      	beq.n	8009312 <__gethex+0x146>
 80092b4:	1c71      	adds	r1, r6, #1
 80092b6:	f04f 0900 	mov.w	r9, #0
 80092ba:	7808      	ldrb	r0, [r1, #0]
 80092bc:	f7ff ff71 	bl	80091a2 <__hexdig_fun>
 80092c0:	1e43      	subs	r3, r0, #1
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b18      	cmp	r3, #24
 80092c6:	d82c      	bhi.n	8009322 <__gethex+0x156>
 80092c8:	f1a0 0210 	sub.w	r2, r0, #16
 80092cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80092d0:	f7ff ff67 	bl	80091a2 <__hexdig_fun>
 80092d4:	1e43      	subs	r3, r0, #1
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b18      	cmp	r3, #24
 80092da:	d91d      	bls.n	8009318 <__gethex+0x14c>
 80092dc:	f1b9 0f00 	cmp.w	r9, #0
 80092e0:	d000      	beq.n	80092e4 <__gethex+0x118>
 80092e2:	4252      	negs	r2, r2
 80092e4:	4415      	add	r5, r2
 80092e6:	f8cb 1000 	str.w	r1, [fp]
 80092ea:	b1e4      	cbz	r4, 8009326 <__gethex+0x15a>
 80092ec:	9b00      	ldr	r3, [sp, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	bf14      	ite	ne
 80092f2:	2700      	movne	r7, #0
 80092f4:	2706      	moveq	r7, #6
 80092f6:	4638      	mov	r0, r7
 80092f8:	b009      	add	sp, #36	; 0x24
 80092fa:	ecbd 8b02 	vpop	{d8}
 80092fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009302:	463e      	mov	r6, r7
 8009304:	4625      	mov	r5, r4
 8009306:	2401      	movs	r4, #1
 8009308:	e7ca      	b.n	80092a0 <__gethex+0xd4>
 800930a:	f04f 0900 	mov.w	r9, #0
 800930e:	1cb1      	adds	r1, r6, #2
 8009310:	e7d3      	b.n	80092ba <__gethex+0xee>
 8009312:	f04f 0901 	mov.w	r9, #1
 8009316:	e7fa      	b.n	800930e <__gethex+0x142>
 8009318:	230a      	movs	r3, #10
 800931a:	fb03 0202 	mla	r2, r3, r2, r0
 800931e:	3a10      	subs	r2, #16
 8009320:	e7d4      	b.n	80092cc <__gethex+0x100>
 8009322:	4631      	mov	r1, r6
 8009324:	e7df      	b.n	80092e6 <__gethex+0x11a>
 8009326:	1bf3      	subs	r3, r6, r7
 8009328:	3b01      	subs	r3, #1
 800932a:	4621      	mov	r1, r4
 800932c:	2b07      	cmp	r3, #7
 800932e:	dc0b      	bgt.n	8009348 <__gethex+0x17c>
 8009330:	ee18 0a10 	vmov	r0, s16
 8009334:	f000 faea 	bl	800990c <_Balloc>
 8009338:	4604      	mov	r4, r0
 800933a:	b940      	cbnz	r0, 800934e <__gethex+0x182>
 800933c:	4b5d      	ldr	r3, [pc, #372]	; (80094b4 <__gethex+0x2e8>)
 800933e:	4602      	mov	r2, r0
 8009340:	21de      	movs	r1, #222	; 0xde
 8009342:	485d      	ldr	r0, [pc, #372]	; (80094b8 <__gethex+0x2ec>)
 8009344:	f7fe fe7a 	bl	800803c <__assert_func>
 8009348:	3101      	adds	r1, #1
 800934a:	105b      	asrs	r3, r3, #1
 800934c:	e7ee      	b.n	800932c <__gethex+0x160>
 800934e:	f100 0914 	add.w	r9, r0, #20
 8009352:	f04f 0b00 	mov.w	fp, #0
 8009356:	f1ca 0301 	rsb	r3, sl, #1
 800935a:	f8cd 9008 	str.w	r9, [sp, #8]
 800935e:	f8cd b000 	str.w	fp, [sp]
 8009362:	9306      	str	r3, [sp, #24]
 8009364:	42b7      	cmp	r7, r6
 8009366:	d340      	bcc.n	80093ea <__gethex+0x21e>
 8009368:	9802      	ldr	r0, [sp, #8]
 800936a:	9b00      	ldr	r3, [sp, #0]
 800936c:	f840 3b04 	str.w	r3, [r0], #4
 8009370:	eba0 0009 	sub.w	r0, r0, r9
 8009374:	1080      	asrs	r0, r0, #2
 8009376:	0146      	lsls	r6, r0, #5
 8009378:	6120      	str	r0, [r4, #16]
 800937a:	4618      	mov	r0, r3
 800937c:	f000 fbb8 	bl	8009af0 <__hi0bits>
 8009380:	1a30      	subs	r0, r6, r0
 8009382:	f8d8 6000 	ldr.w	r6, [r8]
 8009386:	42b0      	cmp	r0, r6
 8009388:	dd63      	ble.n	8009452 <__gethex+0x286>
 800938a:	1b87      	subs	r7, r0, r6
 800938c:	4639      	mov	r1, r7
 800938e:	4620      	mov	r0, r4
 8009390:	f000 ff5c 	bl	800a24c <__any_on>
 8009394:	4682      	mov	sl, r0
 8009396:	b1a8      	cbz	r0, 80093c4 <__gethex+0x1f8>
 8009398:	1e7b      	subs	r3, r7, #1
 800939a:	1159      	asrs	r1, r3, #5
 800939c:	f003 021f 	and.w	r2, r3, #31
 80093a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80093a4:	f04f 0a01 	mov.w	sl, #1
 80093a8:	fa0a f202 	lsl.w	r2, sl, r2
 80093ac:	420a      	tst	r2, r1
 80093ae:	d009      	beq.n	80093c4 <__gethex+0x1f8>
 80093b0:	4553      	cmp	r3, sl
 80093b2:	dd05      	ble.n	80093c0 <__gethex+0x1f4>
 80093b4:	1eb9      	subs	r1, r7, #2
 80093b6:	4620      	mov	r0, r4
 80093b8:	f000 ff48 	bl	800a24c <__any_on>
 80093bc:	2800      	cmp	r0, #0
 80093be:	d145      	bne.n	800944c <__gethex+0x280>
 80093c0:	f04f 0a02 	mov.w	sl, #2
 80093c4:	4639      	mov	r1, r7
 80093c6:	4620      	mov	r0, r4
 80093c8:	f7ff fe99 	bl	80090fe <rshift>
 80093cc:	443d      	add	r5, r7
 80093ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093d2:	42ab      	cmp	r3, r5
 80093d4:	da4c      	bge.n	8009470 <__gethex+0x2a4>
 80093d6:	ee18 0a10 	vmov	r0, s16
 80093da:	4621      	mov	r1, r4
 80093dc:	f000 fad6 	bl	800998c <_Bfree>
 80093e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80093e2:	2300      	movs	r3, #0
 80093e4:	6013      	str	r3, [r2, #0]
 80093e6:	27a3      	movs	r7, #163	; 0xa3
 80093e8:	e785      	b.n	80092f6 <__gethex+0x12a>
 80093ea:	1e73      	subs	r3, r6, #1
 80093ec:	9a05      	ldr	r2, [sp, #20]
 80093ee:	9303      	str	r3, [sp, #12]
 80093f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d019      	beq.n	800942c <__gethex+0x260>
 80093f8:	f1bb 0f20 	cmp.w	fp, #32
 80093fc:	d107      	bne.n	800940e <__gethex+0x242>
 80093fe:	9b02      	ldr	r3, [sp, #8]
 8009400:	9a00      	ldr	r2, [sp, #0]
 8009402:	f843 2b04 	str.w	r2, [r3], #4
 8009406:	9302      	str	r3, [sp, #8]
 8009408:	2300      	movs	r3, #0
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	469b      	mov	fp, r3
 800940e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009412:	f7ff fec6 	bl	80091a2 <__hexdig_fun>
 8009416:	9b00      	ldr	r3, [sp, #0]
 8009418:	f000 000f 	and.w	r0, r0, #15
 800941c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009420:	4303      	orrs	r3, r0
 8009422:	9300      	str	r3, [sp, #0]
 8009424:	f10b 0b04 	add.w	fp, fp, #4
 8009428:	9b03      	ldr	r3, [sp, #12]
 800942a:	e00d      	b.n	8009448 <__gethex+0x27c>
 800942c:	9b03      	ldr	r3, [sp, #12]
 800942e:	9a06      	ldr	r2, [sp, #24]
 8009430:	4413      	add	r3, r2
 8009432:	42bb      	cmp	r3, r7
 8009434:	d3e0      	bcc.n	80093f8 <__gethex+0x22c>
 8009436:	4618      	mov	r0, r3
 8009438:	9901      	ldr	r1, [sp, #4]
 800943a:	9307      	str	r3, [sp, #28]
 800943c:	4652      	mov	r2, sl
 800943e:	f001 fa3e 	bl	800a8be <strncmp>
 8009442:	9b07      	ldr	r3, [sp, #28]
 8009444:	2800      	cmp	r0, #0
 8009446:	d1d7      	bne.n	80093f8 <__gethex+0x22c>
 8009448:	461e      	mov	r6, r3
 800944a:	e78b      	b.n	8009364 <__gethex+0x198>
 800944c:	f04f 0a03 	mov.w	sl, #3
 8009450:	e7b8      	b.n	80093c4 <__gethex+0x1f8>
 8009452:	da0a      	bge.n	800946a <__gethex+0x29e>
 8009454:	1a37      	subs	r7, r6, r0
 8009456:	4621      	mov	r1, r4
 8009458:	ee18 0a10 	vmov	r0, s16
 800945c:	463a      	mov	r2, r7
 800945e:	f000 fcb1 	bl	8009dc4 <__lshift>
 8009462:	1bed      	subs	r5, r5, r7
 8009464:	4604      	mov	r4, r0
 8009466:	f100 0914 	add.w	r9, r0, #20
 800946a:	f04f 0a00 	mov.w	sl, #0
 800946e:	e7ae      	b.n	80093ce <__gethex+0x202>
 8009470:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009474:	42a8      	cmp	r0, r5
 8009476:	dd72      	ble.n	800955e <__gethex+0x392>
 8009478:	1b45      	subs	r5, r0, r5
 800947a:	42ae      	cmp	r6, r5
 800947c:	dc36      	bgt.n	80094ec <__gethex+0x320>
 800947e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009482:	2b02      	cmp	r3, #2
 8009484:	d02a      	beq.n	80094dc <__gethex+0x310>
 8009486:	2b03      	cmp	r3, #3
 8009488:	d02c      	beq.n	80094e4 <__gethex+0x318>
 800948a:	2b01      	cmp	r3, #1
 800948c:	d11c      	bne.n	80094c8 <__gethex+0x2fc>
 800948e:	42ae      	cmp	r6, r5
 8009490:	d11a      	bne.n	80094c8 <__gethex+0x2fc>
 8009492:	2e01      	cmp	r6, #1
 8009494:	d112      	bne.n	80094bc <__gethex+0x2f0>
 8009496:	9a04      	ldr	r2, [sp, #16]
 8009498:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800949c:	6013      	str	r3, [r2, #0]
 800949e:	2301      	movs	r3, #1
 80094a0:	6123      	str	r3, [r4, #16]
 80094a2:	f8c9 3000 	str.w	r3, [r9]
 80094a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094a8:	2762      	movs	r7, #98	; 0x62
 80094aa:	601c      	str	r4, [r3, #0]
 80094ac:	e723      	b.n	80092f6 <__gethex+0x12a>
 80094ae:	bf00      	nop
 80094b0:	0800b154 	.word	0x0800b154
 80094b4:	0800b078 	.word	0x0800b078
 80094b8:	0800b0ec 	.word	0x0800b0ec
 80094bc:	1e71      	subs	r1, r6, #1
 80094be:	4620      	mov	r0, r4
 80094c0:	f000 fec4 	bl	800a24c <__any_on>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d1e6      	bne.n	8009496 <__gethex+0x2ca>
 80094c8:	ee18 0a10 	vmov	r0, s16
 80094cc:	4621      	mov	r1, r4
 80094ce:	f000 fa5d 	bl	800998c <_Bfree>
 80094d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80094d4:	2300      	movs	r3, #0
 80094d6:	6013      	str	r3, [r2, #0]
 80094d8:	2750      	movs	r7, #80	; 0x50
 80094da:	e70c      	b.n	80092f6 <__gethex+0x12a>
 80094dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1f2      	bne.n	80094c8 <__gethex+0x2fc>
 80094e2:	e7d8      	b.n	8009496 <__gethex+0x2ca>
 80094e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1d5      	bne.n	8009496 <__gethex+0x2ca>
 80094ea:	e7ed      	b.n	80094c8 <__gethex+0x2fc>
 80094ec:	1e6f      	subs	r7, r5, #1
 80094ee:	f1ba 0f00 	cmp.w	sl, #0
 80094f2:	d131      	bne.n	8009558 <__gethex+0x38c>
 80094f4:	b127      	cbz	r7, 8009500 <__gethex+0x334>
 80094f6:	4639      	mov	r1, r7
 80094f8:	4620      	mov	r0, r4
 80094fa:	f000 fea7 	bl	800a24c <__any_on>
 80094fe:	4682      	mov	sl, r0
 8009500:	117b      	asrs	r3, r7, #5
 8009502:	2101      	movs	r1, #1
 8009504:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009508:	f007 071f 	and.w	r7, r7, #31
 800950c:	fa01 f707 	lsl.w	r7, r1, r7
 8009510:	421f      	tst	r7, r3
 8009512:	4629      	mov	r1, r5
 8009514:	4620      	mov	r0, r4
 8009516:	bf18      	it	ne
 8009518:	f04a 0a02 	orrne.w	sl, sl, #2
 800951c:	1b76      	subs	r6, r6, r5
 800951e:	f7ff fdee 	bl	80090fe <rshift>
 8009522:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009526:	2702      	movs	r7, #2
 8009528:	f1ba 0f00 	cmp.w	sl, #0
 800952c:	d048      	beq.n	80095c0 <__gethex+0x3f4>
 800952e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009532:	2b02      	cmp	r3, #2
 8009534:	d015      	beq.n	8009562 <__gethex+0x396>
 8009536:	2b03      	cmp	r3, #3
 8009538:	d017      	beq.n	800956a <__gethex+0x39e>
 800953a:	2b01      	cmp	r3, #1
 800953c:	d109      	bne.n	8009552 <__gethex+0x386>
 800953e:	f01a 0f02 	tst.w	sl, #2
 8009542:	d006      	beq.n	8009552 <__gethex+0x386>
 8009544:	f8d9 0000 	ldr.w	r0, [r9]
 8009548:	ea4a 0a00 	orr.w	sl, sl, r0
 800954c:	f01a 0f01 	tst.w	sl, #1
 8009550:	d10e      	bne.n	8009570 <__gethex+0x3a4>
 8009552:	f047 0710 	orr.w	r7, r7, #16
 8009556:	e033      	b.n	80095c0 <__gethex+0x3f4>
 8009558:	f04f 0a01 	mov.w	sl, #1
 800955c:	e7d0      	b.n	8009500 <__gethex+0x334>
 800955e:	2701      	movs	r7, #1
 8009560:	e7e2      	b.n	8009528 <__gethex+0x35c>
 8009562:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009564:	f1c3 0301 	rsb	r3, r3, #1
 8009568:	9315      	str	r3, [sp, #84]	; 0x54
 800956a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800956c:	2b00      	cmp	r3, #0
 800956e:	d0f0      	beq.n	8009552 <__gethex+0x386>
 8009570:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009574:	f104 0314 	add.w	r3, r4, #20
 8009578:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800957c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009580:	f04f 0c00 	mov.w	ip, #0
 8009584:	4618      	mov	r0, r3
 8009586:	f853 2b04 	ldr.w	r2, [r3], #4
 800958a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800958e:	d01c      	beq.n	80095ca <__gethex+0x3fe>
 8009590:	3201      	adds	r2, #1
 8009592:	6002      	str	r2, [r0, #0]
 8009594:	2f02      	cmp	r7, #2
 8009596:	f104 0314 	add.w	r3, r4, #20
 800959a:	d13f      	bne.n	800961c <__gethex+0x450>
 800959c:	f8d8 2000 	ldr.w	r2, [r8]
 80095a0:	3a01      	subs	r2, #1
 80095a2:	42b2      	cmp	r2, r6
 80095a4:	d10a      	bne.n	80095bc <__gethex+0x3f0>
 80095a6:	1171      	asrs	r1, r6, #5
 80095a8:	2201      	movs	r2, #1
 80095aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80095ae:	f006 061f 	and.w	r6, r6, #31
 80095b2:	fa02 f606 	lsl.w	r6, r2, r6
 80095b6:	421e      	tst	r6, r3
 80095b8:	bf18      	it	ne
 80095ba:	4617      	movne	r7, r2
 80095bc:	f047 0720 	orr.w	r7, r7, #32
 80095c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095c2:	601c      	str	r4, [r3, #0]
 80095c4:	9b04      	ldr	r3, [sp, #16]
 80095c6:	601d      	str	r5, [r3, #0]
 80095c8:	e695      	b.n	80092f6 <__gethex+0x12a>
 80095ca:	4299      	cmp	r1, r3
 80095cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80095d0:	d8d8      	bhi.n	8009584 <__gethex+0x3b8>
 80095d2:	68a3      	ldr	r3, [r4, #8]
 80095d4:	459b      	cmp	fp, r3
 80095d6:	db19      	blt.n	800960c <__gethex+0x440>
 80095d8:	6861      	ldr	r1, [r4, #4]
 80095da:	ee18 0a10 	vmov	r0, s16
 80095de:	3101      	adds	r1, #1
 80095e0:	f000 f994 	bl	800990c <_Balloc>
 80095e4:	4681      	mov	r9, r0
 80095e6:	b918      	cbnz	r0, 80095f0 <__gethex+0x424>
 80095e8:	4b1a      	ldr	r3, [pc, #104]	; (8009654 <__gethex+0x488>)
 80095ea:	4602      	mov	r2, r0
 80095ec:	2184      	movs	r1, #132	; 0x84
 80095ee:	e6a8      	b.n	8009342 <__gethex+0x176>
 80095f0:	6922      	ldr	r2, [r4, #16]
 80095f2:	3202      	adds	r2, #2
 80095f4:	f104 010c 	add.w	r1, r4, #12
 80095f8:	0092      	lsls	r2, r2, #2
 80095fa:	300c      	adds	r0, #12
 80095fc:	f000 f96c 	bl	80098d8 <memcpy>
 8009600:	4621      	mov	r1, r4
 8009602:	ee18 0a10 	vmov	r0, s16
 8009606:	f000 f9c1 	bl	800998c <_Bfree>
 800960a:	464c      	mov	r4, r9
 800960c:	6923      	ldr	r3, [r4, #16]
 800960e:	1c5a      	adds	r2, r3, #1
 8009610:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009614:	6122      	str	r2, [r4, #16]
 8009616:	2201      	movs	r2, #1
 8009618:	615a      	str	r2, [r3, #20]
 800961a:	e7bb      	b.n	8009594 <__gethex+0x3c8>
 800961c:	6922      	ldr	r2, [r4, #16]
 800961e:	455a      	cmp	r2, fp
 8009620:	dd0b      	ble.n	800963a <__gethex+0x46e>
 8009622:	2101      	movs	r1, #1
 8009624:	4620      	mov	r0, r4
 8009626:	f7ff fd6a 	bl	80090fe <rshift>
 800962a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800962e:	3501      	adds	r5, #1
 8009630:	42ab      	cmp	r3, r5
 8009632:	f6ff aed0 	blt.w	80093d6 <__gethex+0x20a>
 8009636:	2701      	movs	r7, #1
 8009638:	e7c0      	b.n	80095bc <__gethex+0x3f0>
 800963a:	f016 061f 	ands.w	r6, r6, #31
 800963e:	d0fa      	beq.n	8009636 <__gethex+0x46a>
 8009640:	4453      	add	r3, sl
 8009642:	f1c6 0620 	rsb	r6, r6, #32
 8009646:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800964a:	f000 fa51 	bl	8009af0 <__hi0bits>
 800964e:	42b0      	cmp	r0, r6
 8009650:	dbe7      	blt.n	8009622 <__gethex+0x456>
 8009652:	e7f0      	b.n	8009636 <__gethex+0x46a>
 8009654:	0800b078 	.word	0x0800b078

08009658 <L_shift>:
 8009658:	f1c2 0208 	rsb	r2, r2, #8
 800965c:	0092      	lsls	r2, r2, #2
 800965e:	b570      	push	{r4, r5, r6, lr}
 8009660:	f1c2 0620 	rsb	r6, r2, #32
 8009664:	6843      	ldr	r3, [r0, #4]
 8009666:	6804      	ldr	r4, [r0, #0]
 8009668:	fa03 f506 	lsl.w	r5, r3, r6
 800966c:	432c      	orrs	r4, r5
 800966e:	40d3      	lsrs	r3, r2
 8009670:	6004      	str	r4, [r0, #0]
 8009672:	f840 3f04 	str.w	r3, [r0, #4]!
 8009676:	4288      	cmp	r0, r1
 8009678:	d3f4      	bcc.n	8009664 <L_shift+0xc>
 800967a:	bd70      	pop	{r4, r5, r6, pc}

0800967c <__match>:
 800967c:	b530      	push	{r4, r5, lr}
 800967e:	6803      	ldr	r3, [r0, #0]
 8009680:	3301      	adds	r3, #1
 8009682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009686:	b914      	cbnz	r4, 800968e <__match+0x12>
 8009688:	6003      	str	r3, [r0, #0]
 800968a:	2001      	movs	r0, #1
 800968c:	bd30      	pop	{r4, r5, pc}
 800968e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009692:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009696:	2d19      	cmp	r5, #25
 8009698:	bf98      	it	ls
 800969a:	3220      	addls	r2, #32
 800969c:	42a2      	cmp	r2, r4
 800969e:	d0f0      	beq.n	8009682 <__match+0x6>
 80096a0:	2000      	movs	r0, #0
 80096a2:	e7f3      	b.n	800968c <__match+0x10>

080096a4 <__hexnan>:
 80096a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a8:	680b      	ldr	r3, [r1, #0]
 80096aa:	115e      	asrs	r6, r3, #5
 80096ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80096b0:	f013 031f 	ands.w	r3, r3, #31
 80096b4:	b087      	sub	sp, #28
 80096b6:	bf18      	it	ne
 80096b8:	3604      	addne	r6, #4
 80096ba:	2500      	movs	r5, #0
 80096bc:	1f37      	subs	r7, r6, #4
 80096be:	4690      	mov	r8, r2
 80096c0:	6802      	ldr	r2, [r0, #0]
 80096c2:	9301      	str	r3, [sp, #4]
 80096c4:	4682      	mov	sl, r0
 80096c6:	f846 5c04 	str.w	r5, [r6, #-4]
 80096ca:	46b9      	mov	r9, r7
 80096cc:	463c      	mov	r4, r7
 80096ce:	9502      	str	r5, [sp, #8]
 80096d0:	46ab      	mov	fp, r5
 80096d2:	7851      	ldrb	r1, [r2, #1]
 80096d4:	1c53      	adds	r3, r2, #1
 80096d6:	9303      	str	r3, [sp, #12]
 80096d8:	b341      	cbz	r1, 800972c <__hexnan+0x88>
 80096da:	4608      	mov	r0, r1
 80096dc:	9205      	str	r2, [sp, #20]
 80096de:	9104      	str	r1, [sp, #16]
 80096e0:	f7ff fd5f 	bl	80091a2 <__hexdig_fun>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d14f      	bne.n	8009788 <__hexnan+0xe4>
 80096e8:	9904      	ldr	r1, [sp, #16]
 80096ea:	9a05      	ldr	r2, [sp, #20]
 80096ec:	2920      	cmp	r1, #32
 80096ee:	d818      	bhi.n	8009722 <__hexnan+0x7e>
 80096f0:	9b02      	ldr	r3, [sp, #8]
 80096f2:	459b      	cmp	fp, r3
 80096f4:	dd13      	ble.n	800971e <__hexnan+0x7a>
 80096f6:	454c      	cmp	r4, r9
 80096f8:	d206      	bcs.n	8009708 <__hexnan+0x64>
 80096fa:	2d07      	cmp	r5, #7
 80096fc:	dc04      	bgt.n	8009708 <__hexnan+0x64>
 80096fe:	462a      	mov	r2, r5
 8009700:	4649      	mov	r1, r9
 8009702:	4620      	mov	r0, r4
 8009704:	f7ff ffa8 	bl	8009658 <L_shift>
 8009708:	4544      	cmp	r4, r8
 800970a:	d950      	bls.n	80097ae <__hexnan+0x10a>
 800970c:	2300      	movs	r3, #0
 800970e:	f1a4 0904 	sub.w	r9, r4, #4
 8009712:	f844 3c04 	str.w	r3, [r4, #-4]
 8009716:	f8cd b008 	str.w	fp, [sp, #8]
 800971a:	464c      	mov	r4, r9
 800971c:	461d      	mov	r5, r3
 800971e:	9a03      	ldr	r2, [sp, #12]
 8009720:	e7d7      	b.n	80096d2 <__hexnan+0x2e>
 8009722:	2929      	cmp	r1, #41	; 0x29
 8009724:	d156      	bne.n	80097d4 <__hexnan+0x130>
 8009726:	3202      	adds	r2, #2
 8009728:	f8ca 2000 	str.w	r2, [sl]
 800972c:	f1bb 0f00 	cmp.w	fp, #0
 8009730:	d050      	beq.n	80097d4 <__hexnan+0x130>
 8009732:	454c      	cmp	r4, r9
 8009734:	d206      	bcs.n	8009744 <__hexnan+0xa0>
 8009736:	2d07      	cmp	r5, #7
 8009738:	dc04      	bgt.n	8009744 <__hexnan+0xa0>
 800973a:	462a      	mov	r2, r5
 800973c:	4649      	mov	r1, r9
 800973e:	4620      	mov	r0, r4
 8009740:	f7ff ff8a 	bl	8009658 <L_shift>
 8009744:	4544      	cmp	r4, r8
 8009746:	d934      	bls.n	80097b2 <__hexnan+0x10e>
 8009748:	f1a8 0204 	sub.w	r2, r8, #4
 800974c:	4623      	mov	r3, r4
 800974e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009752:	f842 1f04 	str.w	r1, [r2, #4]!
 8009756:	429f      	cmp	r7, r3
 8009758:	d2f9      	bcs.n	800974e <__hexnan+0xaa>
 800975a:	1b3b      	subs	r3, r7, r4
 800975c:	f023 0303 	bic.w	r3, r3, #3
 8009760:	3304      	adds	r3, #4
 8009762:	3401      	adds	r4, #1
 8009764:	3e03      	subs	r6, #3
 8009766:	42b4      	cmp	r4, r6
 8009768:	bf88      	it	hi
 800976a:	2304      	movhi	r3, #4
 800976c:	4443      	add	r3, r8
 800976e:	2200      	movs	r2, #0
 8009770:	f843 2b04 	str.w	r2, [r3], #4
 8009774:	429f      	cmp	r7, r3
 8009776:	d2fb      	bcs.n	8009770 <__hexnan+0xcc>
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	b91b      	cbnz	r3, 8009784 <__hexnan+0xe0>
 800977c:	4547      	cmp	r7, r8
 800977e:	d127      	bne.n	80097d0 <__hexnan+0x12c>
 8009780:	2301      	movs	r3, #1
 8009782:	603b      	str	r3, [r7, #0]
 8009784:	2005      	movs	r0, #5
 8009786:	e026      	b.n	80097d6 <__hexnan+0x132>
 8009788:	3501      	adds	r5, #1
 800978a:	2d08      	cmp	r5, #8
 800978c:	f10b 0b01 	add.w	fp, fp, #1
 8009790:	dd06      	ble.n	80097a0 <__hexnan+0xfc>
 8009792:	4544      	cmp	r4, r8
 8009794:	d9c3      	bls.n	800971e <__hexnan+0x7a>
 8009796:	2300      	movs	r3, #0
 8009798:	f844 3c04 	str.w	r3, [r4, #-4]
 800979c:	2501      	movs	r5, #1
 800979e:	3c04      	subs	r4, #4
 80097a0:	6822      	ldr	r2, [r4, #0]
 80097a2:	f000 000f 	and.w	r0, r0, #15
 80097a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80097aa:	6022      	str	r2, [r4, #0]
 80097ac:	e7b7      	b.n	800971e <__hexnan+0x7a>
 80097ae:	2508      	movs	r5, #8
 80097b0:	e7b5      	b.n	800971e <__hexnan+0x7a>
 80097b2:	9b01      	ldr	r3, [sp, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d0df      	beq.n	8009778 <__hexnan+0xd4>
 80097b8:	f04f 32ff 	mov.w	r2, #4294967295
 80097bc:	f1c3 0320 	rsb	r3, r3, #32
 80097c0:	fa22 f303 	lsr.w	r3, r2, r3
 80097c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80097c8:	401a      	ands	r2, r3
 80097ca:	f846 2c04 	str.w	r2, [r6, #-4]
 80097ce:	e7d3      	b.n	8009778 <__hexnan+0xd4>
 80097d0:	3f04      	subs	r7, #4
 80097d2:	e7d1      	b.n	8009778 <__hexnan+0xd4>
 80097d4:	2004      	movs	r0, #4
 80097d6:	b007      	add	sp, #28
 80097d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080097dc <_localeconv_r>:
 80097dc:	4800      	ldr	r0, [pc, #0]	; (80097e0 <_localeconv_r+0x4>)
 80097de:	4770      	bx	lr
 80097e0:	200001d4 	.word	0x200001d4

080097e4 <__retarget_lock_init_recursive>:
 80097e4:	4770      	bx	lr

080097e6 <__retarget_lock_acquire_recursive>:
 80097e6:	4770      	bx	lr

080097e8 <__retarget_lock_release_recursive>:
 80097e8:	4770      	bx	lr

080097ea <__swhatbuf_r>:
 80097ea:	b570      	push	{r4, r5, r6, lr}
 80097ec:	460e      	mov	r6, r1
 80097ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097f2:	2900      	cmp	r1, #0
 80097f4:	b096      	sub	sp, #88	; 0x58
 80097f6:	4614      	mov	r4, r2
 80097f8:	461d      	mov	r5, r3
 80097fa:	da08      	bge.n	800980e <__swhatbuf_r+0x24>
 80097fc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	602a      	str	r2, [r5, #0]
 8009804:	061a      	lsls	r2, r3, #24
 8009806:	d410      	bmi.n	800982a <__swhatbuf_r+0x40>
 8009808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800980c:	e00e      	b.n	800982c <__swhatbuf_r+0x42>
 800980e:	466a      	mov	r2, sp
 8009810:	f001 f8a0 	bl	800a954 <_fstat_r>
 8009814:	2800      	cmp	r0, #0
 8009816:	dbf1      	blt.n	80097fc <__swhatbuf_r+0x12>
 8009818:	9a01      	ldr	r2, [sp, #4]
 800981a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800981e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009822:	425a      	negs	r2, r3
 8009824:	415a      	adcs	r2, r3
 8009826:	602a      	str	r2, [r5, #0]
 8009828:	e7ee      	b.n	8009808 <__swhatbuf_r+0x1e>
 800982a:	2340      	movs	r3, #64	; 0x40
 800982c:	2000      	movs	r0, #0
 800982e:	6023      	str	r3, [r4, #0]
 8009830:	b016      	add	sp, #88	; 0x58
 8009832:	bd70      	pop	{r4, r5, r6, pc}

08009834 <__smakebuf_r>:
 8009834:	898b      	ldrh	r3, [r1, #12]
 8009836:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009838:	079d      	lsls	r5, r3, #30
 800983a:	4606      	mov	r6, r0
 800983c:	460c      	mov	r4, r1
 800983e:	d507      	bpl.n	8009850 <__smakebuf_r+0x1c>
 8009840:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	6123      	str	r3, [r4, #16]
 8009848:	2301      	movs	r3, #1
 800984a:	6163      	str	r3, [r4, #20]
 800984c:	b002      	add	sp, #8
 800984e:	bd70      	pop	{r4, r5, r6, pc}
 8009850:	ab01      	add	r3, sp, #4
 8009852:	466a      	mov	r2, sp
 8009854:	f7ff ffc9 	bl	80097ea <__swhatbuf_r>
 8009858:	9900      	ldr	r1, [sp, #0]
 800985a:	4605      	mov	r5, r0
 800985c:	4630      	mov	r0, r6
 800985e:	f7fc ff09 	bl	8006674 <_malloc_r>
 8009862:	b948      	cbnz	r0, 8009878 <__smakebuf_r+0x44>
 8009864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009868:	059a      	lsls	r2, r3, #22
 800986a:	d4ef      	bmi.n	800984c <__smakebuf_r+0x18>
 800986c:	f023 0303 	bic.w	r3, r3, #3
 8009870:	f043 0302 	orr.w	r3, r3, #2
 8009874:	81a3      	strh	r3, [r4, #12]
 8009876:	e7e3      	b.n	8009840 <__smakebuf_r+0xc>
 8009878:	4b0d      	ldr	r3, [pc, #52]	; (80098b0 <__smakebuf_r+0x7c>)
 800987a:	62b3      	str	r3, [r6, #40]	; 0x28
 800987c:	89a3      	ldrh	r3, [r4, #12]
 800987e:	6020      	str	r0, [r4, #0]
 8009880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009884:	81a3      	strh	r3, [r4, #12]
 8009886:	9b00      	ldr	r3, [sp, #0]
 8009888:	6163      	str	r3, [r4, #20]
 800988a:	9b01      	ldr	r3, [sp, #4]
 800988c:	6120      	str	r0, [r4, #16]
 800988e:	b15b      	cbz	r3, 80098a8 <__smakebuf_r+0x74>
 8009890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009894:	4630      	mov	r0, r6
 8009896:	f001 f86f 	bl	800a978 <_isatty_r>
 800989a:	b128      	cbz	r0, 80098a8 <__smakebuf_r+0x74>
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	f023 0303 	bic.w	r3, r3, #3
 80098a2:	f043 0301 	orr.w	r3, r3, #1
 80098a6:	81a3      	strh	r3, [r4, #12]
 80098a8:	89a0      	ldrh	r0, [r4, #12]
 80098aa:	4305      	orrs	r5, r0
 80098ac:	81a5      	strh	r5, [r4, #12]
 80098ae:	e7cd      	b.n	800984c <__smakebuf_r+0x18>
 80098b0:	08008f39 	.word	0x08008f39

080098b4 <__ascii_mbtowc>:
 80098b4:	b082      	sub	sp, #8
 80098b6:	b901      	cbnz	r1, 80098ba <__ascii_mbtowc+0x6>
 80098b8:	a901      	add	r1, sp, #4
 80098ba:	b142      	cbz	r2, 80098ce <__ascii_mbtowc+0x1a>
 80098bc:	b14b      	cbz	r3, 80098d2 <__ascii_mbtowc+0x1e>
 80098be:	7813      	ldrb	r3, [r2, #0]
 80098c0:	600b      	str	r3, [r1, #0]
 80098c2:	7812      	ldrb	r2, [r2, #0]
 80098c4:	1e10      	subs	r0, r2, #0
 80098c6:	bf18      	it	ne
 80098c8:	2001      	movne	r0, #1
 80098ca:	b002      	add	sp, #8
 80098cc:	4770      	bx	lr
 80098ce:	4610      	mov	r0, r2
 80098d0:	e7fb      	b.n	80098ca <__ascii_mbtowc+0x16>
 80098d2:	f06f 0001 	mvn.w	r0, #1
 80098d6:	e7f8      	b.n	80098ca <__ascii_mbtowc+0x16>

080098d8 <memcpy>:
 80098d8:	440a      	add	r2, r1
 80098da:	4291      	cmp	r1, r2
 80098dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80098e0:	d100      	bne.n	80098e4 <memcpy+0xc>
 80098e2:	4770      	bx	lr
 80098e4:	b510      	push	{r4, lr}
 80098e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098ee:	4291      	cmp	r1, r2
 80098f0:	d1f9      	bne.n	80098e6 <memcpy+0xe>
 80098f2:	bd10      	pop	{r4, pc}

080098f4 <__malloc_lock>:
 80098f4:	4801      	ldr	r0, [pc, #4]	; (80098fc <__malloc_lock+0x8>)
 80098f6:	f7ff bf76 	b.w	80097e6 <__retarget_lock_acquire_recursive>
 80098fa:	bf00      	nop
 80098fc:	20000a28 	.word	0x20000a28

08009900 <__malloc_unlock>:
 8009900:	4801      	ldr	r0, [pc, #4]	; (8009908 <__malloc_unlock+0x8>)
 8009902:	f7ff bf71 	b.w	80097e8 <__retarget_lock_release_recursive>
 8009906:	bf00      	nop
 8009908:	20000a28 	.word	0x20000a28

0800990c <_Balloc>:
 800990c:	b570      	push	{r4, r5, r6, lr}
 800990e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009910:	4604      	mov	r4, r0
 8009912:	460d      	mov	r5, r1
 8009914:	b976      	cbnz	r6, 8009934 <_Balloc+0x28>
 8009916:	2010      	movs	r0, #16
 8009918:	f7fc fe0e 	bl	8006538 <malloc>
 800991c:	4602      	mov	r2, r0
 800991e:	6260      	str	r0, [r4, #36]	; 0x24
 8009920:	b920      	cbnz	r0, 800992c <_Balloc+0x20>
 8009922:	4b18      	ldr	r3, [pc, #96]	; (8009984 <_Balloc+0x78>)
 8009924:	4818      	ldr	r0, [pc, #96]	; (8009988 <_Balloc+0x7c>)
 8009926:	2166      	movs	r1, #102	; 0x66
 8009928:	f7fe fb88 	bl	800803c <__assert_func>
 800992c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009930:	6006      	str	r6, [r0, #0]
 8009932:	60c6      	str	r6, [r0, #12]
 8009934:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009936:	68f3      	ldr	r3, [r6, #12]
 8009938:	b183      	cbz	r3, 800995c <_Balloc+0x50>
 800993a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009942:	b9b8      	cbnz	r0, 8009974 <_Balloc+0x68>
 8009944:	2101      	movs	r1, #1
 8009946:	fa01 f605 	lsl.w	r6, r1, r5
 800994a:	1d72      	adds	r2, r6, #5
 800994c:	0092      	lsls	r2, r2, #2
 800994e:	4620      	mov	r0, r4
 8009950:	f000 fc9d 	bl	800a28e <_calloc_r>
 8009954:	b160      	cbz	r0, 8009970 <_Balloc+0x64>
 8009956:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800995a:	e00e      	b.n	800997a <_Balloc+0x6e>
 800995c:	2221      	movs	r2, #33	; 0x21
 800995e:	2104      	movs	r1, #4
 8009960:	4620      	mov	r0, r4
 8009962:	f000 fc94 	bl	800a28e <_calloc_r>
 8009966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009968:	60f0      	str	r0, [r6, #12]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d1e4      	bne.n	800993a <_Balloc+0x2e>
 8009970:	2000      	movs	r0, #0
 8009972:	bd70      	pop	{r4, r5, r6, pc}
 8009974:	6802      	ldr	r2, [r0, #0]
 8009976:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800997a:	2300      	movs	r3, #0
 800997c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009980:	e7f7      	b.n	8009972 <_Balloc+0x66>
 8009982:	bf00      	nop
 8009984:	0800af60 	.word	0x0800af60
 8009988:	0800b168 	.word	0x0800b168

0800998c <_Bfree>:
 800998c:	b570      	push	{r4, r5, r6, lr}
 800998e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009990:	4605      	mov	r5, r0
 8009992:	460c      	mov	r4, r1
 8009994:	b976      	cbnz	r6, 80099b4 <_Bfree+0x28>
 8009996:	2010      	movs	r0, #16
 8009998:	f7fc fdce 	bl	8006538 <malloc>
 800999c:	4602      	mov	r2, r0
 800999e:	6268      	str	r0, [r5, #36]	; 0x24
 80099a0:	b920      	cbnz	r0, 80099ac <_Bfree+0x20>
 80099a2:	4b09      	ldr	r3, [pc, #36]	; (80099c8 <_Bfree+0x3c>)
 80099a4:	4809      	ldr	r0, [pc, #36]	; (80099cc <_Bfree+0x40>)
 80099a6:	218a      	movs	r1, #138	; 0x8a
 80099a8:	f7fe fb48 	bl	800803c <__assert_func>
 80099ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099b0:	6006      	str	r6, [r0, #0]
 80099b2:	60c6      	str	r6, [r0, #12]
 80099b4:	b13c      	cbz	r4, 80099c6 <_Bfree+0x3a>
 80099b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80099b8:	6862      	ldr	r2, [r4, #4]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099c0:	6021      	str	r1, [r4, #0]
 80099c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099c6:	bd70      	pop	{r4, r5, r6, pc}
 80099c8:	0800af60 	.word	0x0800af60
 80099cc:	0800b168 	.word	0x0800b168

080099d0 <__multadd>:
 80099d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d4:	690d      	ldr	r5, [r1, #16]
 80099d6:	4607      	mov	r7, r0
 80099d8:	460c      	mov	r4, r1
 80099da:	461e      	mov	r6, r3
 80099dc:	f101 0c14 	add.w	ip, r1, #20
 80099e0:	2000      	movs	r0, #0
 80099e2:	f8dc 3000 	ldr.w	r3, [ip]
 80099e6:	b299      	uxth	r1, r3
 80099e8:	fb02 6101 	mla	r1, r2, r1, r6
 80099ec:	0c1e      	lsrs	r6, r3, #16
 80099ee:	0c0b      	lsrs	r3, r1, #16
 80099f0:	fb02 3306 	mla	r3, r2, r6, r3
 80099f4:	b289      	uxth	r1, r1
 80099f6:	3001      	adds	r0, #1
 80099f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80099fc:	4285      	cmp	r5, r0
 80099fe:	f84c 1b04 	str.w	r1, [ip], #4
 8009a02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a06:	dcec      	bgt.n	80099e2 <__multadd+0x12>
 8009a08:	b30e      	cbz	r6, 8009a4e <__multadd+0x7e>
 8009a0a:	68a3      	ldr	r3, [r4, #8]
 8009a0c:	42ab      	cmp	r3, r5
 8009a0e:	dc19      	bgt.n	8009a44 <__multadd+0x74>
 8009a10:	6861      	ldr	r1, [r4, #4]
 8009a12:	4638      	mov	r0, r7
 8009a14:	3101      	adds	r1, #1
 8009a16:	f7ff ff79 	bl	800990c <_Balloc>
 8009a1a:	4680      	mov	r8, r0
 8009a1c:	b928      	cbnz	r0, 8009a2a <__multadd+0x5a>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	4b0c      	ldr	r3, [pc, #48]	; (8009a54 <__multadd+0x84>)
 8009a22:	480d      	ldr	r0, [pc, #52]	; (8009a58 <__multadd+0x88>)
 8009a24:	21b5      	movs	r1, #181	; 0xb5
 8009a26:	f7fe fb09 	bl	800803c <__assert_func>
 8009a2a:	6922      	ldr	r2, [r4, #16]
 8009a2c:	3202      	adds	r2, #2
 8009a2e:	f104 010c 	add.w	r1, r4, #12
 8009a32:	0092      	lsls	r2, r2, #2
 8009a34:	300c      	adds	r0, #12
 8009a36:	f7ff ff4f 	bl	80098d8 <memcpy>
 8009a3a:	4621      	mov	r1, r4
 8009a3c:	4638      	mov	r0, r7
 8009a3e:	f7ff ffa5 	bl	800998c <_Bfree>
 8009a42:	4644      	mov	r4, r8
 8009a44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a48:	3501      	adds	r5, #1
 8009a4a:	615e      	str	r6, [r3, #20]
 8009a4c:	6125      	str	r5, [r4, #16]
 8009a4e:	4620      	mov	r0, r4
 8009a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a54:	0800b078 	.word	0x0800b078
 8009a58:	0800b168 	.word	0x0800b168

08009a5c <__s2b>:
 8009a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a60:	460c      	mov	r4, r1
 8009a62:	4615      	mov	r5, r2
 8009a64:	461f      	mov	r7, r3
 8009a66:	2209      	movs	r2, #9
 8009a68:	3308      	adds	r3, #8
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a70:	2100      	movs	r1, #0
 8009a72:	2201      	movs	r2, #1
 8009a74:	429a      	cmp	r2, r3
 8009a76:	db09      	blt.n	8009a8c <__s2b+0x30>
 8009a78:	4630      	mov	r0, r6
 8009a7a:	f7ff ff47 	bl	800990c <_Balloc>
 8009a7e:	b940      	cbnz	r0, 8009a92 <__s2b+0x36>
 8009a80:	4602      	mov	r2, r0
 8009a82:	4b19      	ldr	r3, [pc, #100]	; (8009ae8 <__s2b+0x8c>)
 8009a84:	4819      	ldr	r0, [pc, #100]	; (8009aec <__s2b+0x90>)
 8009a86:	21ce      	movs	r1, #206	; 0xce
 8009a88:	f7fe fad8 	bl	800803c <__assert_func>
 8009a8c:	0052      	lsls	r2, r2, #1
 8009a8e:	3101      	adds	r1, #1
 8009a90:	e7f0      	b.n	8009a74 <__s2b+0x18>
 8009a92:	9b08      	ldr	r3, [sp, #32]
 8009a94:	6143      	str	r3, [r0, #20]
 8009a96:	2d09      	cmp	r5, #9
 8009a98:	f04f 0301 	mov.w	r3, #1
 8009a9c:	6103      	str	r3, [r0, #16]
 8009a9e:	dd16      	ble.n	8009ace <__s2b+0x72>
 8009aa0:	f104 0909 	add.w	r9, r4, #9
 8009aa4:	46c8      	mov	r8, r9
 8009aa6:	442c      	add	r4, r5
 8009aa8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009aac:	4601      	mov	r1, r0
 8009aae:	3b30      	subs	r3, #48	; 0x30
 8009ab0:	220a      	movs	r2, #10
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f7ff ff8c 	bl	80099d0 <__multadd>
 8009ab8:	45a0      	cmp	r8, r4
 8009aba:	d1f5      	bne.n	8009aa8 <__s2b+0x4c>
 8009abc:	f1a5 0408 	sub.w	r4, r5, #8
 8009ac0:	444c      	add	r4, r9
 8009ac2:	1b2d      	subs	r5, r5, r4
 8009ac4:	1963      	adds	r3, r4, r5
 8009ac6:	42bb      	cmp	r3, r7
 8009ac8:	db04      	blt.n	8009ad4 <__s2b+0x78>
 8009aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ace:	340a      	adds	r4, #10
 8009ad0:	2509      	movs	r5, #9
 8009ad2:	e7f6      	b.n	8009ac2 <__s2b+0x66>
 8009ad4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ad8:	4601      	mov	r1, r0
 8009ada:	3b30      	subs	r3, #48	; 0x30
 8009adc:	220a      	movs	r2, #10
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f7ff ff76 	bl	80099d0 <__multadd>
 8009ae4:	e7ee      	b.n	8009ac4 <__s2b+0x68>
 8009ae6:	bf00      	nop
 8009ae8:	0800b078 	.word	0x0800b078
 8009aec:	0800b168 	.word	0x0800b168

08009af0 <__hi0bits>:
 8009af0:	0c03      	lsrs	r3, r0, #16
 8009af2:	041b      	lsls	r3, r3, #16
 8009af4:	b9d3      	cbnz	r3, 8009b2c <__hi0bits+0x3c>
 8009af6:	0400      	lsls	r0, r0, #16
 8009af8:	2310      	movs	r3, #16
 8009afa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009afe:	bf04      	itt	eq
 8009b00:	0200      	lsleq	r0, r0, #8
 8009b02:	3308      	addeq	r3, #8
 8009b04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b08:	bf04      	itt	eq
 8009b0a:	0100      	lsleq	r0, r0, #4
 8009b0c:	3304      	addeq	r3, #4
 8009b0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b12:	bf04      	itt	eq
 8009b14:	0080      	lsleq	r0, r0, #2
 8009b16:	3302      	addeq	r3, #2
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	db05      	blt.n	8009b28 <__hi0bits+0x38>
 8009b1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b20:	f103 0301 	add.w	r3, r3, #1
 8009b24:	bf08      	it	eq
 8009b26:	2320      	moveq	r3, #32
 8009b28:	4618      	mov	r0, r3
 8009b2a:	4770      	bx	lr
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	e7e4      	b.n	8009afa <__hi0bits+0xa>

08009b30 <__lo0bits>:
 8009b30:	6803      	ldr	r3, [r0, #0]
 8009b32:	f013 0207 	ands.w	r2, r3, #7
 8009b36:	4601      	mov	r1, r0
 8009b38:	d00b      	beq.n	8009b52 <__lo0bits+0x22>
 8009b3a:	07da      	lsls	r2, r3, #31
 8009b3c:	d423      	bmi.n	8009b86 <__lo0bits+0x56>
 8009b3e:	0798      	lsls	r0, r3, #30
 8009b40:	bf49      	itett	mi
 8009b42:	085b      	lsrmi	r3, r3, #1
 8009b44:	089b      	lsrpl	r3, r3, #2
 8009b46:	2001      	movmi	r0, #1
 8009b48:	600b      	strmi	r3, [r1, #0]
 8009b4a:	bf5c      	itt	pl
 8009b4c:	600b      	strpl	r3, [r1, #0]
 8009b4e:	2002      	movpl	r0, #2
 8009b50:	4770      	bx	lr
 8009b52:	b298      	uxth	r0, r3
 8009b54:	b9a8      	cbnz	r0, 8009b82 <__lo0bits+0x52>
 8009b56:	0c1b      	lsrs	r3, r3, #16
 8009b58:	2010      	movs	r0, #16
 8009b5a:	b2da      	uxtb	r2, r3
 8009b5c:	b90a      	cbnz	r2, 8009b62 <__lo0bits+0x32>
 8009b5e:	3008      	adds	r0, #8
 8009b60:	0a1b      	lsrs	r3, r3, #8
 8009b62:	071a      	lsls	r2, r3, #28
 8009b64:	bf04      	itt	eq
 8009b66:	091b      	lsreq	r3, r3, #4
 8009b68:	3004      	addeq	r0, #4
 8009b6a:	079a      	lsls	r2, r3, #30
 8009b6c:	bf04      	itt	eq
 8009b6e:	089b      	lsreq	r3, r3, #2
 8009b70:	3002      	addeq	r0, #2
 8009b72:	07da      	lsls	r2, r3, #31
 8009b74:	d403      	bmi.n	8009b7e <__lo0bits+0x4e>
 8009b76:	085b      	lsrs	r3, r3, #1
 8009b78:	f100 0001 	add.w	r0, r0, #1
 8009b7c:	d005      	beq.n	8009b8a <__lo0bits+0x5a>
 8009b7e:	600b      	str	r3, [r1, #0]
 8009b80:	4770      	bx	lr
 8009b82:	4610      	mov	r0, r2
 8009b84:	e7e9      	b.n	8009b5a <__lo0bits+0x2a>
 8009b86:	2000      	movs	r0, #0
 8009b88:	4770      	bx	lr
 8009b8a:	2020      	movs	r0, #32
 8009b8c:	4770      	bx	lr
	...

08009b90 <__i2b>:
 8009b90:	b510      	push	{r4, lr}
 8009b92:	460c      	mov	r4, r1
 8009b94:	2101      	movs	r1, #1
 8009b96:	f7ff feb9 	bl	800990c <_Balloc>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	b928      	cbnz	r0, 8009baa <__i2b+0x1a>
 8009b9e:	4b05      	ldr	r3, [pc, #20]	; (8009bb4 <__i2b+0x24>)
 8009ba0:	4805      	ldr	r0, [pc, #20]	; (8009bb8 <__i2b+0x28>)
 8009ba2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009ba6:	f7fe fa49 	bl	800803c <__assert_func>
 8009baa:	2301      	movs	r3, #1
 8009bac:	6144      	str	r4, [r0, #20]
 8009bae:	6103      	str	r3, [r0, #16]
 8009bb0:	bd10      	pop	{r4, pc}
 8009bb2:	bf00      	nop
 8009bb4:	0800b078 	.word	0x0800b078
 8009bb8:	0800b168 	.word	0x0800b168

08009bbc <__multiply>:
 8009bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc0:	4691      	mov	r9, r2
 8009bc2:	690a      	ldr	r2, [r1, #16]
 8009bc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	bfb8      	it	lt
 8009bcc:	460b      	movlt	r3, r1
 8009bce:	460c      	mov	r4, r1
 8009bd0:	bfbc      	itt	lt
 8009bd2:	464c      	movlt	r4, r9
 8009bd4:	4699      	movlt	r9, r3
 8009bd6:	6927      	ldr	r7, [r4, #16]
 8009bd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009bdc:	68a3      	ldr	r3, [r4, #8]
 8009bde:	6861      	ldr	r1, [r4, #4]
 8009be0:	eb07 060a 	add.w	r6, r7, sl
 8009be4:	42b3      	cmp	r3, r6
 8009be6:	b085      	sub	sp, #20
 8009be8:	bfb8      	it	lt
 8009bea:	3101      	addlt	r1, #1
 8009bec:	f7ff fe8e 	bl	800990c <_Balloc>
 8009bf0:	b930      	cbnz	r0, 8009c00 <__multiply+0x44>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	4b44      	ldr	r3, [pc, #272]	; (8009d08 <__multiply+0x14c>)
 8009bf6:	4845      	ldr	r0, [pc, #276]	; (8009d0c <__multiply+0x150>)
 8009bf8:	f240 115d 	movw	r1, #349	; 0x15d
 8009bfc:	f7fe fa1e 	bl	800803c <__assert_func>
 8009c00:	f100 0514 	add.w	r5, r0, #20
 8009c04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c08:	462b      	mov	r3, r5
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	4543      	cmp	r3, r8
 8009c0e:	d321      	bcc.n	8009c54 <__multiply+0x98>
 8009c10:	f104 0314 	add.w	r3, r4, #20
 8009c14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c18:	f109 0314 	add.w	r3, r9, #20
 8009c1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c20:	9202      	str	r2, [sp, #8]
 8009c22:	1b3a      	subs	r2, r7, r4
 8009c24:	3a15      	subs	r2, #21
 8009c26:	f022 0203 	bic.w	r2, r2, #3
 8009c2a:	3204      	adds	r2, #4
 8009c2c:	f104 0115 	add.w	r1, r4, #21
 8009c30:	428f      	cmp	r7, r1
 8009c32:	bf38      	it	cc
 8009c34:	2204      	movcc	r2, #4
 8009c36:	9201      	str	r2, [sp, #4]
 8009c38:	9a02      	ldr	r2, [sp, #8]
 8009c3a:	9303      	str	r3, [sp, #12]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d80c      	bhi.n	8009c5a <__multiply+0x9e>
 8009c40:	2e00      	cmp	r6, #0
 8009c42:	dd03      	ble.n	8009c4c <__multiply+0x90>
 8009c44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d05a      	beq.n	8009d02 <__multiply+0x146>
 8009c4c:	6106      	str	r6, [r0, #16]
 8009c4e:	b005      	add	sp, #20
 8009c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c54:	f843 2b04 	str.w	r2, [r3], #4
 8009c58:	e7d8      	b.n	8009c0c <__multiply+0x50>
 8009c5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c5e:	f1ba 0f00 	cmp.w	sl, #0
 8009c62:	d024      	beq.n	8009cae <__multiply+0xf2>
 8009c64:	f104 0e14 	add.w	lr, r4, #20
 8009c68:	46a9      	mov	r9, r5
 8009c6a:	f04f 0c00 	mov.w	ip, #0
 8009c6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c72:	f8d9 1000 	ldr.w	r1, [r9]
 8009c76:	fa1f fb82 	uxth.w	fp, r2
 8009c7a:	b289      	uxth	r1, r1
 8009c7c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c84:	f8d9 2000 	ldr.w	r2, [r9]
 8009c88:	4461      	add	r1, ip
 8009c8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c8e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c96:	b289      	uxth	r1, r1
 8009c98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c9c:	4577      	cmp	r7, lr
 8009c9e:	f849 1b04 	str.w	r1, [r9], #4
 8009ca2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ca6:	d8e2      	bhi.n	8009c6e <__multiply+0xb2>
 8009ca8:	9a01      	ldr	r2, [sp, #4]
 8009caa:	f845 c002 	str.w	ip, [r5, r2]
 8009cae:	9a03      	ldr	r2, [sp, #12]
 8009cb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	f1b9 0f00 	cmp.w	r9, #0
 8009cba:	d020      	beq.n	8009cfe <__multiply+0x142>
 8009cbc:	6829      	ldr	r1, [r5, #0]
 8009cbe:	f104 0c14 	add.w	ip, r4, #20
 8009cc2:	46ae      	mov	lr, r5
 8009cc4:	f04f 0a00 	mov.w	sl, #0
 8009cc8:	f8bc b000 	ldrh.w	fp, [ip]
 8009ccc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009cd0:	fb09 220b 	mla	r2, r9, fp, r2
 8009cd4:	4492      	add	sl, r2
 8009cd6:	b289      	uxth	r1, r1
 8009cd8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009cdc:	f84e 1b04 	str.w	r1, [lr], #4
 8009ce0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ce4:	f8be 1000 	ldrh.w	r1, [lr]
 8009ce8:	0c12      	lsrs	r2, r2, #16
 8009cea:	fb09 1102 	mla	r1, r9, r2, r1
 8009cee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009cf2:	4567      	cmp	r7, ip
 8009cf4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009cf8:	d8e6      	bhi.n	8009cc8 <__multiply+0x10c>
 8009cfa:	9a01      	ldr	r2, [sp, #4]
 8009cfc:	50a9      	str	r1, [r5, r2]
 8009cfe:	3504      	adds	r5, #4
 8009d00:	e79a      	b.n	8009c38 <__multiply+0x7c>
 8009d02:	3e01      	subs	r6, #1
 8009d04:	e79c      	b.n	8009c40 <__multiply+0x84>
 8009d06:	bf00      	nop
 8009d08:	0800b078 	.word	0x0800b078
 8009d0c:	0800b168 	.word	0x0800b168

08009d10 <__pow5mult>:
 8009d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d14:	4615      	mov	r5, r2
 8009d16:	f012 0203 	ands.w	r2, r2, #3
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	460f      	mov	r7, r1
 8009d1e:	d007      	beq.n	8009d30 <__pow5mult+0x20>
 8009d20:	4c25      	ldr	r4, [pc, #148]	; (8009db8 <__pow5mult+0xa8>)
 8009d22:	3a01      	subs	r2, #1
 8009d24:	2300      	movs	r3, #0
 8009d26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d2a:	f7ff fe51 	bl	80099d0 <__multadd>
 8009d2e:	4607      	mov	r7, r0
 8009d30:	10ad      	asrs	r5, r5, #2
 8009d32:	d03d      	beq.n	8009db0 <__pow5mult+0xa0>
 8009d34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d36:	b97c      	cbnz	r4, 8009d58 <__pow5mult+0x48>
 8009d38:	2010      	movs	r0, #16
 8009d3a:	f7fc fbfd 	bl	8006538 <malloc>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	6270      	str	r0, [r6, #36]	; 0x24
 8009d42:	b928      	cbnz	r0, 8009d50 <__pow5mult+0x40>
 8009d44:	4b1d      	ldr	r3, [pc, #116]	; (8009dbc <__pow5mult+0xac>)
 8009d46:	481e      	ldr	r0, [pc, #120]	; (8009dc0 <__pow5mult+0xb0>)
 8009d48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d4c:	f7fe f976 	bl	800803c <__assert_func>
 8009d50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d54:	6004      	str	r4, [r0, #0]
 8009d56:	60c4      	str	r4, [r0, #12]
 8009d58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d60:	b94c      	cbnz	r4, 8009d76 <__pow5mult+0x66>
 8009d62:	f240 2171 	movw	r1, #625	; 0x271
 8009d66:	4630      	mov	r0, r6
 8009d68:	f7ff ff12 	bl	8009b90 <__i2b>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d72:	4604      	mov	r4, r0
 8009d74:	6003      	str	r3, [r0, #0]
 8009d76:	f04f 0900 	mov.w	r9, #0
 8009d7a:	07eb      	lsls	r3, r5, #31
 8009d7c:	d50a      	bpl.n	8009d94 <__pow5mult+0x84>
 8009d7e:	4639      	mov	r1, r7
 8009d80:	4622      	mov	r2, r4
 8009d82:	4630      	mov	r0, r6
 8009d84:	f7ff ff1a 	bl	8009bbc <__multiply>
 8009d88:	4639      	mov	r1, r7
 8009d8a:	4680      	mov	r8, r0
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	f7ff fdfd 	bl	800998c <_Bfree>
 8009d92:	4647      	mov	r7, r8
 8009d94:	106d      	asrs	r5, r5, #1
 8009d96:	d00b      	beq.n	8009db0 <__pow5mult+0xa0>
 8009d98:	6820      	ldr	r0, [r4, #0]
 8009d9a:	b938      	cbnz	r0, 8009dac <__pow5mult+0x9c>
 8009d9c:	4622      	mov	r2, r4
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4630      	mov	r0, r6
 8009da2:	f7ff ff0b 	bl	8009bbc <__multiply>
 8009da6:	6020      	str	r0, [r4, #0]
 8009da8:	f8c0 9000 	str.w	r9, [r0]
 8009dac:	4604      	mov	r4, r0
 8009dae:	e7e4      	b.n	8009d7a <__pow5mult+0x6a>
 8009db0:	4638      	mov	r0, r7
 8009db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009db6:	bf00      	nop
 8009db8:	0800b2b8 	.word	0x0800b2b8
 8009dbc:	0800af60 	.word	0x0800af60
 8009dc0:	0800b168 	.word	0x0800b168

08009dc4 <__lshift>:
 8009dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc8:	460c      	mov	r4, r1
 8009dca:	6849      	ldr	r1, [r1, #4]
 8009dcc:	6923      	ldr	r3, [r4, #16]
 8009dce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009dd2:	68a3      	ldr	r3, [r4, #8]
 8009dd4:	4607      	mov	r7, r0
 8009dd6:	4691      	mov	r9, r2
 8009dd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ddc:	f108 0601 	add.w	r6, r8, #1
 8009de0:	42b3      	cmp	r3, r6
 8009de2:	db0b      	blt.n	8009dfc <__lshift+0x38>
 8009de4:	4638      	mov	r0, r7
 8009de6:	f7ff fd91 	bl	800990c <_Balloc>
 8009dea:	4605      	mov	r5, r0
 8009dec:	b948      	cbnz	r0, 8009e02 <__lshift+0x3e>
 8009dee:	4602      	mov	r2, r0
 8009df0:	4b2a      	ldr	r3, [pc, #168]	; (8009e9c <__lshift+0xd8>)
 8009df2:	482b      	ldr	r0, [pc, #172]	; (8009ea0 <__lshift+0xdc>)
 8009df4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009df8:	f7fe f920 	bl	800803c <__assert_func>
 8009dfc:	3101      	adds	r1, #1
 8009dfe:	005b      	lsls	r3, r3, #1
 8009e00:	e7ee      	b.n	8009de0 <__lshift+0x1c>
 8009e02:	2300      	movs	r3, #0
 8009e04:	f100 0114 	add.w	r1, r0, #20
 8009e08:	f100 0210 	add.w	r2, r0, #16
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	4553      	cmp	r3, sl
 8009e10:	db37      	blt.n	8009e82 <__lshift+0xbe>
 8009e12:	6920      	ldr	r0, [r4, #16]
 8009e14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e18:	f104 0314 	add.w	r3, r4, #20
 8009e1c:	f019 091f 	ands.w	r9, r9, #31
 8009e20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e28:	d02f      	beq.n	8009e8a <__lshift+0xc6>
 8009e2a:	f1c9 0e20 	rsb	lr, r9, #32
 8009e2e:	468a      	mov	sl, r1
 8009e30:	f04f 0c00 	mov.w	ip, #0
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	fa02 f209 	lsl.w	r2, r2, r9
 8009e3a:	ea42 020c 	orr.w	r2, r2, ip
 8009e3e:	f84a 2b04 	str.w	r2, [sl], #4
 8009e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e46:	4298      	cmp	r0, r3
 8009e48:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e4c:	d8f2      	bhi.n	8009e34 <__lshift+0x70>
 8009e4e:	1b03      	subs	r3, r0, r4
 8009e50:	3b15      	subs	r3, #21
 8009e52:	f023 0303 	bic.w	r3, r3, #3
 8009e56:	3304      	adds	r3, #4
 8009e58:	f104 0215 	add.w	r2, r4, #21
 8009e5c:	4290      	cmp	r0, r2
 8009e5e:	bf38      	it	cc
 8009e60:	2304      	movcc	r3, #4
 8009e62:	f841 c003 	str.w	ip, [r1, r3]
 8009e66:	f1bc 0f00 	cmp.w	ip, #0
 8009e6a:	d001      	beq.n	8009e70 <__lshift+0xac>
 8009e6c:	f108 0602 	add.w	r6, r8, #2
 8009e70:	3e01      	subs	r6, #1
 8009e72:	4638      	mov	r0, r7
 8009e74:	612e      	str	r6, [r5, #16]
 8009e76:	4621      	mov	r1, r4
 8009e78:	f7ff fd88 	bl	800998c <_Bfree>
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e82:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e86:	3301      	adds	r3, #1
 8009e88:	e7c1      	b.n	8009e0e <__lshift+0x4a>
 8009e8a:	3904      	subs	r1, #4
 8009e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e90:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e94:	4298      	cmp	r0, r3
 8009e96:	d8f9      	bhi.n	8009e8c <__lshift+0xc8>
 8009e98:	e7ea      	b.n	8009e70 <__lshift+0xac>
 8009e9a:	bf00      	nop
 8009e9c:	0800b078 	.word	0x0800b078
 8009ea0:	0800b168 	.word	0x0800b168

08009ea4 <__mcmp>:
 8009ea4:	b530      	push	{r4, r5, lr}
 8009ea6:	6902      	ldr	r2, [r0, #16]
 8009ea8:	690c      	ldr	r4, [r1, #16]
 8009eaa:	1b12      	subs	r2, r2, r4
 8009eac:	d10e      	bne.n	8009ecc <__mcmp+0x28>
 8009eae:	f100 0314 	add.w	r3, r0, #20
 8009eb2:	3114      	adds	r1, #20
 8009eb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009eb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ebc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ec0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ec4:	42a5      	cmp	r5, r4
 8009ec6:	d003      	beq.n	8009ed0 <__mcmp+0x2c>
 8009ec8:	d305      	bcc.n	8009ed6 <__mcmp+0x32>
 8009eca:	2201      	movs	r2, #1
 8009ecc:	4610      	mov	r0, r2
 8009ece:	bd30      	pop	{r4, r5, pc}
 8009ed0:	4283      	cmp	r3, r0
 8009ed2:	d3f3      	bcc.n	8009ebc <__mcmp+0x18>
 8009ed4:	e7fa      	b.n	8009ecc <__mcmp+0x28>
 8009ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8009eda:	e7f7      	b.n	8009ecc <__mcmp+0x28>

08009edc <__mdiff>:
 8009edc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee0:	460c      	mov	r4, r1
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	4690      	mov	r8, r2
 8009eea:	f7ff ffdb 	bl	8009ea4 <__mcmp>
 8009eee:	1e05      	subs	r5, r0, #0
 8009ef0:	d110      	bne.n	8009f14 <__mdiff+0x38>
 8009ef2:	4629      	mov	r1, r5
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	f7ff fd09 	bl	800990c <_Balloc>
 8009efa:	b930      	cbnz	r0, 8009f0a <__mdiff+0x2e>
 8009efc:	4b3a      	ldr	r3, [pc, #232]	; (8009fe8 <__mdiff+0x10c>)
 8009efe:	4602      	mov	r2, r0
 8009f00:	f240 2132 	movw	r1, #562	; 0x232
 8009f04:	4839      	ldr	r0, [pc, #228]	; (8009fec <__mdiff+0x110>)
 8009f06:	f7fe f899 	bl	800803c <__assert_func>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f14:	bfa4      	itt	ge
 8009f16:	4643      	movge	r3, r8
 8009f18:	46a0      	movge	r8, r4
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f20:	bfa6      	itte	ge
 8009f22:	461c      	movge	r4, r3
 8009f24:	2500      	movge	r5, #0
 8009f26:	2501      	movlt	r5, #1
 8009f28:	f7ff fcf0 	bl	800990c <_Balloc>
 8009f2c:	b920      	cbnz	r0, 8009f38 <__mdiff+0x5c>
 8009f2e:	4b2e      	ldr	r3, [pc, #184]	; (8009fe8 <__mdiff+0x10c>)
 8009f30:	4602      	mov	r2, r0
 8009f32:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f36:	e7e5      	b.n	8009f04 <__mdiff+0x28>
 8009f38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f3c:	6926      	ldr	r6, [r4, #16]
 8009f3e:	60c5      	str	r5, [r0, #12]
 8009f40:	f104 0914 	add.w	r9, r4, #20
 8009f44:	f108 0514 	add.w	r5, r8, #20
 8009f48:	f100 0e14 	add.w	lr, r0, #20
 8009f4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f54:	f108 0210 	add.w	r2, r8, #16
 8009f58:	46f2      	mov	sl, lr
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f64:	fa1f f883 	uxth.w	r8, r3
 8009f68:	fa11 f18b 	uxtah	r1, r1, fp
 8009f6c:	0c1b      	lsrs	r3, r3, #16
 8009f6e:	eba1 0808 	sub.w	r8, r1, r8
 8009f72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f7a:	fa1f f888 	uxth.w	r8, r8
 8009f7e:	1419      	asrs	r1, r3, #16
 8009f80:	454e      	cmp	r6, r9
 8009f82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f86:	f84a 3b04 	str.w	r3, [sl], #4
 8009f8a:	d8e7      	bhi.n	8009f5c <__mdiff+0x80>
 8009f8c:	1b33      	subs	r3, r6, r4
 8009f8e:	3b15      	subs	r3, #21
 8009f90:	f023 0303 	bic.w	r3, r3, #3
 8009f94:	3304      	adds	r3, #4
 8009f96:	3415      	adds	r4, #21
 8009f98:	42a6      	cmp	r6, r4
 8009f9a:	bf38      	it	cc
 8009f9c:	2304      	movcc	r3, #4
 8009f9e:	441d      	add	r5, r3
 8009fa0:	4473      	add	r3, lr
 8009fa2:	469e      	mov	lr, r3
 8009fa4:	462e      	mov	r6, r5
 8009fa6:	4566      	cmp	r6, ip
 8009fa8:	d30e      	bcc.n	8009fc8 <__mdiff+0xec>
 8009faa:	f10c 0203 	add.w	r2, ip, #3
 8009fae:	1b52      	subs	r2, r2, r5
 8009fb0:	f022 0203 	bic.w	r2, r2, #3
 8009fb4:	3d03      	subs	r5, #3
 8009fb6:	45ac      	cmp	ip, r5
 8009fb8:	bf38      	it	cc
 8009fba:	2200      	movcc	r2, #0
 8009fbc:	441a      	add	r2, r3
 8009fbe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009fc2:	b17b      	cbz	r3, 8009fe4 <__mdiff+0x108>
 8009fc4:	6107      	str	r7, [r0, #16]
 8009fc6:	e7a3      	b.n	8009f10 <__mdiff+0x34>
 8009fc8:	f856 8b04 	ldr.w	r8, [r6], #4
 8009fcc:	fa11 f288 	uxtah	r2, r1, r8
 8009fd0:	1414      	asrs	r4, r2, #16
 8009fd2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009fd6:	b292      	uxth	r2, r2
 8009fd8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009fdc:	f84e 2b04 	str.w	r2, [lr], #4
 8009fe0:	1421      	asrs	r1, r4, #16
 8009fe2:	e7e0      	b.n	8009fa6 <__mdiff+0xca>
 8009fe4:	3f01      	subs	r7, #1
 8009fe6:	e7ea      	b.n	8009fbe <__mdiff+0xe2>
 8009fe8:	0800b078 	.word	0x0800b078
 8009fec:	0800b168 	.word	0x0800b168

08009ff0 <__ulp>:
 8009ff0:	b082      	sub	sp, #8
 8009ff2:	ed8d 0b00 	vstr	d0, [sp]
 8009ff6:	9b01      	ldr	r3, [sp, #4]
 8009ff8:	4912      	ldr	r1, [pc, #72]	; (800a044 <__ulp+0x54>)
 8009ffa:	4019      	ands	r1, r3
 8009ffc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a000:	2900      	cmp	r1, #0
 800a002:	dd05      	ble.n	800a010 <__ulp+0x20>
 800a004:	2200      	movs	r2, #0
 800a006:	460b      	mov	r3, r1
 800a008:	ec43 2b10 	vmov	d0, r2, r3
 800a00c:	b002      	add	sp, #8
 800a00e:	4770      	bx	lr
 800a010:	4249      	negs	r1, r1
 800a012:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a016:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a01a:	f04f 0200 	mov.w	r2, #0
 800a01e:	f04f 0300 	mov.w	r3, #0
 800a022:	da04      	bge.n	800a02e <__ulp+0x3e>
 800a024:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a028:	fa41 f300 	asr.w	r3, r1, r0
 800a02c:	e7ec      	b.n	800a008 <__ulp+0x18>
 800a02e:	f1a0 0114 	sub.w	r1, r0, #20
 800a032:	291e      	cmp	r1, #30
 800a034:	bfda      	itte	le
 800a036:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a03a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a03e:	2101      	movgt	r1, #1
 800a040:	460a      	mov	r2, r1
 800a042:	e7e1      	b.n	800a008 <__ulp+0x18>
 800a044:	7ff00000 	.word	0x7ff00000

0800a048 <__b2d>:
 800a048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04a:	6905      	ldr	r5, [r0, #16]
 800a04c:	f100 0714 	add.w	r7, r0, #20
 800a050:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a054:	1f2e      	subs	r6, r5, #4
 800a056:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a05a:	4620      	mov	r0, r4
 800a05c:	f7ff fd48 	bl	8009af0 <__hi0bits>
 800a060:	f1c0 0320 	rsb	r3, r0, #32
 800a064:	280a      	cmp	r0, #10
 800a066:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a0e4 <__b2d+0x9c>
 800a06a:	600b      	str	r3, [r1, #0]
 800a06c:	dc14      	bgt.n	800a098 <__b2d+0x50>
 800a06e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a072:	fa24 f10e 	lsr.w	r1, r4, lr
 800a076:	42b7      	cmp	r7, r6
 800a078:	ea41 030c 	orr.w	r3, r1, ip
 800a07c:	bf34      	ite	cc
 800a07e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a082:	2100      	movcs	r1, #0
 800a084:	3015      	adds	r0, #21
 800a086:	fa04 f000 	lsl.w	r0, r4, r0
 800a08a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a08e:	ea40 0201 	orr.w	r2, r0, r1
 800a092:	ec43 2b10 	vmov	d0, r2, r3
 800a096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a098:	42b7      	cmp	r7, r6
 800a09a:	bf3a      	itte	cc
 800a09c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a0a0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a0a4:	2100      	movcs	r1, #0
 800a0a6:	380b      	subs	r0, #11
 800a0a8:	d017      	beq.n	800a0da <__b2d+0x92>
 800a0aa:	f1c0 0c20 	rsb	ip, r0, #32
 800a0ae:	fa04 f500 	lsl.w	r5, r4, r0
 800a0b2:	42be      	cmp	r6, r7
 800a0b4:	fa21 f40c 	lsr.w	r4, r1, ip
 800a0b8:	ea45 0504 	orr.w	r5, r5, r4
 800a0bc:	bf8c      	ite	hi
 800a0be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a0c2:	2400      	movls	r4, #0
 800a0c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a0c8:	fa01 f000 	lsl.w	r0, r1, r0
 800a0cc:	fa24 f40c 	lsr.w	r4, r4, ip
 800a0d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a0d4:	ea40 0204 	orr.w	r2, r0, r4
 800a0d8:	e7db      	b.n	800a092 <__b2d+0x4a>
 800a0da:	ea44 030c 	orr.w	r3, r4, ip
 800a0de:	460a      	mov	r2, r1
 800a0e0:	e7d7      	b.n	800a092 <__b2d+0x4a>
 800a0e2:	bf00      	nop
 800a0e4:	3ff00000 	.word	0x3ff00000

0800a0e8 <__d2b>:
 800a0e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0ec:	4689      	mov	r9, r1
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	ec57 6b10 	vmov	r6, r7, d0
 800a0f4:	4690      	mov	r8, r2
 800a0f6:	f7ff fc09 	bl	800990c <_Balloc>
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	b930      	cbnz	r0, 800a10c <__d2b+0x24>
 800a0fe:	4602      	mov	r2, r0
 800a100:	4b25      	ldr	r3, [pc, #148]	; (800a198 <__d2b+0xb0>)
 800a102:	4826      	ldr	r0, [pc, #152]	; (800a19c <__d2b+0xb4>)
 800a104:	f240 310a 	movw	r1, #778	; 0x30a
 800a108:	f7fd ff98 	bl	800803c <__assert_func>
 800a10c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a110:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a114:	bb35      	cbnz	r5, 800a164 <__d2b+0x7c>
 800a116:	2e00      	cmp	r6, #0
 800a118:	9301      	str	r3, [sp, #4]
 800a11a:	d028      	beq.n	800a16e <__d2b+0x86>
 800a11c:	4668      	mov	r0, sp
 800a11e:	9600      	str	r6, [sp, #0]
 800a120:	f7ff fd06 	bl	8009b30 <__lo0bits>
 800a124:	9900      	ldr	r1, [sp, #0]
 800a126:	b300      	cbz	r0, 800a16a <__d2b+0x82>
 800a128:	9a01      	ldr	r2, [sp, #4]
 800a12a:	f1c0 0320 	rsb	r3, r0, #32
 800a12e:	fa02 f303 	lsl.w	r3, r2, r3
 800a132:	430b      	orrs	r3, r1
 800a134:	40c2      	lsrs	r2, r0
 800a136:	6163      	str	r3, [r4, #20]
 800a138:	9201      	str	r2, [sp, #4]
 800a13a:	9b01      	ldr	r3, [sp, #4]
 800a13c:	61a3      	str	r3, [r4, #24]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	bf14      	ite	ne
 800a142:	2202      	movne	r2, #2
 800a144:	2201      	moveq	r2, #1
 800a146:	6122      	str	r2, [r4, #16]
 800a148:	b1d5      	cbz	r5, 800a180 <__d2b+0x98>
 800a14a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a14e:	4405      	add	r5, r0
 800a150:	f8c9 5000 	str.w	r5, [r9]
 800a154:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a158:	f8c8 0000 	str.w	r0, [r8]
 800a15c:	4620      	mov	r0, r4
 800a15e:	b003      	add	sp, #12
 800a160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a164:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a168:	e7d5      	b.n	800a116 <__d2b+0x2e>
 800a16a:	6161      	str	r1, [r4, #20]
 800a16c:	e7e5      	b.n	800a13a <__d2b+0x52>
 800a16e:	a801      	add	r0, sp, #4
 800a170:	f7ff fcde 	bl	8009b30 <__lo0bits>
 800a174:	9b01      	ldr	r3, [sp, #4]
 800a176:	6163      	str	r3, [r4, #20]
 800a178:	2201      	movs	r2, #1
 800a17a:	6122      	str	r2, [r4, #16]
 800a17c:	3020      	adds	r0, #32
 800a17e:	e7e3      	b.n	800a148 <__d2b+0x60>
 800a180:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a184:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a188:	f8c9 0000 	str.w	r0, [r9]
 800a18c:	6918      	ldr	r0, [r3, #16]
 800a18e:	f7ff fcaf 	bl	8009af0 <__hi0bits>
 800a192:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a196:	e7df      	b.n	800a158 <__d2b+0x70>
 800a198:	0800b078 	.word	0x0800b078
 800a19c:	0800b168 	.word	0x0800b168

0800a1a0 <__ratio>:
 800a1a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a4:	4688      	mov	r8, r1
 800a1a6:	4669      	mov	r1, sp
 800a1a8:	4681      	mov	r9, r0
 800a1aa:	f7ff ff4d 	bl	800a048 <__b2d>
 800a1ae:	a901      	add	r1, sp, #4
 800a1b0:	4640      	mov	r0, r8
 800a1b2:	ec55 4b10 	vmov	r4, r5, d0
 800a1b6:	f7ff ff47 	bl	800a048 <__b2d>
 800a1ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a1be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a1c2:	eba3 0c02 	sub.w	ip, r3, r2
 800a1c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a1ca:	1a9b      	subs	r3, r3, r2
 800a1cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a1d0:	ec51 0b10 	vmov	r0, r1, d0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	bfd6      	itet	le
 800a1d8:	460a      	movle	r2, r1
 800a1da:	462a      	movgt	r2, r5
 800a1dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a1e0:	468b      	mov	fp, r1
 800a1e2:	462f      	mov	r7, r5
 800a1e4:	bfd4      	ite	le
 800a1e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a1ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	ee10 2a10 	vmov	r2, s0
 800a1f4:	465b      	mov	r3, fp
 800a1f6:	4639      	mov	r1, r7
 800a1f8:	f7f6 fb58 	bl	80008ac <__aeabi_ddiv>
 800a1fc:	ec41 0b10 	vmov	d0, r0, r1
 800a200:	b003      	add	sp, #12
 800a202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a206 <__copybits>:
 800a206:	3901      	subs	r1, #1
 800a208:	b570      	push	{r4, r5, r6, lr}
 800a20a:	1149      	asrs	r1, r1, #5
 800a20c:	6914      	ldr	r4, [r2, #16]
 800a20e:	3101      	adds	r1, #1
 800a210:	f102 0314 	add.w	r3, r2, #20
 800a214:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a218:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a21c:	1f05      	subs	r5, r0, #4
 800a21e:	42a3      	cmp	r3, r4
 800a220:	d30c      	bcc.n	800a23c <__copybits+0x36>
 800a222:	1aa3      	subs	r3, r4, r2
 800a224:	3b11      	subs	r3, #17
 800a226:	f023 0303 	bic.w	r3, r3, #3
 800a22a:	3211      	adds	r2, #17
 800a22c:	42a2      	cmp	r2, r4
 800a22e:	bf88      	it	hi
 800a230:	2300      	movhi	r3, #0
 800a232:	4418      	add	r0, r3
 800a234:	2300      	movs	r3, #0
 800a236:	4288      	cmp	r0, r1
 800a238:	d305      	bcc.n	800a246 <__copybits+0x40>
 800a23a:	bd70      	pop	{r4, r5, r6, pc}
 800a23c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a240:	f845 6f04 	str.w	r6, [r5, #4]!
 800a244:	e7eb      	b.n	800a21e <__copybits+0x18>
 800a246:	f840 3b04 	str.w	r3, [r0], #4
 800a24a:	e7f4      	b.n	800a236 <__copybits+0x30>

0800a24c <__any_on>:
 800a24c:	f100 0214 	add.w	r2, r0, #20
 800a250:	6900      	ldr	r0, [r0, #16]
 800a252:	114b      	asrs	r3, r1, #5
 800a254:	4298      	cmp	r0, r3
 800a256:	b510      	push	{r4, lr}
 800a258:	db11      	blt.n	800a27e <__any_on+0x32>
 800a25a:	dd0a      	ble.n	800a272 <__any_on+0x26>
 800a25c:	f011 011f 	ands.w	r1, r1, #31
 800a260:	d007      	beq.n	800a272 <__any_on+0x26>
 800a262:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a266:	fa24 f001 	lsr.w	r0, r4, r1
 800a26a:	fa00 f101 	lsl.w	r1, r0, r1
 800a26e:	428c      	cmp	r4, r1
 800a270:	d10b      	bne.n	800a28a <__any_on+0x3e>
 800a272:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a276:	4293      	cmp	r3, r2
 800a278:	d803      	bhi.n	800a282 <__any_on+0x36>
 800a27a:	2000      	movs	r0, #0
 800a27c:	bd10      	pop	{r4, pc}
 800a27e:	4603      	mov	r3, r0
 800a280:	e7f7      	b.n	800a272 <__any_on+0x26>
 800a282:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a286:	2900      	cmp	r1, #0
 800a288:	d0f5      	beq.n	800a276 <__any_on+0x2a>
 800a28a:	2001      	movs	r0, #1
 800a28c:	e7f6      	b.n	800a27c <__any_on+0x30>

0800a28e <_calloc_r>:
 800a28e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a290:	fba1 2402 	umull	r2, r4, r1, r2
 800a294:	b94c      	cbnz	r4, 800a2aa <_calloc_r+0x1c>
 800a296:	4611      	mov	r1, r2
 800a298:	9201      	str	r2, [sp, #4]
 800a29a:	f7fc f9eb 	bl	8006674 <_malloc_r>
 800a29e:	9a01      	ldr	r2, [sp, #4]
 800a2a0:	4605      	mov	r5, r0
 800a2a2:	b930      	cbnz	r0, 800a2b2 <_calloc_r+0x24>
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	b003      	add	sp, #12
 800a2a8:	bd30      	pop	{r4, r5, pc}
 800a2aa:	220c      	movs	r2, #12
 800a2ac:	6002      	str	r2, [r0, #0]
 800a2ae:	2500      	movs	r5, #0
 800a2b0:	e7f8      	b.n	800a2a4 <_calloc_r+0x16>
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	f7fc f96a 	bl	800658c <memset>
 800a2b8:	e7f4      	b.n	800a2a4 <_calloc_r+0x16>

0800a2ba <__ssputs_r>:
 800a2ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2be:	688e      	ldr	r6, [r1, #8]
 800a2c0:	429e      	cmp	r6, r3
 800a2c2:	4682      	mov	sl, r0
 800a2c4:	460c      	mov	r4, r1
 800a2c6:	4690      	mov	r8, r2
 800a2c8:	461f      	mov	r7, r3
 800a2ca:	d838      	bhi.n	800a33e <__ssputs_r+0x84>
 800a2cc:	898a      	ldrh	r2, [r1, #12]
 800a2ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2d2:	d032      	beq.n	800a33a <__ssputs_r+0x80>
 800a2d4:	6825      	ldr	r5, [r4, #0]
 800a2d6:	6909      	ldr	r1, [r1, #16]
 800a2d8:	eba5 0901 	sub.w	r9, r5, r1
 800a2dc:	6965      	ldr	r5, [r4, #20]
 800a2de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	444b      	add	r3, r9
 800a2ea:	106d      	asrs	r5, r5, #1
 800a2ec:	429d      	cmp	r5, r3
 800a2ee:	bf38      	it	cc
 800a2f0:	461d      	movcc	r5, r3
 800a2f2:	0553      	lsls	r3, r2, #21
 800a2f4:	d531      	bpl.n	800a35a <__ssputs_r+0xa0>
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	f7fc f9bc 	bl	8006674 <_malloc_r>
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	b950      	cbnz	r0, 800a316 <__ssputs_r+0x5c>
 800a300:	230c      	movs	r3, #12
 800a302:	f8ca 3000 	str.w	r3, [sl]
 800a306:	89a3      	ldrh	r3, [r4, #12]
 800a308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a30c:	81a3      	strh	r3, [r4, #12]
 800a30e:	f04f 30ff 	mov.w	r0, #4294967295
 800a312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a316:	6921      	ldr	r1, [r4, #16]
 800a318:	464a      	mov	r2, r9
 800a31a:	f7ff fadd 	bl	80098d8 <memcpy>
 800a31e:	89a3      	ldrh	r3, [r4, #12]
 800a320:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a328:	81a3      	strh	r3, [r4, #12]
 800a32a:	6126      	str	r6, [r4, #16]
 800a32c:	6165      	str	r5, [r4, #20]
 800a32e:	444e      	add	r6, r9
 800a330:	eba5 0509 	sub.w	r5, r5, r9
 800a334:	6026      	str	r6, [r4, #0]
 800a336:	60a5      	str	r5, [r4, #8]
 800a338:	463e      	mov	r6, r7
 800a33a:	42be      	cmp	r6, r7
 800a33c:	d900      	bls.n	800a340 <__ssputs_r+0x86>
 800a33e:	463e      	mov	r6, r7
 800a340:	6820      	ldr	r0, [r4, #0]
 800a342:	4632      	mov	r2, r6
 800a344:	4641      	mov	r1, r8
 800a346:	f7fc f907 	bl	8006558 <memmove>
 800a34a:	68a3      	ldr	r3, [r4, #8]
 800a34c:	1b9b      	subs	r3, r3, r6
 800a34e:	60a3      	str	r3, [r4, #8]
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	4433      	add	r3, r6
 800a354:	6023      	str	r3, [r4, #0]
 800a356:	2000      	movs	r0, #0
 800a358:	e7db      	b.n	800a312 <__ssputs_r+0x58>
 800a35a:	462a      	mov	r2, r5
 800a35c:	f000 fb2e 	bl	800a9bc <_realloc_r>
 800a360:	4606      	mov	r6, r0
 800a362:	2800      	cmp	r0, #0
 800a364:	d1e1      	bne.n	800a32a <__ssputs_r+0x70>
 800a366:	6921      	ldr	r1, [r4, #16]
 800a368:	4650      	mov	r0, sl
 800a36a:	f7fc f917 	bl	800659c <_free_r>
 800a36e:	e7c7      	b.n	800a300 <__ssputs_r+0x46>

0800a370 <_svfiprintf_r>:
 800a370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a374:	4698      	mov	r8, r3
 800a376:	898b      	ldrh	r3, [r1, #12]
 800a378:	061b      	lsls	r3, r3, #24
 800a37a:	b09d      	sub	sp, #116	; 0x74
 800a37c:	4607      	mov	r7, r0
 800a37e:	460d      	mov	r5, r1
 800a380:	4614      	mov	r4, r2
 800a382:	d50e      	bpl.n	800a3a2 <_svfiprintf_r+0x32>
 800a384:	690b      	ldr	r3, [r1, #16]
 800a386:	b963      	cbnz	r3, 800a3a2 <_svfiprintf_r+0x32>
 800a388:	2140      	movs	r1, #64	; 0x40
 800a38a:	f7fc f973 	bl	8006674 <_malloc_r>
 800a38e:	6028      	str	r0, [r5, #0]
 800a390:	6128      	str	r0, [r5, #16]
 800a392:	b920      	cbnz	r0, 800a39e <_svfiprintf_r+0x2e>
 800a394:	230c      	movs	r3, #12
 800a396:	603b      	str	r3, [r7, #0]
 800a398:	f04f 30ff 	mov.w	r0, #4294967295
 800a39c:	e0d1      	b.n	800a542 <_svfiprintf_r+0x1d2>
 800a39e:	2340      	movs	r3, #64	; 0x40
 800a3a0:	616b      	str	r3, [r5, #20]
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a3a6:	2320      	movs	r3, #32
 800a3a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3b0:	2330      	movs	r3, #48	; 0x30
 800a3b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a55c <_svfiprintf_r+0x1ec>
 800a3b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3ba:	f04f 0901 	mov.w	r9, #1
 800a3be:	4623      	mov	r3, r4
 800a3c0:	469a      	mov	sl, r3
 800a3c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3c6:	b10a      	cbz	r2, 800a3cc <_svfiprintf_r+0x5c>
 800a3c8:	2a25      	cmp	r2, #37	; 0x25
 800a3ca:	d1f9      	bne.n	800a3c0 <_svfiprintf_r+0x50>
 800a3cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a3d0:	d00b      	beq.n	800a3ea <_svfiprintf_r+0x7a>
 800a3d2:	465b      	mov	r3, fp
 800a3d4:	4622      	mov	r2, r4
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	4638      	mov	r0, r7
 800a3da:	f7ff ff6e 	bl	800a2ba <__ssputs_r>
 800a3de:	3001      	adds	r0, #1
 800a3e0:	f000 80aa 	beq.w	800a538 <_svfiprintf_r+0x1c8>
 800a3e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3e6:	445a      	add	r2, fp
 800a3e8:	9209      	str	r2, [sp, #36]	; 0x24
 800a3ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f000 80a2 	beq.w	800a538 <_svfiprintf_r+0x1c8>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a3fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3fe:	f10a 0a01 	add.w	sl, sl, #1
 800a402:	9304      	str	r3, [sp, #16]
 800a404:	9307      	str	r3, [sp, #28]
 800a406:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a40a:	931a      	str	r3, [sp, #104]	; 0x68
 800a40c:	4654      	mov	r4, sl
 800a40e:	2205      	movs	r2, #5
 800a410:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a414:	4851      	ldr	r0, [pc, #324]	; (800a55c <_svfiprintf_r+0x1ec>)
 800a416:	f7f5 ff13 	bl	8000240 <memchr>
 800a41a:	9a04      	ldr	r2, [sp, #16]
 800a41c:	b9d8      	cbnz	r0, 800a456 <_svfiprintf_r+0xe6>
 800a41e:	06d0      	lsls	r0, r2, #27
 800a420:	bf44      	itt	mi
 800a422:	2320      	movmi	r3, #32
 800a424:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a428:	0711      	lsls	r1, r2, #28
 800a42a:	bf44      	itt	mi
 800a42c:	232b      	movmi	r3, #43	; 0x2b
 800a42e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a432:	f89a 3000 	ldrb.w	r3, [sl]
 800a436:	2b2a      	cmp	r3, #42	; 0x2a
 800a438:	d015      	beq.n	800a466 <_svfiprintf_r+0xf6>
 800a43a:	9a07      	ldr	r2, [sp, #28]
 800a43c:	4654      	mov	r4, sl
 800a43e:	2000      	movs	r0, #0
 800a440:	f04f 0c0a 	mov.w	ip, #10
 800a444:	4621      	mov	r1, r4
 800a446:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a44a:	3b30      	subs	r3, #48	; 0x30
 800a44c:	2b09      	cmp	r3, #9
 800a44e:	d94e      	bls.n	800a4ee <_svfiprintf_r+0x17e>
 800a450:	b1b0      	cbz	r0, 800a480 <_svfiprintf_r+0x110>
 800a452:	9207      	str	r2, [sp, #28]
 800a454:	e014      	b.n	800a480 <_svfiprintf_r+0x110>
 800a456:	eba0 0308 	sub.w	r3, r0, r8
 800a45a:	fa09 f303 	lsl.w	r3, r9, r3
 800a45e:	4313      	orrs	r3, r2
 800a460:	9304      	str	r3, [sp, #16]
 800a462:	46a2      	mov	sl, r4
 800a464:	e7d2      	b.n	800a40c <_svfiprintf_r+0x9c>
 800a466:	9b03      	ldr	r3, [sp, #12]
 800a468:	1d19      	adds	r1, r3, #4
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	9103      	str	r1, [sp, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	bfbb      	ittet	lt
 800a472:	425b      	neglt	r3, r3
 800a474:	f042 0202 	orrlt.w	r2, r2, #2
 800a478:	9307      	strge	r3, [sp, #28]
 800a47a:	9307      	strlt	r3, [sp, #28]
 800a47c:	bfb8      	it	lt
 800a47e:	9204      	strlt	r2, [sp, #16]
 800a480:	7823      	ldrb	r3, [r4, #0]
 800a482:	2b2e      	cmp	r3, #46	; 0x2e
 800a484:	d10c      	bne.n	800a4a0 <_svfiprintf_r+0x130>
 800a486:	7863      	ldrb	r3, [r4, #1]
 800a488:	2b2a      	cmp	r3, #42	; 0x2a
 800a48a:	d135      	bne.n	800a4f8 <_svfiprintf_r+0x188>
 800a48c:	9b03      	ldr	r3, [sp, #12]
 800a48e:	1d1a      	adds	r2, r3, #4
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	9203      	str	r2, [sp, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	bfb8      	it	lt
 800a498:	f04f 33ff 	movlt.w	r3, #4294967295
 800a49c:	3402      	adds	r4, #2
 800a49e:	9305      	str	r3, [sp, #20]
 800a4a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a56c <_svfiprintf_r+0x1fc>
 800a4a4:	7821      	ldrb	r1, [r4, #0]
 800a4a6:	2203      	movs	r2, #3
 800a4a8:	4650      	mov	r0, sl
 800a4aa:	f7f5 fec9 	bl	8000240 <memchr>
 800a4ae:	b140      	cbz	r0, 800a4c2 <_svfiprintf_r+0x152>
 800a4b0:	2340      	movs	r3, #64	; 0x40
 800a4b2:	eba0 000a 	sub.w	r0, r0, sl
 800a4b6:	fa03 f000 	lsl.w	r0, r3, r0
 800a4ba:	9b04      	ldr	r3, [sp, #16]
 800a4bc:	4303      	orrs	r3, r0
 800a4be:	3401      	adds	r4, #1
 800a4c0:	9304      	str	r3, [sp, #16]
 800a4c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c6:	4826      	ldr	r0, [pc, #152]	; (800a560 <_svfiprintf_r+0x1f0>)
 800a4c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4cc:	2206      	movs	r2, #6
 800a4ce:	f7f5 feb7 	bl	8000240 <memchr>
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d038      	beq.n	800a548 <_svfiprintf_r+0x1d8>
 800a4d6:	4b23      	ldr	r3, [pc, #140]	; (800a564 <_svfiprintf_r+0x1f4>)
 800a4d8:	bb1b      	cbnz	r3, 800a522 <_svfiprintf_r+0x1b2>
 800a4da:	9b03      	ldr	r3, [sp, #12]
 800a4dc:	3307      	adds	r3, #7
 800a4de:	f023 0307 	bic.w	r3, r3, #7
 800a4e2:	3308      	adds	r3, #8
 800a4e4:	9303      	str	r3, [sp, #12]
 800a4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e8:	4433      	add	r3, r6
 800a4ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ec:	e767      	b.n	800a3be <_svfiprintf_r+0x4e>
 800a4ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	2001      	movs	r0, #1
 800a4f6:	e7a5      	b.n	800a444 <_svfiprintf_r+0xd4>
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	3401      	adds	r4, #1
 800a4fc:	9305      	str	r3, [sp, #20]
 800a4fe:	4619      	mov	r1, r3
 800a500:	f04f 0c0a 	mov.w	ip, #10
 800a504:	4620      	mov	r0, r4
 800a506:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a50a:	3a30      	subs	r2, #48	; 0x30
 800a50c:	2a09      	cmp	r2, #9
 800a50e:	d903      	bls.n	800a518 <_svfiprintf_r+0x1a8>
 800a510:	2b00      	cmp	r3, #0
 800a512:	d0c5      	beq.n	800a4a0 <_svfiprintf_r+0x130>
 800a514:	9105      	str	r1, [sp, #20]
 800a516:	e7c3      	b.n	800a4a0 <_svfiprintf_r+0x130>
 800a518:	fb0c 2101 	mla	r1, ip, r1, r2
 800a51c:	4604      	mov	r4, r0
 800a51e:	2301      	movs	r3, #1
 800a520:	e7f0      	b.n	800a504 <_svfiprintf_r+0x194>
 800a522:	ab03      	add	r3, sp, #12
 800a524:	9300      	str	r3, [sp, #0]
 800a526:	462a      	mov	r2, r5
 800a528:	4b0f      	ldr	r3, [pc, #60]	; (800a568 <_svfiprintf_r+0x1f8>)
 800a52a:	a904      	add	r1, sp, #16
 800a52c:	4638      	mov	r0, r7
 800a52e:	f7fc f9b5 	bl	800689c <_printf_float>
 800a532:	1c42      	adds	r2, r0, #1
 800a534:	4606      	mov	r6, r0
 800a536:	d1d6      	bne.n	800a4e6 <_svfiprintf_r+0x176>
 800a538:	89ab      	ldrh	r3, [r5, #12]
 800a53a:	065b      	lsls	r3, r3, #25
 800a53c:	f53f af2c 	bmi.w	800a398 <_svfiprintf_r+0x28>
 800a540:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a542:	b01d      	add	sp, #116	; 0x74
 800a544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a548:	ab03      	add	r3, sp, #12
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	462a      	mov	r2, r5
 800a54e:	4b06      	ldr	r3, [pc, #24]	; (800a568 <_svfiprintf_r+0x1f8>)
 800a550:	a904      	add	r1, sp, #16
 800a552:	4638      	mov	r0, r7
 800a554:	f7fc fc46 	bl	8006de4 <_printf_i>
 800a558:	e7eb      	b.n	800a532 <_svfiprintf_r+0x1c2>
 800a55a:	bf00      	nop
 800a55c:	0800b2c4 	.word	0x0800b2c4
 800a560:	0800b2ce 	.word	0x0800b2ce
 800a564:	0800689d 	.word	0x0800689d
 800a568:	0800a2bb 	.word	0x0800a2bb
 800a56c:	0800b2ca 	.word	0x0800b2ca

0800a570 <__sfputc_r>:
 800a570:	6893      	ldr	r3, [r2, #8]
 800a572:	3b01      	subs	r3, #1
 800a574:	2b00      	cmp	r3, #0
 800a576:	b410      	push	{r4}
 800a578:	6093      	str	r3, [r2, #8]
 800a57a:	da08      	bge.n	800a58e <__sfputc_r+0x1e>
 800a57c:	6994      	ldr	r4, [r2, #24]
 800a57e:	42a3      	cmp	r3, r4
 800a580:	db01      	blt.n	800a586 <__sfputc_r+0x16>
 800a582:	290a      	cmp	r1, #10
 800a584:	d103      	bne.n	800a58e <__sfputc_r+0x1e>
 800a586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a58a:	f7fd bc97 	b.w	8007ebc <__swbuf_r>
 800a58e:	6813      	ldr	r3, [r2, #0]
 800a590:	1c58      	adds	r0, r3, #1
 800a592:	6010      	str	r0, [r2, #0]
 800a594:	7019      	strb	r1, [r3, #0]
 800a596:	4608      	mov	r0, r1
 800a598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a59c:	4770      	bx	lr

0800a59e <__sfputs_r>:
 800a59e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a0:	4606      	mov	r6, r0
 800a5a2:	460f      	mov	r7, r1
 800a5a4:	4614      	mov	r4, r2
 800a5a6:	18d5      	adds	r5, r2, r3
 800a5a8:	42ac      	cmp	r4, r5
 800a5aa:	d101      	bne.n	800a5b0 <__sfputs_r+0x12>
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	e007      	b.n	800a5c0 <__sfputs_r+0x22>
 800a5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b4:	463a      	mov	r2, r7
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	f7ff ffda 	bl	800a570 <__sfputc_r>
 800a5bc:	1c43      	adds	r3, r0, #1
 800a5be:	d1f3      	bne.n	800a5a8 <__sfputs_r+0xa>
 800a5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5c4 <_vfiprintf_r>:
 800a5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c8:	460d      	mov	r5, r1
 800a5ca:	b09d      	sub	sp, #116	; 0x74
 800a5cc:	4614      	mov	r4, r2
 800a5ce:	4698      	mov	r8, r3
 800a5d0:	4606      	mov	r6, r0
 800a5d2:	b118      	cbz	r0, 800a5dc <_vfiprintf_r+0x18>
 800a5d4:	6983      	ldr	r3, [r0, #24]
 800a5d6:	b90b      	cbnz	r3, 800a5dc <_vfiprintf_r+0x18>
 800a5d8:	f7fe fce2 	bl	8008fa0 <__sinit>
 800a5dc:	4b89      	ldr	r3, [pc, #548]	; (800a804 <_vfiprintf_r+0x240>)
 800a5de:	429d      	cmp	r5, r3
 800a5e0:	d11b      	bne.n	800a61a <_vfiprintf_r+0x56>
 800a5e2:	6875      	ldr	r5, [r6, #4]
 800a5e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5e6:	07d9      	lsls	r1, r3, #31
 800a5e8:	d405      	bmi.n	800a5f6 <_vfiprintf_r+0x32>
 800a5ea:	89ab      	ldrh	r3, [r5, #12]
 800a5ec:	059a      	lsls	r2, r3, #22
 800a5ee:	d402      	bmi.n	800a5f6 <_vfiprintf_r+0x32>
 800a5f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5f2:	f7ff f8f8 	bl	80097e6 <__retarget_lock_acquire_recursive>
 800a5f6:	89ab      	ldrh	r3, [r5, #12]
 800a5f8:	071b      	lsls	r3, r3, #28
 800a5fa:	d501      	bpl.n	800a600 <_vfiprintf_r+0x3c>
 800a5fc:	692b      	ldr	r3, [r5, #16]
 800a5fe:	b9eb      	cbnz	r3, 800a63c <_vfiprintf_r+0x78>
 800a600:	4629      	mov	r1, r5
 800a602:	4630      	mov	r0, r6
 800a604:	f7fd fcac 	bl	8007f60 <__swsetup_r>
 800a608:	b1c0      	cbz	r0, 800a63c <_vfiprintf_r+0x78>
 800a60a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a60c:	07dc      	lsls	r4, r3, #31
 800a60e:	d50e      	bpl.n	800a62e <_vfiprintf_r+0x6a>
 800a610:	f04f 30ff 	mov.w	r0, #4294967295
 800a614:	b01d      	add	sp, #116	; 0x74
 800a616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61a:	4b7b      	ldr	r3, [pc, #492]	; (800a808 <_vfiprintf_r+0x244>)
 800a61c:	429d      	cmp	r5, r3
 800a61e:	d101      	bne.n	800a624 <_vfiprintf_r+0x60>
 800a620:	68b5      	ldr	r5, [r6, #8]
 800a622:	e7df      	b.n	800a5e4 <_vfiprintf_r+0x20>
 800a624:	4b79      	ldr	r3, [pc, #484]	; (800a80c <_vfiprintf_r+0x248>)
 800a626:	429d      	cmp	r5, r3
 800a628:	bf08      	it	eq
 800a62a:	68f5      	ldreq	r5, [r6, #12]
 800a62c:	e7da      	b.n	800a5e4 <_vfiprintf_r+0x20>
 800a62e:	89ab      	ldrh	r3, [r5, #12]
 800a630:	0598      	lsls	r0, r3, #22
 800a632:	d4ed      	bmi.n	800a610 <_vfiprintf_r+0x4c>
 800a634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a636:	f7ff f8d7 	bl	80097e8 <__retarget_lock_release_recursive>
 800a63a:	e7e9      	b.n	800a610 <_vfiprintf_r+0x4c>
 800a63c:	2300      	movs	r3, #0
 800a63e:	9309      	str	r3, [sp, #36]	; 0x24
 800a640:	2320      	movs	r3, #32
 800a642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a646:	f8cd 800c 	str.w	r8, [sp, #12]
 800a64a:	2330      	movs	r3, #48	; 0x30
 800a64c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a810 <_vfiprintf_r+0x24c>
 800a650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a654:	f04f 0901 	mov.w	r9, #1
 800a658:	4623      	mov	r3, r4
 800a65a:	469a      	mov	sl, r3
 800a65c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a660:	b10a      	cbz	r2, 800a666 <_vfiprintf_r+0xa2>
 800a662:	2a25      	cmp	r2, #37	; 0x25
 800a664:	d1f9      	bne.n	800a65a <_vfiprintf_r+0x96>
 800a666:	ebba 0b04 	subs.w	fp, sl, r4
 800a66a:	d00b      	beq.n	800a684 <_vfiprintf_r+0xc0>
 800a66c:	465b      	mov	r3, fp
 800a66e:	4622      	mov	r2, r4
 800a670:	4629      	mov	r1, r5
 800a672:	4630      	mov	r0, r6
 800a674:	f7ff ff93 	bl	800a59e <__sfputs_r>
 800a678:	3001      	adds	r0, #1
 800a67a:	f000 80aa 	beq.w	800a7d2 <_vfiprintf_r+0x20e>
 800a67e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a680:	445a      	add	r2, fp
 800a682:	9209      	str	r2, [sp, #36]	; 0x24
 800a684:	f89a 3000 	ldrb.w	r3, [sl]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 80a2 	beq.w	800a7d2 <_vfiprintf_r+0x20e>
 800a68e:	2300      	movs	r3, #0
 800a690:	f04f 32ff 	mov.w	r2, #4294967295
 800a694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a698:	f10a 0a01 	add.w	sl, sl, #1
 800a69c:	9304      	str	r3, [sp, #16]
 800a69e:	9307      	str	r3, [sp, #28]
 800a6a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6a4:	931a      	str	r3, [sp, #104]	; 0x68
 800a6a6:	4654      	mov	r4, sl
 800a6a8:	2205      	movs	r2, #5
 800a6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ae:	4858      	ldr	r0, [pc, #352]	; (800a810 <_vfiprintf_r+0x24c>)
 800a6b0:	f7f5 fdc6 	bl	8000240 <memchr>
 800a6b4:	9a04      	ldr	r2, [sp, #16]
 800a6b6:	b9d8      	cbnz	r0, 800a6f0 <_vfiprintf_r+0x12c>
 800a6b8:	06d1      	lsls	r1, r2, #27
 800a6ba:	bf44      	itt	mi
 800a6bc:	2320      	movmi	r3, #32
 800a6be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6c2:	0713      	lsls	r3, r2, #28
 800a6c4:	bf44      	itt	mi
 800a6c6:	232b      	movmi	r3, #43	; 0x2b
 800a6c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a6d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a6d2:	d015      	beq.n	800a700 <_vfiprintf_r+0x13c>
 800a6d4:	9a07      	ldr	r2, [sp, #28]
 800a6d6:	4654      	mov	r4, sl
 800a6d8:	2000      	movs	r0, #0
 800a6da:	f04f 0c0a 	mov.w	ip, #10
 800a6de:	4621      	mov	r1, r4
 800a6e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6e4:	3b30      	subs	r3, #48	; 0x30
 800a6e6:	2b09      	cmp	r3, #9
 800a6e8:	d94e      	bls.n	800a788 <_vfiprintf_r+0x1c4>
 800a6ea:	b1b0      	cbz	r0, 800a71a <_vfiprintf_r+0x156>
 800a6ec:	9207      	str	r2, [sp, #28]
 800a6ee:	e014      	b.n	800a71a <_vfiprintf_r+0x156>
 800a6f0:	eba0 0308 	sub.w	r3, r0, r8
 800a6f4:	fa09 f303 	lsl.w	r3, r9, r3
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	9304      	str	r3, [sp, #16]
 800a6fc:	46a2      	mov	sl, r4
 800a6fe:	e7d2      	b.n	800a6a6 <_vfiprintf_r+0xe2>
 800a700:	9b03      	ldr	r3, [sp, #12]
 800a702:	1d19      	adds	r1, r3, #4
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	9103      	str	r1, [sp, #12]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	bfbb      	ittet	lt
 800a70c:	425b      	neglt	r3, r3
 800a70e:	f042 0202 	orrlt.w	r2, r2, #2
 800a712:	9307      	strge	r3, [sp, #28]
 800a714:	9307      	strlt	r3, [sp, #28]
 800a716:	bfb8      	it	lt
 800a718:	9204      	strlt	r2, [sp, #16]
 800a71a:	7823      	ldrb	r3, [r4, #0]
 800a71c:	2b2e      	cmp	r3, #46	; 0x2e
 800a71e:	d10c      	bne.n	800a73a <_vfiprintf_r+0x176>
 800a720:	7863      	ldrb	r3, [r4, #1]
 800a722:	2b2a      	cmp	r3, #42	; 0x2a
 800a724:	d135      	bne.n	800a792 <_vfiprintf_r+0x1ce>
 800a726:	9b03      	ldr	r3, [sp, #12]
 800a728:	1d1a      	adds	r2, r3, #4
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	9203      	str	r2, [sp, #12]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	bfb8      	it	lt
 800a732:	f04f 33ff 	movlt.w	r3, #4294967295
 800a736:	3402      	adds	r4, #2
 800a738:	9305      	str	r3, [sp, #20]
 800a73a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a820 <_vfiprintf_r+0x25c>
 800a73e:	7821      	ldrb	r1, [r4, #0]
 800a740:	2203      	movs	r2, #3
 800a742:	4650      	mov	r0, sl
 800a744:	f7f5 fd7c 	bl	8000240 <memchr>
 800a748:	b140      	cbz	r0, 800a75c <_vfiprintf_r+0x198>
 800a74a:	2340      	movs	r3, #64	; 0x40
 800a74c:	eba0 000a 	sub.w	r0, r0, sl
 800a750:	fa03 f000 	lsl.w	r0, r3, r0
 800a754:	9b04      	ldr	r3, [sp, #16]
 800a756:	4303      	orrs	r3, r0
 800a758:	3401      	adds	r4, #1
 800a75a:	9304      	str	r3, [sp, #16]
 800a75c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a760:	482c      	ldr	r0, [pc, #176]	; (800a814 <_vfiprintf_r+0x250>)
 800a762:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a766:	2206      	movs	r2, #6
 800a768:	f7f5 fd6a 	bl	8000240 <memchr>
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d03f      	beq.n	800a7f0 <_vfiprintf_r+0x22c>
 800a770:	4b29      	ldr	r3, [pc, #164]	; (800a818 <_vfiprintf_r+0x254>)
 800a772:	bb1b      	cbnz	r3, 800a7bc <_vfiprintf_r+0x1f8>
 800a774:	9b03      	ldr	r3, [sp, #12]
 800a776:	3307      	adds	r3, #7
 800a778:	f023 0307 	bic.w	r3, r3, #7
 800a77c:	3308      	adds	r3, #8
 800a77e:	9303      	str	r3, [sp, #12]
 800a780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a782:	443b      	add	r3, r7
 800a784:	9309      	str	r3, [sp, #36]	; 0x24
 800a786:	e767      	b.n	800a658 <_vfiprintf_r+0x94>
 800a788:	fb0c 3202 	mla	r2, ip, r2, r3
 800a78c:	460c      	mov	r4, r1
 800a78e:	2001      	movs	r0, #1
 800a790:	e7a5      	b.n	800a6de <_vfiprintf_r+0x11a>
 800a792:	2300      	movs	r3, #0
 800a794:	3401      	adds	r4, #1
 800a796:	9305      	str	r3, [sp, #20]
 800a798:	4619      	mov	r1, r3
 800a79a:	f04f 0c0a 	mov.w	ip, #10
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7a4:	3a30      	subs	r2, #48	; 0x30
 800a7a6:	2a09      	cmp	r2, #9
 800a7a8:	d903      	bls.n	800a7b2 <_vfiprintf_r+0x1ee>
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d0c5      	beq.n	800a73a <_vfiprintf_r+0x176>
 800a7ae:	9105      	str	r1, [sp, #20]
 800a7b0:	e7c3      	b.n	800a73a <_vfiprintf_r+0x176>
 800a7b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e7f0      	b.n	800a79e <_vfiprintf_r+0x1da>
 800a7bc:	ab03      	add	r3, sp, #12
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	462a      	mov	r2, r5
 800a7c2:	4b16      	ldr	r3, [pc, #88]	; (800a81c <_vfiprintf_r+0x258>)
 800a7c4:	a904      	add	r1, sp, #16
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	f7fc f868 	bl	800689c <_printf_float>
 800a7cc:	4607      	mov	r7, r0
 800a7ce:	1c78      	adds	r0, r7, #1
 800a7d0:	d1d6      	bne.n	800a780 <_vfiprintf_r+0x1bc>
 800a7d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7d4:	07d9      	lsls	r1, r3, #31
 800a7d6:	d405      	bmi.n	800a7e4 <_vfiprintf_r+0x220>
 800a7d8:	89ab      	ldrh	r3, [r5, #12]
 800a7da:	059a      	lsls	r2, r3, #22
 800a7dc:	d402      	bmi.n	800a7e4 <_vfiprintf_r+0x220>
 800a7de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7e0:	f7ff f802 	bl	80097e8 <__retarget_lock_release_recursive>
 800a7e4:	89ab      	ldrh	r3, [r5, #12]
 800a7e6:	065b      	lsls	r3, r3, #25
 800a7e8:	f53f af12 	bmi.w	800a610 <_vfiprintf_r+0x4c>
 800a7ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7ee:	e711      	b.n	800a614 <_vfiprintf_r+0x50>
 800a7f0:	ab03      	add	r3, sp, #12
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	462a      	mov	r2, r5
 800a7f6:	4b09      	ldr	r3, [pc, #36]	; (800a81c <_vfiprintf_r+0x258>)
 800a7f8:	a904      	add	r1, sp, #16
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	f7fc faf2 	bl	8006de4 <_printf_i>
 800a800:	e7e4      	b.n	800a7cc <_vfiprintf_r+0x208>
 800a802:	bf00      	nop
 800a804:	0800b0ac 	.word	0x0800b0ac
 800a808:	0800b0cc 	.word	0x0800b0cc
 800a80c:	0800b08c 	.word	0x0800b08c
 800a810:	0800b2c4 	.word	0x0800b2c4
 800a814:	0800b2ce 	.word	0x0800b2ce
 800a818:	0800689d 	.word	0x0800689d
 800a81c:	0800a59f 	.word	0x0800a59f
 800a820:	0800b2ca 	.word	0x0800b2ca
 800a824:	00000000 	.word	0x00000000

0800a828 <nan>:
 800a828:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a830 <nan+0x8>
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	00000000 	.word	0x00000000
 800a834:	7ff80000 	.word	0x7ff80000

0800a838 <__sread>:
 800a838:	b510      	push	{r4, lr}
 800a83a:	460c      	mov	r4, r1
 800a83c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a840:	f000 f8ec 	bl	800aa1c <_read_r>
 800a844:	2800      	cmp	r0, #0
 800a846:	bfab      	itete	ge
 800a848:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a84a:	89a3      	ldrhlt	r3, [r4, #12]
 800a84c:	181b      	addge	r3, r3, r0
 800a84e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a852:	bfac      	ite	ge
 800a854:	6563      	strge	r3, [r4, #84]	; 0x54
 800a856:	81a3      	strhlt	r3, [r4, #12]
 800a858:	bd10      	pop	{r4, pc}

0800a85a <__swrite>:
 800a85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a85e:	461f      	mov	r7, r3
 800a860:	898b      	ldrh	r3, [r1, #12]
 800a862:	05db      	lsls	r3, r3, #23
 800a864:	4605      	mov	r5, r0
 800a866:	460c      	mov	r4, r1
 800a868:	4616      	mov	r6, r2
 800a86a:	d505      	bpl.n	800a878 <__swrite+0x1e>
 800a86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a870:	2302      	movs	r3, #2
 800a872:	2200      	movs	r2, #0
 800a874:	f000 f890 	bl	800a998 <_lseek_r>
 800a878:	89a3      	ldrh	r3, [r4, #12]
 800a87a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a87e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a882:	81a3      	strh	r3, [r4, #12]
 800a884:	4632      	mov	r2, r6
 800a886:	463b      	mov	r3, r7
 800a888:	4628      	mov	r0, r5
 800a88a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a88e:	f000 b837 	b.w	800a900 <_write_r>

0800a892 <__sseek>:
 800a892:	b510      	push	{r4, lr}
 800a894:	460c      	mov	r4, r1
 800a896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a89a:	f000 f87d 	bl	800a998 <_lseek_r>
 800a89e:	1c43      	adds	r3, r0, #1
 800a8a0:	89a3      	ldrh	r3, [r4, #12]
 800a8a2:	bf15      	itete	ne
 800a8a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8ae:	81a3      	strheq	r3, [r4, #12]
 800a8b0:	bf18      	it	ne
 800a8b2:	81a3      	strhne	r3, [r4, #12]
 800a8b4:	bd10      	pop	{r4, pc}

0800a8b6 <__sclose>:
 800a8b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ba:	f000 b83b 	b.w	800a934 <_close_r>

0800a8be <strncmp>:
 800a8be:	b510      	push	{r4, lr}
 800a8c0:	b17a      	cbz	r2, 800a8e2 <strncmp+0x24>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	3901      	subs	r1, #1
 800a8c6:	1884      	adds	r4, r0, r2
 800a8c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a8cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a8d0:	4290      	cmp	r0, r2
 800a8d2:	d101      	bne.n	800a8d8 <strncmp+0x1a>
 800a8d4:	42a3      	cmp	r3, r4
 800a8d6:	d101      	bne.n	800a8dc <strncmp+0x1e>
 800a8d8:	1a80      	subs	r0, r0, r2
 800a8da:	bd10      	pop	{r4, pc}
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d1f3      	bne.n	800a8c8 <strncmp+0xa>
 800a8e0:	e7fa      	b.n	800a8d8 <strncmp+0x1a>
 800a8e2:	4610      	mov	r0, r2
 800a8e4:	e7f9      	b.n	800a8da <strncmp+0x1c>

0800a8e6 <__ascii_wctomb>:
 800a8e6:	b149      	cbz	r1, 800a8fc <__ascii_wctomb+0x16>
 800a8e8:	2aff      	cmp	r2, #255	; 0xff
 800a8ea:	bf85      	ittet	hi
 800a8ec:	238a      	movhi	r3, #138	; 0x8a
 800a8ee:	6003      	strhi	r3, [r0, #0]
 800a8f0:	700a      	strbls	r2, [r1, #0]
 800a8f2:	f04f 30ff 	movhi.w	r0, #4294967295
 800a8f6:	bf98      	it	ls
 800a8f8:	2001      	movls	r0, #1
 800a8fa:	4770      	bx	lr
 800a8fc:	4608      	mov	r0, r1
 800a8fe:	4770      	bx	lr

0800a900 <_write_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4d07      	ldr	r5, [pc, #28]	; (800a920 <_write_r+0x20>)
 800a904:	4604      	mov	r4, r0
 800a906:	4608      	mov	r0, r1
 800a908:	4611      	mov	r1, r2
 800a90a:	2200      	movs	r2, #0
 800a90c:	602a      	str	r2, [r5, #0]
 800a90e:	461a      	mov	r2, r3
 800a910:	f7f8 fd43 	bl	800339a <_write>
 800a914:	1c43      	adds	r3, r0, #1
 800a916:	d102      	bne.n	800a91e <_write_r+0x1e>
 800a918:	682b      	ldr	r3, [r5, #0]
 800a91a:	b103      	cbz	r3, 800a91e <_write_r+0x1e>
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	bd38      	pop	{r3, r4, r5, pc}
 800a920:	20000a2c 	.word	0x20000a2c

0800a924 <abort>:
 800a924:	b508      	push	{r3, lr}
 800a926:	2006      	movs	r0, #6
 800a928:	f000 f8b2 	bl	800aa90 <raise>
 800a92c:	2001      	movs	r0, #1
 800a92e:	f7f8 fd0d 	bl	800334c <_exit>
	...

0800a934 <_close_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4d06      	ldr	r5, [pc, #24]	; (800a950 <_close_r+0x1c>)
 800a938:	2300      	movs	r3, #0
 800a93a:	4604      	mov	r4, r0
 800a93c:	4608      	mov	r0, r1
 800a93e:	602b      	str	r3, [r5, #0]
 800a940:	f7f8 fd47 	bl	80033d2 <_close>
 800a944:	1c43      	adds	r3, r0, #1
 800a946:	d102      	bne.n	800a94e <_close_r+0x1a>
 800a948:	682b      	ldr	r3, [r5, #0]
 800a94a:	b103      	cbz	r3, 800a94e <_close_r+0x1a>
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	bd38      	pop	{r3, r4, r5, pc}
 800a950:	20000a2c 	.word	0x20000a2c

0800a954 <_fstat_r>:
 800a954:	b538      	push	{r3, r4, r5, lr}
 800a956:	4d07      	ldr	r5, [pc, #28]	; (800a974 <_fstat_r+0x20>)
 800a958:	2300      	movs	r3, #0
 800a95a:	4604      	mov	r4, r0
 800a95c:	4608      	mov	r0, r1
 800a95e:	4611      	mov	r1, r2
 800a960:	602b      	str	r3, [r5, #0]
 800a962:	f7f8 fd42 	bl	80033ea <_fstat>
 800a966:	1c43      	adds	r3, r0, #1
 800a968:	d102      	bne.n	800a970 <_fstat_r+0x1c>
 800a96a:	682b      	ldr	r3, [r5, #0]
 800a96c:	b103      	cbz	r3, 800a970 <_fstat_r+0x1c>
 800a96e:	6023      	str	r3, [r4, #0]
 800a970:	bd38      	pop	{r3, r4, r5, pc}
 800a972:	bf00      	nop
 800a974:	20000a2c 	.word	0x20000a2c

0800a978 <_isatty_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4d06      	ldr	r5, [pc, #24]	; (800a994 <_isatty_r+0x1c>)
 800a97c:	2300      	movs	r3, #0
 800a97e:	4604      	mov	r4, r0
 800a980:	4608      	mov	r0, r1
 800a982:	602b      	str	r3, [r5, #0]
 800a984:	f7f8 fd41 	bl	800340a <_isatty>
 800a988:	1c43      	adds	r3, r0, #1
 800a98a:	d102      	bne.n	800a992 <_isatty_r+0x1a>
 800a98c:	682b      	ldr	r3, [r5, #0]
 800a98e:	b103      	cbz	r3, 800a992 <_isatty_r+0x1a>
 800a990:	6023      	str	r3, [r4, #0]
 800a992:	bd38      	pop	{r3, r4, r5, pc}
 800a994:	20000a2c 	.word	0x20000a2c

0800a998 <_lseek_r>:
 800a998:	b538      	push	{r3, r4, r5, lr}
 800a99a:	4d07      	ldr	r5, [pc, #28]	; (800a9b8 <_lseek_r+0x20>)
 800a99c:	4604      	mov	r4, r0
 800a99e:	4608      	mov	r0, r1
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	602a      	str	r2, [r5, #0]
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	f7f8 fd3a 	bl	8003420 <_lseek>
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	d102      	bne.n	800a9b6 <_lseek_r+0x1e>
 800a9b0:	682b      	ldr	r3, [r5, #0]
 800a9b2:	b103      	cbz	r3, 800a9b6 <_lseek_r+0x1e>
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	bd38      	pop	{r3, r4, r5, pc}
 800a9b8:	20000a2c 	.word	0x20000a2c

0800a9bc <_realloc_r>:
 800a9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c0:	4680      	mov	r8, r0
 800a9c2:	4614      	mov	r4, r2
 800a9c4:	460e      	mov	r6, r1
 800a9c6:	b921      	cbnz	r1, 800a9d2 <_realloc_r+0x16>
 800a9c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	f7fb be51 	b.w	8006674 <_malloc_r>
 800a9d2:	b92a      	cbnz	r2, 800a9e0 <_realloc_r+0x24>
 800a9d4:	f7fb fde2 	bl	800659c <_free_r>
 800a9d8:	4625      	mov	r5, r4
 800a9da:	4628      	mov	r0, r5
 800a9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9e0:	f000 f872 	bl	800aac8 <_malloc_usable_size_r>
 800a9e4:	4284      	cmp	r4, r0
 800a9e6:	4607      	mov	r7, r0
 800a9e8:	d802      	bhi.n	800a9f0 <_realloc_r+0x34>
 800a9ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a9ee:	d812      	bhi.n	800aa16 <_realloc_r+0x5a>
 800a9f0:	4621      	mov	r1, r4
 800a9f2:	4640      	mov	r0, r8
 800a9f4:	f7fb fe3e 	bl	8006674 <_malloc_r>
 800a9f8:	4605      	mov	r5, r0
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	d0ed      	beq.n	800a9da <_realloc_r+0x1e>
 800a9fe:	42bc      	cmp	r4, r7
 800aa00:	4622      	mov	r2, r4
 800aa02:	4631      	mov	r1, r6
 800aa04:	bf28      	it	cs
 800aa06:	463a      	movcs	r2, r7
 800aa08:	f7fe ff66 	bl	80098d8 <memcpy>
 800aa0c:	4631      	mov	r1, r6
 800aa0e:	4640      	mov	r0, r8
 800aa10:	f7fb fdc4 	bl	800659c <_free_r>
 800aa14:	e7e1      	b.n	800a9da <_realloc_r+0x1e>
 800aa16:	4635      	mov	r5, r6
 800aa18:	e7df      	b.n	800a9da <_realloc_r+0x1e>
	...

0800aa1c <_read_r>:
 800aa1c:	b538      	push	{r3, r4, r5, lr}
 800aa1e:	4d07      	ldr	r5, [pc, #28]	; (800aa3c <_read_r+0x20>)
 800aa20:	4604      	mov	r4, r0
 800aa22:	4608      	mov	r0, r1
 800aa24:	4611      	mov	r1, r2
 800aa26:	2200      	movs	r2, #0
 800aa28:	602a      	str	r2, [r5, #0]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	f7f8 fc98 	bl	8003360 <_read>
 800aa30:	1c43      	adds	r3, r0, #1
 800aa32:	d102      	bne.n	800aa3a <_read_r+0x1e>
 800aa34:	682b      	ldr	r3, [r5, #0]
 800aa36:	b103      	cbz	r3, 800aa3a <_read_r+0x1e>
 800aa38:	6023      	str	r3, [r4, #0]
 800aa3a:	bd38      	pop	{r3, r4, r5, pc}
 800aa3c:	20000a2c 	.word	0x20000a2c

0800aa40 <_raise_r>:
 800aa40:	291f      	cmp	r1, #31
 800aa42:	b538      	push	{r3, r4, r5, lr}
 800aa44:	4604      	mov	r4, r0
 800aa46:	460d      	mov	r5, r1
 800aa48:	d904      	bls.n	800aa54 <_raise_r+0x14>
 800aa4a:	2316      	movs	r3, #22
 800aa4c:	6003      	str	r3, [r0, #0]
 800aa4e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa52:	bd38      	pop	{r3, r4, r5, pc}
 800aa54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa56:	b112      	cbz	r2, 800aa5e <_raise_r+0x1e>
 800aa58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa5c:	b94b      	cbnz	r3, 800aa72 <_raise_r+0x32>
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f000 f830 	bl	800aac4 <_getpid_r>
 800aa64:	462a      	mov	r2, r5
 800aa66:	4601      	mov	r1, r0
 800aa68:	4620      	mov	r0, r4
 800aa6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa6e:	f000 b817 	b.w	800aaa0 <_kill_r>
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d00a      	beq.n	800aa8c <_raise_r+0x4c>
 800aa76:	1c59      	adds	r1, r3, #1
 800aa78:	d103      	bne.n	800aa82 <_raise_r+0x42>
 800aa7a:	2316      	movs	r3, #22
 800aa7c:	6003      	str	r3, [r0, #0]
 800aa7e:	2001      	movs	r0, #1
 800aa80:	e7e7      	b.n	800aa52 <_raise_r+0x12>
 800aa82:	2400      	movs	r4, #0
 800aa84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa88:	4628      	mov	r0, r5
 800aa8a:	4798      	blx	r3
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	e7e0      	b.n	800aa52 <_raise_r+0x12>

0800aa90 <raise>:
 800aa90:	4b02      	ldr	r3, [pc, #8]	; (800aa9c <raise+0xc>)
 800aa92:	4601      	mov	r1, r0
 800aa94:	6818      	ldr	r0, [r3, #0]
 800aa96:	f7ff bfd3 	b.w	800aa40 <_raise_r>
 800aa9a:	bf00      	nop
 800aa9c:	2000007c 	.word	0x2000007c

0800aaa0 <_kill_r>:
 800aaa0:	b538      	push	{r3, r4, r5, lr}
 800aaa2:	4d07      	ldr	r5, [pc, #28]	; (800aac0 <_kill_r+0x20>)
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	4604      	mov	r4, r0
 800aaa8:	4608      	mov	r0, r1
 800aaaa:	4611      	mov	r1, r2
 800aaac:	602b      	str	r3, [r5, #0]
 800aaae:	f7f8 fc3d 	bl	800332c <_kill>
 800aab2:	1c43      	adds	r3, r0, #1
 800aab4:	d102      	bne.n	800aabc <_kill_r+0x1c>
 800aab6:	682b      	ldr	r3, [r5, #0]
 800aab8:	b103      	cbz	r3, 800aabc <_kill_r+0x1c>
 800aaba:	6023      	str	r3, [r4, #0]
 800aabc:	bd38      	pop	{r3, r4, r5, pc}
 800aabe:	bf00      	nop
 800aac0:	20000a2c 	.word	0x20000a2c

0800aac4 <_getpid_r>:
 800aac4:	f7f8 bc2a 	b.w	800331c <_getpid>

0800aac8 <_malloc_usable_size_r>:
 800aac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aacc:	1f18      	subs	r0, r3, #4
 800aace:	2b00      	cmp	r3, #0
 800aad0:	bfbc      	itt	lt
 800aad2:	580b      	ldrlt	r3, [r1, r0]
 800aad4:	18c0      	addlt	r0, r0, r3
 800aad6:	4770      	bx	lr

0800aad8 <sqrt>:
 800aad8:	b538      	push	{r3, r4, r5, lr}
 800aada:	ed2d 8b02 	vpush	{d8}
 800aade:	ec55 4b10 	vmov	r4, r5, d0
 800aae2:	f000 f825 	bl	800ab30 <__ieee754_sqrt>
 800aae6:	4622      	mov	r2, r4
 800aae8:	462b      	mov	r3, r5
 800aaea:	4620      	mov	r0, r4
 800aaec:	4629      	mov	r1, r5
 800aaee:	eeb0 8a40 	vmov.f32	s16, s0
 800aaf2:	eef0 8a60 	vmov.f32	s17, s1
 800aaf6:	f7f6 f849 	bl	8000b8c <__aeabi_dcmpun>
 800aafa:	b990      	cbnz	r0, 800ab22 <sqrt+0x4a>
 800aafc:	2200      	movs	r2, #0
 800aafe:	2300      	movs	r3, #0
 800ab00:	4620      	mov	r0, r4
 800ab02:	4629      	mov	r1, r5
 800ab04:	f7f6 f81a 	bl	8000b3c <__aeabi_dcmplt>
 800ab08:	b158      	cbz	r0, 800ab22 <sqrt+0x4a>
 800ab0a:	f7fb fceb 	bl	80064e4 <__errno>
 800ab0e:	2321      	movs	r3, #33	; 0x21
 800ab10:	6003      	str	r3, [r0, #0]
 800ab12:	2200      	movs	r2, #0
 800ab14:	2300      	movs	r3, #0
 800ab16:	4610      	mov	r0, r2
 800ab18:	4619      	mov	r1, r3
 800ab1a:	f7f5 fec7 	bl	80008ac <__aeabi_ddiv>
 800ab1e:	ec41 0b18 	vmov	d8, r0, r1
 800ab22:	eeb0 0a48 	vmov.f32	s0, s16
 800ab26:	eef0 0a68 	vmov.f32	s1, s17
 800ab2a:	ecbd 8b02 	vpop	{d8}
 800ab2e:	bd38      	pop	{r3, r4, r5, pc}

0800ab30 <__ieee754_sqrt>:
 800ab30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab34:	ec55 4b10 	vmov	r4, r5, d0
 800ab38:	4e55      	ldr	r6, [pc, #340]	; (800ac90 <__ieee754_sqrt+0x160>)
 800ab3a:	43ae      	bics	r6, r5
 800ab3c:	ee10 0a10 	vmov	r0, s0
 800ab40:	ee10 3a10 	vmov	r3, s0
 800ab44:	462a      	mov	r2, r5
 800ab46:	4629      	mov	r1, r5
 800ab48:	d110      	bne.n	800ab6c <__ieee754_sqrt+0x3c>
 800ab4a:	ee10 2a10 	vmov	r2, s0
 800ab4e:	462b      	mov	r3, r5
 800ab50:	f7f5 fd82 	bl	8000658 <__aeabi_dmul>
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	4620      	mov	r0, r4
 800ab5a:	4629      	mov	r1, r5
 800ab5c:	f7f5 fbc6 	bl	80002ec <__adddf3>
 800ab60:	4604      	mov	r4, r0
 800ab62:	460d      	mov	r5, r1
 800ab64:	ec45 4b10 	vmov	d0, r4, r5
 800ab68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab6c:	2d00      	cmp	r5, #0
 800ab6e:	dc10      	bgt.n	800ab92 <__ieee754_sqrt+0x62>
 800ab70:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ab74:	4330      	orrs	r0, r6
 800ab76:	d0f5      	beq.n	800ab64 <__ieee754_sqrt+0x34>
 800ab78:	b15d      	cbz	r5, 800ab92 <__ieee754_sqrt+0x62>
 800ab7a:	ee10 2a10 	vmov	r2, s0
 800ab7e:	462b      	mov	r3, r5
 800ab80:	ee10 0a10 	vmov	r0, s0
 800ab84:	f7f5 fbb0 	bl	80002e8 <__aeabi_dsub>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	f7f5 fe8e 	bl	80008ac <__aeabi_ddiv>
 800ab90:	e7e6      	b.n	800ab60 <__ieee754_sqrt+0x30>
 800ab92:	1512      	asrs	r2, r2, #20
 800ab94:	d074      	beq.n	800ac80 <__ieee754_sqrt+0x150>
 800ab96:	07d4      	lsls	r4, r2, #31
 800ab98:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ab9c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800aba0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800aba4:	bf5e      	ittt	pl
 800aba6:	0fda      	lsrpl	r2, r3, #31
 800aba8:	005b      	lslpl	r3, r3, #1
 800abaa:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800abae:	2400      	movs	r4, #0
 800abb0:	0fda      	lsrs	r2, r3, #31
 800abb2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800abb6:	107f      	asrs	r7, r7, #1
 800abb8:	005b      	lsls	r3, r3, #1
 800abba:	2516      	movs	r5, #22
 800abbc:	4620      	mov	r0, r4
 800abbe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800abc2:	1886      	adds	r6, r0, r2
 800abc4:	428e      	cmp	r6, r1
 800abc6:	bfde      	ittt	le
 800abc8:	1b89      	suble	r1, r1, r6
 800abca:	18b0      	addle	r0, r6, r2
 800abcc:	18a4      	addle	r4, r4, r2
 800abce:	0049      	lsls	r1, r1, #1
 800abd0:	3d01      	subs	r5, #1
 800abd2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800abd6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800abda:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800abde:	d1f0      	bne.n	800abc2 <__ieee754_sqrt+0x92>
 800abe0:	462a      	mov	r2, r5
 800abe2:	f04f 0e20 	mov.w	lr, #32
 800abe6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800abea:	4281      	cmp	r1, r0
 800abec:	eb06 0c05 	add.w	ip, r6, r5
 800abf0:	dc02      	bgt.n	800abf8 <__ieee754_sqrt+0xc8>
 800abf2:	d113      	bne.n	800ac1c <__ieee754_sqrt+0xec>
 800abf4:	459c      	cmp	ip, r3
 800abf6:	d811      	bhi.n	800ac1c <__ieee754_sqrt+0xec>
 800abf8:	f1bc 0f00 	cmp.w	ip, #0
 800abfc:	eb0c 0506 	add.w	r5, ip, r6
 800ac00:	da43      	bge.n	800ac8a <__ieee754_sqrt+0x15a>
 800ac02:	2d00      	cmp	r5, #0
 800ac04:	db41      	blt.n	800ac8a <__ieee754_sqrt+0x15a>
 800ac06:	f100 0801 	add.w	r8, r0, #1
 800ac0a:	1a09      	subs	r1, r1, r0
 800ac0c:	459c      	cmp	ip, r3
 800ac0e:	bf88      	it	hi
 800ac10:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ac14:	eba3 030c 	sub.w	r3, r3, ip
 800ac18:	4432      	add	r2, r6
 800ac1a:	4640      	mov	r0, r8
 800ac1c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ac20:	f1be 0e01 	subs.w	lr, lr, #1
 800ac24:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ac28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ac2c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ac30:	d1db      	bne.n	800abea <__ieee754_sqrt+0xba>
 800ac32:	430b      	orrs	r3, r1
 800ac34:	d006      	beq.n	800ac44 <__ieee754_sqrt+0x114>
 800ac36:	1c50      	adds	r0, r2, #1
 800ac38:	bf13      	iteet	ne
 800ac3a:	3201      	addne	r2, #1
 800ac3c:	3401      	addeq	r4, #1
 800ac3e:	4672      	moveq	r2, lr
 800ac40:	f022 0201 	bicne.w	r2, r2, #1
 800ac44:	1063      	asrs	r3, r4, #1
 800ac46:	0852      	lsrs	r2, r2, #1
 800ac48:	07e1      	lsls	r1, r4, #31
 800ac4a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ac4e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ac52:	bf48      	it	mi
 800ac54:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ac58:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ac5c:	4614      	mov	r4, r2
 800ac5e:	e781      	b.n	800ab64 <__ieee754_sqrt+0x34>
 800ac60:	0ad9      	lsrs	r1, r3, #11
 800ac62:	3815      	subs	r0, #21
 800ac64:	055b      	lsls	r3, r3, #21
 800ac66:	2900      	cmp	r1, #0
 800ac68:	d0fa      	beq.n	800ac60 <__ieee754_sqrt+0x130>
 800ac6a:	02cd      	lsls	r5, r1, #11
 800ac6c:	d50a      	bpl.n	800ac84 <__ieee754_sqrt+0x154>
 800ac6e:	f1c2 0420 	rsb	r4, r2, #32
 800ac72:	fa23 f404 	lsr.w	r4, r3, r4
 800ac76:	1e55      	subs	r5, r2, #1
 800ac78:	4093      	lsls	r3, r2
 800ac7a:	4321      	orrs	r1, r4
 800ac7c:	1b42      	subs	r2, r0, r5
 800ac7e:	e78a      	b.n	800ab96 <__ieee754_sqrt+0x66>
 800ac80:	4610      	mov	r0, r2
 800ac82:	e7f0      	b.n	800ac66 <__ieee754_sqrt+0x136>
 800ac84:	0049      	lsls	r1, r1, #1
 800ac86:	3201      	adds	r2, #1
 800ac88:	e7ef      	b.n	800ac6a <__ieee754_sqrt+0x13a>
 800ac8a:	4680      	mov	r8, r0
 800ac8c:	e7bd      	b.n	800ac0a <__ieee754_sqrt+0xda>
 800ac8e:	bf00      	nop
 800ac90:	7ff00000 	.word	0x7ff00000

0800ac94 <_init>:
 800ac94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac96:	bf00      	nop
 800ac98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac9a:	bc08      	pop	{r3}
 800ac9c:	469e      	mov	lr, r3
 800ac9e:	4770      	bx	lr

0800aca0 <_fini>:
 800aca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca2:	bf00      	nop
 800aca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aca6:	bc08      	pop	{r3}
 800aca8:	469e      	mov	lr, r3
 800acaa:	4770      	bx	lr
